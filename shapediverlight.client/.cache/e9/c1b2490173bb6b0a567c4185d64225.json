{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/loaders/AccessorLoader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\AccessorLoader.js.map","includedInParent":true,"mtime":1706527153315},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\loaders\\AccessorLoader.ts","includedInParent":true,"mtime":1706527153860},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706527153303},{"name":"@shapediver/viewer.shared.types","loc":{"line":4,"column":38,"index":151},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\AccessorLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.data-engine.shared-types","loc":{"line":5,"column":50,"index":238},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\AccessorLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.shared-types\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":6,"column":41,"index":328},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\AccessorLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccessorLoader = void 0;\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_data_engine_shared_types_1 = require(\"@shapediver/viewer.data-engine.shared-types\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nclass AccessorLoader {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_content, _bufferViewLoader) {\r\n        this._content = _content;\r\n        this._bufferViewLoader = _bufferViewLoader;\r\n        // #region Properties (2)\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._loaded = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getAccessor(accessorId) {\r\n        if (!this._content.accessors)\r\n            throw new Error('AccessorLoader.getAccessor: Accessors not available.');\r\n        if (!this._content.accessors[accessorId])\r\n            throw new Error('AccessorLoader.getAccessor: Accessor not available.');\r\n        if (!this._loaded[accessorId])\r\n            throw new Error('AccessorLoader.getAccessor: Accessor not loaded.');\r\n        return this._loaded[accessorId];\r\n    }\r\n    load() {\r\n        if (!this._content.accessors)\r\n            return;\r\n        for (let i = 0; i < this._content.accessors.length; i++) {\r\n            const accessorId = i;\r\n            if (!this._content.accessors[accessorId])\r\n                throw new Error('AccessorLoader.load: BufferView not available.');\r\n            const accessor = this._content.accessors[accessorId];\r\n            if (accessor.bufferView === undefined) {\r\n                // Ignore empty accessors, which may be used to declare runtime\r\n                // information about attributes coming from another source (e.g. Draco\r\n                // compression extension).\r\n                this._loaded[accessorId] = null;\r\n                continue;\r\n            }\r\n            const arrayBuffer = this._bufferViewLoader.getBufferView(accessor.bufferView);\r\n            const itemSize = viewer_data_engine_shared_types_1.ACCESSORTYPE_V2[accessor.type];\r\n            if (accessor.componentType === 5124)\r\n                this._logger.warn('GLTFLoader.loadAccessor: The componentType for this accessor is 5124, which is not allowed. Trying to load it anyway.');\r\n            const ArrayType = viewer_data_engine_shared_types_1.ACCESSORCOMPONENTTYPE_V2[accessor.componentType];\r\n            const elementBytes = ArrayType.BYTES_PER_ELEMENT;\r\n            const itemBytes = elementBytes * itemSize;\r\n            const byteOffset = accessor.byteOffset || 0;\r\n            const byteStride = accessor.bufferView !== undefined ? this._content.bufferViews ? this._content.bufferViews[accessor.bufferView].byteStride : undefined : undefined;\r\n            const normalized = accessor.normalized === true;\r\n            const target = this._content.bufferViews ? this._content.bufferViews[accessor.bufferView].target : undefined;\r\n            let array;\r\n            if (byteStride && byteStride !== itemBytes) {\r\n                // Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\r\n                // This makes sure that IBA.count reflects accessor.count properly\r\n                const ibSlice = Math.floor(byteOffset / byteStride);\r\n                array = new ArrayType(arrayBuffer, ibSlice * byteStride, accessor.count * byteStride / elementBytes);\r\n            }\r\n            else {\r\n                if (arrayBuffer === null) {\r\n                    array = new ArrayType(accessor.count * itemSize);\r\n                }\r\n                else {\r\n                    array = new ArrayType(arrayBuffer, byteOffset, accessor.count * itemSize);\r\n                }\r\n            }\r\n            if (accessor.sparse !== undefined) {\r\n                const itemSizeIndices = viewer_data_engine_shared_types_1.ACCESSORTYPE_V2.SCALAR;\r\n                const IndicesArrayType = viewer_data_engine_shared_types_1.ACCESSORCOMPONENTTYPE_V2[accessor.sparse.indices.componentType];\r\n                const byteOffsetIndices = accessor.sparse.indices.byteOffset || 0;\r\n                const byteOffsetValues = accessor.sparse.values.byteOffset || 0;\r\n                if (!accessor.sparse.indices.bufferView || !accessor.sparse.values.bufferView)\r\n                    throw new Error('Sparse Mesh not properly defined.');\r\n                const sparseIndices = new IndicesArrayType(this._bufferViewLoader.getBufferView(accessor.sparse.indices.bufferView), byteOffsetIndices, accessor.sparse.count * itemSizeIndices);\r\n                const sparseValues = new ArrayType(this._bufferViewLoader.getBufferView(accessor.sparse.values.bufferView), byteOffsetValues, accessor.sparse.count * itemSize);\r\n                this._loaded[accessorId] = new viewer_shared_types_1.AttributeData(array, itemSize, itemBytes, byteOffset, elementBytes, normalized, accessor.count, accessor.min, accessor.max, byteStride, target, true, sparseIndices, sparseValues);\r\n                continue;\r\n            }\r\n            this._loaded[accessorId] = new viewer_shared_types_1.AttributeData(array, itemSize, itemBytes, byteOffset, elementBytes, normalized, accessor.count, accessor.min, accessor.max, byteStride, target);\r\n        }\r\n    }\r\n}\r\nexports.AccessorLoader = AccessorLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"AccessorLoader.js","sourceRoot":"","sources":["../../../src/gltfv2/loaders/AccessorLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { AttributeData } from '@shapediver/viewer.shared.types'\r\nimport {\r\n    ACCESSORCOMPONENTTYPE_V2 as ACCESSOR_COMPONENTTYPE,\r\n    ACCESSORTYPE_V2 as ACCESSORTYPE,\r\n    IGLTF_v2\r\n} from '@shapediver/viewer.data-engine.shared-types'\r\nimport { Logger } from '@shapediver/viewer.shared.services'\r\n\r\nimport { BufferViewLoader } from './BufferViewLoader'\r\n\r\nexport class AccessorLoader {\r\n    // #region Properties (2)\r\n\r\n    private readonly _logger: Logger = Logger.instance;\r\n\r\n    private _loaded: {\r\n        [key: string]: AttributeData | null\r\n    } = {};\r\n\r\n    // #endregion Properties (2)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _content: IGLTF_v2, private readonly _bufferViewLoader: BufferViewLoader) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public getAccessor(accessorId: number): AttributeData | null {\r\n        if (!this._content.accessors) throw new Error('AccessorLoader.getAccessor: Accessors not available.')\r\n        if (!this._content.accessors[accessorId]) throw new Error('AccessorLoader.getAccessor: Accessor not available.')\r\n        if (!this._loaded[accessorId]) throw new Error('AccessorLoader.getAccessor: Accessor not loaded.')\r\n        return this._loaded[accessorId];\r\n    }\r\n\r\n    public load(): void {\r\n        if (!this._content.accessors) return;\r\n        for (let i = 0; i < this._content.accessors.length; i++) {\r\n            const accessorId = i;\r\n            if (!this._content.accessors[accessorId]) throw new Error('AccessorLoader.load: BufferView not available.')\r\n            const accessor = this._content.accessors[accessorId];\r\n\r\n            if (accessor.bufferView === undefined) {\r\n                // Ignore empty accessors, which may be used to declare runtime\r\n                // information about attributes coming from another source (e.g. Draco\r\n                // compression extension).\r\n                this._loaded[accessorId] = null;\r\n                continue;\r\n            }\r\n\r\n            const arrayBuffer = this._bufferViewLoader.getBufferView(accessor.bufferView!);\r\n\r\n            const itemSize = ACCESSORTYPE[<keyof typeof ACCESSORTYPE>accessor.type];\r\n            if (accessor.componentType === 5124) this._logger.warn('GLTFLoader.loadAccessor: The componentType for this accessor is 5124, which is not allowed. Trying to load it anyway.');\r\n            const ArrayType = ACCESSOR_COMPONENTTYPE[<keyof typeof ACCESSOR_COMPONENTTYPE>accessor.componentType];\r\n\r\n            const elementBytes = ArrayType.BYTES_PER_ELEMENT;\r\n            const itemBytes = elementBytes * itemSize;\r\n            const byteOffset = accessor.byteOffset || 0;\r\n            const byteStride = accessor.bufferView !== undefined ? this._content.bufferViews ? this._content.bufferViews[accessor.bufferView].byteStride : undefined : undefined;\r\n            const normalized = accessor.normalized === true;\r\n            const target = this._content.bufferViews ? this._content.bufferViews[accessor.bufferView].target : undefined;\r\n            let array;\r\n\r\n            if (byteStride && byteStride !== itemBytes) {\r\n                // Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\r\n                // This makes sure that IBA.count reflects accessor.count properly\r\n                const ibSlice = Math.floor(byteOffset / byteStride);\r\n                array = new ArrayType(arrayBuffer, ibSlice * byteStride, accessor.count * byteStride / elementBytes);\r\n            } else {\r\n                if (arrayBuffer === null) {\r\n                    array = new ArrayType(accessor.count * itemSize);\r\n                } else {\r\n                    array = new ArrayType(arrayBuffer, byteOffset, accessor.count * itemSize);\r\n                }\r\n            }\r\n\r\n            if (accessor.sparse !== undefined) {\r\n                const itemSizeIndices = ACCESSORTYPE.SCALAR;\r\n                const IndicesArrayType = ACCESSOR_COMPONENTTYPE[<keyof typeof ACCESSOR_COMPONENTTYPE>accessor.sparse.indices.componentType];\r\n\r\n                const byteOffsetIndices = accessor.sparse.indices.byteOffset || 0;\r\n                const byteOffsetValues = accessor.sparse.values.byteOffset || 0;\r\n\r\n                if (!accessor.sparse.indices.bufferView || !accessor.sparse.values.bufferView) throw new Error('Sparse Mesh not properly defined.')\r\n\r\n                const sparseIndices = new IndicesArrayType(this._bufferViewLoader.getBufferView(accessor.sparse.indices.bufferView!), byteOffsetIndices, accessor.sparse.count * itemSizeIndices);\r\n                const sparseValues = new ArrayType(this._bufferViewLoader.getBufferView(accessor.sparse.values.bufferView!), byteOffsetValues, accessor.sparse.count * itemSize);\r\n\r\n                this._loaded[accessorId] = new AttributeData(array, itemSize, itemBytes, byteOffset, elementBytes, normalized, accessor.count, accessor.min, accessor.max, byteStride, target, true, sparseIndices, sparseValues);\r\n                continue;\r\n            }\r\n\r\n            this._loaded[accessorId] = new AttributeData(array, itemSize, itemBytes, byteOffset, elementBytes, normalized, accessor.count, accessor.min, accessor.max, byteStride, target);\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n}\r\n"]}},"error":null,"hash":"9cbe7a1444d13724b192184a3028897b","cacheData":{"env":{}}}