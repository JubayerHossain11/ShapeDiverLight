{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/objects/SDColor.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDColor.js.map","includedInParent":true,"mtime":1706542087111},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\objects\\SDColor.ts","includedInParent":true,"mtime":1706542087540},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"three","loc":{"line":4,"column":24,"index":130},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDColor.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SDColor = void 0;\r\nconst three_1 = require(\"three\");\r\nclass SDColor extends three_1.Color {\r\n    // #endregion Properties (3)\r\n    // #region Constructors (1)\r\n    constructor(hexColor, originalColor) {\r\n        super(hexColor);\r\n        // #region Properties (3)\r\n        this._colorSpace = 'srgb-linear';\r\n        this._originalColorSpace = 'srgb-linear';\r\n        if (typeof originalColor === 'number' || Array.isArray(originalColor) && (originalColor.length == 3 || originalColor.length == 4)) {\r\n            this._colorSpace = 'srgb-linear';\r\n            this._originalColorSpace = 'srgb-linear';\r\n        }\r\n        else {\r\n            this._colorSpace = 'srgb';\r\n            this._originalColorSpace = 'srgb';\r\n        }\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    /**\r\n     * Depending on the current state and provided value, this function converts the color to a different color space.\r\n     *\r\n     * If the color is in 'srgb' space and active is set to true, it will be converted to 'srgb-linear' space.\r\n     * If the color is in 'srgb-linear' space, the color is not originally in 'srgb-linear' and active is set to false, it will be converted to 'srgb' space.\r\n     *\r\n     * @param active\r\n     */\r\n    colorCorrection(active) {\r\n        if (this._colorSpace === 'srgb' && active === true) {\r\n            // we assume all colors provided are in 'srgb' color space\r\n            // therefore we need to correct those colors to 'srgb-linear' if the color conversion is active\r\n            this.convertSRGBToLinear();\r\n            this._colorSpace = 'srgb-linear';\r\n        }\r\n        else if (this._colorSpace === 'srgb-linear' && active === false && this._originalColorSpace !== 'srgb-linear') {\r\n            // if the color space is already 'srgb-linear', the color was already converted\r\n            // therefore we need to convert it back if the color conversion was deactivted\r\n            // if it was not originally in 'srgb-linear'\r\n            this.convertLinearToSRGB();\r\n            this._colorSpace = 'srgb';\r\n        }\r\n    }\r\n}\r\nexports.SDColor = SDColor;\r\n"},"sourceMaps":{"js":{"version":3,"file":"SDColor.js","sourceRoot":"","sources":["../../src/objects/SDColor.ts"],"names":[],"mappings":";;;AACA,iCAA2C;AAG3C,MAAa,OAAQ,SAAQ,aAAU;IAMnC,4BAA4B;IAE5B,2BAA2B;IAE3B,YAAY,QAAgB,EAAE,aAAoB;QAC9C,KAAK,CAAC,QAAQ,CAAC,CAAC;QAVpB,yBAAyB;QAEjB,gBAAW,GAA2B,aAAa,CAAC;QACpD,wBAAmB,GAA2B,aAAa,CAAC;QAQhE,IAAG,OAAO,aAAa,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE;YAC9H,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;YACjC,IAAI,CAAC,mBAAmB,GAAG,aAAa,CAAC;SAC5C;aAAM;YACH,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC1B,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC;SACrC;IACL,CAAC;IAED,8BAA8B;IAE9B,6BAA6B;IAE7B;;;;;;;OAOG;IACI,eAAe,CAAC,MAAe;QAClC,IAAG,IAAI,CAAC,WAAW,KAAK,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE;YAC/C,0DAA0D;YAC1D,+FAA+F;YAC/F,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;SACpC;aAAM,IAAG,IAAI,CAAC,WAAW,KAAK,aAAa,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,mBAAmB,KAAK,aAAa,EAAE;YAC5G,+EAA+E;YAC/E,8EAA8E;YAC9E,4CAA4C;YAC5C,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;SAC7B;IACL,CAAC;CAGJ;AAjDD,0BAiDC","sourcesContent":["import * as THREE from 'three'\r\nimport { Color as ThreeColor } from 'three'\r\nimport { Color } from '@shapediver/viewer.shared.types';\r\n\r\nexport class SDColor extends ThreeColor {\r\n    // #region Properties (3)\r\n\r\n    private _colorSpace: 'srgb' | 'srgb-linear' = 'srgb-linear';\r\n    private _originalColorSpace: 'srgb' | 'srgb-linear' = 'srgb-linear';\r\n\r\n    // #endregion Properties (3)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(hexColor: string, originalColor: Color) {\r\n        super(hexColor);\r\n        if(typeof originalColor === 'number' || Array.isArray(originalColor) && (originalColor.length == 3 || originalColor.length == 4)) {\r\n            this._colorSpace = 'srgb-linear';\r\n            this._originalColorSpace = 'srgb-linear';\r\n        } else {\r\n            this._colorSpace = 'srgb';\r\n            this._originalColorSpace = 'srgb';\r\n        }\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    /**\r\n     * Depending on the current state and provided value, this function converts the color to a different color space.\r\n     * \r\n     * If the color is in 'srgb' space and active is set to true, it will be converted to 'srgb-linear' space.\r\n     * If the color is in 'srgb-linear' space, the color is not originally in 'srgb-linear' and active is set to false, it will be converted to 'srgb' space.\r\n     * \r\n     * @param active \r\n     */\r\n    public colorCorrection(active: boolean) {\r\n        if(this._colorSpace === 'srgb' && active === true) {\r\n            // we assume all colors provided are in 'srgb' color space\r\n            // therefore we need to correct those colors to 'srgb-linear' if the color conversion is active\r\n            this.convertSRGBToLinear();\r\n            this._colorSpace = 'srgb-linear';\r\n        } else if(this._colorSpace === 'srgb-linear' && active === false && this._originalColorSpace !== 'srgb-linear') {\r\n            // if the color space is already 'srgb-linear', the color was already converted\r\n            // therefore we need to convert it back if the color conversion was deactivted\r\n            // if it was not originally in 'srgb-linear'\r\n            this.convertLinearToSRGB();\r\n            this._colorSpace = 'srgb';\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}"]}},"error":null,"hash":"cf9b9d5282aadc243a6e0ef72a7b4479","cacheData":{"env":{}}}