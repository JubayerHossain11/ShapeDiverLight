{"id":"node_modules/@shapediver/viewer.rendering-engine.light-engine/dist/implementation/LightEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js.map","includedInParent":true,"mtime":1706542086329},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\src\\implementation\\LightEngine.ts","includedInParent":true,"mtime":1706542086752},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\package.json","includedInParent":true,"mtime":1706542085544},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":138},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":5,"column":41,"index":194},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"./types/AmbientLight","loc":{"line":6,"column":31,"index":265},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\AmbientLight.js"},{"name":"./types/DirectionalLight","loc":{"line":7,"column":35,"index":326},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\DirectionalLight.js"},{"name":"./types/HemisphereLight","loc":{"line":8,"column":34,"index":390},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\HemisphereLight.js"},{"name":"./types/PointLight","loc":{"line":9,"column":29,"index":448},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\PointLight.js"},{"name":"./types/SpotLight","loc":{"line":10,"column":28,"index":500},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\SpotLight.js"},{"name":"./LightScene","loc":{"line":11,"column":29,"index":552},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js"},{"name":"../interface/ILight","loc":{"line":12,"column":25,"index":595},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\interface\\ILight.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":13,"column":42,"index":662},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LightEngine = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst AmbientLight_1 = require(\"./types/AmbientLight\");\r\nconst DirectionalLight_1 = require(\"./types/DirectionalLight\");\r\nconst HemisphereLight_1 = require(\"./types/HemisphereLight\");\r\nconst PointLight_1 = require(\"./types/PointLight\");\r\nconst SpotLight_1 = require(\"./types/SpotLight\");\r\nconst LightScene_1 = require(\"./LightScene\");\r\nconst ILight_1 = require(\"../interface/ILight\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nclass LightEngine {\r\n    // #endregion Properties (6)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (6)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._lightNode = new viewer_shared_node_tree_1.TreeNode('lights');\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._lightScenes = {};\r\n        this._tree.root.addChild(this._lightNode);\r\n        this._lightNode.restrictViewports = [this._renderingEngine.id];\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (2)\r\n    get lightScene() {\r\n        return this._lightScene;\r\n    }\r\n    get lightScenes() {\r\n        return this._lightScenes;\r\n    }\r\n    get update() {\r\n        return this._update;\r\n    }\r\n    set update(value) {\r\n        this._update = value;\r\n    }\r\n    // #endregion Public Accessors (2)\r\n    // #region Public Methods (6)\r\n    applySettings(settingsEngine) {\r\n        this._lightScenes = {};\r\n        for (let lightSceneId in settingsEngine.light.lightScenes) {\r\n            const lightSceneUUID = this._uuidGenerator.validate(lightSceneId) ? lightSceneId : this._uuidGenerator.create();\r\n            const lightSceneName = settingsEngine.light.lightScenes[lightSceneId].name ? settingsEngine.light.lightScenes[lightSceneId].name : lightSceneId;\r\n            const ls = new LightScene_1.LightScene(this._renderingEngine, { id: lightSceneUUID, name: lightSceneName });\r\n            for (let lightId in settingsEngine.light.lightScenes[lightSceneId].lights) {\r\n                const lightUUID = this._uuidGenerator.validate(lightId) ? lightId : this._uuidGenerator.create();\r\n                const light = settingsEngine.light.lightScenes[lightSceneId].lights[lightId];\r\n                let l;\r\n                switch (light.type) {\r\n                    case ILight_1.LIGHT_TYPE.DIRECTIONAL:\r\n                        l = new DirectionalLight_1.DirectionalLight({\r\n                            color: this._converter.toHexColor(light.properties.color),\r\n                            intensity: light.properties.intensity,\r\n                            direction: this._converter.toVec3(light.properties.direction),\r\n                            castShadow: light.properties.castShadow,\r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.HEMISPHERE:\r\n                        l = new HemisphereLight_1.HemisphereLight({\r\n                            color: this._converter.toHexColor(light.properties.skyColor),\r\n                            intensity: light.properties.intensity,\r\n                            groundColor: this._converter.toHexColor(light.properties.groundColor),\r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.POINT:\r\n                        l = new PointLight_1.PointLight({\r\n                            color: this._converter.toHexColor(light.properties.color),\r\n                            intensity: light.properties.intensity,\r\n                            position: this._converter.toVec3(light.properties.position),\r\n                            distance: light.properties.distance,\r\n                            decay: light.properties.decay,\r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.SPOT:\r\n                        l = new SpotLight_1.SpotLight({\r\n                            color: this._converter.toHexColor(light.properties.color),\r\n                            intensity: light.properties.intensity,\r\n                            position: this._converter.toVec3(light.properties.position),\r\n                            target: this._converter.toVec3(light.properties.target),\r\n                            distance: light.properties.distance,\r\n                            decay: light.properties.decay,\r\n                            angle: light.properties.angle,\r\n                            penumbra: light.properties.penumbra,\r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.AMBIENT:\r\n                    default:\r\n                        l = new AmbientLight_1.AmbientLight({\r\n                            color: this._converter.toHexColor(light.properties.color),\r\n                            intensity: light.properties.intensity,\r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                }\r\n                ls.addLight(l);\r\n            }\r\n            this._lightScenes[ls.id] = ls;\r\n        }\r\n        // there is a light scene but no id is saved (old viewer)\r\n        if (settingsEngine.light.lightSceneId === undefined && Object.values(settingsEngine.light.lightScenes).length > 0) {\r\n            const res = this.assignLightScene(Object.keys(settingsEngine.light.lightScenes)[0]);\r\n            if (res === false) {\r\n                const ls = this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });\r\n                ls.addLight(new AmbientLight_1.AmbientLight({ color: '#ffffff', intensity: 0.5, name: 'ambient0' }));\r\n                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.75, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));\r\n                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.35, direction: gl_matrix_1.vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1' }));\r\n                this._lightScenes[ls.id] = ls;\r\n            }\r\n        } // there is no standard light scene in the light scenes, but a light scene name is specified (old viewer)\r\n        else if (settingsEngine.light.lightSceneId) {\r\n            const res = this.assignLightScene(settingsEngine.light.lightSceneId);\r\n            if (res === false) {\r\n                const ls = this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });\r\n                ls.addLight(new AmbientLight_1.AmbientLight({ color: '#ffffff', intensity: 0.5, name: 'ambient0' }));\r\n                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.75, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));\r\n                ls.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 0.35, direction: gl_matrix_1.vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1' }));\r\n                this._lightScenes[ls.id] = ls;\r\n            }\r\n        }\r\n        // this can only be the case if the settings were completely empty, therefore we assign the new light scene\r\n        else if (JSON.stringify(settingsEngine.settingsJson) == JSON.stringify({})) {\r\n            const ls = this.createLightScene({ name: 'standard', standard: true });\r\n            this._lightScenes[ls.id] = ls;\r\n        }\r\n        if (this._update)\r\n            this._update();\r\n    }\r\n    assignLightScene(id) {\r\n        if (!this._lightScenes[id]) {\r\n            for (let lightSceneId in this._lightScenes) {\r\n                const lightScene = this._lightScenes[lightSceneId];\r\n                const lightSceneName = lightScene.name || lightSceneId;\r\n                if (lightSceneName === id) {\r\n                    const res = this.assignLightScene(lightSceneId);\r\n                    return res;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        this._lightScene = this._lightScenes[id];\r\n        while (this._lightNode.children.length > 0)\r\n            this._lightNode.removeChild(this._lightNode.children[0]);\r\n        this._lightNode.addChild(this._lightScene.node);\r\n        this._lightNode.updateVersion();\r\n        return true;\r\n    }\r\n    close() {\r\n        this._tree.root.removeChild(this._lightNode);\r\n    }\r\n    createLightScene(properties) {\r\n        const lightSceneId = this._uuidGenerator.create();\r\n        const lightScene = new LightScene_1.LightScene(this._renderingEngine, { id: lightSceneId, name: properties.name });\r\n        if (properties.standard === true) {\r\n            lightScene.addLight(new DirectionalLight_1.DirectionalLight({ color: '#ffffff', intensity: 2.5, direction: gl_matrix_1.vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0' }));\r\n            lightScene.addLight(new AmbientLight_1.AmbientLight({ color: '#ffffff', intensity: 0.3, name: 'ambient0' }));\r\n        }\r\n        this._lightScenes[lightSceneId] = lightScene;\r\n        this._lightScene = lightScene;\r\n        while (this._lightNode.children.length > 0)\r\n            this._lightNode.removeChild(this._lightNode.children[0]);\r\n        this._lightNode.addChild(this._lightScene.node);\r\n        this._lightNode.updateVersion();\r\n        if (this._update)\r\n            this._update();\r\n        return lightScene;\r\n    }\r\n    removeLightScene(id) {\r\n        if (!this._lightScenes[id]) {\r\n            for (let lightSceneId in this._lightScenes) {\r\n                const lightScene = this._lightScenes[lightSceneId];\r\n                const lightSceneName = lightScene.name || lightSceneId;\r\n                if (lightSceneName === id) {\r\n                    const res = this.removeLightScene(lightSceneId);\r\n                    return res;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        if (this._lightScene && this._lightScene.id === id) {\r\n            this._lightScene = undefined;\r\n            while (this._lightNode.children.length > 0)\r\n                this._lightNode.removeChild(this._lightNode.children[0]);\r\n            this._lightNode.updateVersion();\r\n        }\r\n        delete this._lightScenes[id];\r\n        if (this._update)\r\n            this._update();\r\n        return true;\r\n    }\r\n    saveSettings(settingsEngine) {\r\n        settingsEngine.light.lightSceneId = this.lightScene ? this.lightScene.id : undefined;\r\n        const converted = {};\r\n        for (let lightSceneId in this._lightScenes) {\r\n            const lightScene = this._lightScenes[lightSceneId];\r\n            const lightSceneName = lightScene.name || lightSceneId;\r\n            converted[lightSceneId] = {\r\n                name: lightSceneName,\r\n                lights: {}\r\n            };\r\n            for (let lightId in lightScene.lights) {\r\n                const light = lightScene.lights[lightId];\r\n                let properties;\r\n                switch (light.type) {\r\n                    case ILight_1.LIGHT_TYPE.DIRECTIONAL:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            direction: { x: light.direction[0], y: light.direction[1], z: light.direction[2] },\r\n                            castShadow: light.castShadow,\r\n                            shadowMapResolution: light.shadowMapResolution,\r\n                            shadowMapBias: light.shadowMapBias\r\n                        };\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.HEMISPHERE:\r\n                        properties = {\r\n                            skyColor: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            groundColor: this._converter.toHexColor(light.groundColor)\r\n                        };\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.POINT:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            position: { x: light.position[0], y: light.position[1], z: light.position[2] },\r\n                            distance: light.distance,\r\n                            decay: light.decay\r\n                        };\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.SPOT:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            position: { x: light.position[0], y: light.position[1], z: light.position[2] },\r\n                            target: { x: light.target[0], y: light.target[1], z: light.target[2] },\r\n                            distance: light.distance,\r\n                            decay: light.decay,\r\n                            angle: light.angle,\r\n                            penumbra: light.penumbra\r\n                        };\r\n                        break;\r\n                    case ILight_1.LIGHT_TYPE.AMBIENT:\r\n                    default:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity\r\n                        };\r\n                }\r\n                converted[lightSceneId].lights[lightId] = {\r\n                    name: light.name,\r\n                    type: light.type,\r\n                    properties\r\n                };\r\n                if (light.order !== undefined)\r\n                    converted[lightSceneId].lights[lightId].order = light.order;\r\n            }\r\n        }\r\n        settingsEngine.light.lightScenes = converted;\r\n    }\r\n}\r\nexports.LightEngine = LightEngine;\r\n"},"sourceMaps":{"js":{"version":3,"file":"LightEngine.js","sourceRoot":"","sources":["../../src/implementation/LightEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix'\r\nimport { Converter, UuidGenerator, SettingsEngine, StateEngine } from '@shapediver/viewer.shared.services'\r\n\r\nimport { AmbientLight } from './types/AmbientLight'\r\nimport { DirectionalLight } from './types/DirectionalLight'\r\nimport { HemisphereLight } from './types/HemisphereLight'\r\nimport { PointLight } from './types/PointLight'\r\nimport { SpotLight } from './types/SpotLight'\r\nimport { LightScene } from './LightScene'\r\nimport { AbstractLight } from './AbstractLight'\r\nimport { ILightEngine } from '../interface/ILightEngine'\r\nimport { ILight, LIGHT_TYPE } from '../interface/ILight'\r\nimport { ILightScene } from '../interface/ILightScene'\r\nimport { IAmbientLightPropertiesV3, IDirectionalLightPropertiesV3, IHemisphereLightPropertiesV3, ILightSceneSettingsV3, IPointLightPropertiesV3, ISpotLightPropertiesV3 } from '@shapediver/viewer.settings'\r\nimport { ITree, ITreeNode, Tree, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { IRenderingEngine } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\n\r\nexport class LightEngine implements ILightEngine {\r\n    // #region Properties (6)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _lightNode: ITreeNode = new TreeNode('lights');\r\n    private readonly _tree: ITree = Tree.instance;\r\n    private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n    private _lightScene!: LightScene;\r\n    private _lightScenes: { [key: string]: LightScene; } = {};\r\n    private _update?: () => void;\r\n\r\n    // #endregion Properties (6)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: IRenderingEngine) {\r\n        this._tree.root.addChild(this._lightNode);\r\n        this._lightNode.restrictViewports = [this._renderingEngine.id];\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (2)\r\n\r\n    public get lightScene(): LightScene | null {\r\n        return this._lightScene;\r\n    }\r\n\r\n    public get lightScenes(): {\r\n        [key: string]: LightScene\r\n    } {\r\n        return this._lightScenes;\r\n    }\r\n\r\n    public get update(): (() => void) | undefined {\r\n        return this._update;\r\n    }\r\n\r\n    public set update(value: (() => void) | undefined) {\r\n        this._update = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (2)\r\n\r\n    // #region Public Methods (6)\r\n\r\n    public applySettings(settingsEngine: SettingsEngine): void {\r\n        this._lightScenes = {};\r\n\r\n        for (let lightSceneId in settingsEngine.light.lightScenes) {\r\n            const lightSceneUUID = this._uuidGenerator.validate(lightSceneId) ? lightSceneId : this._uuidGenerator.create();\r\n            const lightSceneName = settingsEngine.light.lightScenes[lightSceneId].name ? settingsEngine.light.lightScenes[lightSceneId].name : lightSceneId;\r\n            const ls = new LightScene(this._renderingEngine, {id: lightSceneUUID, name: lightSceneName});\r\n            for (let lightId in settingsEngine.light.lightScenes[lightSceneId].lights) {\r\n                const lightUUID = this._uuidGenerator.validate(lightId) ? lightId : this._uuidGenerator.create();\r\n                const light = settingsEngine.light.lightScenes[lightSceneId].lights[lightId];\r\n                let l: AbstractLight;\r\n                switch (light.type) {\r\n                    case LIGHT_TYPE.DIRECTIONAL:\r\n                        l = new DirectionalLight({\r\n                            color: this._converter.toHexColor((<IDirectionalLightPropertiesV3>light.properties).color), \r\n                            intensity: (<IDirectionalLightPropertiesV3>light.properties).intensity, \r\n                            direction: this._converter.toVec3((<IDirectionalLightPropertiesV3>light.properties).direction), \r\n                            castShadow: (<IDirectionalLightPropertiesV3>light.properties).castShadow, \r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case LIGHT_TYPE.HEMISPHERE:\r\n                        l = new HemisphereLight({\r\n                            color: this._converter.toHexColor((<IHemisphereLightPropertiesV3>light.properties).skyColor), \r\n                            intensity: (<IHemisphereLightPropertiesV3>light.properties).intensity, \r\n                            groundColor: this._converter.toHexColor((<IHemisphereLightPropertiesV3>light.properties).groundColor), \r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case LIGHT_TYPE.POINT:\r\n                        l = new PointLight({\r\n                            color: this._converter.toHexColor((<IPointLightPropertiesV3>light.properties).color), \r\n                            intensity: (<IPointLightPropertiesV3>light.properties).intensity, \r\n                            position: this._converter.toVec3((<IPointLightPropertiesV3>light.properties).position), \r\n                            distance: (<IPointLightPropertiesV3>light.properties).distance, \r\n                            decay: (<IPointLightPropertiesV3>light.properties).decay, \r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case LIGHT_TYPE.SPOT:\r\n                        l = new SpotLight({\r\n                            color: this._converter.toHexColor((<ISpotLightPropertiesV3>light.properties).color), \r\n                            intensity: (<ISpotLightPropertiesV3>light.properties).intensity, \r\n                            position: this._converter.toVec3((<ISpotLightPropertiesV3>light.properties).position), \r\n                            target: this._converter.toVec3((<ISpotLightPropertiesV3>light.properties).target), \r\n                            distance: (<ISpotLightPropertiesV3>light.properties).distance, \r\n                            decay: (<ISpotLightPropertiesV3>light.properties).decay, \r\n                            angle: (<ISpotLightPropertiesV3>light.properties).angle, \r\n                            penumbra: (<ISpotLightPropertiesV3>light.properties).penumbra, \r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                        break;\r\n                    case LIGHT_TYPE.AMBIENT:\r\n                    default:\r\n                        l = new AmbientLight({\r\n                            color: this._converter.toHexColor((<IAmbientLightPropertiesV3>light.properties).color), \r\n                            intensity: (<IAmbientLightPropertiesV3>light.properties).intensity, \r\n                            name: light.name ? light.name : lightId,\r\n                            order: light.order,\r\n                            id: lightUUID\r\n                        });\r\n                }\r\n                ls.addLight(l);\r\n            }\r\n            this._lightScenes[ls.id] = ls;\r\n        }\r\n\r\n        // there is a light scene but no id is saved (old viewer)\r\n        if(settingsEngine.light.lightSceneId === undefined && Object.values(settingsEngine.light.lightScenes).length > 0) {\r\n            const res = this.assignLightScene(Object.keys(settingsEngine.light.lightScenes)[0]);\r\n            if(res === false){\r\n                const ls = <LightScene>this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });\r\n                ls.addLight(new AmbientLight({color: '#ffffff', intensity: 0.5, name: 'ambient0'}));\r\n                ls.addLight(new DirectionalLight({color: '#ffffff', intensity: 0.75, direction: vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0'}));\r\n                ls.addLight(new DirectionalLight({color: '#ffffff', intensity: 0.35, direction: vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1'}));\r\n                this._lightScenes[ls.id] = ls;\r\n            }\r\n        } // there is no standard light scene in the light scenes, but a light scene name is specified (old viewer)\r\n        else if (settingsEngine.light.lightSceneId) {\r\n            const res = this.assignLightScene(settingsEngine.light.lightSceneId);\r\n            if(res === false){\r\n                const ls = <LightScene>this.createLightScene({ name: settingsEngine.light.lightSceneId === 'default' ? 'default' : 'standard' });\r\n                ls.addLight(new AmbientLight({color: '#ffffff', intensity: 0.5, name: 'ambient0'}));\r\n                ls.addLight(new DirectionalLight({color: '#ffffff', intensity: 0.75, direction: vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0'}));\r\n                ls.addLight(new DirectionalLight({color: '#ffffff', intensity: 0.35, direction: vec3.fromValues(.25, -1, 1), castShadow: false, name: 'directional1'}));\r\n                this._lightScenes[ls.id] = ls;\r\n            }\r\n        }  \r\n        // this can only be the case if the settings were completely empty, therefore we assign the new light scene\r\n        else if(JSON.stringify(settingsEngine.settingsJson) == JSON.stringify({})) {    \r\n            const ls = <LightScene>this.createLightScene({ name: 'standard', standard: true });\r\n            this._lightScenes[ls.id] = ls;\r\n        }\r\n\r\n        if(this._update) this._update();\r\n    }\r\n\r\n    public assignLightScene(id: string): boolean {\r\n        if (!this._lightScenes[id]) {\r\n            for(let lightSceneId in this._lightScenes) {\r\n                const lightScene = this._lightScenes[lightSceneId];\r\n                const lightSceneName = lightScene.name || lightSceneId;\r\n                if(lightSceneName === id) {\r\n                    const res = this.assignLightScene(lightSceneId);\r\n                    return res;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        this._lightScene = this._lightScenes[id];\r\n        while(this._lightNode.children.length > 0)\r\n            this._lightNode.removeChild(this._lightNode.children[0]);\r\n        this._lightNode.addChild(this._lightScene!.node);\r\n        this._lightNode.updateVersion();\r\n        \r\n        return true;\r\n    }\r\n\r\n    public close(): void {\r\n        this._tree.root.removeChild(this._lightNode);\r\n    }\r\n\r\n    public createLightScene(properties: {name?: string, standard?: boolean}): ILightScene {\r\n        const lightSceneId = this._uuidGenerator.create();\r\n        const lightScene = new LightScene(this._renderingEngine, {id: lightSceneId, name: properties.name});\r\n        if (properties.standard === true) {\r\n            lightScene.addLight(new DirectionalLight({color: '#ffffff', intensity: 2.5, direction: vec3.fromValues(.5774, -.5774, .5774), castShadow: true, name: 'directional0'}));\r\n            lightScene.addLight(new AmbientLight({color: '#ffffff', intensity: 0.3, name: 'ambient0'}));\r\n        }\r\n        this._lightScenes[lightSceneId] = lightScene;\r\n        this._lightScene = lightScene;\r\n        while(this._lightNode.children.length > 0)\r\n            this._lightNode.removeChild(this._lightNode.children[0]);\r\n        this._lightNode.addChild(this._lightScene!.node)\r\n        this._lightNode.updateVersion();\r\n\r\n        if(this._update) this._update();\r\n        return lightScene;\r\n    }\r\n\r\n    public removeLightScene(id: string): boolean {\r\n        if (!this._lightScenes[id]) {\r\n            for(let lightSceneId in this._lightScenes) {\r\n                const lightScene = this._lightScenes[lightSceneId];\r\n                const lightSceneName = lightScene.name || lightSceneId;\r\n                if(lightSceneName === id) {\r\n                    const res = this.removeLightScene(lightSceneId);\r\n                    return res;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if(this._lightScene && this._lightScene.id === id) {\r\n            (<any>this._lightScene) = undefined;\r\n\r\n            while (this._lightNode.children.length > 0)\r\n                this._lightNode.removeChild(this._lightNode.children[0]);\r\n            this._lightNode.updateVersion();\r\n        }\r\n        delete this._lightScenes[id];\r\n\r\n        if (this._update) this._update();\r\n        return true;\r\n    }\r\n\r\n    public saveSettings(settingsEngine: SettingsEngine) {\r\n        settingsEngine.light.lightSceneId = this.lightScene ? this.lightScene.id : undefined;\r\n        \r\n        const converted: ILightSceneSettingsV3 = {};\r\n        for(let lightSceneId in this._lightScenes) {\r\n            const lightScene = this._lightScenes[lightSceneId];\r\n            const lightSceneName = lightScene.name || lightSceneId;\r\n            converted[lightSceneId] = {\r\n                name: lightSceneName,\r\n                lights: {}\r\n            };\r\n            for(let lightId in lightScene.lights) {\r\n                const light = lightScene.lights[lightId];\r\n                \r\n                let properties;\r\n                switch (light.type) {\r\n                    case LIGHT_TYPE.DIRECTIONAL:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            direction: { x: (<DirectionalLight>light).direction[0], y: (<DirectionalLight>light).direction[1], z: (<DirectionalLight>light).direction[2] },\r\n                            castShadow: (<DirectionalLight>light).castShadow,\r\n                            shadowMapResolution: (<DirectionalLight>light).shadowMapResolution,\r\n                            shadowMapBias: (<DirectionalLight>light).shadowMapBias\r\n                        }\r\n                        break;\r\n                    case LIGHT_TYPE.HEMISPHERE:\r\n                        properties = {\r\n                            skyColor: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            groundColor: this._converter.toHexColor((<HemisphereLight>light).groundColor)\r\n                        }\r\n                        break;\r\n                    case LIGHT_TYPE.POINT:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            position: { x: (<PointLight>light).position[0], y: (<PointLight>light).position[1], z: (<PointLight>light).position[2] },\r\n                            distance: (<PointLight>light).distance,\r\n                            decay: (<PointLight>light).decay\r\n                        }\r\n                        break;\r\n                    case LIGHT_TYPE.SPOT:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity,\r\n                            position: { x: (<SpotLight>light).position[0], y: (<SpotLight>light).position[1], z: (<SpotLight>light).position[2] },\r\n                            target: { x: (<SpotLight>light).target[0], y: (<SpotLight>light).target[1], z: (<SpotLight>light).target[2] },\r\n                            distance: (<SpotLight>light).distance,\r\n                            decay: (<SpotLight>light).decay,\r\n                            angle: (<SpotLight>light).angle,\r\n                            penumbra: (<SpotLight>light).penumbra\r\n                        }\r\n                        break;\r\n                    case LIGHT_TYPE.AMBIENT:\r\n                    default:\r\n                        properties = {\r\n                            color: this._converter.toHexColor(light.color),\r\n                            intensity: light.intensity\r\n                        }\r\n                }\r\n                converted[lightSceneId].lights[lightId] = {\r\n                    name: light.name,\r\n                    type: light.type,\r\n                    properties\r\n                }\r\n                if(light.order !== undefined)\r\n                    converted[lightSceneId].lights[lightId].order = light.order;\r\n            }\r\n        }\r\n        settingsEngine.light.lightScenes = converted;\r\n    }\r\n\r\n    // #endregion Public Methods (6)\r\n}"]}},"error":null,"hash":"bd68de8280d5ba3d21b875268429c285","cacheData":{"env":{}}}