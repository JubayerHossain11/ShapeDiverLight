{"id":"node_modules/@shapediver/viewer.shared.services/dist/uuid-generator/UuidGenerator.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\uuid-generator\\UuidGenerator.js.map","includedInParent":true,"mtime":1706527151318},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\src\\uuid-generator\\UuidGenerator.ts","includedInParent":true,"mtime":1706527152583},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\package.json","includedInParent":true,"mtime":1706527150825},{"name":"uuid","loc":{"line":4,"column":23,"index":135},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\uuid-generator\\UuidGenerator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\node_modules\\uuid\\dist\\esm-browser\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UuidGenerator = void 0;\r\nconst uuid_1 = require(\"uuid\");\r\nclass UuidGenerator {\r\n    // #endregion Properties (1)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (4)\r\n    /**\r\n     * Creates a new uuid v4.\r\n     */\r\n    create() {\r\n        return (0, uuid_1.v4)();\r\n    }\r\n    /**\r\n     * Parse the uuid to array of bytes\r\n     *\r\n     * @param uuid the uuid to convert\r\n     * @returns ArrayLike collection of 16 values\r\n     */\r\n    parse(uuid) {\r\n        return (0, uuid_1.parse)(uuid);\r\n    }\r\n    /**\r\n     * Stringify an array of bytes to an uuid\r\n     *\r\n     * @param uuid the array of bytes\r\n     * @returns the converted uuid\r\n     */\r\n    stringify(uuid) {\r\n        return (0, uuid_1.stringify)(uuid);\r\n    }\r\n    /**\r\n     * Checks if the provided string is a valid uuid.\r\n     *\r\n     * @param uuid the uuid to check\r\n     */\r\n    validate(uuid) {\r\n        return (0, uuid_1.validate)(uuid);\r\n    }\r\n}\r\nexports.UuidGenerator = UuidGenerator;\r\n"},"sourceMaps":{"js":{"version":3,"file":"UuidGenerator.js","sourceRoot":"","sources":["../../src/uuid-generator/UuidGenerator.ts"],"names":[],"mappings":";;;AAAA,+BAAmG;AAEnG,MAAa,aAAa;IAKtB,4BAA4B;IAE5B,sCAAsC;IAE/B,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,yCAAyC;IAEzC,6BAA6B;IAE7B;;OAEG;IACI,MAAM;QACT,OAAO,IAAA,SAAE,GAAE,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,IAAY;QACrB,OAAO,IAAA,YAAS,EAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,IAAuB;QACpC,OAAO,IAAA,gBAAa,EAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,IAAY;QACxB,OAAO,IAAA,eAAY,EAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CAGJ;AAtDD,sCAsDC","sourcesContent":["import { parse as parseUUID, stringify as stringifyUUID, v4, validate as validateUUID } from 'uuid'\r\n\r\nexport class UuidGenerator {\r\n    // #region Properties (1)\r\n\r\n    private static _instance: UuidGenerator;\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (4)\r\n\r\n    /**\r\n     * Creates a new uuid v4.\r\n     */\r\n    public create(): string {\r\n        return v4();\r\n    }\r\n\r\n    /**\r\n     * Parse the uuid to array of bytes\r\n     * \r\n     * @param uuid the uuid to convert\r\n     * @returns ArrayLike collection of 16 values\r\n     */\r\n    public parse(uuid: string): ArrayLike<number> {\r\n        return parseUUID(uuid);\r\n    }\r\n\r\n    /**\r\n     * Stringify an array of bytes to an uuid\r\n     * \r\n     * @param uuid the array of bytes\r\n     * @returns the converted uuid\r\n     */\r\n    public stringify(uuid: ArrayLike<number>): string {\r\n        return stringifyUUID(uuid);\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided string is a valid uuid.\r\n     * \r\n     * @param uuid the uuid to check\r\n     */\r\n    public validate(uuid: string): boolean {\r\n        return validateUUID(uuid);\r\n    }\r\n\r\n    // #endregion Public Methods (4)\r\n}"]}},"error":null,"hash":"43367d95b2389b074574129c0969e06a","cacheData":{"env":{}}}