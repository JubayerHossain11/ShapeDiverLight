{"id":"node_modules/@shapediver/viewer.shared.services/dist/event-engine/EventEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\event-engine\\EventEngine.js.map","includedInParent":true,"mtime":1706542086116},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\src\\event-engine\\EventEngine.ts","includedInParent":true,"mtime":1706542086752},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\package.json","includedInParent":true,"mtime":1706542085933},{"name":"./EventTypes","loc":{"line":4,"column":29,"index":139},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\event-engine\\EventEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\event-engine\\EventTypes.js"},{"name":"../uuid-generator/UuidGenerator","loc":{"line":5,"column":32,"index":189},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\event-engine\\EventEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\uuid-generator\\UuidGenerator.js"},{"name":"../logger/Logger","loc":{"line":6,"column":25,"index":251},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\event-engine\\EventEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\logger\\Logger.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EventEngine = void 0;\r\nconst EventTypes_1 = require(\"./EventTypes\");\r\nconst UuidGenerator_1 = require(\"../uuid-generator/UuidGenerator\");\r\nconst Logger_1 = require(\"../logger/Logger\");\r\nclass EventEngine {\r\n    // #endregion Properties (4)\r\n    // #region Constructors (1)\r\n    constructor() {\r\n        this._logger = Logger_1.Logger.instance;\r\n        this._uuidGenerator = UuidGenerator_1.UuidGenerator.instance;\r\n        this._eventListeners = {};\r\n        for (const type in EventTypes_1.EVENTTYPE) {\r\n            const subEventType = EventTypes_1.EVENTTYPE[type];\r\n            this._eventListeners[type.toLowerCase()] = [];\r\n            for (const subtype in subEventType) {\r\n                this._eventListeners[subEventType[subtype]] = [];\r\n            }\r\n        }\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (3)\r\n    /**\r\n     * Adds a listener that listenes to the provided type. If no valid type is specified, an error is thrown.\r\n     *\r\n     * @param type the type of the event\r\n     * @param cb the callback that should be called\r\n     * @returns an unique token to be able to remove the listener\r\n     */\r\n    addListener(type, cb) {\r\n        var _a;\r\n        const typeString = this.convertTypeToString(type);\r\n        if (!typeString)\r\n            return '';\r\n        const token = this._uuidGenerator.create();\r\n        (_a = this._eventListeners[typeString]) === null || _a === void 0 ? void 0 : _a.push({ token, cb });\r\n        return token;\r\n    }\r\n    /**\r\n     * Emits the event to all callbacks that listen to the type.\r\n     *\r\n     * @param type the type of the event\r\n     * @param event the event to emit\r\n     */\r\n    emitEvent(type, event) {\r\n        const typeString = this.convertTypeToString(type);\r\n        if (this._eventListeners[typeString] && this._eventListeners[typeString].length !== 0) {\r\n            const cbs = this._eventListeners[typeString].map(el => el.cb);\r\n            for (let i = 0; i < cbs.length; i++) {\r\n                cbs[i](event);\r\n            }\r\n        }\r\n        if (typeString.includes('.'))\r\n            this.emitEvent(typeString.substr(0, typeString.indexOf('.')), event);\r\n    }\r\n    /**\r\n     * Removes a listener with the specified token.\r\n     *\r\n     * @param token the token of the listener\r\n     * @returns result of the targeted operation\r\n     */\r\n    removeListener(token) {\r\n        for (const type in EventTypes_1.EVENTTYPE) {\r\n            const subEventType = EventTypes_1.EVENTTYPE[type];\r\n            const typeLowerCase = type.toLowerCase();\r\n            for (let i = 0; i < this._eventListeners[typeLowerCase].length; i++) {\r\n                if (this._eventListeners[typeLowerCase][i].token === token) {\r\n                    this._eventListeners[typeLowerCase].splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n            for (const subtype in subEventType) {\r\n                for (let i = 0; i < this._eventListeners[subEventType[subtype]].length; i++) {\r\n                    if (this._eventListeners[subEventType[subtype]][i].token === token) {\r\n                        this._eventListeners[subEventType[subtype]].splice(i, 1);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // #endregion Public Methods (3)\r\n    // #region Private Methods (1)\r\n    convertTypeToString(type) {\r\n        let typeString = '';\r\n        if (typeof type === 'string')\r\n            typeString = type;\r\n        for (const mainType in EventTypes_1.EVENTTYPE)\r\n            if (type === EventTypes_1.EVENTTYPE[mainType])\r\n                typeString = mainType.toLowerCase();\r\n        if (!typeString || !this._eventListeners[typeString]) {\r\n            this._logger.warn('EventEngine.convertTypeToString: No valid type provided.');\r\n            return '';\r\n        }\r\n        return typeString;\r\n    }\r\n}\r\nexports.EventEngine = EventEngine;\r\n"},"sourceMaps":{"js":{"version":3,"file":"EventEngine.js","sourceRoot":"","sources":["../../src/event-engine/EventEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { EVENTTYPE, MainEventTypes } from './EventTypes'\r\nimport { IListener } from './interfaces/IListener'\r\nimport { ICallback } from './interfaces/ICallback'\r\nimport { IEvent } from './interfaces/IEvent'\r\nimport { UuidGenerator } from '../uuid-generator/UuidGenerator'\r\nimport { Logger } from '../logger/Logger'\r\n\r\nexport class EventEngine {\r\n    // #region Properties (4)\r\n\r\n    private static _instance: EventEngine;\r\n\r\n    private _eventListeners: {\r\n        [key: string]: IListener[]\r\n    };\r\n\r\n    protected readonly _logger: Logger = Logger.instance;\r\n    protected readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n    // #endregion Properties (4)\r\n\r\n    // #region Constructors (1)\r\n\r\n    private constructor() {\r\n        this._eventListeners = {};\r\n        for (const type in EVENTTYPE) {\r\n            const subEventType = EVENTTYPE[type as keyof typeof EVENTTYPE];\r\n            this._eventListeners[type.toLowerCase()] = [];\r\n            for (const subtype in subEventType) {\r\n                this._eventListeners[subEventType[subtype as keyof typeof subEventType]] = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (3)\r\n\r\n    /**\r\n     * Adds a listener that listenes to the provided type. If no valid type is specified, an error is thrown.\r\n     * \r\n     * @param type the type of the event\r\n     * @param cb the callback that should be called\r\n     * @returns an unique token to be able to remove the listener\r\n     */\r\n    public addListener(type: string | MainEventTypes, cb: ICallback): string {\r\n        const typeString: string = this.convertTypeToString(type);\r\n        if(!typeString) return '';\r\n        const token = this._uuidGenerator.create();\r\n        this._eventListeners[typeString]?.push({ token, cb });\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Emits the event to all callbacks that listen to the type.\r\n     * \r\n     * @param type the type of the event\r\n     * @param event the event to emit\r\n     */\r\n    public emitEvent(type: string | MainEventTypes, event: IEvent): void {\r\n        const typeString: string = this.convertTypeToString(type);\r\n\r\n        if (this._eventListeners[typeString] && this._eventListeners[typeString].length !== 0) {\r\n            const cbs = this._eventListeners[typeString]!.map(el => el.cb)\r\n            for (let i = 0; i < cbs.length; i++) {\r\n                cbs[i](event);\r\n            }\r\n        }\r\n\r\n        if(typeString.includes('.')) \r\n            this.emitEvent(typeString.substr(0, typeString.indexOf('.')), event);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener with the specified token.\r\n     * \r\n     * @param token the token of the listener \r\n     * @returns result of the targeted operation\r\n     */\r\n    public removeListener(token: string): boolean {\r\n        for (const type in EVENTTYPE) {\r\n            const subEventType = EVENTTYPE[type as keyof typeof EVENTTYPE];\r\n            const typeLowerCase = type.toLowerCase();\r\n            for (let i = 0; i < this._eventListeners[typeLowerCase]!.length; i++) {\r\n                if (this._eventListeners[typeLowerCase]![i].token === token) {\r\n                    this._eventListeners[typeLowerCase]!.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n            for (const subtype in subEventType) {\r\n                for (let i = 0; i < this._eventListeners[subEventType[subtype as keyof typeof subEventType]]!.length; i++) {\r\n                    if (this._eventListeners[subEventType[subtype as keyof typeof subEventType]]![i].token === token) {\r\n                        this._eventListeners[subEventType[subtype as keyof typeof subEventType]]!.splice(i, 1);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // #endregion Public Methods (3)\r\n\r\n    // #region Private Methods (1)\r\n\r\n    private convertTypeToString(type: string | MainEventTypes): string {\r\n        let typeString: string = '';\r\n        if(typeof type === 'string') typeString = type;\r\n\r\n        for (const mainType in EVENTTYPE)\r\n            if(type === EVENTTYPE[mainType as keyof typeof EVENTTYPE])\r\n                typeString = mainType.toLowerCase();\r\n        \r\n        if(!typeString || !this._eventListeners[typeString]) {\r\n            this._logger.warn('EventEngine.convertTypeToString: No valid type provided.');\r\n            return '';\r\n        }\r\n        \r\n        return typeString;\r\n    }\r\n\r\n    // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"ef7c9076e4db5ff1a6e675d2abf89f83","cacheData":{"env":{}}}