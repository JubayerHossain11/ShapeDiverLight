{"id":"node_modules/@shapediver/viewer.main.creation-control-center/dist/implementation/CreationControlCenter.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js.map","includedInParent":true,"mtime":1706542085155},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\src\\implementation\\CreationControlCenter.ts","includedInParent":true,"mtime":1706542085575},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\package.json","includedInParent":true,"mtime":1706542084912},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":25,"column":59,"index":2182},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine-threejs.standard","loc":{"line":26,"column":59,"index":2299},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\index.js"},{"name":"@shapediver/viewer.session-engine.session-engine","loc":{"line":27,"column":55,"index":2412},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":28,"column":41,"index":2507},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":29,"column":38,"index":2585},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.shared.build-data","loc":{"line":30,"column":43,"index":2665},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.build-data\\dist\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":31,"column":37,"index":2744},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":32,"column":42,"index":2822},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.settings","loc":{"line":33,"column":34,"index":2897},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\implementation\\CreationControlCenter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.settings\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _CreationControlCenter_eventEngine, _CreationControlCenter_logger, _CreationControlCenter_sceneTree, _CreationControlCenter_stateEngine, _CreationControlCenter_uuidGenerator, _CreationControlCenter_firstSessionEngine;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CreationControlCenter = void 0;\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_rendering_engine_threejs_standard_1 = require(\"@shapediver/viewer.rendering-engine-threejs.standard\");\r\nconst viewer_session_engine_session_engine_1 = require(\"@shapediver/viewer.session-engine.session-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_shared_build_data_1 = require(\"@shapediver/viewer.shared.build-data\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_settings_1 = require(\"@shapediver/viewer.settings\");\r\nclass CreationControlCenter {\r\n    constructor() {\r\n        // #region Properties (10)\r\n        _CreationControlCenter_eventEngine.set(this, viewer_shared_services_1.EventEngine.instance);\r\n        _CreationControlCenter_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _CreationControlCenter_sceneTree.set(this, viewer_shared_node_tree_1.Tree.instance);\r\n        _CreationControlCenter_stateEngine.set(this, viewer_shared_services_1.StateEngine.instance);\r\n        _CreationControlCenter_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);\r\n        _CreationControlCenter_firstSessionEngine.set(this, void 0);\r\n        this.renderingEngines = {};\r\n        this.sessionEngines = {};\r\n        // #endregion Private Methods (1)\r\n    }\r\n    // #endregion Properties (10)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (11)\r\n    applySettings(sessionId, response, sections) {\r\n        sections = sections || {};\r\n        this.sessionEngines[sessionId].applySettings(response, sections);\r\n        const promises = [];\r\n        if (sections.session && sections.session.parameter && sections.session.parameter.value)\r\n            promises.push(this.sessionEngines[sessionId].customize());\r\n        for (let r in this.renderingEngines) {\r\n            if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\").id) ||\r\n                (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.reset();\r\n                promises.push(new Promise(resolve => {\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.then(() => {\r\n                        resolve();\r\n                    });\r\n                }));\r\n                this.renderingEngines[r].applySettings(sections.viewport);\r\n            }\r\n        }\r\n        return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n    }\r\n    applyViewportSettings(viewportId, settings, sections = { ar: false, scene: false, camera: false, light: false, environment: false, general: false }) {\r\n        sections = sections || {};\r\n        const settingsEngine = new viewer_shared_services_1.SettingsEngine();\r\n        settingsEngine.loadSettings(settings);\r\n        const promises = [];\r\n        __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[viewportId].settingsAssigned.reset();\r\n        promises.push(new Promise(resolve => {\r\n            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[viewportId].settingsAssigned.then(() => {\r\n                resolve();\r\n            });\r\n        }));\r\n        this.renderingEngines[viewportId].applySettings(sections, settingsEngine);\r\n        return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n    }\r\n    closeRenderingEngine(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.renderingEngines[id])\r\n                return;\r\n            __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debugLow(`CreationControlCenter.closeRenderingEngine: Closing viewport ${id}.`);\r\n            if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id].initialized.resolved === false)\r\n                yield new Promise(resolve => { __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id].initialized.then(() => resolve()); });\r\n            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id].settingsAssigned.reset();\r\n            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id].environmentMapLoaded.reset();\r\n            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id].initialized.reset();\r\n            yield this.renderingEngines[id].close();\r\n            this.renderingEngines[id] = undefined;\r\n            delete this.renderingEngines[id];\r\n            delete __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[id];\r\n            __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debug(`CreationControlCenter.closeRenderingEngine: Viewport closed.`);\r\n            if (this.update)\r\n                this.update(this.sessionEngines, this.renderingEngines);\r\n            __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CLOSED, { viewportId: id });\r\n        });\r\n    }\r\n    closeSessionEngine(id) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.sessionEngines[id])\r\n                return;\r\n            __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debugLow(`CreationControlCenter.closeSession: Closing session ${id}.`);\r\n            if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[id].initialized.resolved === false)\r\n                yield new Promise(resolve => { __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[id].initialized.then(() => resolve()); });\r\n            yield this.sessionEngines[id].close();\r\n            // remove from rendering engines (also directly assigned)\r\n            for (let r in this.renderingEngines) {\r\n                if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === id) ||\r\n                    (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\") === this.sessionEngines[id])) {\r\n                    this.renderingEngines[r].reset();\r\n                }\r\n            }\r\n            if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\") === this.sessionEngines[id]) {\r\n                const engines = Object.values(this.sessionEngines).filter(s => s.id !== id);\r\n                __classPrivateFieldSet(this, _CreationControlCenter_firstSessionEngine, engines.length === 0 ? undefined : engines[0], \"f\");\r\n                if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\")) {\r\n                    let promises = [];\r\n                    for (let r in this.renderingEngines) {\r\n                        if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.resolved === false) {\r\n                            if (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST) {\r\n                                promises.push(__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned);\r\n                                this.assignSettings(this.renderingEngines[r], (_a = __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\")) === null || _a === void 0 ? void 0 : _a.id);\r\n                            }\r\n                        }\r\n                    }\r\n                    yield Promise.all(promises);\r\n                    if (this.update)\r\n                        this.update(this.sessionEngines, this.renderingEngines);\r\n                }\r\n            }\r\n            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[id].settingsRegistered.reset();\r\n            this.sessionEngines[id] = undefined;\r\n            delete this.sessionEngines[id];\r\n            delete __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[id];\r\n            __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debug(`CreationControlCenter.closeSessionEngine: Session closed.`);\r\n            for (let r in this.renderingEngines)\r\n                this.renderingEngines[r].update('CreationControlCenter.closeSessionEngine');\r\n            if (this.update)\r\n                this.update(this.sessionEngines, this.renderingEngines);\r\n            __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CLOSED, { sessionId: id });\r\n        });\r\n    }\r\n    createRenderingEngineThreeJs(properties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, \"f\").create();\r\n            let renderingEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, \"f\").create();\r\n            properties.id = renderingEngineId;\r\n            try {\r\n                const eventStart = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0, status: 'Creating viewport' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n                // check if the given id is valid\r\n                if (this.renderingEngines[renderingEngineId]) {\r\n                    const eventClose = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.1, status: 'Closing viewport with same id' };\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").warn(`CreationControlCenter.createViewport: Viewer with this id (${renderingEngineId}) already exists. Closing initial instance.`);\r\n                    yield this.closeRenderingEngine(renderingEngineId);\r\n                }\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId] = {\r\n                    id: renderingEngineId,\r\n                    initialized: new viewer_shared_services_1.StatePromise(),\r\n                    environmentMapLoaded: new viewer_shared_services_1.StatePromise(),\r\n                    settingsAssigned: new viewer_shared_services_1.StatePromise(),\r\n                    boundingBoxCreated: new viewer_shared_services_1.StatePromise(),\r\n                    busy: []\r\n                };\r\n                const renderingEngine = new viewer_rendering_engine_threejs_standard_1.RenderingEngine(properties);\r\n                this.renderingEngines[renderingEngineId] = renderingEngine;\r\n                renderingEngine.cameraEngine.createDefaultCameras();\r\n                if (properties.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL) {\r\n                    if (!properties.sessionSettingsId)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerViewportError('Session with sessionSettingsMode MANUAL needs to have a sessionSettingsId.');\r\n                    const sessionSettingsId = properties.sessionSettingsId;\r\n                    if (this.sessionEngines[sessionSettingsId]) {\r\n                        yield this.assignSettings(renderingEngine, sessionSettingsId);\r\n                    }\r\n                    else {\r\n                        // in createSession\r\n                    }\r\n                }\r\n                else if (properties.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST) {\r\n                    if (__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\")) {\r\n                        yield this.assignSettings(renderingEngine, __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\").id);\r\n                    }\r\n                    else {\r\n                        // in createSession\r\n                    }\r\n                }\r\n                if (renderingEngine.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.NONE &&\r\n                    renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION) {\r\n                    renderingEngine.show = true;\r\n                }\r\n                else if (renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.INSTANT) {\r\n                    renderingEngine.show = true;\r\n                }\r\n                else if (renderingEngine.visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION) {\r\n                    // wait for settings to load before showing the scene\r\n                    if (__classPrivateFieldGet(this, _CreationControlCenter_sceneTree, \"f\").root.boundingBox.isEmpty()) {\r\n                        __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n                            const event = e;\r\n                            if (event.viewportId === renderingEngine.id) {\r\n                                const boundingBox = new viewer_shared_math_1.Box(event.boundingBox.min, event.boundingBox.max);\r\n                                if (boundingBox.isEmpty()) {\r\n                                    renderingEngine.show = false;\r\n                                }\r\n                                else {\r\n                                    if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId].settingsAssigned.resolved) {\r\n                                        renderingEngine.show = true;\r\n                                    }\r\n                                    else {\r\n                                        __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId].settingsAssigned.then(() => {\r\n                                            renderingEngine.show = true;\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId].settingsAssigned.resolved) {\r\n                            renderingEngine.show = true;\r\n                        }\r\n                        else {\r\n                            __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId].settingsAssigned.then(() => {\r\n                                renderingEngine.show = true;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[renderingEngineId].initialized.resolve(true);\r\n                __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debug(`CreationControlCenter.createViewport: Viewport(${renderingEngineId}) created.`);\r\n                const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created' };\r\n                if (this.update)\r\n                    this.update(this.sessionEngines, this.renderingEngines);\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_CREATED, { viewportId: renderingEngineId });\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n                return this.renderingEngines[renderingEngineId];\r\n            }\r\n            catch (e) {\r\n                const eventCancel1 = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.9, status: 'Viewport created failed, closing viewport' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);\r\n                try {\r\n                    yield this.closeRenderingEngine(renderingEngineId);\r\n                }\r\n                catch (_a) { }\r\n                const eventCancel2 = { type: viewer_shared_types_1.TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created failed, exiting' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n                throw e;\r\n            }\r\n        });\r\n    }\r\n    createSessionEngine(properties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, \"f\").create();\r\n            let sessionEngineId = properties.id || __classPrivateFieldGet(this, _CreationControlCenter_uuidGenerator, \"f\").create();\r\n            properties.id = sessionEngineId;\r\n            try {\r\n                const eventStart = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0, status: 'Creating session' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n                // check if the given id is valid\r\n                if (this.sessionEngines[sessionEngineId]) {\r\n                    const eventClose = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.1, status: 'Closing session with same id' };\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventClose);\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").warn(`CreationControlCenter.createSession: Session with this id (${sessionEngineId}) already exists. Closing initial instance.`);\r\n                    yield this.closeSessionEngine(sessionEngineId);\r\n                }\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[sessionEngineId] = {\r\n                    id: sessionEngineId,\r\n                    initialized: new viewer_shared_services_1.StatePromise(),\r\n                    settingsRegistered: new viewer_shared_services_1.StatePromise()\r\n                };\r\n                // create the actual session \r\n                const sessionEngine = new viewer_session_engine_session_engine_1.SessionEngine({\r\n                    id: sessionEngineId,\r\n                    ticket: properties.ticket,\r\n                    modelViewUrl: properties.modelViewUrl,\r\n                    excludeViewports: properties.excludeViewports,\r\n                    buildVersion: viewer_shared_build_data_1.build_data.build_version,\r\n                    buildDate: viewer_shared_build_data_1.build_data.build_date,\r\n                    jwtToken: properties.jwtToken\r\n                });\r\n                const eventInit = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.25, status: 'Initializing session.' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventInit);\r\n                yield sessionEngine.init(properties.initialParameterValues);\r\n                if (properties.loadOutputs !== false) {\r\n                    if (properties.waitForOutputs !== false) {\r\n                        yield sessionEngine.updateOutputs({\r\n                            eventId,\r\n                            type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,\r\n                            progressRange: {\r\n                                min: 0.25,\r\n                                max: 0.9\r\n                            },\r\n                            data: undefined\r\n                        });\r\n                        __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });\r\n                        for (let r in this.renderingEngines)\r\n                            this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=true');\r\n                    }\r\n                    else {\r\n                        sessionEngine.updateOutputs({\r\n                            eventId,\r\n                            type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION,\r\n                            progressRange: {\r\n                                min: 0.25,\r\n                                max: 0.9\r\n                            },\r\n                            data: undefined\r\n                        }).then(() => {\r\n                            __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });\r\n                            for (let r in this.renderingEngines)\r\n                                this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=false');\r\n                        });\r\n                    }\r\n                }\r\n                // save the session\r\n                this.sessionEngines[sessionEngineId] = sessionEngine;\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[sessionEngineId].initialized.resolve(true);\r\n                __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debug(`CreationControlCenter.createSession: Session(${sessionEngine.id}) created.`);\r\n                if (!__classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\"))\r\n                    __classPrivateFieldSet(this, _CreationControlCenter_firstSessionEngine, sessionEngine, \"f\");\r\n                let promises = [];\r\n                for (let r in this.renderingEngines) {\r\n                    if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.resolved === false) {\r\n                        if (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST || (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === sessionEngineId)) {\r\n                            promises.push(__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned);\r\n                            this.assignSettings(this.renderingEngines[r], sessionEngineId);\r\n                        }\r\n                    }\r\n                }\r\n                yield Promise.all(promises);\r\n                for (let r in this.renderingEngines)\r\n                    this.renderingEngines[r].update('CreationControlCenter.createSessionEngine');\r\n                if (this.update)\r\n                    this.update(this.sessionEngines, this.renderingEngines);\r\n                const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CREATED, { sessionId: sessionEngineId });\r\n                return sessionEngine;\r\n            }\r\n            catch (e) {\r\n                // special behavior, if this was the only session, display the error on the logo screen\r\n                if (e instanceof viewer_shared_services_1.ShapeDiverViewerError) {\r\n                    if ((this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 1) || (!this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 0)) {\r\n                        for (let v in this.renderingEngines)\r\n                            this.renderingEngines[v].displayErrorMessage(e.message);\r\n                    }\r\n                }\r\n                const eventCancel1 = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.9, status: 'Session created failed, closing session' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);\r\n                yield this.closeSessionEngine(sessionEngineId);\r\n                const eventCancel2 = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created failed' };\r\n                __classPrivateFieldGet(this, _CreationControlCenter_eventEngine, \"f\").emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n                throw e;\r\n            }\r\n        });\r\n    }\r\n    createSettingsObject(sessionId, viewportId) {\r\n        const session = this.sessionEngines[sessionId];\r\n        session.settingsEngine.settings.build_version = viewer_shared_build_data_1.build_data.build_version;\r\n        session.settingsEngine.settings.build_date = viewer_shared_build_data_1.build_data.build_date;\r\n        session.settingsEngine.settings.settings_version = viewer_settings_1.latestVersion;\r\n        let renderingEngine;\r\n        if (viewportId && this.renderingEngines[viewportId]) {\r\n            renderingEngine = this.renderingEngines[viewportId];\r\n        }\r\n        else {\r\n            for (let r in this.renderingEngines) {\r\n                if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\").id) ||\r\n                    (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n                    renderingEngine = this.renderingEngines[r];\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        if (renderingEngine)\r\n            renderingEngine.saveSettings();\r\n        return session.settingsEngine.settings;\r\n    }\r\n    getARSessionEngine() {\r\n        for (let s in this.sessionEngines) {\r\n            if (this.sessionEngines[s].canUploadGLTF) {\r\n                return this.sessionEngines[s];\r\n            }\r\n        }\r\n    }\r\n    getViewportSettings(viewportId) {\r\n        let renderingEngine = this.renderingEngines[viewportId];\r\n        if (!renderingEngine)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerViewportError('Viewport with id ' + viewportId + ' could not be found.');\r\n        const settingsEngine = new viewer_shared_services_1.SettingsEngine();\r\n        renderingEngine.saveSettings(settingsEngine);\r\n        return settingsEngine.settings;\r\n    }\r\n    resetSettings(sessionId, sections) {\r\n        sections = sections || {};\r\n        this.sessionEngines[sessionId].resetSettings(sections);\r\n        const promises = [];\r\n        if (sections.session && sections.session.parameter && sections.session.parameter.value)\r\n            promises.push(this.sessionEngines[sessionId].customize());\r\n        for (let r in this.renderingEngines) {\r\n            if ((this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST && __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\") && sessionId === __classPrivateFieldGet(this, _CreationControlCenter_firstSessionEngine, \"f\").id) ||\r\n                (this.renderingEngines[r].sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n                __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.reset();\r\n                promises.push(new Promise(resolve => {\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").renderingEngines[r].settingsAssigned.then(() => {\r\n                        resolve();\r\n                    });\r\n                }));\r\n                this.renderingEngines[r].applySettings(sections.viewport);\r\n            }\r\n        }\r\n        return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n    }\r\n    saveSettings(sessionId, viewportId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const session = this.sessionEngines[sessionId];\r\n            yield session.saveUiProperties(false);\r\n            const settingsObject = this.createSettingsObject(sessionId, viewportId);\r\n            const response = yield session.saveSettings(settingsObject);\r\n            if (response) {\r\n                __classPrivateFieldGet(this, _CreationControlCenter_logger, \"f\").debug(`Session(${sessionId}).saveSettings: Saved settings.`);\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${sessionId}).saveSettings: Could not save settings.`);\r\n            }\r\n            return response;\r\n        });\r\n    }\r\n    // #endregion Public Methods (11)\r\n    // #region Private Methods (1)\r\n    assignSettings(renderingEngine, sessionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (__classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[sessionId].initialized.resolved === true) {\r\n                // immediate\r\n                renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;\r\n                yield renderingEngine.applySettings();\r\n            }\r\n            else {\r\n                yield new Promise(resolve => {\r\n                    __classPrivateFieldGet(this, _CreationControlCenter_stateEngine, \"f\").sessionEngines[sessionId].initialized.then(() => __awaiter(this, void 0, void 0, function* () {\r\n                        renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;\r\n                        yield renderingEngine.applySettings();\r\n                        resolve();\r\n                    }));\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.CreationControlCenter = CreationControlCenter;\r\n_CreationControlCenter_eventEngine = new WeakMap(), _CreationControlCenter_logger = new WeakMap(), _CreationControlCenter_sceneTree = new WeakMap(), _CreationControlCenter_stateEngine = new WeakMap(), _CreationControlCenter_uuidGenerator = new WeakMap(), _CreationControlCenter_firstSessionEngine = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"CreationControlCenter.js","sourceRoot":"","sources":["../../src/implementation/CreationControlCenter.ts"],"names":[],"mappings":"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","sourcesContent":["import { BUSY_MODE_DISPLAY, SESSION_SETTINGS_MODE, SPINNER_POSITIONING, VISIBILITY_MODE } from \"@shapediver/viewer.rendering-engine.rendering-engine\";\r\nimport { RenderingEngine, RenderingEngine as RenderingEngineThreeJs } from \"@shapediver/viewer.rendering-engine-threejs.standard\";\r\nimport { ISettingsSections, SessionEngine } from \"@shapediver/viewer.session-engine.session-engine\";\r\nimport { EventEngine, EVENTTYPE, EVENTTYPE_SCENE, Logger, SettingsEngine, ShapeDiverViewerError, ShapeDiverViewerSessionError, ShapeDiverViewerViewportError, StateEngine, StatePromise, UuidGenerator } from \"@shapediver/viewer.shared.services\";\r\nimport { EventResponseMapping, ITaskEvent, TASK_TYPE } from \"@shapediver/viewer.shared.types\";\r\nimport { ICreationControlCenter } from \"../interfaces/ICreationControlCenter\";\r\nimport { build_data } from '@shapediver/viewer.shared.build-data'\r\nimport { Box } from \"@shapediver/viewer.shared.math\";\r\nimport { ITree, Tree } from \"@shapediver/viewer.shared.node-tree\";\r\nimport { ShapeDiverResponseDto } from \"@shapediver/api.geometry-api-dto-v2\";\r\nimport { ISettingsV3_1, latestVersion } from \"@shapediver/viewer.settings\";\r\n\r\nexport class CreationControlCenter implements ICreationControlCenter {\r\n  // #region Properties (10)\r\n\r\n  readonly #eventEngine: EventEngine = EventEngine.instance;\r\n  readonly #logger: Logger = Logger.instance;\r\n  readonly #sceneTree: ITree = Tree.instance;\r\n  readonly #stateEngine: StateEngine = StateEngine.instance;\r\n  readonly #uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n  private static _instance: CreationControlCenter;\r\n\r\n  #firstSessionEngine?: SessionEngine;\r\n\r\n  public readonly renderingEngines: { [key: string]: RenderingEngineThreeJs } = {};\r\n  public readonly sessionEngines: { [key: string]: SessionEngine } = {};\r\n\r\n  update?: (\r\n    sessionEngines: { [key: string]: SessionEngine; },\r\n    renderingEngines: { [key: string]: RenderingEngine; }\r\n  ) => void;\r\n\r\n  // #endregion Properties (10)\r\n\r\n  // #region Public Static Accessors (1)\r\n\r\n  public static get instance() {\r\n      return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  // #endregion Public Static Accessors (1)\r\n\r\n  // #region Public Methods (11)\r\n\r\n  public applySettings(sessionId: string, response: ShapeDiverResponseDto, sections?: ISettingsSections): Promise<void> {\r\n    sections = sections || {};\r\n    this.sessionEngines[sessionId].applySettings(response, sections);\r\n\r\n    const promises: Promise<any>[] = [];\r\n\r\n    if (sections.session && sections.session.parameter && sections.session.parameter.value)\r\n      promises.push(this.sessionEngines[sessionId].customize());\r\n\r\n    for (let r in this.renderingEngines) {\r\n      if ((this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST && this.#firstSessionEngine && sessionId === this.#firstSessionEngine.id) ||\r\n        (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n        this.#stateEngine.renderingEngines[r].settingsAssigned.reset();\r\n        promises.push(new Promise<void>(resolve => {\r\n          this.#stateEngine.renderingEngines[r].settingsAssigned.then(() => {\r\n            resolve();\r\n          })\r\n        }));\r\n\r\n        this.renderingEngines[r].applySettings(sections.viewport);\r\n      }\r\n    }\r\n    return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n  }\r\n\r\n  public applyViewportSettings(viewportId: string, settings: ISettingsV3_1, sections: { ar?: boolean | undefined; scene?: boolean | undefined; camera?: boolean | undefined; light?: boolean | undefined; environment?: boolean | undefined; general?: boolean | undefined; } = { ar: false, scene: false, camera: false, light: false, environment: false, general: false}): Promise<void> {\r\n    sections = sections || {};\r\n\r\n    const settingsEngine: SettingsEngine = new SettingsEngine();\r\n    settingsEngine.loadSettings(settings);\r\n\r\n    const promises: Promise<any>[] = [];\r\n    this.#stateEngine.renderingEngines[viewportId].settingsAssigned.reset();\r\n    promises.push(new Promise<void>(resolve => {\r\n      this.#stateEngine.renderingEngines[viewportId].settingsAssigned.then(() => {\r\n        resolve();\r\n      })\r\n    }));\r\n\r\n    this.renderingEngines[viewportId].applySettings(sections, settingsEngine);\r\n    return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n  }\r\n\r\n  public async closeRenderingEngine(id: string): Promise<void> {\r\n    if (!this.renderingEngines[id]) return;\r\n\r\n    this.#logger.debugLow(`CreationControlCenter.closeRenderingEngine: Closing viewport ${id}.`);\r\n    if (this.#stateEngine.renderingEngines[id].initialized.resolved === false)\r\n      await new Promise<void>(resolve => { this.#stateEngine.renderingEngines[id].initialized.then(() => resolve()) })\r\n\r\n    this.#stateEngine.renderingEngines[id].settingsAssigned.reset();\r\n    this.#stateEngine.renderingEngines[id].environmentMapLoaded.reset();\r\n    this.#stateEngine.renderingEngines[id].initialized.reset();\r\n\r\n    await this.renderingEngines[id].close();\r\n\r\n    (<any>this.renderingEngines[id]) = undefined;\r\n    delete this.renderingEngines[id];\r\n    delete this.#stateEngine.renderingEngines[id];\r\n\r\n    this.#logger.debug(`CreationControlCenter.closeRenderingEngine: Viewport closed.`);\r\n    if (this.update) this.update(this.sessionEngines, this.renderingEngines);\r\n\r\n    this.#eventEngine.emitEvent(EVENTTYPE.VIEWPORT.VIEWPORT_CLOSED, { viewportId: id });\r\n  }\r\n\r\n  public async closeSessionEngine(id: string): Promise<void> {\r\n    if (!this.sessionEngines[id]) return;\r\n\r\n    this.#logger.debugLow(`CreationControlCenter.closeSession: Closing session ${id}.`);\r\n\r\n    if (this.#stateEngine.sessionEngines[id].initialized.resolved === false)\r\n      await new Promise<void>(resolve => { this.#stateEngine.sessionEngines[id].initialized.then(() => resolve()) })\r\n\r\n    await this.sessionEngines[id].close();\r\n\r\n    // remove from rendering engines (also directly assigned)\r\n    for (let r in this.renderingEngines) {\r\n      if ((this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === id) ||\r\n        (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST && this.#firstSessionEngine === this.sessionEngines[id])) {\r\n        this.renderingEngines[r].reset();\r\n      }\r\n    }\r\n\r\n    if (this.#firstSessionEngine === this.sessionEngines[id]) {\r\n      const engines = Object.values(this.sessionEngines).filter(s => s.id !== id);\r\n      this.#firstSessionEngine = engines.length === 0 ? undefined : engines[0];\r\n      if (this.#firstSessionEngine) {\r\n        let promises: StatePromise<boolean>[] = []\r\n\r\n        for (let r in this.renderingEngines) {\r\n          if (this.#stateEngine.renderingEngines[r].settingsAssigned.resolved === false) {\r\n            if (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST) {\r\n              promises.push(this.#stateEngine.renderingEngines[r].settingsAssigned)\r\n              this.assignSettings(this.renderingEngines[r], this.#firstSessionEngine?.id);\r\n            }\r\n          }\r\n        }\r\n\r\n        await Promise.all(promises)\r\n\r\n        if (this.update) this.update(this.sessionEngines, this.renderingEngines);\r\n      }\r\n    }\r\n\r\n    this.#stateEngine.sessionEngines[id].settingsRegistered.reset();\r\n\r\n    (<any>this.sessionEngines[id]) = undefined;\r\n    delete this.sessionEngines[id];\r\n    delete this.#stateEngine.sessionEngines[id];\r\n\r\n    this.#logger.debug(`CreationControlCenter.closeSessionEngine: Session closed.`);\r\n    for (let r in this.renderingEngines)\r\n      this.renderingEngines[r].update('CreationControlCenter.closeSessionEngine')\r\n    if (this.update) this.update(this.sessionEngines, this.renderingEngines);\r\n    this.#eventEngine.emitEvent(EVENTTYPE.SESSION.SESSION_CLOSED, { sessionId: id });\r\n  }\r\n\r\n  public async createRenderingEngineThreeJs(properties: {\r\n    canvas?: HTMLCanvasElement,\r\n    id?: string,\r\n    branding?: {\r\n      logo?: string | null,\r\n      backgroundColor?: string,\r\n      busyModeSpinner?: string,\r\n      busyModeDisplay?: BUSY_MODE_DISPLAY,\r\n      spinnerPositioning?: SPINNER_POSITIONING\r\n    },\r\n    sessionSettingsId?: string,\r\n    sessionSettingsMode?: SESSION_SETTINGS_MODE,\r\n    visibility?: VISIBILITY_MODE,\r\n  }): Promise<RenderingEngineThreeJs> {\r\n    const eventId = this.#uuidGenerator.create();\r\n    let renderingEngineId = properties.id || this.#uuidGenerator.create();\r\n    properties.id = renderingEngineId;\r\n    try {\r\n      const eventStart: ITaskEvent = { type: TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0, status: 'Creating viewport' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n\r\n      // check if the given id is valid\r\n      if (this.renderingEngines[renderingEngineId]) {\r\n        const eventClose: ITaskEvent = { type: TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.1, status: 'Closing viewport with same id' };\r\n        this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventClose);\r\n\r\n        this.#logger.warn(`CreationControlCenter.createViewport: Viewer with this id (${renderingEngineId}) already exists. Closing initial instance.`);\r\n        await this.closeRenderingEngine(renderingEngineId);\r\n      }\r\n\r\n      this.#stateEngine.renderingEngines[renderingEngineId] = {\r\n        id: renderingEngineId,\r\n        initialized: new StatePromise(),\r\n        environmentMapLoaded: new StatePromise(),\r\n        settingsAssigned: new StatePromise(),\r\n        boundingBoxCreated: new StatePromise(),\r\n        busy: []\r\n      }\r\n\r\n      const renderingEngine = new RenderingEngineThreeJs(properties);\r\n      this.renderingEngines[renderingEngineId] = renderingEngine;\r\n\r\n      renderingEngine.cameraEngine.createDefaultCameras();\r\n\r\n      if (properties.sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL) {\r\n        if (!properties.sessionSettingsId) \r\n          throw new ShapeDiverViewerViewportError('Session with sessionSettingsMode MANUAL needs to have a sessionSettingsId.');\r\n        const sessionSettingsId = properties.sessionSettingsId;\r\n        if (this.sessionEngines[sessionSettingsId]) {\r\n          await this.assignSettings(renderingEngine, sessionSettingsId)\r\n        } else {\r\n          // in createSession\r\n        }\r\n      } else if (properties.sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST) {\r\n        if (this.#firstSessionEngine) {\r\n          await this.assignSettings(renderingEngine, this.#firstSessionEngine.id)\r\n        } else {\r\n          // in createSession\r\n        }\r\n      }\r\n\r\n      if (renderingEngine.sessionSettingsMode === SESSION_SETTINGS_MODE.NONE &&\r\n        renderingEngine.visibility === VISIBILITY_MODE.SESSION) {\r\n        renderingEngine.show = true;\r\n      } else if (renderingEngine.visibility === VISIBILITY_MODE.INSTANT) {\r\n        renderingEngine.show = true;\r\n      } else if (renderingEngine.visibility === VISIBILITY_MODE.SESSION) {\r\n        // wait for settings to load before showing the scene\r\n        if (this.#sceneTree.root.boundingBox.isEmpty()) {\r\n          this.#eventEngine.addListener(EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            const event = e as EventResponseMapping[EVENTTYPE_SCENE.SCENE_BOUNDING_BOX_CHANGE];\r\n            if (event.viewportId === renderingEngine.id) {\r\n              const boundingBox = new Box(event.boundingBox!.min, event.boundingBox!.max);\r\n              if (boundingBox.isEmpty()) {\r\n                renderingEngine.show = false;\r\n              } else {\r\n                if (this.#stateEngine.renderingEngines[renderingEngineId].settingsAssigned.resolved) {\r\n                  renderingEngine.show = true;\r\n                } else {\r\n                  this.#stateEngine.renderingEngines[renderingEngineId].settingsAssigned.then(() => {\r\n                    renderingEngine.show = true;\r\n                  })\r\n                }\r\n              }\r\n            }\r\n          })\r\n        } else {\r\n          if (this.#stateEngine.renderingEngines[renderingEngineId].settingsAssigned.resolved) {\r\n            renderingEngine.show = true;\r\n          } else {\r\n            this.#stateEngine.renderingEngines[renderingEngineId].settingsAssigned.then(() => {\r\n              renderingEngine.show = true;\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n      this.#stateEngine.renderingEngines[renderingEngineId].initialized.resolve(true);\r\n\r\n      this.#logger.debug(`CreationControlCenter.createViewport: Viewport(${renderingEngineId}) created.`);\r\n\r\n      const eventEnd: ITaskEvent = { type: TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created' };\r\n      \r\n      if (this.update) this.update(this.sessionEngines, this.renderingEngines);\r\n\r\n      this.#eventEngine.emitEvent(EVENTTYPE.VIEWPORT.VIEWPORT_CREATED, { viewportId: renderingEngineId });\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n      return <RenderingEngineThreeJs>this.renderingEngines[renderingEngineId];\r\n    } catch (e) {\r\n      const eventCancel1: ITaskEvent = { type: TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 0.9, status: 'Viewport created failed, closing viewport' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);\r\n\r\n      try { await this.closeRenderingEngine(renderingEngineId); } catch { }\r\n\r\n      const eventCancel2: ITaskEvent = { type: TASK_TYPE.VIEWPORT_CREATION, id: eventId, progress: 1, status: 'Viewport created failed, exiting' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  public async createSessionEngine(properties: {\r\n    ticket: string,\r\n    modelViewUrl: string,\r\n    jwtToken?: string,\r\n    id?: string,\r\n    waitForOutputs?: boolean,\r\n    loadOutputs?: boolean,\r\n    excludeViewports?: string[],\r\n    initialParameterValues?: { [key: string]: string }\r\n  }): Promise<SessionEngine> {\r\n    const eventId = this.#uuidGenerator.create();\r\n    let sessionEngineId = properties.id || this.#uuidGenerator.create();\r\n    properties.id = sessionEngineId;\r\n\r\n    try {\r\n      const eventStart: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0, status: 'Creating session' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n\r\n      // check if the given id is valid\r\n      if (this.sessionEngines[sessionEngineId]) {\r\n        const eventClose: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.1, status: 'Closing session with same id' };\r\n        this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventClose);\r\n\r\n        this.#logger.warn(`CreationControlCenter.createSession: Session with this id (${sessionEngineId}) already exists. Closing initial instance.`);\r\n        await this.closeSessionEngine(sessionEngineId);\r\n      }\r\n\r\n      this.#stateEngine.sessionEngines[sessionEngineId] = {\r\n        id: sessionEngineId,\r\n        initialized: new StatePromise(),\r\n        settingsRegistered: new StatePromise()\r\n      }\r\n\r\n      // create the actual session \r\n      const sessionEngine = new SessionEngine({\r\n        id: sessionEngineId,\r\n        ticket: properties.ticket,\r\n        modelViewUrl: properties.modelViewUrl,\r\n        excludeViewports: properties.excludeViewports,\r\n        buildVersion: build_data.build_version,\r\n        buildDate: build_data.build_date,\r\n        jwtToken: properties.jwtToken\r\n      });\r\n\r\n      const eventInit: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.25, status: 'Initializing session.' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventInit);\r\n\r\n      await sessionEngine.init(properties.initialParameterValues);\r\n\r\n      if (properties.loadOutputs !== false) {\r\n        if (properties.waitForOutputs !== false) {\r\n          await sessionEngine.updateOutputs({\r\n            eventId,\r\n            type: TASK_TYPE.SESSION_CREATION,\r\n            progressRange: {\r\n              min: 0.25,\r\n              max: 0.9\r\n            },\r\n            data: undefined\r\n          });\r\n          this.#eventEngine.emitEvent(EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });\r\n\r\n          for (let r in this.renderingEngines)\r\n            this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=true')\r\n        } else {\r\n          sessionEngine.updateOutputs({\r\n            eventId,\r\n            type: TASK_TYPE.SESSION_CREATION,\r\n            progressRange: {\r\n              min: 0.25,\r\n              max: 0.9\r\n            },\r\n            data: undefined\r\n          }).then(() => {\r\n            this.#eventEngine.emitEvent(EVENTTYPE.SESSION.SESSION_INITIAL_OUTPUTS_LOADED, { sessionId: sessionEngineId });\r\n\r\n            for (let r in this.renderingEngines)\r\n              this.renderingEngines[r].update('CreationControlCenter.createSessionEngine.waitForOutputs=false')\r\n          })\r\n        }\r\n      }\r\n      \r\n      // save the session\r\n      this.sessionEngines[sessionEngineId] = sessionEngine;\r\n\r\n      this.#stateEngine.sessionEngines[sessionEngineId].initialized.resolve(true);\r\n      this.#logger.debug(`CreationControlCenter.createSession: Session(${sessionEngine.id}) created.`);\r\n\r\n      if (!this.#firstSessionEngine) \r\n        this.#firstSessionEngine = sessionEngine;\r\n\r\n      let promises: StatePromise<boolean>[] = []\r\n\r\n      for (let r in this.renderingEngines) {\r\n        if (this.#stateEngine.renderingEngines[r].settingsAssigned.resolved === false) {\r\n          if (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST || (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && this.renderingEngines[r].sessionSettingsId === sessionEngineId)) {\r\n            promises.push(this.#stateEngine.renderingEngines[r].settingsAssigned)\r\n            this.assignSettings(this.renderingEngines[r], sessionEngineId);\r\n          }\r\n        }\r\n      }\r\n\r\n      await Promise.all(promises)\r\n\r\n      for (let r in this.renderingEngines)\r\n        this.renderingEngines[r].update('CreationControlCenter.createSessionEngine')\r\n\r\n      if (this.update) this.update(this.sessionEngines, this.renderingEngines);\r\n\r\n      const eventEnd: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n      this.#eventEngine.emitEvent(EVENTTYPE.SESSION.SESSION_CREATED, { sessionId: sessionEngineId });\r\n      return sessionEngine;\r\n    } catch (e) {\r\n      // special behavior, if this was the only session, display the error on the logo screen\r\n      if (e instanceof ShapeDiverViewerError) {\r\n        if ((this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 1) || (!this.sessionEngines[sessionEngineId] && Object.values(this.sessionEngines).length === 0)) {\r\n          for (let v in this.renderingEngines)\r\n            this.renderingEngines[v].displayErrorMessage(e.message);\r\n        }\r\n      }\r\n\r\n      const eventCancel1: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 0.9, status: 'Session created failed, closing session' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventCancel1);\r\n\r\n      await this.closeSessionEngine(sessionEngineId);\r\n\r\n      const eventCancel2: ITaskEvent = { type: TASK_TYPE.SESSION_CREATION, id: eventId, progress: 1, status: 'Session created failed' };\r\n      this.#eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  public createSettingsObject(sessionId: string, viewportId?: string): any {\r\n    const session = this.sessionEngines[sessionId];\r\n\r\n    session.settingsEngine.settings.build_version = build_data.build_version;\r\n    session.settingsEngine.settings.build_date = build_data.build_date;\r\n    session.settingsEngine.settings.settings_version = latestVersion;\r\n\r\n    let renderingEngine;\r\n    if (viewportId && this.renderingEngines[viewportId]) {\r\n      renderingEngine = this.renderingEngines[viewportId];\r\n    } else {\r\n      for (let r in this.renderingEngines) {\r\n        if ((this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST && this.#firstSessionEngine && sessionId === this.#firstSessionEngine.id) ||\r\n          (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n          renderingEngine = this.renderingEngines[r];\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (renderingEngine)\r\n      renderingEngine.saveSettings();\r\n\r\n    return session.settingsEngine.settings;\r\n  }\r\n\r\n  public getARSessionEngine(): SessionEngine | undefined {\r\n    for (let s in this.sessionEngines) {\r\n      if (this.sessionEngines[s].canUploadGLTF) {\r\n        return this.sessionEngines[s];\r\n      }\r\n    }\r\n  }\r\n\r\n  public getViewportSettings(viewportId: string): ISettingsV3_1 {\r\n    let renderingEngine = this.renderingEngines[viewportId];\r\n    if(!renderingEngine)\r\n      throw new ShapeDiverViewerViewportError('Viewport with id ' + viewportId + ' could not be found.');\r\n\r\n    const settingsEngine: SettingsEngine = new SettingsEngine();\r\n    renderingEngine.saveSettings(settingsEngine);\r\n    return settingsEngine.settings;\r\n  }\r\n\r\n  public resetSettings(sessionId: string, sections?: ISettingsSections): Promise<void> {\r\n    sections = sections || {};\r\n    this.sessionEngines[sessionId].resetSettings(sections);\r\n\r\n    const promises: Promise<any>[] = [];\r\n\r\n    if (sections.session && sections.session.parameter && sections.session.parameter.value)\r\n      promises.push(this.sessionEngines[sessionId].customize());\r\n\r\n    for (let r in this.renderingEngines) {\r\n      if ((this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.FIRST && this.#firstSessionEngine && sessionId === this.#firstSessionEngine.id) ||\r\n        (this.renderingEngines[r].sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && sessionId === this.renderingEngines[r].sessionSettingsId)) {\r\n        this.#stateEngine.renderingEngines[r].settingsAssigned.reset();\r\n        promises.push(new Promise<void>(resolve => {\r\n          this.#stateEngine.renderingEngines[r].settingsAssigned.then(() => {\r\n            resolve();\r\n          })\r\n        }));\r\n\r\n        this.renderingEngines[r].applySettings(sections.viewport);\r\n      }\r\n    }\r\n    return new Promise(resolve => Promise.all(promises).then(() => resolve()));\r\n  }\r\n\r\n  public async saveSettings(sessionId: string, viewportId?: string): Promise<boolean> {\r\n    const session = this.sessionEngines[sessionId];\r\n    await session.saveUiProperties(false);\r\n\r\n    const settingsObject = this.createSettingsObject(sessionId, viewportId);\r\n    const response = await session.saveSettings(settingsObject);\r\n    if (response) {\r\n      this.#logger.debug(`Session(${sessionId}).saveSettings: Saved settings.`);\r\n    } else {\r\n      throw new ShapeDiverViewerSessionError(`Session(${sessionId}).saveSettings: Could not save settings.`);\r\n    }\r\n    return response;\r\n  }\r\n\r\n  // #endregion Public Methods (11)\r\n\r\n  // #region Private Methods (1)\r\n\r\n  private async assignSettings(renderingEngine: RenderingEngineThreeJs, sessionId: string) {\r\n    if (this.#stateEngine.sessionEngines[sessionId].initialized.resolved === true) {\r\n      // immediate\r\n      renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;\r\n      await renderingEngine.applySettings()\r\n    } else {\r\n      await new Promise<void>(resolve => {\r\n        this.#stateEngine.sessionEngines[sessionId].initialized.then(async () => {\r\n          renderingEngine.settingsEngine = this.sessionEngines[sessionId].settingsEngine;\r\n          await renderingEngine.applySettings()\r\n          resolve();\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"c80a7c6e40cb6374ce86651cd1087b70","cacheData":{"env":{}}}