{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/CameraEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js.map","includedInParent":true,"mtime":1706542086539},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\CameraEngine.ts","includedInParent":true,"mtime":1706542087061},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"@shapediver/viewer.shared.services","loc":{"line":4,"column":41,"index":152},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":5,"column":37,"index":229},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":6,"column":28,"index":293},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":7,"column":42,"index":350},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"../interfaces/ICameraEngine","loc":{"line":8,"column":32,"index":423},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\interfaces\\ICameraEngine.js"},{"name":"./camera/AbstractCamera","loc":{"line":9,"column":33,"index":489},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\AbstractCamera.js"},{"name":"./camera/PerspectiveCamera","loc":{"line":10,"column":36,"index":554},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js"},{"name":"./camera/OrthographicCamera","loc":{"line":11,"column":37,"index":623},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\OrthographicCamera.js"},{"name":"../interfaces/camera/IOrthographicCamera","loc":{"line":12,"column":38,"index":694},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\CameraEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\interfaces\\camera\\IOrthographicCamera.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraEngine = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst ICameraEngine_1 = require(\"../interfaces/ICameraEngine\");\r\nconst AbstractCamera_1 = require(\"./camera/AbstractCamera\");\r\nconst PerspectiveCamera_1 = require(\"./camera/PerspectiveCamera\");\r\nconst OrthographicCamera_1 = require(\"./camera/OrthographicCamera\");\r\nconst IOrthographicCamera_1 = require(\"../interfaces/camera/IOrthographicCamera\");\r\nclass CameraEngine {\r\n    // #endregion Properties (10)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine, _canvas) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._canvas = _canvas;\r\n        // #region Properties (10)\r\n        this._cameras = {};\r\n        this._camerasDomEventListenerToken = {};\r\n        this._cameraNode = new viewer_shared_node_tree_1.TreeNode('cameras');\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._camera = null;\r\n        this._settingsApplied = false;\r\n        this._boundingBox = new viewer_shared_math_1.Box();\r\n        this._tree.root.addChild(this._cameraNode);\r\n        this._cameraNode.restrictViewports = [this._renderingEngine.id];\r\n        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            const viewerEvent = e;\r\n            if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                this._boundingBox = new viewer_shared_math_1.Box(viewerEvent.boundingBox.min, viewerEvent.boundingBox.max);\r\n                const cameras = this.cameras;\r\n                for (let c in cameras)\r\n                    cameras[c].boundingBox = this._boundingBox.clone();\r\n            }\r\n        });\r\n        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_UPDATED, (e) => {\r\n            const viewerEvent = e;\r\n            if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                this.searchForNewCameras();\r\n            }\r\n        });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (2)\r\n    get camera() {\r\n        return this._camera;\r\n    }\r\n    get cameras() {\r\n        return this._cameras;\r\n    }\r\n    get update() {\r\n        return this._update;\r\n    }\r\n    set update(value) {\r\n        this._update = value;\r\n    }\r\n    // #endregion Public Accessors (2)\r\n    // #region Public Methods (7)\r\n    activateCameraEvents() {\r\n        const cameras = this.cameras;\r\n        for (let c in cameras)\r\n            cameras[c].controls.cameraControlsEventDistribution.activateCameraEvents();\r\n    }\r\n    applySettings(settingsEngine) {\r\n        const cameras = this.cameras;\r\n        for (let c in cameras)\r\n            this.removeCamera(c);\r\n        for (let id in settingsEngine.settings.camera.cameras) {\r\n            const cameraSetting = settingsEngine.settings.camera.cameras[id];\r\n            if (cameraSetting.type === 'perspective') {\r\n                this.createCamera(ICameraEngine_1.CAMERA_TYPE.PERSPECTIVE, id);\r\n            }\r\n            else {\r\n                const camera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, id);\r\n                camera.direction = cameraSetting.type;\r\n            }\r\n        }\r\n        if (!this._settingsApplied)\r\n            for (let c in cameras)\r\n                cameras[c].applySettings(settingsEngine);\r\n        const cameraKeys = Object.keys(settingsEngine.settings.camera.cameras);\r\n        if (cameraKeys.length > 0) {\r\n            if (!settingsEngine.settings.camera.cameraId) {\r\n                this.assignCamera(cameraKeys[0]);\r\n            }\r\n            else {\r\n                this.assignCamera(settingsEngine.settings.camera.cameraId);\r\n            }\r\n        }\r\n        else {\r\n            this.createDefaultCameras();\r\n            this.camera.applySettings(settingsEngine);\r\n        }\r\n        this._settingsApplied = true;\r\n        if (this._update)\r\n            this._update();\r\n    }\r\n    assignCamera(id) {\r\n        const camera = this.cameras[id];\r\n        if (!camera)\r\n            return false;\r\n        for (let c in this.cameras)\r\n            this.cameras[c].active = false;\r\n        this._camera = camera;\r\n        this._camera.active = true;\r\n        return true;\r\n    }\r\n    createCamera(type, id) {\r\n        const cameras = this.cameras;\r\n        const cameraId = id || this._uuidGenerator.create();\r\n        if (cameras[cameraId])\r\n            throw new viewer_shared_services_1.ShapeDiverViewerCameraError(`CameraEngine.createCamera: Camera (${type}) with this id (${cameraId}) already exists.`);\r\n        const camera = ICameraEngine_1.CAMERA_TYPE.PERSPECTIVE === type ? new PerspectiveCamera_1.PerspectiveCamera(cameraId) : new OrthographicCamera_1.OrthographicCamera(cameraId);\r\n        camera.assignViewer(this._renderingEngine);\r\n        cameras[cameraId] = camera;\r\n        if (this._settingsApplied && this._renderingEngine.settingsEngine) {\r\n            camera.applySettings(this._renderingEngine.settingsEngine);\r\n        }\r\n        else {\r\n            camera.zoomTo(undefined, { duration: 0 });\r\n        }\r\n        this._cameraNode.addData(camera);\r\n        if (this._update)\r\n            this._update();\r\n        return camera;\r\n    }\r\n    createDefaultCameras() {\r\n        const topCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'top');\r\n        topCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.TOP;\r\n        const bottomCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'bottom');\r\n        bottomCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.BOTTOM;\r\n        const leftCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'left');\r\n        leftCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.LEFT;\r\n        const rightCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'right');\r\n        rightCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.RIGHT;\r\n        const frontCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'front');\r\n        frontCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.FRONT;\r\n        const backCamera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.ORTHOGRAPHIC, 'back');\r\n        backCamera.direction = IOrthographicCamera_1.ORTHOGRAPHIC_CAMERA_DIRECTION.BACK;\r\n        const camera = this.createCamera(ICameraEngine_1.CAMERA_TYPE.PERSPECTIVE, 'perspective');\r\n        this.assignCamera(camera.id);\r\n    }\r\n    deactivateCameraEvents() {\r\n        const cameras = this.cameras;\r\n        for (let c in cameras)\r\n            cameras[c].controls.cameraControlsEventDistribution.deactivateCameraEvents();\r\n    }\r\n    removeCamera(id) {\r\n        const cameras = this.cameras;\r\n        const camera = cameras[id];\r\n        if (!camera)\r\n            return false;\r\n        this._renderingEngine.domEventEngine.removeDomEventListener(this._camerasDomEventListenerToken[id]);\r\n        if (this._camera && this._camera.id === id)\r\n            this._camera = null;\r\n        delete cameras[id];\r\n        delete this._camerasDomEventListenerToken[id];\r\n        this._cameraNode.removeData(camera);\r\n        if (this._update)\r\n            this._update();\r\n        return true;\r\n    }\r\n    saveSettings(settingsEngine) {\r\n        settingsEngine.settings.camera.cameraId = this._camera ? this._camera.id : 'perspective';\r\n        settingsEngine.settings.camera.cameras = {};\r\n        for (let c in this.cameras) {\r\n            const camera = this.cameras[c];\r\n            if (camera.type === ICameraEngine_1.CAMERA_TYPE.PERSPECTIVE) {\r\n                const controls = camera.controls;\r\n                settingsEngine.camera.cameras[camera.id] = {\r\n                    name: camera.name,\r\n                    autoAdjust: camera.autoAdjust,\r\n                    cameraMovementDuration: camera.cameraMovementDuration,\r\n                    enableCameraControls: camera.enableCameraControls,\r\n                    revertAtMouseUp: camera.revertAtMouseUp,\r\n                    revertAtMouseUpDuration: camera.revertAtMouseUpDuration,\r\n                    zoomExtentsFactor: camera.zoomExtentsFactor,\r\n                    position: { x: camera.defaultPosition[0], y: camera.defaultPosition[1], z: camera.defaultPosition[2] },\r\n                    target: { x: camera.defaultTarget[0], y: camera.defaultTarget[1], z: camera.defaultTarget[2] },\r\n                    type: camera.type,\r\n                    fov: camera.fov,\r\n                    controls: {\r\n                        autoRotationSpeed: controls.autoRotationSpeed,\r\n                        damping: controls.damping,\r\n                        enableAutoRotation: controls.enableAutoRotation,\r\n                        enableKeyPan: controls.enableKeyPan,\r\n                        enablePan: controls.enablePan,\r\n                        enableRotation: controls.enableRotation,\r\n                        enableZoom: controls.enableZoom,\r\n                        input: controls.input,\r\n                        keyPanSpeed: controls.keyPanSpeed,\r\n                        movementSmoothness: controls.movementSmoothness,\r\n                        rotationSpeed: controls.rotationSpeed,\r\n                        panSpeed: controls.panSpeed,\r\n                        zoomSpeed: controls.zoomSpeed,\r\n                        restrictions: {\r\n                            position: {\r\n                                cube: {\r\n                                    min: { x: controls.cubePositionRestriction.min[0], y: controls.cubePositionRestriction.min[1], z: controls.cubePositionRestriction.min[2] },\r\n                                    max: { x: controls.cubePositionRestriction.max[0], y: controls.cubePositionRestriction.max[1], z: controls.cubePositionRestriction.max[2] },\r\n                                },\r\n                                sphere: {\r\n                                    center: { x: controls.spherePositionRestriction.center[0], y: controls.spherePositionRestriction.center[1], z: controls.spherePositionRestriction.center[2] },\r\n                                    radius: controls.spherePositionRestriction.radius,\r\n                                },\r\n                            },\r\n                            target: {\r\n                                cube: {\r\n                                    min: { x: controls.cubeTargetRestriction.min[0], y: controls.cubeTargetRestriction.min[1], z: controls.cubeTargetRestriction.min[2] },\r\n                                    max: { x: controls.cubeTargetRestriction.max[0], y: controls.cubeTargetRestriction.max[1], z: controls.cubeTargetRestriction.max[2] },\r\n                                },\r\n                                sphere: {\r\n                                    center: { x: controls.sphereTargetRestriction.center[0], y: controls.sphereTargetRestriction.center[1], z: controls.sphereTargetRestriction.center[2] },\r\n                                    radius: controls.sphereTargetRestriction.radius,\r\n                                },\r\n                            },\r\n                            rotation: controls.rotationRestriction,\r\n                            zoom: controls.zoomRestriction,\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                if (settingsEngine.camera.cameras[camera.id]) {\r\n                    const previousDirection = settingsEngine.camera.cameras[camera.id].type;\r\n                    // if the direction changed, but the default position & target did not, there is an issue\r\n                    if (previousDirection !== camera.type && (settingsEngine.camera.cameras[camera.id].position.x === camera.defaultPosition[0] &&\r\n                        settingsEngine.camera.cameras[camera.id].position.y === camera.defaultPosition[1] &&\r\n                        settingsEngine.camera.cameras[camera.id].position.z === camera.defaultPosition[2] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.x === camera.defaultTarget[0] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.y === camera.defaultTarget[1] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.z === camera.defaultTarget[2])) {\r\n                        camera.defaultPosition = gl_matrix_1.vec3.clone(camera.position);\r\n                        camera.defaultTarget = gl_matrix_1.vec3.clone(camera.target);\r\n                    }\r\n                }\r\n                const controls = camera.controls;\r\n                settingsEngine.camera.cameras[camera.id] = {\r\n                    name: camera.name,\r\n                    autoAdjust: camera.autoAdjust,\r\n                    cameraMovementDuration: camera.cameraMovementDuration,\r\n                    enableCameraControls: camera.enableCameraControls,\r\n                    revertAtMouseUp: camera.revertAtMouseUp,\r\n                    revertAtMouseUpDuration: camera.revertAtMouseUpDuration,\r\n                    zoomExtentsFactor: camera.zoomExtentsFactor,\r\n                    position: { x: camera.defaultPosition[0], y: camera.defaultPosition[1], z: camera.defaultPosition[2] },\r\n                    target: { x: camera.defaultTarget[0], y: camera.defaultTarget[1], z: camera.defaultTarget[2] },\r\n                    type: camera.direction,\r\n                    controls: {\r\n                        damping: controls.damping,\r\n                        enableKeyPan: controls.enableKeyPan,\r\n                        enablePan: controls.enablePan,\r\n                        enableZoom: controls.enableZoom,\r\n                        input: controls.input,\r\n                        keyPanSpeed: controls.keyPanSpeed,\r\n                        movementSmoothness: controls.movementSmoothness,\r\n                        panSpeed: controls.panSpeed,\r\n                        zoomSpeed: controls.zoomSpeed,\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n    // #endregion Public Methods (7)\r\n    // #region Private Methods (1)\r\n    searchForNewCameras() {\r\n        const getCameraData = (node) => {\r\n            for (let i = 0; i < node.data.length; i++)\r\n                if ((node.data[i] instanceof AbstractCamera_1.AbstractCamera) && !this._cameras[node.data[i].id]) {\r\n                    const camera = node.data[i];\r\n                    if (camera.viewportId === this._renderingEngine.id)\r\n                        this._cameras[camera.id] = camera;\r\n                }\r\n            for (let i = 0; i < node.children.length; i++)\r\n                getCameraData(node.children[i]);\r\n        };\r\n        getCameraData(this._tree.root);\r\n        if (this._update)\r\n            this._update();\r\n    }\r\n}\r\nexports.CameraEngine = CameraEngine;\r\n"},"sourceMaps":{"js":{"version":3,"file":"CameraEngine.js","sourceRoot":"","sources":["../../src/implementation/CameraEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  DomEventEngine,\r\n  EventEngine,\r\n  EVENTTYPE,\r\n  IEvent,\r\n  Logger,\r\n  SettingsEngine,\r\n  ShapeDiverViewerCameraError,\r\n  StateEngine,\r\n  UuidGenerator,\r\n} from '@shapediver/viewer.shared.services'\r\nimport { Box } from '@shapediver/viewer.shared.math'\r\nimport { vec3 } from 'gl-matrix'\r\nimport { IOrthographicCameraSettingsV3, IPerspectiveCameraSettingsV3 } from '@shapediver/viewer.settings'\r\nimport { ISceneEvent } from '@shapediver/viewer.shared.types'\r\nimport { ITree, ITreeNode, Tree, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\n\r\nimport { CAMERA_TYPE, ICameraEngine } from '../interfaces/ICameraEngine'\r\nimport { AbstractCamera } from './camera/AbstractCamera'\r\nimport { OrthographicCameraControls } from './controls/OrthographicCameraControls'\r\nimport { PerspectiveCamera } from './camera/PerspectiveCamera'\r\nimport { OrthographicCamera } from './camera/OrthographicCamera'\r\nimport { PerspectiveCameraControls } from './controls/PerspectiveCameraControls'\r\nimport { ORTHOGRAPHIC_CAMERA_DIRECTION } from '../interfaces/camera/IOrthographicCamera'\r\nimport { IRenderingEngine } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\nimport { ICamera } from '../interfaces/camera/ICamera'\r\n\r\nexport class CameraEngine implements ICameraEngine {\r\n    // #region Properties (10)\r\n\r\n    private readonly _cameras: {\r\n        [key: string]: ICamera\r\n    } = {};\r\n    private readonly _camerasDomEventListenerToken: {\r\n        [key: string]: string\r\n    } = {};\r\n    private readonly _cameraNode: ITreeNode = new TreeNode('cameras');\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n    private readonly _tree: ITree = Tree.instance;\r\n    private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n    private _camera: ICamera | null = null;\r\n    private _settingsApplied: boolean = false;\r\n\r\n    protected _boundingBox: Box = new Box();\r\n    private _update?: () => void;\r\n\r\n    // #endregion Properties (10)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: IRenderingEngine, private readonly _canvas: HTMLCanvasElement) {\r\n        this._tree.root.addChild(this._cameraNode);\r\n        this._cameraNode.restrictViewports = [this._renderingEngine.id];\r\n        \r\n        this._eventEngine.addListener(EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e: IEvent) => {\r\n            const viewerEvent = <ISceneEvent>e;\r\n            if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                this._boundingBox = new Box(viewerEvent.boundingBox!.min, viewerEvent.boundingBox!.max);\r\n\r\n                const cameras = this.cameras;\r\n                for (let c in cameras)\r\n                    cameras[c].boundingBox = this._boundingBox.clone();\r\n            }\r\n        });\r\n\r\n        this._eventEngine.addListener(EVENTTYPE.VIEWPORT.VIEWPORT_UPDATED, (e: IEvent) => {\r\n            const viewerEvent = <ISceneEvent>e;\r\n            if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                this.searchForNewCameras();\r\n            }\r\n        });\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (2)\r\n\r\n    public get camera(): ICamera | null {\r\n        return this._camera;\r\n    }\r\n\r\n    public get cameras(): {\r\n        [key: string]: ICamera\r\n    } {\r\n        return this._cameras;\r\n    }\r\n    \r\n    public get update(): (() => void) | undefined {\r\n        return this._update;\r\n    }\r\n\r\n    public set update(value: (() => void) | undefined) {\r\n        this._update = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (2)\r\n\r\n    // #region Public Methods (7)\r\n\r\n    public activateCameraEvents(): void {\r\n        const cameras = this.cameras;\r\n        for(let c in cameras)\r\n            (<PerspectiveCameraControls | OrthographicCameraControls>cameras[c].controls).cameraControlsEventDistribution.activateCameraEvents();\r\n    }\r\n\r\n    public applySettings(settingsEngine: SettingsEngine) {\r\n        const cameras = this.cameras;\r\n        for (let c in cameras)\r\n            this.removeCamera(c);\r\n\r\n        for(let id in settingsEngine.settings.camera.cameras) {\r\n            const cameraSetting = settingsEngine.settings.camera.cameras[id];\r\n            if(cameraSetting.type === 'perspective') {\r\n                this.createCamera(CAMERA_TYPE.PERSPECTIVE, id);\r\n            } else {\r\n                const camera = this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, id);\r\n                (<OrthographicCamera>camera).direction = <ORTHOGRAPHIC_CAMERA_DIRECTION>cameraSetting.type;\r\n            }\r\n        }\r\n\r\n        if(!this._settingsApplied)\r\n            for (let c in cameras)\r\n                cameras[c].applySettings(settingsEngine);\r\n\r\n        const cameraKeys = Object.keys(settingsEngine.settings.camera.cameras);\r\n\r\n        if(cameraKeys.length > 0) {\r\n            if(!settingsEngine.settings.camera.cameraId) {\r\n                this.assignCamera(cameraKeys[0]);\r\n            } else {\r\n                this.assignCamera(settingsEngine.settings.camera.cameraId);\r\n            }\r\n        } else {\r\n            this.createDefaultCameras();\r\n            this.camera!.applySettings(settingsEngine);\r\n        }\r\n\r\n        this._settingsApplied = true;\r\n        if(this._update) this._update();\r\n    }\r\n\r\n    public assignCamera(id: string): boolean {\r\n        const camera = this.cameras[id];\r\n        if (!camera) return false;\r\n\r\n        for (let c in this.cameras)\r\n            this.cameras[c].active = false;\r\n\r\n        this._camera = camera;\r\n        this._camera.active = true;\r\n        return true;\r\n    }\r\n\r\n    public createCamera(type: CAMERA_TYPE, id?: string): ICamera {\r\n        const cameras = this.cameras;\r\n        const cameraId = id || this._uuidGenerator.create();\r\n        if (cameras[cameraId]) \r\n            throw new ShapeDiverViewerCameraError(`CameraEngine.createCamera: Camera (${type}) with this id (${cameraId}) already exists.`);\r\n        \r\n        const camera = CAMERA_TYPE.PERSPECTIVE === type ? new PerspectiveCamera(cameraId) : new OrthographicCamera(cameraId);\r\n        camera.assignViewer(this._renderingEngine);\r\n\r\n        cameras[cameraId] = camera;\r\n        if (this._settingsApplied && this._renderingEngine.settingsEngine) {\r\n            camera.applySettings(this._renderingEngine.settingsEngine);\r\n        } else {\r\n            camera.zoomTo(undefined, { duration: 0 });\r\n        }\r\n\r\n        this._cameraNode.addData(camera);\r\n        if(this._update) this._update();\r\n        return camera;\r\n    }\r\n\r\n    public createDefaultCameras(): void {\r\n        const topCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'top');\r\n        topCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.TOP;\r\n        const bottomCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'bottom');\r\n        bottomCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.BOTTOM;\r\n        const leftCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'left');\r\n        leftCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.LEFT;\r\n        const rightCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'right');\r\n        rightCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.RIGHT;\r\n        const frontCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'front');\r\n        frontCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.FRONT;\r\n        const backCamera = <OrthographicCamera>this.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, 'back');\r\n        backCamera.direction = ORTHOGRAPHIC_CAMERA_DIRECTION.BACK;\r\n        const camera = this.createCamera(CAMERA_TYPE.PERSPECTIVE, 'perspective');\r\n        this.assignCamera(camera.id);\r\n    }\r\n\r\n    public deactivateCameraEvents(): void {\r\n        const cameras = this.cameras;\r\n        for (let c in cameras)\r\n            (<PerspectiveCameraControls | OrthographicCameraControls>cameras[c].controls).cameraControlsEventDistribution.deactivateCameraEvents();\r\n    }\r\n\r\n    public removeCamera(id: string): boolean {\r\n        const cameras = this.cameras;\r\n        const camera = cameras[id];\r\n        if (!camera) return false;\r\n        this._renderingEngine.domEventEngine.removeDomEventListener(this._camerasDomEventListenerToken[id])\r\n        if (this._camera && this._camera.id === id)\r\n            this._camera = null;\r\n\r\n        delete cameras[id];\r\n        delete this._camerasDomEventListenerToken[id];\r\n        this._cameraNode.removeData(camera);\r\n        if(this._update) this._update();\r\n        return true;\r\n    }\r\n\r\n    public saveSettings(settingsEngine: SettingsEngine) {\r\n        settingsEngine.settings.camera.cameraId = this._camera ? this._camera.id : 'perspective';\r\n        settingsEngine.settings.camera.cameras = {};\r\n\r\n        for (let c in this.cameras) {\r\n            const camera = this.cameras[c];\r\n\r\n            if (camera.type === CAMERA_TYPE.PERSPECTIVE) {\r\n                const controls = <PerspectiveCameraControls>(<PerspectiveCamera>camera).controls;\r\n                settingsEngine.camera.cameras[camera.id] = {\r\n                    name: camera.name,\r\n                    autoAdjust: camera.autoAdjust,\r\n                    cameraMovementDuration: camera.cameraMovementDuration,\r\n                    enableCameraControls: camera.enableCameraControls,\r\n                    revertAtMouseUp: camera.revertAtMouseUp,\r\n                    revertAtMouseUpDuration: camera.revertAtMouseUpDuration,\r\n                    zoomExtentsFactor: camera.zoomExtentsFactor,\r\n                    position: { x: camera.defaultPosition[0], y: camera.defaultPosition[1], z: camera.defaultPosition[2] },\r\n                    target: { x: camera.defaultTarget[0], y: camera.defaultTarget[1], z: camera.defaultTarget[2] },\r\n                    type: camera.type,\r\n                    fov: (<PerspectiveCamera>camera).fov,\r\n                    controls: {\r\n                        autoRotationSpeed: controls.autoRotationSpeed,\r\n                        damping: controls.damping,\r\n                        enableAutoRotation: controls.enableAutoRotation,\r\n                        enableKeyPan: controls.enableKeyPan,\r\n                        enablePan: controls.enablePan,\r\n                        enableRotation: controls.enableRotation,\r\n                        enableZoom: controls.enableZoom,\r\n                        input: controls.input,\r\n                        keyPanSpeed: controls.keyPanSpeed,\r\n                        movementSmoothness: controls.movementSmoothness,\r\n                        rotationSpeed: controls.rotationSpeed,\r\n                        panSpeed: controls.panSpeed,\r\n                        zoomSpeed: controls.zoomSpeed,\r\n                        restrictions: {\r\n                            position: {\r\n                                cube: {\r\n                                    min: { x: controls.cubePositionRestriction.min[0], y: controls.cubePositionRestriction.min[1], z: controls.cubePositionRestriction.min[2] },\r\n                                    max: { x: controls.cubePositionRestriction.max[0], y: controls.cubePositionRestriction.max[1], z: controls.cubePositionRestriction.max[2] },\r\n                                },\r\n                                sphere: {\r\n                                    center: { x: controls.spherePositionRestriction.center[0], y: controls.spherePositionRestriction.center[1], z: controls.spherePositionRestriction.center[2] },\r\n                                    radius: controls.spherePositionRestriction.radius,\r\n                                },\r\n                            },\r\n                            target: {\r\n                                cube: {\r\n                                    min: { x: controls.cubeTargetRestriction.min[0], y: controls.cubeTargetRestriction.min[1], z: controls.cubeTargetRestriction.min[2] },\r\n                                    max: { x: controls.cubeTargetRestriction.max[0], y: controls.cubeTargetRestriction.max[1], z: controls.cubeTargetRestriction.max[2] },\r\n                                },\r\n                                sphere: {\r\n                                    center: { x: controls.sphereTargetRestriction.center[0], y: controls.sphereTargetRestriction.center[1], z: controls.sphereTargetRestriction.center[2] },\r\n                                    radius: controls.sphereTargetRestriction.radius,\r\n                                },\r\n                            },\r\n                            rotation: controls.rotationRestriction,\r\n                            zoom: controls.zoomRestriction,\r\n                        }\r\n                    }\r\n                }\r\n    \r\n            } else {\r\n                if (settingsEngine.camera.cameras[camera.id]) {\r\n                    const previousDirection = settingsEngine.camera.cameras[camera.id].type;\r\n    \r\n                    // if the direction changed, but the default position & target did not, there is an issue\r\n                    if (previousDirection !== camera.type && (\r\n                        settingsEngine.camera.cameras[camera.id].position.x === camera.defaultPosition[0] &&\r\n                        settingsEngine.camera.cameras[camera.id].position.y === camera.defaultPosition[1] &&\r\n                        settingsEngine.camera.cameras[camera.id].position.z === camera.defaultPosition[2] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.x === camera.defaultTarget[0] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.y === camera.defaultTarget[1] &&\r\n                        settingsEngine.camera.cameras[camera.id].target.z === camera.defaultTarget[2]\r\n                    )) {\r\n                        camera.defaultPosition = vec3.clone(camera.position);\r\n                        camera.defaultTarget = vec3.clone(camera.target);\r\n                    }\r\n                }\r\n                const controls = <OrthographicCameraControls>(<OrthographicCamera>camera).controls;\r\n    \r\n                settingsEngine.camera.cameras[camera.id] = {\r\n                    name: camera.name,\r\n                    autoAdjust: camera.autoAdjust,\r\n                    cameraMovementDuration: camera.cameraMovementDuration,\r\n                    enableCameraControls: camera.enableCameraControls,\r\n                    revertAtMouseUp: camera.revertAtMouseUp,\r\n                    revertAtMouseUpDuration: camera.revertAtMouseUpDuration,\r\n                    zoomExtentsFactor: camera.zoomExtentsFactor,\r\n                    position: { x: camera.defaultPosition[0], y: camera.defaultPosition[1], z: camera.defaultPosition[2] },\r\n                    target: { x: camera.defaultTarget[0], y: camera.defaultTarget[1], z: camera.defaultTarget[2] },\r\n                    type: (<OrthographicCamera>camera).direction,\r\n                    controls: {\r\n                        damping: controls.damping,\r\n                        enableKeyPan: controls.enableKeyPan,\r\n                        enablePan: controls.enablePan,\r\n                        enableZoom: controls.enableZoom,\r\n                        input: controls.input,\r\n                        keyPanSpeed: controls.keyPanSpeed,\r\n                        movementSmoothness: controls.movementSmoothness,\r\n                        panSpeed: controls.panSpeed,\r\n                        zoomSpeed: controls.zoomSpeed,\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (7)\r\n    \r\n    // #region Private Methods (1)\r\n\r\n    private searchForNewCameras() {\r\n        const getCameraData = (node: ITreeNode) => {\r\n            for(let i = 0; i < node.data.length; i++)\r\n                if((node.data[i] instanceof AbstractCamera) && !this._cameras[node.data[i].id]) {\r\n                    const camera = <AbstractCamera>node.data[i];\r\n                    if(camera.viewportId === this._renderingEngine.id)\r\n                        this._cameras[camera.id] = camera;\r\n                }\r\n\r\n            for(let i = 0; i < node.children.length; i++)\r\n                getCameraData(node.children[i]);\r\n        };\r\n        getCameraData(this._tree.root);\r\n        if(this._update) this._update();\r\n    }\r\n\r\n    // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"22a44b9ac51b57ce4c1b28d708559bbf","cacheData":{"env":{}}}