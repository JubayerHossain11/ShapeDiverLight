{"id":"node_modules/@shapediver/viewer.rendering-engine.rendering-engine/dist/IRenderingEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\IRenderingEngine.js.map","includedInParent":true,"mtime":1706542084963},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\src\\IRenderingEngine.ts","includedInParent":true,"mtime":1706542085511},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\package.json","includedInParent":true,"mtime":1706542084298}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SPINNER_POSITIONING = exports.FLAG_TYPE = exports.SESSION_SETTINGS_MODE = exports.BUSY_MODE_DISPLAY = exports.TONE_MAPPING = exports.TEXTURE_ENCODING = exports.VISIBILITY_MODE = exports.RENDERER_TYPE = void 0;\r\nvar RENDERER_TYPE;\r\n(function (RENDERER_TYPE) {\r\n    /** The standard rendering engine */\r\n    RENDERER_TYPE[\"STANDARD\"] = \"standard\";\r\n    /** A basic version of the rendering engine */\r\n    RENDERER_TYPE[\"ATTRIBUTES\"] = \"attributes\";\r\n})(RENDERER_TYPE = exports.RENDERER_TYPE || (exports.RENDERER_TYPE = {}));\r\nvar VISIBILITY_MODE;\r\n(function (VISIBILITY_MODE) {\r\n    /** The viewer shows the scene instantly */\r\n    VISIBILITY_MODE[\"INSTANT\"] = \"instant\";\r\n    /** The viewer shows the scene after the first session loading */\r\n    VISIBILITY_MODE[\"SESSION\"] = \"session\";\r\n    /** The viewer is shown once the 'show' property is set to true */\r\n    VISIBILITY_MODE[\"MANUAL\"] = \"manual\";\r\n})(VISIBILITY_MODE = exports.VISIBILITY_MODE || (exports.VISIBILITY_MODE = {}));\r\nvar TEXTURE_ENCODING;\r\n(function (TEXTURE_ENCODING) {\r\n    TEXTURE_ENCODING[\"LINEAR\"] = \"linear\";\r\n    TEXTURE_ENCODING[\"SRGB\"] = \"srgb\";\r\n    TEXTURE_ENCODING[\"RGBE\"] = \"rgbe\";\r\n    TEXTURE_ENCODING[\"RGBM7\"] = \"rgbm7\";\r\n    TEXTURE_ENCODING[\"RGBM16\"] = \"rgbm16\";\r\n    TEXTURE_ENCODING[\"RGBD\"] = \"rgbd\";\r\n    TEXTURE_ENCODING[\"GAMMA\"] = \"gamma\";\r\n})(TEXTURE_ENCODING = exports.TEXTURE_ENCODING || (exports.TEXTURE_ENCODING = {}));\r\nvar TONE_MAPPING;\r\n(function (TONE_MAPPING) {\r\n    TONE_MAPPING[\"NONE\"] = \"none\";\r\n    TONE_MAPPING[\"LINEAR\"] = \"linear\";\r\n    TONE_MAPPING[\"REINHARD\"] = \"reinhard\";\r\n    TONE_MAPPING[\"CINEON\"] = \"cineon\";\r\n    TONE_MAPPING[\"ACES_FILMIC\"] = \"aces_filmic\";\r\n})(TONE_MAPPING = exports.TONE_MAPPING || (exports.TONE_MAPPING = {}));\r\n/**\r\n * Modes used to indicate that a viewport is busy.\r\n */\r\nvar BUSY_MODE_DISPLAY;\r\n(function (BUSY_MODE_DISPLAY) {\r\n    /** The viewport will be blurred when a session is busy. */\r\n    BUSY_MODE_DISPLAY[\"BLUR\"] = \"blur\";\r\n    /** A spinner will be shown when a session is busy. */\r\n    BUSY_MODE_DISPLAY[\"SPINNER\"] = \"spinner\";\r\n    /** Nothing happens when a session is busy. */\r\n    BUSY_MODE_DISPLAY[\"NONE\"] = \"none\";\r\n})(BUSY_MODE_DISPLAY = exports.BUSY_MODE_DISPLAY || (exports.BUSY_MODE_DISPLAY = {}));\r\n;\r\n/**\r\n * Session settings to be used by a viewport.\r\n *\r\n * The {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend}\r\n * allows to persist settings of the viewer, individually for each model that it hosts. Persisting the settings\r\n * of the viewer requires permissions which are typically only granted to the owner of the model. Editing\r\n * of the settings typically happens on the model edit page of the ShapeDiver Platform.\r\n *\r\n * Whenever an instance of the viewer creates a session with a model, the settings are made available to the viewer.\r\n * It is possible to use multiple sessions with different models from a single instance of the viewer.\r\n * Therefore the viewer offers a choice on which settings to use.\r\n */\r\nvar SESSION_SETTINGS_MODE;\r\n(function (SESSION_SETTINGS_MODE) {\r\n    /** No settings of a session will be used for the viewport. */\r\n    SESSION_SETTINGS_MODE[\"NONE\"] = \"none\";\r\n    /**\r\n     * The settings of the very first session created will be used for the viewport.\r\n     */\r\n    SESSION_SETTINGS_MODE[\"FIRST\"] = \"first\";\r\n    /**\r\n     * Use this mode in case you want to assign a specific session identifier\r\n     * to the viewport, whose settings will be used.\r\n     */\r\n    SESSION_SETTINGS_MODE[\"MANUAL\"] = \"manual\";\r\n})(SESSION_SETTINGS_MODE = exports.SESSION_SETTINGS_MODE || (exports.SESSION_SETTINGS_MODE = {}));\r\n;\r\n/**\r\n * Types of flags used to influence the render loop.\r\n */\r\nvar FLAG_TYPE;\r\n(function (FLAG_TYPE) {\r\n    /** The flag for the busy mode. */\r\n    FLAG_TYPE[\"BUSY_MODE\"] = \"busy_mode\";\r\n    /** The flag to freeze the camera. */\r\n    FLAG_TYPE[\"CAMERA_FREEZE\"] = \"camera_freeze\";\r\n    /** The flag to continuously render the scene. */\r\n    FLAG_TYPE[\"CONTINUOUS_RENDERING\"] = \"continuous_rendering\";\r\n    /** The flag to continuously update the shadow map. */\r\n    FLAG_TYPE[\"CONTINUOUS_SHADOW_MAP_UPDATE\"] = \"continuous_shadow_map_update\";\r\n})(FLAG_TYPE = exports.FLAG_TYPE || (exports.FLAG_TYPE = {}));\r\nvar SPINNER_POSITIONING;\r\n(function (SPINNER_POSITIONING) {\r\n    SPINNER_POSITIONING[\"CENTER\"] = \"center\";\r\n    SPINNER_POSITIONING[\"TOP_LEFT\"] = \"top_left\";\r\n    SPINNER_POSITIONING[\"TOP_RIGHT\"] = \"top_right\";\r\n    SPINNER_POSITIONING[\"BOTTOM_LEFT\"] = \"bottom_left\";\r\n    SPINNER_POSITIONING[\"BOTTOM_RIGHT\"] = \"bottom_right\";\r\n})(SPINNER_POSITIONING = exports.SPINNER_POSITIONING || (exports.SPINNER_POSITIONING = {}));\r\n"},"sourceMaps":{"js":{"version":3,"file":"IRenderingEngine.js","sourceRoot":"","sources":["../src/IRenderingEngine.ts"],"names":[],"mappings":";;;AAKA,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,oCAAoC;IACpC,sCAAqB,CAAA;IACrB,8CAA8C;IAC9C,0CAAyB,CAAA;AAC3B,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;AAED,IAAY,eAOX;AAPD,WAAY,eAAe;IACzB,2CAA2C;IAC3C,sCAAmB,CAAA;IACnB,iEAAiE;IACjE,sCAAmB,CAAA;IACnB,kEAAkE;IAClE,oCAAiB,CAAA;AACnB,CAAC,EAPW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAO1B;AAED,IAAY,gBAQX;AARD,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,iCAAa,CAAA;IACb,iCAAa,CAAA;IACb,mCAAe,CAAA;IACf,qCAAiB,CAAA;IACjB,iCAAa,CAAA;IACb,mCAAe,CAAA;AACjB,CAAC,EARW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAQ3B;AAED,IAAY,YAMX;AAND,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,qCAAqB,CAAA;IACrB,iCAAiB,CAAA;IACjB,2CAA2B,CAAA;AAC7B,CAAC,EANW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAMvB;AAED;;GAEG;AACH,IAAY,iBAOX;AAPD,WAAY,iBAAiB;IAC3B,2DAA2D;IAC3D,kCAAa,CAAA;IACb,sDAAsD;IACtD,wCAAmB,CAAA;IACnB,8CAA8C;IAC9C,kCAAa,CAAA;AACf,CAAC,EAPW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAO5B;AAAA,CAAC;AAEF;;;;;;;;;;;GAWG;AACH,IAAY,qBAYX;AAZD,WAAY,qBAAqB;IAC/B,8DAA8D;IAC9D,sCAAa,CAAA;IACb;;OAEG;IACH,wCAAe,CAAA;IACf;;;OAGG;IACH,0CAAiB,CAAA;AACnB,CAAC,EAZW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAYhC;AAAA,CAAC;AAEF;;GAEG;AACH,IAAY,SASX;AATD,WAAY,SAAS;IACnB,kCAAkC;IAClC,oCAAuB,CAAA;IACvB,qCAAqC;IACrC,4CAA+B,CAAA;IAC/B,iDAAiD;IACjD,0DAA6C,CAAA;IAC7C,sDAAsD;IACtD,0EAA6D,CAAA;AAC/D,CAAC,EATW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QASpB;AAED,IAAY,mBAMX;AAND,WAAY,mBAAmB;IAC7B,wCAAiB,CAAA;IACjB,4CAAqB,CAAA;IACrB,8CAAuB,CAAA;IACvB,kDAA2B,CAAA;IAC3B,oDAA6B,CAAA;AAC/B,CAAC,EANW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAM9B","sourcesContent":["import { ITreeNode } from '@shapediver/viewer.shared.node-tree';\r\nimport { DomEventEngine, SettingsEngine } from '@shapediver/viewer.shared.services'\r\nimport { IGeometryData } from '@shapediver/viewer.shared.types';\r\nimport { vec2, vec3 } from 'gl-matrix';\r\n\r\nexport enum RENDERER_TYPE {\r\n  /** The standard rendering engine */\r\n  STANDARD = 'standard',\r\n  /** A basic version of the rendering engine */\r\n  ATTRIBUTES = 'attributes'\r\n}\r\n\r\nexport enum VISIBILITY_MODE {\r\n  /** The viewer shows the scene instantly */\r\n  INSTANT = 'instant',\r\n  /** The viewer shows the scene after the first session loading */\r\n  SESSION = 'session',\r\n  /** The viewer is shown once the 'show' property is set to true */\r\n  MANUAL = 'manual'\r\n}\r\n\r\nexport enum TEXTURE_ENCODING {\r\n  LINEAR = 'linear',\r\n  SRGB = 'srgb',\r\n  RGBE = 'rgbe',\r\n  RGBM7 = 'rgbm7',\r\n  RGBM16 = 'rgbm16',\r\n  RGBD = 'rgbd',\r\n  GAMMA = 'gamma'\r\n}\r\n\r\nexport enum TONE_MAPPING {\r\n  NONE = 'none',\r\n  LINEAR = 'linear',\r\n  REINHARD = 'reinhard',\r\n  CINEON = 'cineon',\r\n  ACES_FILMIC = 'aces_filmic'\r\n}\r\n\r\n/**\r\n * Modes used to indicate that a viewport is busy.\r\n */\r\nexport enum BUSY_MODE_DISPLAY {\r\n  /** The viewport will be blurred when a session is busy. */\r\n  BLUR = 'blur',\r\n  /** A spinner will be shown when a session is busy. */\r\n  SPINNER = 'spinner',\r\n  /** Nothing happens when a session is busy. */\r\n  NONE = 'none'\r\n};\r\n\r\n/**\r\n * Session settings to be used by a viewport.\r\n * \r\n * The {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend} \r\n * allows to persist settings of the viewer, individually for each model that it hosts. Persisting the settings\r\n * of the viewer requires permissions which are typically only granted to the owner of the model. Editing\r\n * of the settings typically happens on the model edit page of the ShapeDiver Platform.\r\n * \r\n * Whenever an instance of the viewer creates a session with a model, the settings are made available to the viewer.\r\n * It is possible to use multiple sessions with different models from a single instance of the viewer. \r\n * Therefore the viewer offers a choice on which settings to use.\r\n */\r\nexport enum SESSION_SETTINGS_MODE {\r\n  /** No settings of a session will be used for the viewport. */\r\n  NONE = 'none',\r\n  /** \r\n   * The settings of the very first session created will be used for the viewport. \r\n   */\r\n  FIRST = 'first',\r\n  /** \r\n   * Use this mode in case you want to assign a specific session identifier \r\n   * to the viewport, whose settings will be used.\r\n   */\r\n  MANUAL = 'manual',\r\n};\r\n\r\n/**\r\n * Types of flags used to influence the render loop.\r\n */\r\nexport enum FLAG_TYPE {\r\n  /** The flag for the busy mode. */\r\n  BUSY_MODE = 'busy_mode',\r\n  /** The flag to freeze the camera. */\r\n  CAMERA_FREEZE = 'camera_freeze',\r\n  /** The flag to continuously render the scene. */\r\n  CONTINUOUS_RENDERING = 'continuous_rendering',\r\n  /** The flag to continuously update the shadow map. */\r\n  CONTINUOUS_SHADOW_MAP_UPDATE = 'continuous_shadow_map_update',\r\n}\r\n\r\nexport enum SPINNER_POSITIONING {\r\n  CENTER = 'center',\r\n  TOP_LEFT = 'top_left',\r\n  TOP_RIGHT = 'top_right',\r\n  BOTTOM_LEFT = 'bottom_left',\r\n  BOTTOM_RIGHT = 'bottom_right',\r\n}\r\n\r\nexport interface IRenderingEngine {\r\n  // #region Properties (15)\r\n\r\n  automaticResizing: boolean;\r\n  canvas: HTMLCanvasElement;\r\n  closed: boolean;\r\n  domEventEngine: DomEventEngine;\r\n  id: string;\r\n  pointSize: number;\r\n  sessionSettingsId?: string;\r\n  sessionSettingsMode: SESSION_SETTINGS_MODE;\r\n  settingsEngine?: SettingsEngine;\r\n  show: boolean;\r\n  showStatistics: boolean;\r\n  type: RENDERER_TYPE;\r\n  visibility: VISIBILITY_MODE;\r\n\r\n  // #endregion Properties (15)\r\n\r\n  // #region Public Methods (7)\r\n\r\n  addFlag(flag: FLAG_TYPE): string;\r\n  convert3Dto2D(p: vec3): { container: vec2; client: vec2; page: vec2; hidden: boolean; };\r\n  getScreenshot(type?: string, encoderOptions?: number): string;\r\n  isMobileDeviceWithoutBrowserARSupport(): boolean;\r\n  mouseEventToRay(event: MouseEvent): { origin: vec3, direction: vec3 };\r\n  raytraceScene(origin: vec3, direction: vec3, root?: ITreeNode): { distance: number, node: ITreeNode, data?: IGeometryData; }[]\r\n  removeFlag(token: string): boolean;\r\n  reset(): void;\r\n  resize(width: number, height: number): void;\r\n  touchToRay(event: Touch): { origin: vec3, direction: vec3 };\r\n  touchEventToRay(event: TouchEvent): { origin: vec3, direction: vec3 };\r\n  update(id: string): void;\r\n  viewInAR(file: string, options?: { arScale?: 'auto' | 'fixed', arPlacement?: 'floor' | 'wall', xrEnvironment?: boolean }): Promise<void>;\r\n  viewableInAR(): boolean;\r\n\r\n  // #endregion Public Methods (7)\r\n}"]}},"error":null,"hash":"1b7a629c2d41fb4dbb9f008352392a20","cacheData":{"env":{}}}