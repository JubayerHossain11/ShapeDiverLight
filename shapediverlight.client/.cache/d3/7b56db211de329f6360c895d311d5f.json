{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/loaders/BufferViewLoader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\BufferViewLoader.js.map","includedInParent":true,"mtime":1706527153460},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\loaders\\BufferViewLoader.ts","includedInParent":true,"mtime":1706527153916},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706527153303}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferViewLoader = void 0;\r\nclass BufferViewLoader {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(_content, _bufferLoader) {\r\n        this._content = _content;\r\n        this._bufferLoader = _bufferLoader;\r\n        // #region Properties (1)\r\n        this._loaded = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getBufferView(bufferViewId) {\r\n        if (!this._content.bufferViews)\r\n            throw new Error('BufferViewLoader.load: BufferViews not available.');\r\n        if (!this._content.bufferViews[bufferViewId])\r\n            throw new Error('BufferViewLoader.load: BufferView not available.');\r\n        if (!this._loaded[bufferViewId])\r\n            throw new Error('BufferViewLoader.load: BufferView not loaded.');\r\n        return this._loaded[bufferViewId];\r\n    }\r\n    load() {\r\n        if (!this._content.bufferViews)\r\n            return;\r\n        for (let i = 0; i < this._content.bufferViews.length; i++) {\r\n            const bufferViewId = i;\r\n            if (!this._content.bufferViews[bufferViewId])\r\n                throw new Error('BufferViewLoader.load: BufferView not available.');\r\n            const bufferView = this._content.bufferViews[bufferViewId];\r\n            const byteLength = bufferView.byteLength || 0;\r\n            const byteOffset = bufferView.byteOffset || 0;\r\n            if (bufferView.buffer === undefined)\r\n                throw new Error('BufferViewLoader.load: BufferView has no buffer defined.');\r\n            const buffer = this._bufferLoader.getBuffer(bufferView.buffer);\r\n            const result = buffer.slice(byteOffset, byteOffset + byteLength);\r\n            this._loaded[bufferViewId] = result;\r\n        }\r\n    }\r\n}\r\nexports.BufferViewLoader = BufferViewLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"BufferViewLoader.js","sourceRoot":"","sources":["../../../src/gltfv2/loaders/BufferViewLoader.ts"],"names":[],"mappings":";;;AAIA,MAAa,gBAAgB;IAOzB,4BAA4B;IAE5B,2BAA2B;IAE3B,YAA6B,QAAkB,EAAmB,aAA2B;QAAhE,aAAQ,GAAR,QAAQ,CAAU;QAAmB,kBAAa,GAAb,aAAa,CAAc;QAV7F,yBAAyB;QAEjB,YAAO,GAEX,EAAE,CAAC;IAM0F,CAAC;IAElG,8BAA8B;IAE9B,6BAA6B;IAEtB,aAAa,CAAC,YAAoB;QACrC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW;YAAE,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAA;QACpG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;QACjH,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAA;QACjG,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW;YAAE,OAAO;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvD,MAAM,YAAY,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;YACjH,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAE3D,MAAM,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;YAC9C,MAAM,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;YAE9C,IAAI,UAAU,CAAC,MAAM,KAAK,SAAS;gBAAE,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAA;YAChH,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,MAAO,CAAC,CAAC;YAChE,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,UAAU,CAAC,CAAC;YAEjE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;SACvC;IACL,CAAC;CAGJ;AA3CD,4CA2CC","sourcesContent":["import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types'\r\n\r\nimport { BufferLoader } from './BufferLoader'\r\n\r\nexport class BufferViewLoader {\r\n    // #region Properties (1)\r\n\r\n    private _loaded: {\r\n        [key: string]: ArrayBuffer\r\n    } = {};\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _content: IGLTF_v2, private readonly _bufferLoader: BufferLoader) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public getBufferView(bufferViewId: number): ArrayBuffer {\r\n        if (!this._content.bufferViews) throw new Error('BufferViewLoader.load: BufferViews not available.')\r\n        if (!this._content.bufferViews[bufferViewId]) throw new Error('BufferViewLoader.load: BufferView not available.')\r\n        if (!this._loaded[bufferViewId]) throw new Error('BufferViewLoader.load: BufferView not loaded.')\r\n        return this._loaded[bufferViewId];\r\n    }\r\n\r\n    public load(): void {\r\n        if (!this._content.bufferViews) return;\r\n        for (let i = 0; i < this._content.bufferViews.length; i++) {\r\n            const bufferViewId = i;\r\n            if (!this._content.bufferViews[bufferViewId]) throw new Error('BufferViewLoader.load: BufferView not available.')\r\n            const bufferView = this._content.bufferViews[bufferViewId];\r\n\r\n            const byteLength = bufferView.byteLength || 0;\r\n            const byteOffset = bufferView.byteOffset || 0;\r\n\r\n            if (bufferView.buffer === undefined) throw new Error('BufferViewLoader.load: BufferView has no buffer defined.')\r\n            const buffer = this._bufferLoader.getBuffer(bufferView.buffer!);\r\n            const result = buffer.slice(byteOffset, byteOffset + byteLength);\r\n\r\n            this._loaded[bufferViewId] = result;\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n}\r\n"]}},"error":null,"hash":"41d7e1297ebd2590b7ba20bf8844af28","cacheData":{"env":{}}}