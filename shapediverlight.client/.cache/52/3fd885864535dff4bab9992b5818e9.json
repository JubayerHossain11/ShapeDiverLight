{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/three/postprocessing/SAOPass.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js.map","includedInParent":true,"mtime":1706527153673},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\three\\postprocessing\\SAOPass.js","includedInParent":true,"mtime":1706527152691},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":4,"column":24,"index":130},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"./Pass","loc":{"line":5,"column":23,"index":164},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\Pass.js"},{"name":"../shaders/SAOShader","loc":{"line":6,"column":28,"index":204},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\SAOShader.js"},{"name":"../shaders/DepthLimitedBlurShader","loc":{"line":8,"column":41,"index":351},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\DepthLimitedBlurShader.js"},{"name":"../shaders/CopyShader","loc":{"line":9,"column":29,"index":419},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\CopyShader.js"},{"name":"../shaders/UnpackDepthRGBAShader","loc":{"line":10,"column":40,"index":486},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SAOPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\UnpackDepthRGBAShader.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SAOPass = void 0;\r\nconst three_1 = require(\"three\");\r\nconst Pass_1 = require(\"./Pass\");\r\nconst SAOShader_1 = require(\"../shaders/SAOShader\");\r\nconst DepthLimitedBlurShader_1 = require(\"../shaders/DepthLimitedBlurShader\");\r\nconst DepthLimitedBlurShader_2 = require(\"../shaders/DepthLimitedBlurShader\");\r\nconst CopyShader_1 = require(\"../shaders/CopyShader\");\r\nconst UnpackDepthRGBAShader_1 = require(\"../shaders/UnpackDepthRGBAShader\");\r\n/**\r\n * SAO implementation inspired from bhouston previous SAO work\r\n */\r\nclass SAOPass extends Pass_1.Pass {\r\n    constructor(scene, camera, useDepthTexture, useNormals, resolution) {\r\n        super();\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.clear = true;\r\n        this.needsSwap = false;\r\n        this.supportsDepthTextureExtension = (useDepthTexture !== undefined) ? useDepthTexture : false;\r\n        this.supportsNormalTexture = (useNormals !== undefined) ? useNormals : false;\r\n        this.originalClearColor = new three_1.Color();\r\n        this._oldClearColor = new three_1.Color();\r\n        this.oldClearAlpha = 1;\r\n        this.params = {\r\n            output: 0,\r\n            saoIntensity: 0.18,\r\n            saoScale: 1,\r\n            saoKernelRadius: 100,\r\n            saoBlur: true,\r\n            saoBlurRadius: 8,\r\n            saoBlurStdDev: 4,\r\n            saoBlurDepthCutoff: 0.01\r\n        };\r\n        this.resolution = (resolution !== undefined) ? new three_1.Vector2(resolution.x, resolution.y) : new three_1.Vector2(256, 256);\r\n        this.saoRenderTarget = new three_1.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\r\n            minFilter: three_1.NearestFilter,\r\n            magFilter: three_1.NearestFilter,\r\n            format: three_1.RGBAFormat,\r\n            type: three_1.FloatType\r\n        });\r\n        this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\r\n        this.beautyRenderTarget = this.saoRenderTarget.clone();\r\n        this.normalRenderTarget = new three_1.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\r\n            minFilter: three_1.NearestFilter,\r\n            magFilter: three_1.NearestFilter,\r\n            format: three_1.RGBAFormat\r\n        });\r\n        this.depthRenderTarget = this.normalRenderTarget.clone();\r\n        let depthTexture;\r\n        if (this.supportsDepthTextureExtension) {\r\n            depthTexture = new three_1.DepthTexture();\r\n            depthTexture.type = three_1.UnsignedShortType;\r\n            this.beautyRenderTarget.depthTexture = depthTexture;\r\n            this.beautyRenderTarget.depthBuffer = true;\r\n        }\r\n        this.depthMaterial = new three_1.MeshDepthMaterial();\r\n        this.depthMaterial.depthPacking = three_1.RGBADepthPacking;\r\n        this.depthMaterial.blending = three_1.NoBlending;\r\n        this.depthMaterial.side = three_1.DoubleSide;\r\n        this.normalMaterial = new three_1.MeshNormalMaterial();\r\n        this.normalMaterial.blending = three_1.NoBlending;\r\n        this.normalMaterial.side = three_1.DoubleSide;\r\n        if (SAOShader_1.SAOShader === undefined) {\r\n            console.error('THREE.SAOPass relies on SAOShader');\r\n        }\r\n        this.saoMaterial = new three_1.ShaderMaterial({\r\n            defines: Object.assign({}, SAOShader_1.SAOShader.defines),\r\n            fragmentShader: SAOShader_1.SAOShader.fragmentShader,\r\n            vertexShader: SAOShader_1.SAOShader.vertexShader,\r\n            uniforms: three_1.UniformsUtils.clone(SAOShader_1.SAOShader.uniforms)\r\n        });\r\n        this.saoMaterial.extensions.derivatives = true;\r\n        this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\r\n        this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n        this.saoMaterial.uniforms['tDepth'].value = (this.supportsDepthTextureExtension) ? depthTexture : this.depthRenderTarget.texture;\r\n        this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\r\n        this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n        this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\r\n        this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\r\n        this.saoMaterial.blending = three_1.NoBlending;\r\n        if (DepthLimitedBlurShader_1.DepthLimitedBlurShader === undefined) {\r\n            console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\r\n        }\r\n        this.vBlurMaterial = new three_1.ShaderMaterial({\r\n            uniforms: three_1.UniformsUtils.clone(DepthLimitedBlurShader_1.DepthLimitedBlurShader.uniforms),\r\n            defines: Object.assign({}, DepthLimitedBlurShader_1.DepthLimitedBlurShader.defines),\r\n            vertexShader: DepthLimitedBlurShader_1.DepthLimitedBlurShader.vertexShader,\r\n            fragmentShader: DepthLimitedBlurShader_1.DepthLimitedBlurShader.fragmentShader\r\n        });\r\n        this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n        this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\r\n        this.vBlurMaterial.uniforms['tDepth'].value = (this.supportsDepthTextureExtension) ? depthTexture : this.depthRenderTarget.texture;\r\n        this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n        this.vBlurMaterial.blending = three_1.NoBlending;\r\n        this.hBlurMaterial = new three_1.ShaderMaterial({\r\n            uniforms: three_1.UniformsUtils.clone(DepthLimitedBlurShader_1.DepthLimitedBlurShader.uniforms),\r\n            defines: Object.assign({}, DepthLimitedBlurShader_1.DepthLimitedBlurShader.defines),\r\n            vertexShader: DepthLimitedBlurShader_1.DepthLimitedBlurShader.vertexShader,\r\n            fragmentShader: DepthLimitedBlurShader_1.DepthLimitedBlurShader.fragmentShader\r\n        });\r\n        this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n        this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\r\n        this.hBlurMaterial.uniforms['tDepth'].value = (this.supportsDepthTextureExtension) ? depthTexture : this.depthRenderTarget.texture;\r\n        this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n        this.hBlurMaterial.blending = three_1.NoBlending;\r\n        if (CopyShader_1.CopyShader === undefined) {\r\n            console.error('THREE.SAOPass relies on CopyShader');\r\n        }\r\n        this.materialCopy = new three_1.ShaderMaterial({\r\n            uniforms: three_1.UniformsUtils.clone(CopyShader_1.CopyShader.uniforms),\r\n            vertexShader: CopyShader_1.CopyShader.vertexShader,\r\n            fragmentShader: CopyShader_1.CopyShader.fragmentShader,\r\n            blending: three_1.NoBlending\r\n        });\r\n        this.materialCopy.transparent = true;\r\n        this.materialCopy.depthTest = false;\r\n        this.materialCopy.depthWrite = false;\r\n        this.materialCopy.blending = three_1.CustomBlending;\r\n        this.materialCopy.blendSrc = three_1.DstColorFactor;\r\n        this.materialCopy.blendDst = three_1.ZeroFactor;\r\n        this.materialCopy.blendEquation = three_1.AddEquation;\r\n        this.materialCopy.blendSrcAlpha = three_1.DstAlphaFactor;\r\n        this.materialCopy.blendDstAlpha = three_1.ZeroFactor;\r\n        this.materialCopy.blendEquationAlpha = three_1.AddEquation;\r\n        if (UnpackDepthRGBAShader_1.UnpackDepthRGBAShader === undefined) {\r\n            console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\r\n        }\r\n        this.depthCopy = new three_1.ShaderMaterial({\r\n            uniforms: three_1.UniformsUtils.clone(UnpackDepthRGBAShader_1.UnpackDepthRGBAShader.uniforms),\r\n            vertexShader: UnpackDepthRGBAShader_1.UnpackDepthRGBAShader.vertexShader,\r\n            fragmentShader: UnpackDepthRGBAShader_1.UnpackDepthRGBAShader.fragmentShader,\r\n            blending: three_1.NoBlending\r\n        });\r\n        this.fsQuad = new Pass_1.FullScreenQuad(null);\r\n    }\r\n    render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\r\n        // Rendering readBuffer first when rendering to screen\r\n        if (this.renderToScreen) {\r\n            this.materialCopy.blending = three_1.NoBlending;\r\n            this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\r\n            this.materialCopy.needsUpdate = true;\r\n            this.renderPass(renderer, this.materialCopy, null);\r\n        }\r\n        if (this.params.output === 1) {\r\n            return;\r\n        }\r\n        renderer.getClearColor(this._oldClearColor);\r\n        this.oldClearAlpha = renderer.getClearAlpha();\r\n        const oldAutoClear = renderer.autoClear;\r\n        renderer.autoClear = false;\r\n        renderer.setRenderTarget(this.depthRenderTarget);\r\n        renderer.clear();\r\n        this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\r\n        this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\r\n        this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\r\n        this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n        this.saoMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n        const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\r\n        this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\r\n        this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\r\n        this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n        this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n        this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n        this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n        this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\r\n        if ((this.prevStdDev !== this.params.saoBlurStdDev) || (this.prevNumSamples !== this.params.saoBlurRadius)) {\r\n            DepthLimitedBlurShader_2.BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new three_1.Vector2(0, 1));\r\n            DepthLimitedBlurShader_2.BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new three_1.Vector2(1, 0));\r\n            this.prevStdDev = this.params.saoBlurStdDev;\r\n            this.prevNumSamples = this.params.saoBlurRadius;\r\n        }\r\n        // Rendering scene to depth texture\r\n        renderer.setClearColor(0x000000);\r\n        renderer.setRenderTarget(this.beautyRenderTarget);\r\n        renderer.clear();\r\n        renderer.render(this.scene, this.camera);\r\n        // Re-render scene if depth texture extension is not supported\r\n        if (!this.supportsDepthTextureExtension) {\r\n            const background = this.scene.background;\r\n            this.scene.background = null;\r\n            // Clear rule : far clipping plane in both RGBA and Basic encoding\r\n            this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0xffffff, 1.0);\r\n            this.scene.background = background;\r\n        }\r\n        if (this.supportsNormalTexture) {\r\n            const background = this.scene.background;\r\n            this.scene.background = null;\r\n            // Clear rule : default normal is facing the camera\r\n            this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\r\n            this.scene.background = background;\r\n        }\r\n        // Rendering SAO texture\r\n        this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0);\r\n        // Blurring SAO texture\r\n        if (this.params.saoBlur) {\r\n            this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\r\n            this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\r\n        }\r\n        let outputMaterial = this.materialCopy;\r\n        // Setting up SAO rendering\r\n        if (this.params.output === 3) {\r\n            if (this.supportsDepthTextureExtension) {\r\n                this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\r\n                this.materialCopy.needsUpdate = true;\r\n            }\r\n            else {\r\n                this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\r\n                this.depthCopy.needsUpdate = true;\r\n                outputMaterial = this.depthCopy;\r\n            }\r\n        }\r\n        else if (this.params.output === 4) {\r\n            this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\r\n            this.materialCopy.needsUpdate = true;\r\n        }\r\n        else {\r\n            this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\r\n            this.materialCopy.needsUpdate = true;\r\n        }\r\n        // Blending depends on output, only want a CustomBlending when showing SAO\r\n        if (this.params.output === 0) {\r\n            outputMaterial.blending = three_1.CustomBlending;\r\n        }\r\n        else {\r\n            outputMaterial.blending = three_1.NoBlending;\r\n        }\r\n        // Rendering SAOPass result on top of previous pass\r\n        this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\r\n        renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\r\n        renderer.autoClear = oldAutoClear;\r\n    }\r\n    renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\r\n        // save original state\r\n        renderer.getClearColor(this.originalClearColor);\r\n        const originalClearAlpha = renderer.getClearAlpha();\r\n        const originalAutoClear = renderer.autoClear;\r\n        renderer.setRenderTarget(renderTarget);\r\n        // setup pass state\r\n        renderer.autoClear = false;\r\n        if ((clearColor !== undefined) && (clearColor !== null)) {\r\n            renderer.setClearColor(clearColor);\r\n            renderer.setClearAlpha(clearAlpha || 0.0);\r\n            renderer.clear();\r\n        }\r\n        this.fsQuad.material = passMaterial;\r\n        this.fsQuad.render(renderer);\r\n        // restore original state\r\n        renderer.autoClear = originalAutoClear;\r\n        renderer.setClearColor(this.originalClearColor);\r\n        renderer.setClearAlpha(originalClearAlpha);\r\n    }\r\n    renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\r\n        renderer.getClearColor(this.originalClearColor);\r\n        const originalClearAlpha = renderer.getClearAlpha();\r\n        const originalAutoClear = renderer.autoClear;\r\n        renderer.setRenderTarget(renderTarget);\r\n        renderer.autoClear = false;\r\n        clearColor = overrideMaterial.clearColor || clearColor;\r\n        clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n        if ((clearColor !== undefined) && (clearColor !== null)) {\r\n            renderer.setClearColor(clearColor);\r\n            renderer.setClearAlpha(clearAlpha || 0.0);\r\n            renderer.clear();\r\n        }\r\n        this.scene.overrideMaterial = overrideMaterial;\r\n        renderer.render(this.scene, this.camera);\r\n        this.scene.overrideMaterial = null;\r\n        // restore original state\r\n        renderer.autoClear = originalAutoClear;\r\n        renderer.setClearColor(this.originalClearColor);\r\n        renderer.setClearAlpha(originalClearAlpha);\r\n    }\r\n    setSize(width, height) {\r\n        this.beautyRenderTarget.setSize(width, height);\r\n        this.saoRenderTarget.setSize(width, height);\r\n        this.blurIntermediateRenderTarget.setSize(width, height);\r\n        this.normalRenderTarget.setSize(width, height);\r\n        this.depthRenderTarget.setSize(width, height);\r\n        this.saoMaterial.uniforms['size'].value.set(width, height);\r\n        this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\r\n        this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\r\n        this.saoMaterial.needsUpdate = true;\r\n        this.vBlurMaterial.uniforms['size'].value.set(width, height);\r\n        this.vBlurMaterial.needsUpdate = true;\r\n        this.hBlurMaterial.uniforms['size'].value.set(width, height);\r\n        this.hBlurMaterial.needsUpdate = true;\r\n    }\r\n}\r\nexports.SAOPass = SAOPass;\r\nSAOPass.OUTPUT = {\r\n    'Beauty': 1,\r\n    'Default': 0,\r\n    'SAO': 2,\r\n    'Depth': 3,\r\n    'Normal': 4\r\n};\r\n"},"sourceMaps":{"js":{"version":3,"file":"SAOPass.js","sourceRoot":"","sources":["../../../src/three/postprocessing/SAOPass.js"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tAddEquation,\r\n\tColor,\r\n\tCustomBlending,\r\n\tDepthTexture,\r\n\tDoubleSide,\r\n\tDstAlphaFactor,\r\n\tDstColorFactor,\r\n\tFloatType,\r\n\tLinearFilter,\r\n\tMeshDepthMaterial,\r\n\tMeshNormalMaterial,\r\n\tNearestFilter,\r\n\tNoBlending,\r\n\tRGBADepthPacking,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tUnsignedShortType,\r\n\tVector2,\r\n\tWebGLRenderTarget,\r\n\tZeroFactor\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass';\r\nimport { SAOShader } from '../shaders/SAOShader';\r\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader';\r\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader';\r\nimport { CopyShader } from '../shaders/CopyShader';\r\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader';\r\n\r\n/**\r\n * SAO implementation inspired from bhouston previous SAO work\r\n */\r\n\r\nclass SAOPass extends Pass {\r\n\r\n\tconstructor( scene, camera, useDepthTexture, useNormals, resolution ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.clear = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.supportsDepthTextureExtension = ( useDepthTexture !== undefined ) ? useDepthTexture : false;\r\n\t\tthis.supportsNormalTexture = ( useNormals !== undefined ) ? useNormals : false;\r\n\r\n\t\tthis.originalClearColor = new Color();\r\n\t\tthis._oldClearColor = new Color();\r\n\t\tthis.oldClearAlpha = 1;\r\n\r\n\t\tthis.params = {\r\n\t\t\toutput: 0,\r\n\t\t\tsaoIntensity: 0.18,\r\n\t\t\tsaoScale: 1,\r\n\t\t\tsaoKernelRadius: 100,\r\n\t\t\tsaoBlur: true,\r\n\t\t\tsaoBlurRadius: 8,\r\n\t\t\tsaoBlurStdDev: 4,\r\n\t\t\tsaoBlurDepthCutoff: 0.01\r\n\t\t};\r\n\r\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\t\tthis.saoRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: FloatType\r\n\t\t} );\r\n\t\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\r\n\t\tthis.beautyRenderTarget = this.saoRenderTarget.clone();\r\n\r\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\tformat: RGBAFormat\r\n\t\t} );\r\n\t\tthis.depthRenderTarget = this.normalRenderTarget.clone();\r\n\r\n        let depthTexture;\r\n\t\tif ( this.supportsDepthTextureExtension ) {\r\n\r\n\t\t\tdepthTexture = new DepthTexture();\r\n\t\t\tdepthTexture.type = UnsignedShortType;\r\n\r\n\t\t\tthis.beautyRenderTarget.depthTexture = depthTexture;\r\n\t\t\tthis.beautyRenderTarget.depthBuffer = true;\r\n\r\n\t\t}\r\n\r\n\t\tthis.depthMaterial = new MeshDepthMaterial();\r\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\r\n\t\tthis.depthMaterial.blending = NoBlending;\r\n\t\tthis.depthMaterial.side = DoubleSide;\r\n\r\n\t\tthis.normalMaterial = new MeshNormalMaterial();\r\n\t\tthis.normalMaterial.blending = NoBlending;\r\n\t\tthis.normalMaterial.side = DoubleSide;\r\n\r\n\t\tif ( SAOShader === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SAOPass relies on SAOShader' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.saoMaterial = new ShaderMaterial( {\r\n\t\t\tdefines: Object.assign( {}, SAOShader.defines ),\r\n\t\t\tfragmentShader: SAOShader.fragmentShader,\r\n\t\t\tvertexShader: SAOShader.vertexShader,\r\n\t\t\tuniforms: UniformsUtils.clone( SAOShader.uniforms )\r\n\t\t} );\r\n\t\tthis.saoMaterial.extensions.derivatives = true;\r\n\t\tthis.saoMaterial.defines[ 'NORMAL_TEXTURE' ] = this.supportsNormalTexture ? 1 : 0;\r\n\t\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\t\tthis.saoMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\t\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\r\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\r\n\t\tthis.saoMaterial.blending = NoBlending;\r\n\r\n\t\tif ( DepthLimitedBlurShader === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SAOPass relies on DepthLimitedBlurShader' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.vBlurMaterial = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\r\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\r\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\r\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\r\n\t\t} );\r\n\t\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\t\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\r\n\t\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\t\tthis.vBlurMaterial.blending = NoBlending;\r\n\r\n\t\tthis.hBlurMaterial = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\r\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\r\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\r\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\r\n\t\t} );\r\n\t\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\t\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\r\n\t\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\t\tthis.hBlurMaterial.blending = NoBlending;\r\n\r\n\t\tif ( CopyShader === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SAOPass relies on CopyShader' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.materialCopy = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\r\n\t\t\tvertexShader: CopyShader.vertexShader,\r\n\t\t\tfragmentShader: CopyShader.fragmentShader,\r\n\t\t\tblending: NoBlending\r\n\t\t} );\r\n\t\tthis.materialCopy.transparent = true;\r\n\t\tthis.materialCopy.depthTest = false;\r\n\t\tthis.materialCopy.depthWrite = false;\r\n\t\tthis.materialCopy.blending = CustomBlending;\r\n\t\tthis.materialCopy.blendSrc = DstColorFactor;\r\n\t\tthis.materialCopy.blendDst = ZeroFactor;\r\n\t\tthis.materialCopy.blendEquation = AddEquation;\r\n\t\tthis.materialCopy.blendSrcAlpha = DstAlphaFactor;\r\n\t\tthis.materialCopy.blendDstAlpha = ZeroFactor;\r\n\t\tthis.materialCopy.blendEquationAlpha = AddEquation;\r\n\r\n\t\tif ( UnpackDepthRGBAShader === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SAOPass relies on UnpackDepthRGBAShader' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.depthCopy = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.clone( UnpackDepthRGBAShader.uniforms ),\r\n\t\t\tvertexShader: UnpackDepthRGBAShader.vertexShader,\r\n\t\t\tfragmentShader: UnpackDepthRGBAShader.fragmentShader,\r\n\t\t\tblending: NoBlending\r\n\t\t} );\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( null );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\r\n\r\n\t\t// Rendering readBuffer first when rendering to screen\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.materialCopy.blending = NoBlending;\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\t\t\tthis.renderPass( renderer, this.materialCopy, null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.params.output === 1 ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.setRenderTarget( this.depthRenderTarget );\r\n\t\trenderer.clear();\r\n\r\n\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\r\n\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\r\n\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\r\n\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\r\n\t\tconst depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\r\n\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\r\n\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\r\n\r\n\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\r\n\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\r\n\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\r\n\r\n\t\t\tBlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 0, 1 ) );\r\n\t\t\tBlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 1, 0 ) );\r\n\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\r\n\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\r\n\r\n\t\t}\r\n\r\n\t\t// Rendering scene to depth texture\r\n\t\trenderer.setClearColor( 0x000000 );\r\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\r\n\t\trenderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// Re-render scene if depth texture extension is not supported\r\n\t\tif ( ! this.supportsDepthTextureExtension ) {\r\n\t\t\tconst background = this.scene.background;\r\n\t\t\tthis.scene.background = null;\r\n\t\t\t// Clear rule : far clipping plane in both RGBA and Basic encoding\r\n\t\t\tthis.renderOverride( renderer, this.depthMaterial, this.depthRenderTarget, 0xffffff, 1.0 );\r\n\t\t\tthis.scene.background = background;\r\n\t\t}\r\n\r\n\t\tif ( this.supportsNormalTexture ) {\r\n\t\t\tconst background = this.scene.background;\r\n\t\t\tthis.scene.background = null;\r\n\t\t\t// Clear rule : default normal is facing the camera\r\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\r\n\t\t\tthis.scene.background = background;\r\n\t\t}\r\n\r\n\t\t// Rendering SAO texture\r\n\t\tthis.renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\r\n\r\n\t\t// Blurring SAO texture\r\n\t\tif ( this.params.saoBlur ) {\r\n\r\n\t\t\tthis.renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\r\n\t\t\tthis.renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\tlet outputMaterial = this.materialCopy;\r\n\t\t// Setting up SAO rendering\r\n\t\tif ( this.params.output === 3 ) {\r\n\r\n\t\t\tif ( this.supportsDepthTextureExtension ) {\r\n\r\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.depthTexture;\r\n\t\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.depthCopy.uniforms[ 'tDiffuse' ].value = this.depthRenderTarget.texture;\r\n\t\t\t\tthis.depthCopy.needsUpdate = true;\r\n\t\t\t\toutputMaterial = this.depthCopy;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.params.output === 4 ) {\r\n\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t// Blending depends on output, only want a CustomBlending when showing SAO\r\n\t\tif ( this.params.output === 0 ) {\r\n\r\n\t\t\toutputMaterial.blending = CustomBlending;\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutputMaterial.blending = NoBlending;\r\n\r\n\t\t}\r\n\r\n\t\t// Rendering SAOPass result on top of previous pass\r\n\t\tthis.renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\t// save original state\r\n\t\trenderer.getClearColor( this.originalClearColor );\r\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t// setup pass state\r\n\t\trenderer.autoClear = false;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.material = passMaterial;\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t}\r\n\r\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\trenderer.getClearColor( this.originalClearColor );\r\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\r\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = overrideMaterial;\r\n\t\trenderer.render( this.scene, this.camera );\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.beautyRenderTarget.setSize( width, height );\r\n\t\tthis.saoRenderTarget.setSize( width, height );\r\n\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\r\n\t\tthis.normalRenderTarget.setSize( width, height );\r\n\t\tthis.depthRenderTarget.setSize( width, height );\r\n\r\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\r\n\t\tthis.saoMaterial.needsUpdate = true;\r\n\r\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.vBlurMaterial.needsUpdate = true;\r\n\r\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.hBlurMaterial.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSAOPass.OUTPUT = {\r\n\t'Beauty': 1,\r\n\t'Default': 0,\r\n\t'SAO': 2,\r\n\t'Depth': 3,\r\n\t'Normal': 4\r\n};\r\n\r\nexport { SAOPass };\r\n"]}},"error":null,"hash":"1460af6d39a4b2b5068bf6edd6c00776","cacheData":{"env":{}}}