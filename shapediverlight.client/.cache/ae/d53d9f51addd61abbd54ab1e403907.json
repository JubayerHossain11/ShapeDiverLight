{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/GLTFLoader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js.map","includedInParent":true,"mtime":1706542087189},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\GLTFLoader.ts","includedInParent":true,"mtime":1706542087347},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706542086828},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":13,"column":42,"index":867},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":14,"column":41,"index":949},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":15,"column":28,"index":1017},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":16,"column":38,"index":1070},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.camera-engine","loc":{"line":17,"column":56,"index":1163},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.light-engine","loc":{"line":18,"column":55,"index":1273},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\index.js"},{"name":"./loaders/BufferLoader","loc":{"line":19,"column":31,"index":1358},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\BufferLoader.js"},{"name":"./loaders/BufferViewLoader","loc":{"line":20,"column":35,"index":1421},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\BufferViewLoader.js"},{"name":"./loaders/AccessorLoader","loc":{"line":21,"column":33,"index":1486},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\AccessorLoader.js"},{"name":"./loaders/TextureLoader","loc":{"line":22,"column":32,"index":1548},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\TextureLoader.js"},{"name":"./loaders/MaterialLoader","loc":{"line":23,"column":33,"index":1610},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js"},{"name":"./loaders/GeometryLoader","loc":{"line":24,"column":33,"index":1673},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\GeometryLoader.js"},{"name":"./draco/draco_decoder.js","loc":{"line":43,"column":22,"index":2989},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\draco\\draco_decoder.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GLTFLoader = exports.GLTF_EXTENSIONS = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst BufferLoader_1 = require(\"./loaders/BufferLoader\");\r\nconst BufferViewLoader_1 = require(\"./loaders/BufferViewLoader\");\r\nconst AccessorLoader_1 = require(\"./loaders/AccessorLoader\");\r\nconst TextureLoader_1 = require(\"./loaders/TextureLoader\");\r\nconst MaterialLoader_1 = require(\"./loaders/MaterialLoader\");\r\nconst GeometryLoader_1 = require(\"./loaders/GeometryLoader\");\r\nvar GLTF_EXTENSIONS;\r\n(function (GLTF_EXTENSIONS) {\r\n    GLTF_EXTENSIONS[\"KHR_BINARY_GLTF\"] = \"KHR_binary_glTF\";\r\n    GLTF_EXTENSIONS[\"KHR_DRACO_MESH_COMPRESSION\"] = \"KHR_draco_mesh_compression\";\r\n    GLTF_EXTENSIONS[\"KHR_LIGHTS_PUNCTUAL\"] = \"KHR_lights_punctual\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_CLEARCOAT\"] = \"KHR_materials_clearcoat\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_IOR\"] = \"KHR_materials_ior\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_PBRSPECULARGLOSSINESS\"] = \"KHR_materials_pbrSpecularGlossiness\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_SHEEN\"] = \"KHR_materials_sheen\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_SPECULAR\"] = \"KHR_materials_specular\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_TRANSMISSION\"] = \"KHR_materials_transmission\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_UNLIT\"] = \"KHR_materials_unlit\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_VARIANTS\"] = \"KHR_materials_variants\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_VOLUME\"] = \"KHR_materials_volume\";\r\n    GLTF_EXTENSIONS[\"KHR_MESH_QUANTIZATION\"] = \"KHR_mesh_quantization\";\r\n    GLTF_EXTENSIONS[\"KHR_TEXTURE_TRANSFORM\"] = \"KHR_texture_transform\";\r\n    GLTF_EXTENSIONS[\"SHAPEDIVER_MATERIALS_PRESET\"] = \"SHAPEDIVER_materials_preset\";\r\n})(GLTF_EXTENSIONS = exports.GLTF_EXTENSIONS || (exports.GLTF_EXTENSIONS = {}));\r\nconst DRACO = require('./draco/draco_decoder.js');\r\nclass GLTFLoader {\r\n    constructor() {\r\n        // #region Properties (17)\r\n        this.BINARY_EXTENSION_HEADER_LENGTH = 20;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._globalTransformation = gl_matrix_1.mat4.fromValues(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1);\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._performanceEvaluator = viewer_shared_services_1.PerformanceEvaluator.instance;\r\n        this._progressUpdateLimit = 500;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._eventId = \"\";\r\n        this._nodes = {};\r\n        this._numberOfNodes = 0;\r\n        this._numberOfConvertedNodes = 0;\r\n        this._progressTimer = 0;\r\n        // #endregion Private Methods (7)\r\n    }\r\n    // #endregion Properties (17)\r\n    // #region Public Methods (2)\r\n    load(content, gltfBinary, gltfHeader, baseUri, taskEventId) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._eventId = taskEventId || this._uuidGenerator.create();\r\n            const eventStart = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 0, status: 'Starting glTF 2.0 loading.' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n            this._numberOfConvertedNodes = 0;\r\n            this._numberOfNodes = content.nodes ? content.nodes.length : 0;\r\n            this._progressTimer = performance.now();\r\n            this._baseUri = baseUri;\r\n            if (gltfBinary && gltfHeader)\r\n                this._body = gltfBinary.slice(this.BINARY_EXTENSION_HEADER_LENGTH + gltfHeader.contentLength + 8, gltfHeader.length);\r\n            this._content = content;\r\n            this.validateVersionAndExtensions();\r\n            const dracoModule = yield new DRACO();\r\n            this._bufferLoader = new BufferLoader_1.BufferLoader(this._content, this._body, this._baseUri);\r\n            yield this._bufferLoader.load();\r\n            this._bufferViewLoader = new BufferViewLoader_1.BufferViewLoader(this._content, this._bufferLoader);\r\n            this._bufferViewLoader.load();\r\n            this._accessorLoader = new AccessorLoader_1.AccessorLoader(this._content, this._bufferViewLoader);\r\n            this._accessorLoader.load();\r\n            this._textureLoader = new TextureLoader_1.TextureLoader(this._content, this._bufferViewLoader, this._baseUri);\r\n            yield this._textureLoader.load();\r\n            this._materialLoader = new MaterialLoader_1.MaterialLoader(this._content, this._textureLoader);\r\n            yield this._materialLoader.load();\r\n            this._geometryLoader = new GeometryLoader_1.GeometryLoader(this._content, this._accessorLoader, this._bufferViewLoader, this._materialLoader, dracoModule);\r\n            const eventProgressInit = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 0.1, status: 'Initial logic of glTF loading.' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventProgressInit);\r\n            const node = yield this.loadScene();\r\n            if (this._content.extensions && this._content.extensions[GLTF_EXTENSIONS.KHR_MATERIALS_VARIANTS]) {\r\n                const variants = this._content.extensions[GLTF_EXTENSIONS.KHR_MATERIALS_VARIANTS].variants;\r\n                for (let i = 0; i < variants.length; i++)\r\n                    this._geometryLoader.materialVariantsData.variants.push(variants[i].name);\r\n                this._geometryLoader.materialVariantsData.variantIndex = 0;\r\n                node.data.push(this._geometryLoader.materialVariantsData);\r\n            }\r\n            if (this._content.skins !== undefined && this._content.nodes !== undefined) {\r\n                for (let i = 0; i < ((_a = this._content.nodes) === null || _a === void 0 ? void 0 : _a.length); i++) {\r\n                    if (this._content.nodes[i].skin !== undefined) {\r\n                        const skinDef = this.loadSkin(this._content.nodes[i].skin);\r\n                        const skinNode = this._nodes[i];\r\n                        const bones = [];\r\n                        const boneInverses = [];\r\n                        for (let j = 0; j < skinDef.joints.length; j++) {\r\n                            this._nodes[skinDef.joints[j]].data.push(new viewer_shared_types_1.BoneData());\r\n                            bones.push(this._nodes[skinDef.joints[j]]);\r\n                            let mat = gl_matrix_1.mat4.create();\r\n                            if (skinDef.inverseBindMatrices !== undefined) {\r\n                                const matricesArray = skinDef.inverseBindMatrices.array;\r\n                                mat = gl_matrix_1.mat4.fromValues(matricesArray[j * 16 + 0], matricesArray[j * 16 + 1], matricesArray[j * 16 + 2], matricesArray[j * 16 + 3], matricesArray[j * 16 + 4], matricesArray[j * 16 + 5], matricesArray[j * 16 + 6], matricesArray[j * 16 + 7], matricesArray[j * 16 + 8], matricesArray[j * 16 + 9], matricesArray[j * 16 + 10], matricesArray[j * 16 + 11], matricesArray[j * 16 + 12], matricesArray[j * 16 + 13], matricesArray[j * 16 + 14], matricesArray[j * 16 + 15]);\r\n                            }\r\n                            boneInverses.push(mat);\r\n                        }\r\n                        skinNode.skinNode = true;\r\n                        skinNode.bones = bones;\r\n                        skinNode.boneInverses = boneInverses;\r\n                    }\r\n                }\r\n            }\r\n            if (this._content.animations)\r\n                for (let i = 0; i < ((_b = this._content.animations) === null || _b === void 0 ? void 0 : _b.length); i++)\r\n                    node.data.push(this.loadAnimation(i));\r\n            const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 1, status: 'GlTF loading complete.' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n            return node;\r\n        });\r\n    }\r\n    loadWithUrl(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._performanceEvaluator.startSection('gltfProcessing.' + url);\r\n            let axiosResponse;\r\n            this._performanceEvaluator.startSection('loadGltf.' + url);\r\n            axiosResponse = yield this._httpClient.get(url, {\r\n                responseType: 'arraybuffer'\r\n            });\r\n            this._performanceEvaluator.endSection('loadGltf.' + url);\r\n            let gltfContent, gltfBinary, gltfBaseUrl, gltfHeader;\r\n            const magic = new TextDecoder().decode(new Uint8Array(axiosResponse.data, 0, 4));\r\n            const isBinary = magic === 'glTF' || (axiosResponse.headers['content-type'] &&\r\n                (axiosResponse.headers['content-type'] === 'model/gltf-binary' ||\r\n                    axiosResponse.headers['content-type'] === 'application/octet-stream' ||\r\n                    axiosResponse.headers['content-type'] === 'model/gltf.binary'));\r\n            if (isBinary) {\r\n                gltfBinary = axiosResponse.data;\r\n                // create header data\r\n                const headerDataView = new DataView(gltfBinary, 0, this.BINARY_EXTENSION_HEADER_LENGTH);\r\n                gltfHeader = {\r\n                    magic: magic,\r\n                    version: headerDataView.getUint32(4, true),\r\n                    length: headerDataView.getUint32(8, true),\r\n                    contentLength: headerDataView.getUint32(12, true),\r\n                    contentFormat: headerDataView.getUint32(16, true)\r\n                };\r\n                if (gltfHeader.magic != 'glTF')\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('GLTFLoader.load: Invalid data: sdgTF magic wrong.');\r\n                // create content\r\n                const contentDataView = new DataView(gltfBinary, this.BINARY_EXTENSION_HEADER_LENGTH, gltfHeader.contentLength);\r\n                const contentDecoded = new TextDecoder().decode(contentDataView);\r\n                gltfContent = JSON.parse(contentDecoded);\r\n                // create body\r\n                this._body = gltfBinary.slice(this.BINARY_EXTENSION_HEADER_LENGTH + gltfHeader.contentLength + 8, gltfHeader.length);\r\n            }\r\n            else {\r\n                gltfContent = JSON.parse(new TextDecoder().decode(axiosResponse.data));\r\n                const removeLastDirectoryPartOf = (the_url) => {\r\n                    const dir_char = the_url.includes(\"/\") ? \"/\" : \"\\\\\";\r\n                    const the_arr = the_url.split(dir_char);\r\n                    the_arr.pop();\r\n                    return the_arr.join(dir_char);\r\n                };\r\n                gltfBaseUrl = removeLastDirectoryPartOf(url);\r\n                if (!gltfBaseUrl && window && window.location && window.location.href)\r\n                    gltfBaseUrl = removeLastDirectoryPartOf(window.location.href);\r\n            }\r\n            return yield this.load(gltfContent, gltfBinary, gltfHeader, gltfBaseUrl);\r\n        });\r\n    }\r\n    // #endregion Public Methods (2)\r\n    // #region Private Methods (7)\r\n    /**\r\n         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\r\n         * @param {number} animationIndex\r\n         * @return {Promise<AnimationClip>}\r\n         */\r\n    loadAnimation(animationId) {\r\n        if (!this._content.animations)\r\n            throw new Error('Animations not available.');\r\n        if (!this._content.animations[animationId])\r\n            throw new Error('Animations not available.');\r\n        const animationDef = this._content.animations[animationId];\r\n        const animationTracks = [];\r\n        let min = Infinity, max = -Infinity;\r\n        for (let i = 0; i < animationDef.channels.length; i++) {\r\n            const channel = animationDef.channels[i];\r\n            const sampler = animationDef.samplers[channel.sampler];\r\n            const target = channel.target;\r\n            const path = target.path;\r\n            const node = this._nodes[target.node];\r\n            if (node === undefined)\r\n                throw new Error('Animation node not available.');\r\n            const input = this._accessorLoader.getAccessor(sampler.input);\r\n            min = Math.min(min, input.min[0]);\r\n            max = Math.max(max, input.max[0]);\r\n            const output = this._accessorLoader.getAccessor(sampler.output);\r\n            let interpolation = sampler.interpolation;\r\n            if (interpolation === 'CUBICSPLINE') {\r\n                this._logger.warn('Animation with CUBICSPLINE interpolation is currently not supported. Assigning linear interpolation instead.');\r\n                interpolation = 'linear';\r\n            }\r\n            animationTracks.push({\r\n                node,\r\n                times: input.array,\r\n                values: output.array,\r\n                path: path,\r\n                interpolation: interpolation === null || interpolation === void 0 ? void 0 : interpolation.toLowerCase()\r\n            });\r\n        }\r\n        return new viewer_shared_types_1.AnimationData(animationDef.name || 'gltf_animation_' + animationId, animationTracks, min, max - min);\r\n    }\r\n    loadCamera(cameraId) {\r\n        if (!this._content.cameras)\r\n            throw new Error('Cameras not available.');\r\n        if (!this._content.cameras[cameraId])\r\n            throw new Error('Cameras not available.');\r\n        const cameraDef = this._content.cameras[cameraId];\r\n        const cameraNode = new viewer_shared_node_tree_1.TreeNode(cameraDef.name || 'camera_' + cameraId);\r\n        let cameraData;\r\n        if (cameraDef.type === 'perspective') {\r\n            const perspectiveCameraDef = cameraDef.perspective;\r\n            cameraData = new viewer_rendering_engine_camera_engine_1.PerspectiveCamera(cameraNode.id);\r\n            cameraNode.data.push(cameraData);\r\n            cameraData.fov = perspectiveCameraDef.yfov * (180 / Math.PI);\r\n            cameraData.aspect = perspectiveCameraDef.aspectRatio || 1;\r\n            cameraData.near = perspectiveCameraDef.znear || 1;\r\n            cameraData.far = perspectiveCameraDef.zfar || 2e6;\r\n        }\r\n        else {\r\n            const orthographicCameraDef = cameraDef.orthographic;\r\n            cameraData = new viewer_rendering_engine_camera_engine_1.OrthographicCamera(cameraNode.id);\r\n            cameraNode.data.push(cameraData);\r\n            cameraData.left = -orthographicCameraDef.xmag;\r\n            cameraData.right = orthographicCameraDef.xmag;\r\n            cameraData.top = -orthographicCameraDef.ymag;\r\n            cameraData.bottom = orthographicCameraDef.ymag;\r\n            cameraData.near = orthographicCameraDef.znear || 1;\r\n            cameraData.far = orthographicCameraDef.zfar || 2e6;\r\n        }\r\n        cameraData.useNodeData = true;\r\n        cameraData.node = cameraNode;\r\n        return cameraNode;\r\n    }\r\n    loadLights(lightId) {\r\n        if (!this._content.extensions || !this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || !this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights)\r\n            throw new Error(`Extension ${GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL} not available.`);\r\n        if (!this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights[lightId])\r\n            throw new Error('Light not available.');\r\n        const lightDef = this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights[lightId];\r\n        const lightNode = new viewer_shared_node_tree_1.TreeNode(lightDef.name || 'light_' + lightId);\r\n        let color = '#ffffffff';\r\n        if (lightDef.color !== undefined)\r\n            color = [lightDef.color[0] * 255, lightDef.color[1] * 255, lightDef.color[2] * 255];\r\n        const range = lightDef.range !== undefined ? lightDef.range : 0;\r\n        let lightData;\r\n        if (lightDef.type === 'directional') {\r\n            lightData = new viewer_rendering_engine_light_engine_1.DirectionalLight({ color });\r\n            lightNode.data.push(lightData);\r\n            const directionalLightData = lightData;\r\n            if (lightDef.intensity !== undefined)\r\n                directionalLightData.intensity = lightDef.intensity;\r\n        }\r\n        else if (lightDef.type === 'point') {\r\n            lightData = new viewer_rendering_engine_light_engine_1.PointLight({ color });\r\n            lightNode.data.push(lightData);\r\n            const pointLightData = lightData;\r\n            pointLightData.distance = range;\r\n            pointLightData.decay = 2;\r\n            if (lightDef.intensity !== undefined)\r\n                lightData.intensity = lightDef.intensity;\r\n            pointLightData.position = [0, 0, 0];\r\n        }\r\n        else if (lightDef.type === 'spot') {\r\n            lightData = new viewer_rendering_engine_light_engine_1.SpotLight({ color });\r\n            lightNode.data.push(lightData);\r\n            lightDef.spot = lightDef.spot || {};\r\n            lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\r\n            lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\r\n            const spotLightData = lightData;\r\n            spotLightData.distance = range;\r\n            spotLightData.angle = lightDef.spot.outerConeAngle;\r\n            spotLightData.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\r\n            spotLightData.decay = 2;\r\n            if (lightDef.intensity !== undefined)\r\n                lightData.intensity = lightDef.intensity;\r\n            spotLightData.position = [0, 0, 0];\r\n            spotLightData.target = [0, 0, -1];\r\n        }\r\n        else {\r\n            throw new Error('Unexpected light type: ' + lightDef.type);\r\n        }\r\n        lightData.useNodeData = true;\r\n        return lightNode;\r\n    }\r\n    loadNode(nodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.nodes)\r\n                throw new Error('Nodes not available.');\r\n            if (!this._content.nodes[nodeId])\r\n                throw new Error('Node not available.');\r\n            const node = this._content.nodes[nodeId];\r\n            const nodeDef = new viewer_shared_node_tree_1.TreeNode(node.name || 'node_' + nodeId);\r\n            this._nodes[nodeId] = nodeDef;\r\n            if (node.matrix) {\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix',\r\n                    matrix: gl_matrix_1.mat4.fromValues(node.matrix[0], node.matrix[1], node.matrix[2], node.matrix[3], node.matrix[4], node.matrix[5], node.matrix[6], node.matrix[7], node.matrix[8], node.matrix[9], node.matrix[10], node.matrix[11], node.matrix[12], node.matrix[13], node.matrix[14], node.matrix[15])\r\n                });\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_translation',\r\n                    matrix: gl_matrix_1.mat4.create()\r\n                });\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_rotation',\r\n                    matrix: gl_matrix_1.mat4.create()\r\n                });\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_scale',\r\n                    matrix: gl_matrix_1.mat4.create()\r\n                });\r\n            }\r\n            else if (node.translation || node.scale || node.rotation) {\r\n                const matT = node.translation ? gl_matrix_1.mat4.fromTranslation(gl_matrix_1.mat4.create(), gl_matrix_1.vec3.fromValues(node.translation[0], node.translation[1], node.translation[2])) : gl_matrix_1.mat4.create();\r\n                const matS = node.scale ? gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), gl_matrix_1.vec3.fromValues(node.scale[0], node.scale[1], node.scale[2])) : gl_matrix_1.mat4.create();\r\n                const matR = node.rotation ? gl_matrix_1.mat4.fromQuat(gl_matrix_1.mat4.create(), gl_matrix_1.vec4.fromValues(node.rotation[0], node.rotation[1], node.rotation[2], node.rotation[3])) : gl_matrix_1.mat4.create();\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_translation',\r\n                    matrix: matT\r\n                });\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_rotation',\r\n                    matrix: matR\r\n                });\r\n                nodeDef.addTransformation({\r\n                    id: 'gltf_matrix_scale',\r\n                    matrix: matS\r\n                });\r\n            }\r\n            if (node.mesh !== undefined)\r\n                nodeDef.addChild(this._geometryLoader.loadMesh(node.mesh, node.weights));\r\n            if (node.camera !== undefined)\r\n                nodeDef.addChild(this.loadCamera(node.camera));\r\n            if (node.extensions && node.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL])\r\n                nodeDef.addChild(this.loadLights(node.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\r\n            if (node.children) {\r\n                for (let i = 0, len = node.children.length; i < len; i++) {\r\n                    // got through all children\r\n                    nodeDef.addChild(yield this.loadNode(node.children[i]));\r\n                }\r\n            }\r\n            this._numberOfConvertedNodes++;\r\n            if (performance.now() - this._progressTimer > this._progressUpdateLimit) {\r\n                this._progressTimer = performance.now();\r\n                const eventProgress = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: (this._numberOfConvertedNodes / this._numberOfNodes) / 2 + 0.1, status: `GlTF conversion progress: ${this._numberOfConvertedNodes}/${this._numberOfNodes} nodes.` };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventProgress);\r\n                yield new Promise(resolve => setTimeout(resolve, 0));\r\n            }\r\n            return nodeDef;\r\n        });\r\n    }\r\n    loadScene() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.scenes)\r\n                throw new Error('Scenes not available.');\r\n            const sceneId = this._content.scene || 0;\r\n            if (!this._content.scenes[sceneId])\r\n                throw new Error('Scene not available.');\r\n            const scene = this._content.scenes[sceneId];\r\n            const sceneDef = new viewer_shared_node_tree_1.TreeNode(scene.name || 'scene_' + sceneId + '');\r\n            sceneDef.addTransformation({\r\n                id: this._uuidGenerator.create(),\r\n                matrix: this._globalTransformation\r\n            });\r\n            if (scene.nodes)\r\n                for (let i = 0, len = scene.nodes.length; i < len; i++)\r\n                    sceneDef.addChild(yield this.loadNode(scene.nodes[i]));\r\n            return sceneDef;\r\n        });\r\n    }\r\n    loadSkin(skinId) {\r\n        if (!this._content.skins)\r\n            throw new Error('Skins not available.');\r\n        if (!this._content.skins[skinId])\r\n            throw new Error('Skin not available.');\r\n        const skinDef = this._content.skins[skinId];\r\n        const skinEntry = {\r\n            joints: skinDef.joints,\r\n            inverseBindMatrices: null\r\n        };\r\n        if (skinDef.inverseBindMatrices === undefined) {\r\n            return skinEntry;\r\n        }\r\n        skinEntry.inverseBindMatrices = this._accessorLoader.getAccessor(skinDef.inverseBindMatrices);\r\n        return skinEntry;\r\n    }\r\n    validateVersionAndExtensions() {\r\n        if (!this._content.asset)\r\n            throw new Error('Asset not available.');\r\n        const asset = this._content.asset;\r\n        if (!asset.version)\r\n            throw new Error('Asset does not have a version.');\r\n        const version = asset.minVersion ? asset.minVersion : asset.version;\r\n        if (!version.startsWith('2'))\r\n            throw new Error('Version of the glTF not supported.');\r\n        if (this._content.extensionsUsed) {\r\n            const notSupported = [];\r\n            for (let i = 0; i < this._content.extensionsUsed.length; i++) {\r\n                if (!Object.values(GLTF_EXTENSIONS).includes(this._content.extensionsUsed[i]))\r\n                    notSupported.push(this._content.extensionsUsed[i]);\r\n            }\r\n            if (notSupported.length > 0) {\r\n                let message = 'Extension' + (notSupported.length === 1 ? ' ' : 's ');\r\n                notSupported.forEach((element, index) => {\r\n                    message += '\"' + element + '\"' + (index === notSupported.length - 1 ? '' : index === notSupported.length - 2 ? ' and ' : ', ');\r\n                });\r\n                message += (notSupported.length === 1 ? ' is' : ' are') + ' not supported, but used. Loading glTF regardless.';\r\n                this._logger.info('GLTFLoader.validateVersionAndExtensions: ' + message);\r\n            }\r\n        }\r\n        if (this._content.extensionsRequired) {\r\n            const notSupported = [];\r\n            for (let i = 0; i < this._content.extensionsRequired.length; i++) {\r\n                if (!Object.values(GLTF_EXTENSIONS).includes(this._content.extensionsRequired[i]))\r\n                    notSupported.push(this._content.extensionsRequired[i]);\r\n            }\r\n            if (notSupported.length > 0) {\r\n                let message = 'Extension' + (notSupported.length === 1 ? ' ' : 's ');\r\n                notSupported.forEach((element, index) => {\r\n                    message += '\"' + element + '\"' + (index === notSupported.length - 1 ? '' : index === notSupported.length - 2 ? ' and ' : ', ');\r\n                });\r\n                message += (notSupported.length === 1 ? ' is' : ' are') + ' not supported, but required. Aborting glTF loading.';\r\n                throw new Error(message);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.GLTFLoader = GLTFLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GLTFLoader.js","sourceRoot":"","sources":["../../src/gltfv2/GLTFLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITreeNode, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport {\r\n  Converter,\r\n  EventEngine,\r\n  EVENTTYPE,\r\n  HttpClient,\r\n  Logger,\r\n  PerformanceEvaluator,\r\n  ShapeDiverViewerDataProcessingError,\r\n  UuidGenerator,\r\n} from '@shapediver/viewer.shared.services'\r\nimport { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types'\r\nimport { mat4, vec3, vec4 } from 'gl-matrix'\r\nimport {\r\n  AnimationData,\r\n  IAnimationTrack,\r\n  AttributeData,\r\n  BoneData,\r\n  Color,\r\n  ITaskEvent,\r\n  TASK_TYPE\r\n} from '@shapediver/viewer.shared.types'\r\nimport { OrthographicCamera, PerspectiveCamera } from '@shapediver/viewer.rendering-engine.camera-engine'\r\nimport {\r\n  AbstractLight,\r\n  DirectionalLight,\r\n  PointLight,\r\n  SpotLight,\r\n} from '@shapediver/viewer.rendering-engine.light-engine'\r\n\r\nimport { BufferLoader } from './loaders/BufferLoader'\r\nimport { BufferViewLoader } from './loaders/BufferViewLoader'\r\nimport { AccessorLoader } from './loaders/AccessorLoader'\r\nimport { TextureLoader } from './loaders/TextureLoader'\r\nimport { MaterialLoader } from './loaders/MaterialLoader'\r\nimport { GeometryLoader } from './loaders/GeometryLoader'\r\n\r\nexport enum GLTF_EXTENSIONS {\r\n    KHR_BINARY_GLTF = 'KHR_binary_glTF',\r\n    KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression',\r\n    KHR_LIGHTS_PUNCTUAL = 'KHR_lights_punctual',\r\n    KHR_MATERIALS_CLEARCOAT = 'KHR_materials_clearcoat',\r\n    KHR_MATERIALS_IOR = 'KHR_materials_ior',\r\n    KHR_MATERIALS_PBRSPECULARGLOSSINESS = 'KHR_materials_pbrSpecularGlossiness',\r\n    KHR_MATERIALS_SHEEN = 'KHR_materials_sheen',\r\n    KHR_MATERIALS_SPECULAR = 'KHR_materials_specular',\r\n    KHR_MATERIALS_TRANSMISSION = 'KHR_materials_transmission',\r\n    KHR_MATERIALS_UNLIT = 'KHR_materials_unlit',\r\n    KHR_MATERIALS_VARIANTS = 'KHR_materials_variants',\r\n    KHR_MATERIALS_VOLUME = 'KHR_materials_volume',\r\n    KHR_MESH_QUANTIZATION = 'KHR_mesh_quantization',\r\n    KHR_TEXTURE_TRANSFORM = 'KHR_texture_transform',\r\n    SHAPEDIVER_MATERIALS_PRESET = 'SHAPEDIVER_materials_preset'\r\n}\r\n\r\nconst DRACO = require('./draco/draco_decoder.js');\r\n\r\nexport class GLTFLoader {\r\n    // #region Properties (17)\r\n\r\n    private readonly BINARY_EXTENSION_HEADER_LENGTH = 20;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _globalTransformation = mat4.fromValues(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1);\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _performanceEvaluator = PerformanceEvaluator.instance;\r\n    private readonly _progressUpdateLimit = 500;\r\n    private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n    private _accessorLoader!: AccessorLoader;\r\n    private _baseUri: string | undefined;\r\n    private _body: ArrayBuffer | undefined;\r\n    private _bufferLoader!: BufferLoader;\r\n    private _bufferViewLoader!: BufferViewLoader;\r\n    private _content!: IGLTF_v2;\r\n    private _eventId: string = \"\";\r\n    private _geometryLoader!: GeometryLoader;\r\n    private _materialLoader!: MaterialLoader;\r\n    private _nodes: {\r\n        [key: number]: ITreeNode\r\n    } = {};\r\n    private _numberOfNodes = 0;\r\n    private _numberOfConvertedNodes = 0;\r\n    private _textureLoader!: TextureLoader;\r\n    private _progressTimer = 0;\r\n\r\n    // #endregion Properties (17)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public async load(content: IGLTF_v2, gltfBinary?: ArrayBuffer, gltfHeader?: { magic: string, version: number, length: number, contentLength: number, contentFormat: number }, baseUri?: string, taskEventId?: string): Promise<ITreeNode> {\r\n        this._eventId = taskEventId || this._uuidGenerator.create();\r\n        const eventStart: ITaskEvent = { type: TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 0, status: 'Starting glTF 2.0 loading.' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n        \r\n        this._numberOfConvertedNodes = 0;\r\n        this._numberOfNodes = content.nodes ? content.nodes.length : 0;\r\n        this._progressTimer = performance.now();\r\n        \r\n        this._baseUri = baseUri;\r\n        if (gltfBinary && gltfHeader)\r\n            this._body = gltfBinary.slice(this.BINARY_EXTENSION_HEADER_LENGTH + gltfHeader.contentLength + 8, gltfHeader.length);\r\n        this._content = content;\r\n\r\n        this.validateVersionAndExtensions();\r\n\r\n        const dracoModule = await new DRACO();\r\n\r\n        this._bufferLoader = new BufferLoader(this._content, this._body, this._baseUri);\r\n        await this._bufferLoader.load();\r\n        this._bufferViewLoader = new BufferViewLoader(this._content, this._bufferLoader);\r\n        this._bufferViewLoader.load();\r\n        this._accessorLoader = new AccessorLoader(this._content, this._bufferViewLoader);\r\n        this._accessorLoader.load();\r\n        this._textureLoader = new TextureLoader(this._content, this._bufferViewLoader, this._baseUri);\r\n        await this._textureLoader.load();\r\n        this._materialLoader = new MaterialLoader(this._content, this._textureLoader);\r\n        await this._materialLoader.load();\r\n        this._geometryLoader = new GeometryLoader(this._content, this._accessorLoader, this._bufferViewLoader, this._materialLoader, dracoModule);\r\n\r\n        const eventProgressInit: ITaskEvent = { type: TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 0.1, status: 'Initial logic of glTF loading.' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventProgressInit);\r\n\r\n        const node = await this.loadScene();\r\n\r\n        if (this._content.extensions && this._content.extensions[GLTF_EXTENSIONS.KHR_MATERIALS_VARIANTS]) {\r\n            const variants = this._content.extensions[GLTF_EXTENSIONS.KHR_MATERIALS_VARIANTS].variants;\r\n            for (let i = 0; i < variants.length; i++)\r\n                this._geometryLoader.materialVariantsData.variants.push(variants[i].name);\r\n            this._geometryLoader.materialVariantsData.variantIndex = 0;\r\n            node.data.push(this._geometryLoader.materialVariantsData)\r\n        }\r\n\r\n        if (this._content.skins !== undefined && this._content.nodes !== undefined) {\r\n            for (let i = 0; i < this._content.nodes?.length; i++) {\r\n                if (this._content.nodes[i].skin !== undefined) {\r\n                    const skinDef = this.loadSkin(this._content.nodes[i].skin!);\r\n\r\n                    const skinNode = this._nodes[i];\r\n\r\n                    const bones: ITreeNode[] = [];\r\n                    const boneInverses: mat4[] = [];\r\n\r\n                    for (let j = 0; j < skinDef.joints.length; j++) {\r\n                        this._nodes[skinDef.joints[j]].data.push(new BoneData())\r\n                        bones.push(this._nodes[skinDef.joints[j]]);\r\n\r\n                        let mat = mat4.create();\r\n                        if (skinDef.inverseBindMatrices !== undefined) {\r\n                            const matricesArray = skinDef.inverseBindMatrices!.array;\r\n                            mat = mat4.fromValues(matricesArray[j * 16 + 0], matricesArray[j * 16 + 1], matricesArray[j * 16 + 2], matricesArray[j * 16 + 3],\r\n                                matricesArray[j * 16 + 4], matricesArray[j * 16 + 5], matricesArray[j * 16 + 6], matricesArray[j * 16 + 7],\r\n                                matricesArray[j * 16 + 8], matricesArray[j * 16 + 9], matricesArray[j * 16 + 10], matricesArray[j * 16 + 11],\r\n                                matricesArray[j * 16 + 12], matricesArray[j * 16 + 13], matricesArray[j * 16 + 14], matricesArray[j * 16 + 15]);\r\n                        }\r\n                        boneInverses.push(mat);\r\n                    }\r\n\r\n                    skinNode.skinNode = true;\r\n                    skinNode.bones = bones;\r\n                    skinNode.boneInverses = boneInverses;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._content.animations)\r\n            for (let i = 0; i < this._content.animations?.length; i++)\r\n                node.data.push(this.loadAnimation(i));\r\n\r\n        const eventEnd: ITaskEvent = { type: TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: 1, status: 'GlTF loading complete.' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n        return node;\r\n    }\r\n\r\n    public async loadWithUrl(url?: string | undefined): Promise<ITreeNode> {\r\n        this._performanceEvaluator.startSection('gltfProcessing.' + url);\r\n        let axiosResponse;\r\n\r\n        this._performanceEvaluator.startSection('loadGltf.' + url);\r\n        axiosResponse = await this._httpClient.get(url!, {\r\n            responseType: 'arraybuffer'\r\n        });\r\n        this._performanceEvaluator.endSection('loadGltf.' + url);\r\n\r\n        let gltfContent, gltfBinary, gltfBaseUrl, gltfHeader;\r\n\r\n        const magic = new TextDecoder().decode(new Uint8Array(axiosResponse.data, 0, 4));\r\n        const isBinary = magic === 'glTF' || (axiosResponse.headers['content-type'] &&\r\n            (axiosResponse.headers['content-type'] === 'model/gltf-binary' ||\r\n                axiosResponse.headers['content-type'] === 'application/octet-stream' ||\r\n                axiosResponse.headers['content-type'] === 'model/gltf.binary'));\r\n\r\n        if (isBinary) {\r\n            gltfBinary = axiosResponse.data;\r\n            // create header data\r\n            const headerDataView = new DataView(gltfBinary, 0, this.BINARY_EXTENSION_HEADER_LENGTH);\r\n            gltfHeader = {\r\n                magic: magic,\r\n                version: headerDataView.getUint32(4, true),\r\n                length: headerDataView.getUint32(8, true),\r\n                contentLength: headerDataView.getUint32(12, true),\r\n                contentFormat: headerDataView.getUint32(16, true)\r\n            }\r\n            if (gltfHeader.magic != 'glTF') \r\n                throw new ShapeDiverViewerDataProcessingError('GLTFLoader.load: Invalid data: sdgTF magic wrong.');\r\n\r\n            // create content\r\n            const contentDataView = new DataView(gltfBinary, this.BINARY_EXTENSION_HEADER_LENGTH, gltfHeader.contentLength);\r\n            const contentDecoded = new TextDecoder().decode(contentDataView);\r\n            gltfContent = JSON.parse(contentDecoded);\r\n\r\n            // create body\r\n            this._body = gltfBinary.slice(this.BINARY_EXTENSION_HEADER_LENGTH + gltfHeader.contentLength + 8, gltfHeader.length);\r\n        } else {\r\n            gltfContent = JSON.parse(new TextDecoder().decode(axiosResponse.data));\r\n\r\n            const removeLastDirectoryPartOf = (the_url: string): string => {\r\n                const dir_char = the_url.includes(\"/\") ? \"/\" : \"\\\\\";\r\n                const the_arr = the_url.split(dir_char);\r\n                the_arr.pop();\r\n                return the_arr.join(dir_char);\r\n            }\r\n\r\n            gltfBaseUrl = removeLastDirectoryPartOf(url!);\r\n            if (!gltfBaseUrl && window && window.location && window.location.href)\r\n                gltfBaseUrl = removeLastDirectoryPartOf(window.location.href);\r\n        }\r\n\r\n        return await this.load(gltfContent, gltfBinary, gltfHeader, gltfBaseUrl);\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n\r\n    // #region Private Methods (7)\r\n\r\n    /**\r\n         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\r\n         * @param {number} animationIndex\r\n         * @return {Promise<AnimationClip>}\r\n         */\r\n    private loadAnimation(animationId: number): AnimationData {\r\n        if (!this._content.animations) throw new Error('Animations not available.')\r\n        if (!this._content.animations[animationId]) throw new Error('Animations not available.')\r\n        const animationDef = this._content.animations[animationId];\r\n        const animationTracks: IAnimationTrack[] = [];\r\n        let min = Infinity, max = -Infinity;\r\n\r\n        for (let i = 0; i < animationDef.channels.length; i++) {\r\n            const channel = animationDef.channels[i];\r\n            const sampler = animationDef.samplers[channel.sampler];\r\n\r\n            const target = channel.target;\r\n            const path = target.path;\r\n            const node = this._nodes[target.node];\r\n            if (node === undefined) throw new Error('Animation node not available.');\r\n\r\n            const input = this._accessorLoader.getAccessor(sampler.input);\r\n            min = Math.min(min, input!.min[0]);\r\n            max = Math.max(max, input!.max[0]);\r\n            const output = this._accessorLoader.getAccessor(sampler.output);\r\n            let interpolation = sampler.interpolation;\r\n            if (interpolation === 'CUBICSPLINE') {\r\n                this._logger.warn('Animation with CUBICSPLINE interpolation is currently not supported. Assigning linear interpolation instead.')\r\n                interpolation = 'linear';\r\n            }\r\n\r\n            animationTracks.push({\r\n                node,\r\n                times: input!.array,\r\n                values: output!.array,\r\n                path: <'scale' | 'translation' | 'rotation'>path,\r\n                interpolation: <'linear' | 'step'>interpolation?.toLowerCase()\r\n            });\r\n        }\r\n\r\n        return new AnimationData(animationDef.name || 'gltf_animation_' + animationId, animationTracks, min, max - min);\r\n    }\r\n\r\n    private loadCamera(cameraId: number): ITreeNode {\r\n        if (!this._content.cameras) throw new Error('Cameras not available.')\r\n        if (!this._content.cameras[cameraId]) throw new Error('Cameras not available.')\r\n        const cameraDef = this._content.cameras[cameraId];\r\n        const cameraNode = new TreeNode(cameraDef.name || 'camera_' + cameraId);\r\n\r\n        let cameraData: PerspectiveCamera | OrthographicCamera;\r\n        if (cameraDef.type === 'perspective') {\r\n            const perspectiveCameraDef = cameraDef.perspective!;\r\n            cameraData = new PerspectiveCamera(cameraNode.id);\r\n            cameraNode.data.push(cameraData);\r\n            cameraData.fov = perspectiveCameraDef.yfov * (180 / Math.PI);\r\n            cameraData.aspect = perspectiveCameraDef.aspectRatio || 1;\r\n            cameraData.near = perspectiveCameraDef.znear || 1;\r\n            cameraData.far = perspectiveCameraDef.zfar || 2e6;\r\n        } else {\r\n            const orthographicCameraDef = cameraDef.orthographic!;\r\n            cameraData = new OrthographicCamera(cameraNode.id);\r\n            cameraNode.data.push(cameraData);\r\n            cameraData.left = -orthographicCameraDef.xmag;\r\n            cameraData.right = orthographicCameraDef.xmag;\r\n            cameraData.top = -orthographicCameraDef.ymag;\r\n            cameraData.bottom = orthographicCameraDef.ymag;\r\n            cameraData.near = orthographicCameraDef.znear || 1;\r\n            cameraData.far = orthographicCameraDef.zfar || 2e6;\r\n        }\r\n\r\n        cameraData.useNodeData = true;\r\n        cameraData.node = cameraNode;\r\n\r\n        return cameraNode;\r\n    }\r\n\r\n    private loadLights(lightId: number): ITreeNode {\r\n        if (!this._content.extensions || !this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || !this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights) throw new Error(`Extension ${GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL} not available.`);\r\n        if (!this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights[lightId]) throw new Error('Light not available.')\r\n        const lightDef = this._content.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights[lightId];\r\n        const lightNode = new TreeNode(lightDef.name || 'light_' + lightId);\r\n\r\n        let color: Color = '#ffffffff';\r\n        if (lightDef.color !== undefined)\r\n            color = [lightDef.color[0] * 255, lightDef.color[1] * 255, lightDef.color[2] * 255];\r\n\r\n        const range = lightDef.range !== undefined ? lightDef.range : 0;\r\n\r\n        let lightData: AbstractLight;\r\n        if (lightDef.type === 'directional') {\r\n            lightData = new DirectionalLight({ color });\r\n            lightNode.data.push(lightData);\r\n\r\n            const directionalLightData = <DirectionalLight>lightData;\r\n\r\n            if (lightDef.intensity !== undefined) directionalLightData.intensity = lightDef.intensity;\r\n        } else if (lightDef.type === 'point') {\r\n            lightData = new PointLight({ color });\r\n            lightNode.data.push(lightData);\r\n\r\n            const pointLightData = <PointLight>lightData;\r\n\r\n            pointLightData.distance = range;\r\n            pointLightData.decay = 2;\r\n            if (lightDef.intensity !== undefined) lightData.intensity = lightDef.intensity;\r\n\r\n            pointLightData.position = [0, 0, 0];\r\n        } else if (lightDef.type === 'spot') {\r\n            lightData = new SpotLight({ color });\r\n            lightNode.data.push(lightData);\r\n\r\n            lightDef.spot = lightDef.spot || {};\r\n            lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\r\n            lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\r\n\r\n            const spotLightData = <SpotLight>lightData;\r\n            spotLightData.distance = range;\r\n            spotLightData.angle = lightDef.spot.outerConeAngle;\r\n            spotLightData.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\r\n            spotLightData.decay = 2;\r\n            if (lightDef.intensity !== undefined) lightData.intensity = lightDef.intensity;\r\n\r\n            spotLightData.position = [0, 0, 0];\r\n            spotLightData.target = [0, 0, -1];\r\n        } else {\r\n            throw new Error('Unexpected light type: ' + lightDef.type);\r\n        }\r\n\r\n        lightData.useNodeData = true;\r\n        return lightNode;\r\n    }\r\n\r\n    private async loadNode(nodeId: number): Promise<ITreeNode> {\r\n        if (!this._content.nodes) throw new Error('Nodes not available.')\r\n        if (!this._content.nodes[nodeId]) throw new Error('Node not available.')\r\n        const node = this._content.nodes[nodeId];\r\n        const nodeDef = new TreeNode(node.name || 'node_' + nodeId);\r\n        this._nodes[nodeId] = nodeDef;\r\n\r\n        if (node.matrix) {\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix',\r\n                matrix: mat4.fromValues(node.matrix[0], node.matrix[1], node.matrix[2], node.matrix[3],\r\n                    node.matrix[4], node.matrix[5], node.matrix[6], node.matrix[7],\r\n                    node.matrix[8], node.matrix[9], node.matrix[10], node.matrix[11],\r\n                    node.matrix[12], node.matrix[13], node.matrix[14], node.matrix[15])\r\n            });\r\n\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_translation',\r\n                matrix: mat4.create()\r\n            });\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_rotation',\r\n                matrix: mat4.create()\r\n            });\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_scale',\r\n                matrix: mat4.create()\r\n            });\r\n        } else if (node.translation || node.scale || node.rotation) {\r\n            const matT = node.translation ? mat4.fromTranslation(mat4.create(), vec3.fromValues(node.translation[0], node.translation[1], node.translation[2])) : mat4.create();\r\n            const matS = node.scale ? mat4.fromScaling(mat4.create(), vec3.fromValues(node.scale[0], node.scale[1], node.scale[2])) : mat4.create();\r\n            const matR = node.rotation ? mat4.fromQuat(mat4.create(), vec4.fromValues(node.rotation[0], node.rotation[1], node.rotation[2], node.rotation[3])) : mat4.create();\r\n\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_translation',\r\n                matrix: matT\r\n            });\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_rotation',\r\n                matrix: matR\r\n            });\r\n            nodeDef.addTransformation({\r\n                id: 'gltf_matrix_scale',\r\n                matrix: matS\r\n            });\r\n        }\r\n\r\n        if (node.mesh !== undefined)\r\n            nodeDef.addChild(this._geometryLoader.loadMesh(node.mesh, node.weights));\r\n\r\n        if (node.camera !== undefined)\r\n            nodeDef.addChild(this.loadCamera(node.camera));\r\n\r\n        if (node.extensions && node.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL])\r\n            nodeDef.addChild(this.loadLights(node.extensions[GLTF_EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\r\n\r\n        if (node.children) {\r\n            for (let i = 0, len = node.children.length; i < len; i++) {\r\n                // got through all children\r\n                nodeDef.addChild(await this.loadNode(node.children[i]));\r\n            }\r\n        }\r\n\r\n        this._numberOfConvertedNodes++;\r\n        if(performance.now() - this._progressTimer > this._progressUpdateLimit) {\r\n            this._progressTimer = performance.now();\r\n            const eventProgress: ITaskEvent = { type: TASK_TYPE.GLTF_CONTENT_LOADING, id: this._eventId, progress: (this._numberOfConvertedNodes / this._numberOfNodes) / 2 + 0.1, status: `GlTF conversion progress: ${this._numberOfConvertedNodes}/${this._numberOfNodes} nodes.` };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventProgress);\r\n            await new Promise(resolve => setTimeout(resolve, 0));\r\n        }\r\n\r\n        return nodeDef;\r\n    }\r\n\r\n    private async loadScene(): Promise<ITreeNode> {\r\n        if (!this._content.scenes) throw new Error('Scenes not available.')\r\n        const sceneId = this._content.scene || 0;\r\n        if (!this._content.scenes[sceneId]) throw new Error('Scene not available.')\r\n        const scene = this._content.scenes[sceneId];\r\n        const sceneDef = new TreeNode(scene.name || 'scene_' + sceneId + '');\r\n        sceneDef.addTransformation({\r\n            id: this._uuidGenerator.create(),\r\n            matrix: this._globalTransformation\r\n        })\r\n        if (scene.nodes)\r\n            for (let i = 0, len = scene.nodes.length; i < len; i++)\r\n                sceneDef.addChild(await this.loadNode(scene.nodes[i]));\r\n        return sceneDef;\r\n    }\r\n\r\n    private loadSkin(skinId: number): {\r\n        joints: number[],\r\n        inverseBindMatrices: AttributeData | null\r\n    } {\r\n        if (!this._content.skins) throw new Error('Skins not available.')\r\n        if (!this._content.skins[skinId]) throw new Error('Skin not available.')\r\n        const skinDef = this._content.skins![skinId];\r\n\r\n        const skinEntry: {\r\n            joints: number[],\r\n            inverseBindMatrices: AttributeData | null\r\n        } = {\r\n            joints: skinDef.joints,\r\n            inverseBindMatrices: null\r\n        };\r\n\r\n        if (skinDef.inverseBindMatrices === undefined) {\r\n            return skinEntry;\r\n        }\r\n\r\n        skinEntry.inverseBindMatrices = this._accessorLoader.getAccessor(skinDef.inverseBindMatrices)\r\n        return skinEntry;\r\n    }\r\n\r\n    private validateVersionAndExtensions(): void {\r\n        if (!this._content.asset) throw new Error('Asset not available.')\r\n        const asset = this._content.asset;\r\n        if (!asset.version) throw new Error('Asset does not have a version.')\r\n        const version: string = asset.minVersion ? asset.minVersion : asset.version;\r\n        if (!version.startsWith('2')) throw new Error('Version of the glTF not supported.');\r\n\r\n        if (this._content.extensionsUsed) {\r\n            const notSupported = [];\r\n            for (let i = 0; i < this._content.extensionsUsed.length; i++) {\r\n                if (!(<string[]>Object.values(GLTF_EXTENSIONS)).includes(this._content.extensionsUsed[i]))\r\n                    notSupported.push(this._content.extensionsUsed[i]);\r\n            }\r\n            if (notSupported.length > 0) {\r\n                let message = 'Extension' + (notSupported.length === 1 ? ' ' : 's ');\r\n                notSupported.forEach((element, index) => {\r\n                    message += '\"' + element + '\"' + (index === notSupported.length - 1 ? '' : index === notSupported.length - 2 ? ' and ' : ', ');\r\n                });\r\n                message += (notSupported.length === 1 ? ' is' : ' are') + ' not supported, but used. Loading glTF regardless.';\r\n                this._logger.info('GLTFLoader.validateVersionAndExtensions: ' + message);\r\n            }\r\n        }\r\n\r\n        if (this._content.extensionsRequired) {\r\n            const notSupported = [];\r\n            for (let i = 0; i < this._content.extensionsRequired.length; i++) {\r\n                if (!(<string[]>Object.values(GLTF_EXTENSIONS)).includes(this._content.extensionsRequired[i]))\r\n                    notSupported.push(this._content.extensionsRequired[i]);\r\n            }\r\n            if (notSupported.length > 0) {\r\n                let message = 'Extension' + (notSupported.length === 1 ? ' ' : 's ');\r\n                notSupported.forEach((element, index) => {\r\n                    message += '\"' + element + '\"' + (index === notSupported.length - 1 ? '' : index === notSupported.length - 2 ? ' and ' : ', ');\r\n                });\r\n                message += (notSupported.length === 1 ? ' is' : ' are') + ' not supported, but required. Aborting glTF loading.';\r\n                throw new Error(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Private Methods (7)\r\n}"]}},"error":null,"hash":"297d36293503562d4fa024898a76cc2d","cacheData":{"env":{}}}