{"id":"node_modules/@shapediver/viewer/dist/implementation/viewport/lights/LightSceneApi.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js.map","includedInParent":true,"mtime":1706527154093},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\src\\implementation\\viewport\\lights\\LightSceneApi.ts","includedInParent":true,"mtime":1706527154785},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\package.json","includedInParent":true,"mtime":1706527153686},{"name":"@shapediver/viewer.rendering-engine.light-engine","loc":{"line":16,"column":55,"index":1394},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\index.js"},{"name":"./types/AmbientLightApi","loc":{"line":17,"column":34,"index":1482},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\types\\AmbientLightApi.js"},{"name":"./types/DirectionalLightApi","loc":{"line":18,"column":38,"index":1549},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\types\\DirectionalLightApi.js"},{"name":"./types/HemisphereLightApi","loc":{"line":19,"column":37,"index":1619},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\types\\HemisphereLightApi.js"},{"name":"./types/PointLightApi","loc":{"line":20,"column":32,"index":1683},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\types\\PointLightApi.js"},{"name":"./types/SpotLightApi","loc":{"line":21,"column":31,"index":1741},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\types\\SpotLightApi.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":22,"column":41,"index":1808},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _LightSceneApi_lightScene, _LightSceneApi_lights, _LightSceneApi_inputValidator, _LightSceneApi_logger, _LightSceneApi_viewportApi;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LightSceneApi = void 0;\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst AmbientLightApi_1 = require(\"./types/AmbientLightApi\");\r\nconst DirectionalLightApi_1 = require(\"./types/DirectionalLightApi\");\r\nconst HemisphereLightApi_1 = require(\"./types/HemisphereLightApi\");\r\nconst PointLightApi_1 = require(\"./types/PointLightApi\");\r\nconst SpotLightApi_1 = require(\"./types/SpotLightApi\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nclass LightSceneApi {\r\n    // #endregion Properties (15)\r\n    // #region Constructors (1)\r\n    constructor(viewportApi, lightScene) {\r\n        // #region Properties (15)\r\n        _LightSceneApi_lightScene.set(this, void 0);\r\n        _LightSceneApi_lights.set(this, {});\r\n        _LightSceneApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);\r\n        _LightSceneApi_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _LightSceneApi_viewportApi.set(this, void 0);\r\n        __classPrivateFieldSet(this, _LightSceneApi_viewportApi, viewportApi, \"f\");\r\n        __classPrivateFieldSet(this, _LightSceneApi_lightScene, lightScene, \"f\");\r\n        // Whenever a light is added or removed from the light scene, this update is called.\r\n        __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").update = () => {\r\n            for (let l in __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights) {\r\n                if (!__classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l]) {\r\n                    switch (__classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l].type) {\r\n                        case viewer_rendering_engine_light_engine_1.LIGHT_TYPE.AMBIENT:\r\n                            __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l] = new AmbientLightApi_1.AmbientLightApi(__classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\"), __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]);\r\n                            break;\r\n                        case viewer_rendering_engine_light_engine_1.LIGHT_TYPE.DIRECTIONAL:\r\n                            __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l] = new DirectionalLightApi_1.DirectionalLightApi(__classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\"), __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]);\r\n                            break;\r\n                        case viewer_rendering_engine_light_engine_1.LIGHT_TYPE.HEMISPHERE:\r\n                            __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l] = new HemisphereLightApi_1.HemisphereLightApi(__classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\"), __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]);\r\n                            break;\r\n                        case viewer_rendering_engine_light_engine_1.LIGHT_TYPE.POINT:\r\n                            __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l] = new PointLightApi_1.PointLightApi(__classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\"), __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]);\r\n                            break;\r\n                        case viewer_rendering_engine_light_engine_1.LIGHT_TYPE.SPOT:\r\n                            __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l] = new SpotLightApi_1.SpotLightApi(__classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\"), __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            for (let l in __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")) {\r\n                if (!__classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").lights[l]) {\r\n                    delete __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[l];\r\n                }\r\n            }\r\n        };\r\n        // We call it once in the beginning to get the current state.\r\n        __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").update();\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (8)\r\n    get id() {\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").id;\r\n    }\r\n    get lights() {\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\");\r\n    }\r\n    get name() {\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").name;\r\n    }\r\n    set name(value) {\r\n        const scope = 'name';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, value, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").name = value;\r\n        __classPrivateFieldGet(this, _LightSceneApi_logger, \"f\").debug(`LightSceneApi.${scope}: ${scope} was set to: ${value}`);\r\n    }\r\n    get node() {\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").node;\r\n    }\r\n    // #endregion Public Accessors (8)\r\n    // #region Public Methods (6)\r\n    addAmbientLight(properties) {\r\n        const scope = 'addAmbientLight';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").addAmbientLight(properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[light.id];\r\n    }\r\n    addDirectionalLight(properties) {\r\n        const scope = 'addDirectionalLight';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.direction, 'vec3', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.castShadow, 'boolean', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.shadowMapResolution, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.shadowMapBias, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").addDirectionalLight(properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[light.id];\r\n    }\r\n    addHemisphereLight(properties) {\r\n        const scope = 'addHemisphereLight';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.groundColor, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").addHemisphereLight(properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[light.id];\r\n    }\r\n    addPointLight(properties) {\r\n        const scope = 'addPointLight';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.position, 'vec3', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.distance, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.decay, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").addPointLight(properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[light.id];\r\n    }\r\n    addSpotLight(properties) {\r\n        const scope = 'addSpotLight';\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.position, 'vec3', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.target, 'vec3', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.distance, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.decay, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.angle, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.penumbra, 'number', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        __classPrivateFieldGet(this, _LightSceneApi_inputValidator, \"f\").validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").addSpotLight(properties);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return __classPrivateFieldGet(this, _LightSceneApi_lights, \"f\")[light.id];\r\n    }\r\n    removeLight(id) {\r\n        const check = __classPrivateFieldGet(this, _LightSceneApi_lightScene, \"f\").removeLight(id);\r\n        __classPrivateFieldGet(this, _LightSceneApi_viewportApi, \"f\").update();\r\n        return check;\r\n    }\r\n}\r\nexports.LightSceneApi = LightSceneApi;\r\n_LightSceneApi_lightScene = new WeakMap(), _LightSceneApi_lights = new WeakMap(), _LightSceneApi_inputValidator = new WeakMap(), _LightSceneApi_logger = new WeakMap(), _LightSceneApi_viewportApi = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"LightSceneApi.js","sourceRoot":"","sources":["../../../../src/implementation/viewport/lights/LightSceneApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { vec3 } from \"gl-matrix\";\r\nimport { IAmbientLight, IDirectionalLight, IHemisphereLight, ILightScene, IPointLight, ISpotLight, LIGHT_TYPE } from \"@shapediver/viewer.rendering-engine.light-engine\";\r\nimport { AmbientLightApi } from \"./types/AmbientLightApi\";\r\nimport { DirectionalLightApi } from \"./types/DirectionalLightApi\";\r\nimport { HemisphereLightApi } from \"./types/HemisphereLightApi\";\r\nimport { PointLightApi } from \"./types/PointLightApi\";\r\nimport { SpotLightApi } from \"./types/SpotLightApi\";\r\nimport { ILightApi } from \"../../../interfaces/viewport/lights/ILightApi\";\r\nimport { IAmbientLightApi } from \"../../../interfaces/viewport/lights/types/IAmbientLightApi\";\r\nimport { ITreeNode } from \"@shapediver/viewer.shared.node-tree\";\r\nimport { ISpotLightApi } from \"../../../interfaces/viewport/lights/types/ISpotLightApi\";\r\nimport { IPointLightApi } from \"../../../interfaces/viewport/lights/types/IPointLightApi\";\r\nimport { IHemisphereLightApi } from \"../../../interfaces/viewport/lights/types/IHemisphereLightApi\";\r\nimport { IDirectionalLightApi } from \"../../../interfaces/viewport/lights/types/IDirectionalLightApi\";\r\nimport { InputValidator, Logger } from \"@shapediver/viewer.shared.services\";\r\nimport { ILightSceneApi } from \"../../../interfaces/viewport/lights/ILightSceneApi\";\r\nimport { IViewportApi } from \"../../../interfaces/viewport/IViewportApi\";\r\nimport { Color } from \"@shapediver/viewer.shared.types\";\r\n\r\nexport class LightSceneApi implements ILightSceneApi {\r\n    // #region Properties (15)\r\n\r\n    readonly #lightScene: ILightScene;\r\n    readonly #lights: { [key: string]: ILightApi; } = {};\r\n    readonly #inputValidator: InputValidator = InputValidator.instance;\r\n    readonly #logger: Logger = Logger.instance;\r\n    readonly #viewportApi: IViewportApi;\r\n\r\n    // #endregion Properties (15)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(viewportApi: IViewportApi, lightScene: ILightScene) {\r\n        this.#viewportApi = viewportApi;\r\n        this.#lightScene = lightScene;\r\n\r\n        // Whenever a light is added or removed from the light scene, this update is called.\r\n        this.#lightScene.update = () => {\r\n            for (let l in this.#lightScene.lights) {\r\n                if (!this.#lights[l]) {\r\n                    switch (this.#lightScene.lights[l].type) {\r\n                        case LIGHT_TYPE.AMBIENT:\r\n                            this.#lights[l] = new AmbientLightApi(this.#viewportApi, <IAmbientLight>this.#lightScene.lights[l]);\r\n                            break;\r\n                        case LIGHT_TYPE.DIRECTIONAL:\r\n                            this.#lights[l] = new DirectionalLightApi(this.#viewportApi, <IDirectionalLight>this.#lightScene.lights[l]);\r\n                            break;\r\n                        case LIGHT_TYPE.HEMISPHERE:\r\n                            this.#lights[l] = new HemisphereLightApi(this.#viewportApi, <IHemisphereLight>this.#lightScene.lights[l]);\r\n                            break;\r\n                        case LIGHT_TYPE.POINT:\r\n                            this.#lights[l] = new PointLightApi(this.#viewportApi, <IPointLight>this.#lightScene.lights[l]);\r\n                            break;\r\n                        case LIGHT_TYPE.SPOT:\r\n                            this.#lights[l] = new SpotLightApi(this.#viewportApi, <ISpotLight>this.#lightScene.lights[l]);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let l in this.#lights) {\r\n                if (!this.#lightScene.lights[l]) {\r\n                    delete this.#lights[l];\r\n                }\r\n            }\r\n        }\r\n\r\n        // We call it once in the beginning to get the current state.\r\n        this.#lightScene.update();\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n\r\n    // #region Public Accessors (8)\r\n\r\n    public get id(): string {\r\n        return this.#lightScene.id;\r\n    }\r\n\r\n    public get lights(): { [key: string]: ILightApi; } {\r\n        return this.#lights;\r\n    }\r\n\r\n    public get name(): string | undefined {\r\n        return this.#lightScene.name;\r\n    }\r\n\r\n    public set name(value: string | undefined) {\r\n        const scope = 'name';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, value, 'string', false);\r\n        this.#lightScene.name = value;\r\n        this.#logger.debug(`LightSceneApi.${scope}: ${scope} was set to: ${value}`);\r\n    }\r\n\r\n    public get node(): ITreeNode {\r\n        return this.#lightScene.node;\r\n    }\r\n\r\n    // #endregion Public Accessors (8)\r\n\r\n    // #region Public Methods (6)\r\n\r\n    public addAmbientLight(properties: { color?: Color | undefined; intensity?: number | undefined; id?: string | undefined; name?: string | undefined; }): IAmbientLightApi {\r\n        const scope = 'addAmbientLight';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = this.#lightScene.addAmbientLight(properties);\r\n        this.#viewportApi.update();\r\n        return <IAmbientLightApi>this.#lights[light.id];\r\n    }\r\n\r\n    public addDirectionalLight(properties: { color?: Color | undefined; intensity?: number | undefined; direction?: vec3 | undefined; castShadow?: boolean | undefined; shadowMapResolution?: number | undefined; shadowMapBias?: number | undefined; id?: string | undefined; name?: string | undefined; }): IDirectionalLightApi {\r\n        const scope = 'addDirectionalLight';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.direction, 'vec3', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.castShadow, 'boolean', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.shadowMapResolution, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.shadowMapBias, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = this.#lightScene.addDirectionalLight(properties);\r\n        this.#viewportApi.update();\r\n        return <IDirectionalLightApi>this.#lights[light.id];\r\n    }\r\n\r\n    public addHemisphereLight(properties: { color?: Color | undefined; intensity?: number | undefined; groundColor?: Color | undefined; id?: string | undefined; name?: string | undefined; }): IHemisphereLightApi {\r\n        const scope = 'addHemisphereLight';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.groundColor, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = this.#lightScene.addHemisphereLight(properties);\r\n        this.#viewportApi.update();\r\n        return <IHemisphereLightApi>this.#lights[light.id];\r\n    }\r\n\r\n    public addPointLight(properties: { color?: Color | undefined; intensity?: number | undefined; position?: vec3 | undefined; distance?: number | undefined; decay?: number | undefined; id?: string | undefined; name?: string | undefined; }): IPointLightApi {\r\n        const scope = 'addPointLight';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.position, 'vec3', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.distance, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.decay, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = this.#lightScene.addPointLight(properties);\r\n        this.#viewportApi.update();\r\n        return <IPointLightApi>this.#lights[light.id];\r\n    }\r\n\r\n    public addSpotLight(properties: { color?: Color | undefined; intensity?: number | undefined; position?: vec3 | undefined; target?: vec3 | undefined; distance?: number | undefined; decay?: number | undefined; angle?: number | undefined; penumbra?: number | undefined; id?: string | undefined; name?: string | undefined; }): ISpotLightApi {\r\n        const scope = 'addSpotLight';\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.color, 'color', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.intensity, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.position, 'vec3', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.target, 'vec3', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.distance, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.decay, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.angle, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.penumbra, 'number', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.id, 'string', false);\r\n        this.#inputValidator.validateAndError(`LightSceneApi.${scope}`, prop.name, 'string', false);\r\n        const light = this.#lightScene.addSpotLight(properties);\r\n        this.#viewportApi.update();\r\n        return <ISpotLightApi>this.#lights[light.id];\r\n    }\r\n\r\n    public removeLight(id: string): boolean {\r\n        const check = this.#lightScene.removeLight(id);\r\n        this.#viewportApi.update();\r\n        return check;\r\n    }\r\n\r\n    // #endregion Public Methods (6)\r\n}"]}},"error":null,"hash":"4b1b1093c0a86f035ae81b31d3da38ac","cacheData":{"env":{}}}