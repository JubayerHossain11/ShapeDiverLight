{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/controls/orthographic/CameraControlsLogic.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\orthographic\\CameraControlsLogic.js.map","includedInParent":true,"mtime":1706527151638},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\controls\\orthographic\\CameraControlsLogic.ts","includedInParent":true,"mtime":1706527152870},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706527151358},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":146},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\orthographic\\CameraControlsLogic.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraControlsLogic = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass CameraControlsLogic {\r\n    // #endregion Properties (16)\r\n    // #region Constructors (1)\r\n    constructor(_controls) {\r\n        this._controls = _controls;\r\n        // #region Properties (16)\r\n        this._adjustedSettings = {\r\n            damping: () => this._controls.damping * this._settingsAdjustments.damping,\r\n            movementSmoothness: () => this._controls.movementSmoothness * this._settingsAdjustments.movementSmoothness,\r\n            panSpeed: () => this._controls.panSpeed * this._settingsAdjustments.panSpeed,\r\n            zoomSpeed: () => this._controls.zoomSpeed * this._settingsAdjustments.zoomSpeed,\r\n        };\r\n        this._damping = {\r\n            rotation: {\r\n                time: 0,\r\n                duration: 0,\r\n                theta: 0,\r\n                phi: 0\r\n            },\r\n            zoom: {\r\n                time: 0,\r\n                duration: 0,\r\n                delta: 0\r\n            },\r\n            pan: {\r\n                time: 0,\r\n                duration: 0,\r\n                offset: gl_matrix_1.vec3.create()\r\n            },\r\n        };\r\n        this._dollyDelta = 0;\r\n        this._dollyEnd = 0;\r\n        this._dollyStart = 0;\r\n        this._panDelta = gl_matrix_1.vec2.create();\r\n        this._panEnd = gl_matrix_1.vec2.create();\r\n        this._panStart = gl_matrix_1.vec2.create();\r\n        this._settingsAdjustments = {\r\n            damping: 1.0,\r\n            movementSmoothness: 1.0,\r\n            panSpeed: 2.0,\r\n            zoomSpeed: 0.025,\r\n        };\r\n        this._touchAdjustments = {\r\n            damping: 1.0,\r\n            movementSmoothness: 1.0,\r\n            panSpeed: 2.0,\r\n            zoomSpeed: 50.0,\r\n        };\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (7)\r\n    isWithinRestrictions(position, target) {\r\n        return true;\r\n    }\r\n    pan(x, y, active, touch) {\r\n        if (touch) {\r\n            x = x / window.devicePixelRatio;\r\n            y = y / window.devicePixelRatio;\r\n        }\r\n        if (!active) {\r\n            this._panStart = gl_matrix_1.vec2.fromValues(x, y);\r\n        }\r\n        else {\r\n            this._panEnd = gl_matrix_1.vec2.fromValues(x, y);\r\n            gl_matrix_1.vec2.sub(this._panDelta, this._panEnd, this._panStart);\r\n            if (this._panDelta[0] === 0 && this._panDelta[1] === 0)\r\n                return;\r\n            gl_matrix_1.vec2.copy(this._panStart, this._panEnd);\r\n            const adjustedPanSpeed = this._adjustedSettings.panSpeed() * (touch ? this._touchAdjustments.panSpeed : 1.0);\r\n            let offset = this.panDeltaToOffset(gl_matrix_1.vec2.mul(gl_matrix_1.vec2.create(), this._panDelta, gl_matrix_1.vec2.fromValues(adjustedPanSpeed, adjustedPanSpeed)));\r\n            if (this._damping.pan.duration > 0) {\r\n                if (offset[0] < 0) {\r\n                    offset[0] = Math.min(offset[0], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[0]);\r\n                }\r\n                else {\r\n                    offset[0] = Math.max(offset[0], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[0]);\r\n                }\r\n                if (offset[1] < 0) {\r\n                    offset[1] = Math.min(offset[1], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[1]);\r\n                }\r\n                else {\r\n                    offset[1] = Math.max(offset[1], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[1]);\r\n                }\r\n                if (offset[2] < 0) {\r\n                    offset[2] = Math.min(offset[2], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[2]);\r\n                }\r\n                else {\r\n                    offset[2] = Math.max(offset[2], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[2]);\r\n                }\r\n            }\r\n            let damping = 1 - Math.max(0.01, Math.min(0.99, this._adjustedSettings.damping()));\r\n            let framesOffsetX = (Math.log(1 / Math.abs(offset[0])) - 5 * Math.log(10)) / (Math.log(damping));\r\n            let framesOffsetY = (Math.log(1 / Math.abs(offset[1])) - 5 * Math.log(10)) / (Math.log(damping));\r\n            let framesOffsetZ = (Math.log(1 / Math.abs(offset[2])) - 5 * Math.log(10)) / (Math.log(damping));\r\n            this._damping.pan.time = 0;\r\n            this._damping.pan.duration = Math.max(framesOffsetX, Math.max(framesOffsetY, framesOffsetZ)) * 16.6666;\r\n            this._damping.pan.offset = gl_matrix_1.vec3.clone(offset);\r\n            this._damping.rotation.duration = 0;\r\n            this._damping.zoom.duration = 0;\r\n            this._controls.applyTargetVector(offset, true);\r\n            this._controls.applyPositionVector(offset, true);\r\n        }\r\n    }\r\n    reset() {\r\n        this._damping = {\r\n            rotation: {\r\n                time: 0,\r\n                duration: 0,\r\n                theta: 0,\r\n                phi: 0\r\n            },\r\n            zoom: {\r\n                time: 0,\r\n                duration: 0,\r\n                delta: 0\r\n            },\r\n            pan: {\r\n                time: 0,\r\n                duration: 0,\r\n                offset: gl_matrix_1.vec3.create()\r\n            },\r\n        };\r\n        this._dollyDelta = 0;\r\n        this._dollyEnd = 0;\r\n        this._dollyStart = 0;\r\n        this._panDelta = gl_matrix_1.vec2.create();\r\n        this._panEnd = gl_matrix_1.vec2.create();\r\n        this._panStart = gl_matrix_1.vec2.create();\r\n    }\r\n    restrict(p, t) {\r\n        return {\r\n            position: p,\r\n            target: t\r\n        };\r\n    }\r\n    update(time, manualInteraction) {\r\n        if (manualInteraction === true) {\r\n            this._damping.zoom.duration = 0;\r\n            this._damping.pan.duration = 0;\r\n        }\r\n        let damping = 1 - Math.max(0.01, Math.min(1, this._adjustedSettings.damping()));\r\n        if (this._damping.pan.duration > 0) {\r\n            if (this._damping.pan.time + time > this._damping.pan.duration) {\r\n                this._damping.pan.time = this._damping.pan.duration;\r\n                this._damping.pan.duration = 0;\r\n            }\r\n            else {\r\n                this._damping.pan.time += time;\r\n                let frameSinceStart = this._damping.pan.time / 16.6666;\r\n                let dampingFrames = Math.pow(damping, frameSinceStart);\r\n                let offset = gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._damping.pan.offset, gl_matrix_1.vec3.fromValues(dampingFrames, dampingFrames, dampingFrames));\r\n                this._controls.applyTargetVector(offset);\r\n                this._controls.applyPositionVector(offset);\r\n            }\r\n        }\r\n        else {\r\n            this._damping.pan.time = 0;\r\n        }\r\n        if (this._damping.zoom.duration > 0) {\r\n            if (this._damping.zoom.time + time > this._damping.zoom.duration) {\r\n                this._damping.zoom.time = this._damping.zoom.duration;\r\n                this._damping.zoom.duration = 0;\r\n            }\r\n            else {\r\n                this._damping.zoom.time += time;\r\n                let frameSinceStart = this._damping.zoom.time / 16.6666;\r\n                let delta = this._damping.zoom.delta * Math.pow(damping, frameSinceStart);\r\n                let newDistance = gl_matrix_1.vec3.distance(this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates())\r\n                    * (1 - delta);\r\n                let dir = gl_matrix_1.vec3.create(), offset = gl_matrix_1.vec3.create();\r\n                gl_matrix_1.vec3.normalize(dir, gl_matrix_1.vec3.subtract(dir, this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates()));\r\n                gl_matrix_1.vec3.add(offset, this._controls.getPositionWithManualUpdates(), gl_matrix_1.vec3.multiply(offset, dir, gl_matrix_1.vec3.fromValues(newDistance, newDistance, newDistance)));\r\n                gl_matrix_1.vec3.subtract(offset, offset, this._controls.getTargetWithManualUpdates());\r\n                this._controls.applyTargetVector(offset, true);\r\n            }\r\n        }\r\n        else {\r\n            this._damping.zoom.time = 0;\r\n        }\r\n    }\r\n    zoom(x, y, active, touch) {\r\n        var distance = Math.sqrt(x * x + y * y);\r\n        if (touch)\r\n            distance = distance / window.devicePixelRatio;\r\n        if (!active) {\r\n            this._dollyStart = distance;\r\n        }\r\n        else {\r\n            this._dollyEnd = distance;\r\n            this._dollyDelta = this._dollyEnd - this._dollyStart;\r\n            this._dollyStart = this._dollyEnd;\r\n            if (this._damping.zoom.duration > 0) {\r\n                if (this._dollyDelta < 0) {\r\n                    this._dollyDelta = Math.min(this._dollyDelta, this._adjustedSettings.movementSmoothness() * this._damping.zoom.delta);\r\n                }\r\n                else {\r\n                    this._dollyDelta = Math.max(this._dollyDelta, this._adjustedSettings.movementSmoothness() * this._damping.zoom.delta);\r\n                }\r\n            }\r\n            let delta = this._dollyDelta * this._adjustedSettings.zoomSpeed() * (touch ? this._touchAdjustments.zoomSpeed : 1.0);\r\n            let damping = 1 - Math.max(0.01, Math.min(1, this._adjustedSettings.damping()));\r\n            let framesDelta = (Math.log(1 / Math.abs(this._dollyDelta)) - 5 * Math.log(10)) / (Math.log(damping));\r\n            this._damping.zoom.time = 0;\r\n            this._damping.zoom.duration = framesDelta * 16.6666;\r\n            this._damping.zoom.delta = delta;\r\n            this._damping.pan.duration = 0;\r\n            let newDistance = gl_matrix_1.vec3.distance(this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates())\r\n                * (1 - delta);\r\n            let dir = gl_matrix_1.vec3.create(), offset = gl_matrix_1.vec3.create();\r\n            gl_matrix_1.vec3.normalize(dir, gl_matrix_1.vec3.subtract(dir, this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates()));\r\n            gl_matrix_1.vec3.add(offset, this._controls.getPositionWithManualUpdates(), gl_matrix_1.vec3.multiply(offset, dir, gl_matrix_1.vec3.fromValues(newDistance, newDistance, newDistance)));\r\n            gl_matrix_1.vec3.subtract(offset, offset, this._controls.getTargetWithManualUpdates());\r\n            this._controls.applyTargetVector(offset, true);\r\n        }\r\n    }\r\n    // #endregion Public Methods (7)\r\n    // #region Private Methods (7)\r\n    panDeltaToOffset(panDelta) {\r\n        let offset = gl_matrix_1.vec3.create();\r\n        let panOffset = gl_matrix_1.vec3.create();\r\n        // perspective\r\n        gl_matrix_1.vec3.subtract(offset, this._controls.getPositionWithManualUpdates(), this._controls.getTargetWithManualUpdates());\r\n        const orthographicCamera = this._controls.camera;\r\n        const mat = gl_matrix_1.mat4.targetTo(gl_matrix_1.mat4.create(), orthographicCamera.position, orthographicCamera.target, orthographicCamera.up);\r\n        // // we use only clientHeight here so aspect ratio does not distort speed\r\n        // // left\r\n        const v1 = gl_matrix_1.vec3.fromValues(mat[0], mat[1], mat[2]);\r\n        const scalar1 = -(panDelta[0] * (orthographicCamera.right - orthographicCamera.left) * 0.5 / 1 /** orthographicCamera.zoom */);\r\n        gl_matrix_1.vec3.multiply(v1, v1, gl_matrix_1.vec3.fromValues(scalar1, scalar1, scalar1));\r\n        gl_matrix_1.vec3.add(panOffset, panOffset, v1);\r\n        // // up\r\n        const v2 = gl_matrix_1.vec3.fromValues(mat[4], mat[5], mat[6]);\r\n        const scalar2 = panDelta[1] * (orthographicCamera.right - orthographicCamera.left) * 0.5 / 1 /** orthographicCamera.zoom */;\r\n        gl_matrix_1.vec3.multiply(v2, v2, gl_matrix_1.vec3.fromValues(scalar2, scalar2, scalar2));\r\n        gl_matrix_1.vec3.add(panOffset, panOffset, v2);\r\n        return gl_matrix_1.vec3.clone(panOffset);\r\n    }\r\n}\r\nexports.CameraControlsLogic = CameraControlsLogic;\r\n;\r\n"},"sourceMaps":{"js":{"version":3,"file":"CameraControlsLogic.js","sourceRoot":"","sources":["../../../../src/implementation/controls/orthographic/CameraControlsLogic.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, vec2, vec3 } from 'gl-matrix'\r\n\r\nimport { OrthographicCameraControls } from '../../..'\r\nimport { ICameraControlsLogic } from '../../../interfaces/controls/ICameraControlsLogic'\r\nimport { OrthographicCamera } from '../../camera/OrthographicCamera'\r\n\r\nexport class CameraControlsLogic implements ICameraControlsLogic {\r\n  // #region Properties (16)\r\n\r\n  private _adjustedSettings = {\r\n    damping: () => this._controls.damping * this._settingsAdjustments.damping,\r\n    movementSmoothness: () => this._controls.movementSmoothness * this._settingsAdjustments.movementSmoothness,\r\n    panSpeed: () => this._controls.panSpeed * this._settingsAdjustments.panSpeed,\r\n    zoomSpeed: () => this._controls.zoomSpeed * this._settingsAdjustments.zoomSpeed,\r\n  };\r\n  private _damping = {\r\n    rotation: {\r\n      time: 0,\r\n      duration: 0,\r\n      theta: 0,\r\n      phi: 0\r\n    },\r\n    zoom: {\r\n      time: 0,\r\n      duration: 0,\r\n      delta: 0\r\n    },\r\n    pan: {\r\n      time: 0,\r\n      duration: 0,\r\n      offset: vec3.create()\r\n    },\r\n  };\r\n  private _dollyDelta = 0;\r\n  private _dollyEnd = 0;\r\n  private _dollyStart = 0;\r\n  private _panDelta = vec2.create();\r\n  private _panEnd = vec2.create();\r\n  private _panStart = vec2.create();\r\n  private _settingsAdjustments = {\r\n    damping: 1.0,\r\n    movementSmoothness: 1.0,\r\n    panSpeed: 2.0,\r\n    zoomSpeed: 0.025,\r\n  };\r\n  private _touchAdjustments = {\r\n    damping: 1.0,\r\n    movementSmoothness: 1.0,\r\n    panSpeed: 2.0,\r\n    zoomSpeed: 50.0,\r\n  };\r\n\r\n  // #endregion Properties (16)\r\n\r\n  // #region Constructors (1)\r\n\r\n  constructor(private readonly _controls: OrthographicCameraControls) { }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Methods (7)\r\n\r\n  public isWithinRestrictions(position: vec3, target: vec3): boolean {\r\n    return true;\r\n  }\r\n\r\n  public pan(x: number, y: number, active: boolean, touch: boolean): void {\r\n    if (touch) {\r\n      x = x / window.devicePixelRatio;\r\n      y = y / window.devicePixelRatio;\r\n    }\r\n\r\n    if (!active) {\r\n      this._panStart = vec2.fromValues(x, y);\r\n    } else {\r\n      this._panEnd = vec2.fromValues(x, y);\r\n      vec2.sub(this._panDelta, this._panEnd, this._panStart);\r\n      if (this._panDelta[0] === 0 && this._panDelta[1] === 0) return;\r\n      vec2.copy(this._panStart, this._panEnd);\r\n\r\n      const adjustedPanSpeed = this._adjustedSettings.panSpeed() * (touch ? this._touchAdjustments.panSpeed : 1.0);\r\n      let offset = this.panDeltaToOffset(vec2.mul(vec2.create(), this._panDelta, vec2.fromValues(adjustedPanSpeed, adjustedPanSpeed)));\r\n\r\n      if (this._damping.pan.duration > 0) {\r\n        if (offset[0] < 0) {\r\n          offset[0] = Math.min(offset[0], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[0]);\r\n        } else {\r\n          offset[0] = Math.max(offset[0], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[0]);\r\n        }\r\n        if (offset[1] < 0) {\r\n          offset[1] = Math.min(offset[1], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[1]);\r\n        } else {\r\n          offset[1] = Math.max(offset[1], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[1]);\r\n        }\r\n        if (offset[2] < 0) {\r\n          offset[2] = Math.min(offset[2], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[2]);\r\n        } else {\r\n          offset[2] = Math.max(offset[2], this._adjustedSettings.movementSmoothness() * this._damping.pan.offset[2]);\r\n        }\r\n      }\r\n\r\n      let damping = 1 - Math.max(0.01, Math.min(0.99, this._adjustedSettings.damping()));\r\n\r\n      let framesOffsetX = (Math.log(1 / Math.abs(offset[0])) - 5 * Math.log(10)) / (Math.log(damping));\r\n      let framesOffsetY = (Math.log(1 / Math.abs(offset[1])) - 5 * Math.log(10)) / (Math.log(damping));\r\n      let framesOffsetZ = (Math.log(1 / Math.abs(offset[2])) - 5 * Math.log(10)) / (Math.log(damping));\r\n      this._damping.pan.time = 0;\r\n      this._damping.pan.duration = Math.max(framesOffsetX, Math.max(framesOffsetY, framesOffsetZ)) * 16.6666;\r\n      this._damping.pan.offset = vec3.clone(offset);\r\n\r\n      this._damping.rotation.duration = 0;\r\n      this._damping.zoom.duration = 0;\r\n\r\n      this._controls.applyTargetVector(offset, true);\r\n      this._controls.applyPositionVector(offset, true);\r\n    }\r\n  }\r\n\r\n  public reset() {\r\n    this._damping = {\r\n      rotation: {\r\n        time: 0,\r\n        duration: 0,\r\n        theta: 0,\r\n        phi: 0\r\n      },\r\n      zoom: {\r\n        time: 0,\r\n        duration: 0,\r\n        delta: 0\r\n      },\r\n      pan: {\r\n        time: 0,\r\n        duration: 0,\r\n        offset: vec3.create()\r\n      },\r\n    };\r\n    this._dollyDelta = 0;\r\n    this._dollyEnd = 0;\r\n    this._dollyStart = 0;\r\n    this._panDelta = vec2.create();\r\n    this._panEnd = vec2.create();\r\n    this._panStart = vec2.create();\r\n  }\r\n\r\n  public restrict(p: vec3, t: vec3): { position: vec3, target: vec3 } {\r\n    return {\r\n      position: p,\r\n      target: t\r\n    };\r\n  }\r\n\r\n  public update(time: number, manualInteraction: boolean): void {\r\n    if (manualInteraction === true) {\r\n      this._damping.zoom.duration = 0;\r\n      this._damping.pan.duration = 0;\r\n    }\r\n\r\n\r\n    let damping = 1 - Math.max(0.01, Math.min(1, this._adjustedSettings.damping()));\r\n\r\n    if (this._damping.pan.duration > 0) {\r\n      if (this._damping.pan.time + time > this._damping.pan.duration) {\r\n        this._damping.pan.time = this._damping.pan.duration;\r\n        this._damping.pan.duration = 0;\r\n      } else {\r\n        this._damping.pan.time += time;\r\n\r\n        let frameSinceStart = this._damping.pan.time / 16.6666;\r\n        let dampingFrames = Math.pow(damping, frameSinceStart);\r\n        let offset = vec3.multiply(vec3.create(), this._damping.pan.offset, vec3.fromValues(dampingFrames, dampingFrames, dampingFrames));\r\n        this._controls.applyTargetVector(offset);\r\n        this._controls.applyPositionVector(offset);\r\n      }\r\n    } else {\r\n      this._damping.pan.time = 0;\r\n    }\r\n\r\n    if (this._damping.zoom.duration > 0) {\r\n      if (this._damping.zoom.time + time > this._damping.zoom.duration) {\r\n        this._damping.zoom.time = this._damping.zoom.duration;\r\n        this._damping.zoom.duration = 0;\r\n      } else {\r\n        this._damping.zoom.time += time;\r\n\r\n        let frameSinceStart = this._damping.zoom.time / 16.6666;\r\n        let delta = this._damping.zoom.delta * Math.pow(damping, frameSinceStart);\r\n\r\n        let newDistance = vec3.distance(this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates())\r\n          * (1 - delta);\r\n\r\n\r\n        let dir = vec3.create(),\r\n          offset = vec3.create();\r\n        vec3.normalize(dir, vec3.subtract(dir, this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates()));\r\n        vec3.add(offset, this._controls.getPositionWithManualUpdates(), vec3.multiply(offset, dir, vec3.fromValues(newDistance, newDistance, newDistance)))\r\n        vec3.subtract(offset, offset, this._controls.getTargetWithManualUpdates())\r\n        this._controls.applyTargetVector(offset, true);\r\n\r\n      }\r\n    } else {\r\n      this._damping.zoom.time = 0;\r\n    }\r\n  }\r\n\r\n  public zoom(x: number, y: number, active: boolean, touch: boolean): void {\r\n    var distance = Math.sqrt(x * x + y * y);\r\n    if (touch)\r\n      distance = distance / window.devicePixelRatio;\r\n\r\n    if (!active) {\r\n      this._dollyStart = distance;\r\n    } else {\r\n      this._dollyEnd = distance;\r\n      this._dollyDelta = this._dollyEnd - this._dollyStart;\r\n      this._dollyStart = this._dollyEnd;\r\n\r\n      if (this._damping.zoom.duration > 0) {\r\n        if (this._dollyDelta < 0) {\r\n          this._dollyDelta = Math.min(this._dollyDelta, this._adjustedSettings.movementSmoothness() * this._damping.zoom.delta);\r\n        } else {\r\n          this._dollyDelta = Math.max(this._dollyDelta, this._adjustedSettings.movementSmoothness() * this._damping.zoom.delta);\r\n        }\r\n      }\r\n      let delta = this._dollyDelta * this._adjustedSettings.zoomSpeed() * (touch ? this._touchAdjustments.zoomSpeed : 1.0);\r\n\r\n      let damping = 1 - Math.max(0.01, Math.min(1, this._adjustedSettings.damping()));\r\n      let framesDelta = (Math.log(1 / Math.abs(this._dollyDelta)) - 5 * Math.log(10)) / (Math.log(damping));\r\n      this._damping.zoom.time = 0;\r\n      this._damping.zoom.duration = framesDelta * 16.6666;\r\n      this._damping.zoom.delta = delta;\r\n\r\n      this._damping.pan.duration = 0;\r\n\r\n\r\n      let newDistance = vec3.distance(this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates())\r\n        * (1 - delta);\r\n\r\n      let dir = vec3.create(),\r\n        offset = vec3.create();\r\n      vec3.normalize(dir, vec3.subtract(dir, this._controls.getTargetWithManualUpdates(), this._controls.getPositionWithManualUpdates()));\r\n      vec3.add(offset, this._controls.getPositionWithManualUpdates(), vec3.multiply(offset, dir, vec3.fromValues(newDistance, newDistance, newDistance)))\r\n      vec3.subtract(offset, offset, this._controls.getTargetWithManualUpdates())\r\n      this._controls.applyTargetVector(offset, true);\r\n    }\r\n  }\r\n\r\n  // #endregion Public Methods (7)\r\n\r\n  // #region Private Methods (7)\r\n\r\n  private panDeltaToOffset(panDelta: vec2): vec3 {\r\n    let offset = vec3.create();\r\n    let panOffset = vec3.create();\r\n\r\n    // perspective\r\n    vec3.subtract(offset, this._controls.getPositionWithManualUpdates(), this._controls.getTargetWithManualUpdates())\r\n\r\n    const orthographicCamera: OrthographicCamera = <OrthographicCamera>this._controls.camera;\r\n    const mat = mat4.targetTo(mat4.create(), orthographicCamera.position, orthographicCamera.target, orthographicCamera.up);\r\n\r\n    // // we use only clientHeight here so aspect ratio does not distort speed\r\n    // // left\r\n    const v1 = vec3.fromValues(mat[0], mat[1], mat[2]);\r\n    const scalar1 = -(panDelta[0] * (orthographicCamera.right - orthographicCamera.left) * 0.5 / 1 /** orthographicCamera.zoom */);\r\n    vec3.multiply(v1, v1, vec3.fromValues(scalar1, scalar1, scalar1));\r\n    vec3.add(panOffset, panOffset, v1);\r\n\r\n    // // up\r\n    const v2 = vec3.fromValues(mat[4], mat[5], mat[6]);\r\n    const scalar2 = panDelta[1] * (orthographicCamera.right - orthographicCamera.left) * 0.5 / 1 /** orthographicCamera.zoom */;\r\n    vec3.multiply(v2, v2, vec3.fromValues(scalar2, scalar2, scalar2));\r\n    vec3.add(panOffset, panOffset, v2);\r\n\r\n    return vec3.clone(panOffset);\r\n  }\r\n\r\n  // #endregion Private Methods (7)\r\n};"]}},"error":null,"hash":"f2fb9314575035b0e58488a97fced0fd","cacheData":{"env":{}}}