{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/managers/EnvironmentGeometryManager.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js.map","includedInParent":true,"mtime":1706542086762},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\managers\\EnvironmentGeometryManager.ts","includedInParent":true,"mtime":1706542087291},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"three","loc":{"line":23,"column":35,"index":1038},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":24,"column":38,"index":1088},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":25,"column":28,"index":1153},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":26,"column":37,"index":1205},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":27,"column":41,"index":1282},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"../objects/SDData","loc":{"line":28,"column":25,"index":1347},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDData.js"},{"name":"../objects/SDObject","loc":{"line":29,"column":27,"index":1397},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDObject.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EnvironmentGeometryManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nconst SDObject_1 = require(\"../objects/SDObject\");\r\nclass EnvironmentGeometryManager {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (5)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._groundPlaneColor = '#d3d3d3ff';\r\n        this._groundPlaneShadowColor = '#d3d3d3ff';\r\n        this._gridColor = '#44444426';\r\n        this._initialized = false;\r\n        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            this.updateEnvironmentGeometryPosition();\r\n        });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (2)\r\n    get gridColor() {\r\n        return this._gridColor;\r\n    }\r\n    set gridColor(value) {\r\n        this._gridColor = value;\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.material.needsUpdate = true;\r\n    }\r\n    get groundPlaneColor() {\r\n        return this._groundPlaneColor;\r\n    }\r\n    set groundPlaneColor(value) {\r\n        this._groundPlaneColor = value;\r\n        this.assignGroundPlaneColor(value);\r\n    }\r\n    get groundPlaneShadowColor() {\r\n        return this._groundPlaneShadowColor;\r\n    }\r\n    set groundPlaneShadowColor(value) {\r\n        this._groundPlaneShadowColor = value;\r\n        this.assignGroundPlaneShadowColor(value);\r\n    }\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n    get groundPlane() {\r\n        return this._groundPlane;\r\n    }\r\n    get groundPlaneShadow() {\r\n        return this._groundPlaneShadow;\r\n    }\r\n    // #endregion Public Accessors (2)\r\n    // #region Public Methods (2)\r\n    assignGroundPlaneColor(color) {\r\n        this._groundPlane.material.opacity = this._converter.toAlpha(color);\r\n        this._groundPlane.material.transparent = this._groundPlane.material.opacity !== 1;\r\n        this._groundPlane.material.depthWrite = !this._groundPlane.material.transparent;\r\n        this._groundPlane.material.color = this._renderingEngine.createThreeJsColor(color);\r\n        this._groundPlane.material.needsUpdate = true;\r\n    }\r\n    assignGroundPlaneShadowColor(color) {\r\n        this._groundPlaneShadow.material.opacity = this._converter.toAlpha(color);\r\n        this._groundPlaneShadow.material.color = this._renderingEngine.createThreeJsColor(color);\r\n        this._groundPlaneShadow.material.needsUpdate = true;\r\n    }\r\n    /**\r\n     * Creates the grid extents and divisios with the specified scene extents.\r\n     *\r\n     * https://shapediver.atlassian.net/browse/SS-2961 evaluate this magic.\r\n     */\r\n    evaluateGridMeasurements(sceneExtents) {\r\n        let divisions = 0.1;\r\n        let gridExtents = 1.0;\r\n        if (sceneExtents > 1) {\r\n            let tmp = Math.floor(sceneExtents).toString();\r\n            let temp = Math.pow(10, tmp.length - 1);\r\n            gridExtents = Math.max(Math.ceil(sceneExtents / temp) * temp, 1);\r\n            temp = temp / 10;\r\n            divisions = gridExtents / temp;\r\n        }\r\n        else if (sceneExtents !== 0) {\r\n            let zeros = 1 - Math.floor(Math.log(sceneExtents) / Math.log(10)) - 2;\r\n            let r = sceneExtents.toFixed(zeros + 1);\r\n            let firstDigit = parseInt(r.substr(r.length - 1)) + 1;\r\n            let gridExtentsS = '0.';\r\n            for (let i = 0; i < zeros; ++i)\r\n                gridExtentsS = gridExtentsS + '0';\r\n            gridExtents = parseFloat(gridExtentsS + firstDigit);\r\n            divisions = firstDigit * 10;\r\n        }\r\n        return { divisions, gridExtents };\r\n    }\r\n    changeSceneExtents(bb) {\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())\r\n            return;\r\n        this._initialized = true;\r\n        let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);\r\n        const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n        this._gridObject.remove(this._grid);\r\n        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n        this._groundPlane.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n        this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n        let eps = 0.005;\r\n        let bs = bb.boundingSphere;\r\n        this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n    }\r\n    init() {\r\n        this._environmentGeometryObject = new SDObject_1.SDObject('environmentGeometry', '');\r\n        this._renderingEngine.sceneTreeManager.scene.add(this._environmentGeometryObject);\r\n        this._gridObject = new SDData_1.SDData('grid', '');\r\n        this._grid = new THREE.GridHelper();\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n        this._gridObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._gridObject);\r\n        this._groundPlaneObject = new SDData_1.SDData('groundPlane', '');\r\n        let mat = new viewer_shared_types_1.MaterialStandardData();\r\n        mat.color = this._groundPlaneColor;\r\n        mat.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;\r\n        mat.opacity = this._converter.toAlpha(this._groundPlaneColor);\r\n        mat.roughness = 1;\r\n        mat.metalness = 0;\r\n        this._groundPlane = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(mat));\r\n        this._groundPlane.receiveShadow = true;\r\n        this._groundPlane.visible = this._renderingEngine.groundPlaneVisibility;\r\n        this._groundPlaneObject.add(this._groundPlane);\r\n        this._groundPlaneObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._groundPlaneObject);\r\n        this._groundPlaneShadowObject = new SDData_1.SDData('groundPlaneShadow', '');\r\n        let matShadow = new viewer_shared_types_1.MaterialShadowData();\r\n        matShadow.color = this._groundPlaneShadowColor;\r\n        matShadow.opacity = this._converter.toAlpha(this._groundPlaneShadowColor);\r\n        this._groundPlaneShadow = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(matShadow));\r\n        this._groundPlaneShadow.receiveShadow = true;\r\n        this._groundPlaneShadow.visible = this._renderingEngine.groundPlaneShadowVisibility;\r\n        this._groundPlaneShadowObject.add(this._groundPlaneShadow);\r\n        this._groundPlaneShadowObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._groundPlaneShadowObject);\r\n        let eps = 0.005;\r\n        this._grid.position.set(0, 0, -eps);\r\n        this._groundPlane.position.set(0, 0, -eps);\r\n        this._groundPlaneShadow.position.set(0, 0, -eps);\r\n    }\r\n    updateEnvironmentGeometryPosition() {\r\n        const bb = new viewer_shared_math_1.Box(this._renderingEngine.sceneTreeManager.boundingBox.min, this._renderingEngine.sceneTreeManager.boundingBox.max);\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())\r\n            return;\r\n        if (!this._initialized) {\r\n            this.changeSceneExtents(bb);\r\n        }\r\n        else {\r\n            let eps = 0.005;\r\n            let bs = bb.boundingSphere;\r\n            let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);\r\n            const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n            this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n            if (this._grid)\r\n                this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n            if (this._groundPlane)\r\n                this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n            if (this._groundPlaneShadow)\r\n                this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        }\r\n    }\r\n}\r\nexports.EnvironmentGeometryManager = EnvironmentGeometryManager;\r\n"},"sourceMaps":{"js":{"version":3,"file":"EnvironmentGeometryManager.js","sourceRoot":"","sources":["../../src/managers/EnvironmentGeometryManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport { MATERIAL_SIDE, MaterialStandardData, ISceneEvent, MaterialShadowData, Color } from '@shapediver/viewer.shared.types'\r\nimport { vec3 } from 'gl-matrix'\r\nimport { Box, IBox } from '@shapediver/viewer.shared.math'\r\nimport { Converter, EventEngine, EVENTTYPE } from '@shapediver/viewer.shared.services'\r\n\r\nimport { RenderingEngine } from '..'\r\nimport { SDData } from '../objects/SDData'\r\nimport { SDObject } from '../objects/SDObject'\r\nimport { IManager } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\n\r\nexport class EnvironmentGeometryManager implements IManager {\r\n    // #region Properties (5)\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n\r\n    private _environmentGeometryObject!: SDObject;\r\n    private _grid!: THREE.GridHelper;\r\n    private _gridObject!: SDData;\r\n    private _groundPlane!: THREE.Mesh;\r\n    private _groundPlaneShadow!: THREE.Mesh;\r\n    private _groundPlaneObject!: SDData;\r\n    private _groundPlaneShadowObject!: SDData;\r\n    private _groundPlaneColor: Color = '#d3d3d3ff';\r\n    private _groundPlaneShadowColor: Color = '#d3d3d3ff';\r\n    private _gridColor: Color = '#44444426';\r\n\r\n    private _initialized: boolean = false;\r\n\r\n    // #endregion Properties (5)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) {\r\n        this._eventEngine.addListener(EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            this.updateEnvironmentGeometryPosition();\r\n        })\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (2)\r\n\r\n    public get gridColor(): Color {\r\n        return this._gridColor;\r\n    } \r\n    \r\n    public set gridColor(value: Color) {\r\n        this._gridColor = value;\r\n        (<THREE.LineBasicMaterial>this._grid.material).opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        (<THREE.LineBasicMaterial>this._grid.material).transparent = (<THREE.LineBasicMaterial>this._grid.material).opacity !== 1;\r\n        (<THREE.LineBasicMaterial>this._grid.material).color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        (<THREE.LineBasicMaterial>this._grid.material).needsUpdate = true;\r\n    }\r\n\r\n    public get groundPlaneColor(): Color {\r\n        return this._groundPlaneColor;\r\n    } \r\n    \r\n    public set groundPlaneColor(value: Color) {\r\n        this._groundPlaneColor = value;\r\n        this.assignGroundPlaneColor(value);\r\n    }\r\n\r\n    public get groundPlaneShadowColor(): Color {\r\n        return this._groundPlaneShadowColor;\r\n    } \r\n    \r\n    public set groundPlaneShadowColor(value: Color) {\r\n        this._groundPlaneShadowColor = value;\r\n        this.assignGroundPlaneShadowColor(value);\r\n    }\r\n\r\n    public get grid(): THREE.GridHelper {\r\n        return this._grid;\r\n    }\r\n\r\n    public get groundPlane(): THREE.Mesh {\r\n        return this._groundPlane;\r\n    }\r\n\r\n    public get groundPlaneShadow(): THREE.Mesh {\r\n        return this._groundPlaneShadow;\r\n    }\r\n\r\n    // #endregion Public Accessors (2)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public assignGroundPlaneColor(color: Color) {\r\n        (<THREE.MeshPhysicalMaterial>this._groundPlane.material).opacity = this._converter.toAlpha(color);\r\n        (<THREE.MeshPhysicalMaterial>this._groundPlane.material).transparent = (<THREE.MeshPhysicalMaterial>this._groundPlane.material).opacity !== 1;\r\n        (<THREE.MeshPhysicalMaterial>this._groundPlane.material).depthWrite = !(<THREE.MeshPhysicalMaterial>this._groundPlane.material).transparent;\r\n        (<THREE.MeshPhysicalMaterial>this._groundPlane.material).color = this._renderingEngine.createThreeJsColor(color);\r\n        (<THREE.MeshPhysicalMaterial>this._groundPlane.material).needsUpdate = true;\r\n    }    \r\n\r\n    public assignGroundPlaneShadowColor(color: Color) {\r\n        (<THREE.ShadowMaterial>this._groundPlaneShadow.material).opacity = this._converter.toAlpha(color);\r\n        (<THREE.ShadowMaterial>this._groundPlaneShadow.material).color = this._renderingEngine.createThreeJsColor(color);\r\n        (<THREE.ShadowMaterial>this._groundPlaneShadow.material).needsUpdate = true;\r\n    } \r\n\r\n    /**\r\n     * Creates the grid extents and divisios with the specified scene extents.\r\n     * \r\n     * https://shapediver.atlassian.net/browse/SS-2961 evaluate this magic.\r\n     */\r\n    private evaluateGridMeasurements(sceneExtents: number) {\r\n        let divisions = 0.1;\r\n        let gridExtents = 1.0;\r\n        if (sceneExtents > 1) {\r\n            let tmp = Math.floor(sceneExtents).toString();\r\n            let temp = Math.pow(10, tmp.length - 1);\r\n            gridExtents = Math.max(Math.ceil(sceneExtents / temp) * temp, 1);\r\n            temp = temp / 10;\r\n            divisions = gridExtents / temp;\r\n        }\r\n        else if (sceneExtents !== 0) {\r\n            let zeros = 1 - Math.floor(Math.log(sceneExtents) / Math.log(10)) - 2;\r\n            let r = sceneExtents.toFixed(zeros + 1);\r\n            let firstDigit = parseInt(r.substr(r.length - 1)) + 1;\r\n            let gridExtentsS = '0.';\r\n            for (let i = 0; i < zeros; ++i)\r\n                gridExtentsS = gridExtentsS + '0';\r\n            gridExtents = parseFloat(gridExtentsS + firstDigit);\r\n            divisions = firstDigit * 10;\r\n        }\r\n\r\n        return { divisions, gridExtents }\r\n    }\r\n\r\n    public changeSceneExtents(bb: IBox) {\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty()) return;\r\n\r\n        this._initialized = true;\r\n        let sceneExtents = vec3.distance(bb.min, bb.max);\r\n        const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n\r\n        this._gridObject.remove(this._grid);\r\n        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);\r\n        (<THREE.LineBasicMaterial>this._grid.material).opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        (<THREE.LineBasicMaterial>this._grid.material).transparent = (<THREE.LineBasicMaterial>this._grid.material).opacity !== 1;\r\n        (<THREE.LineBasicMaterial>this._grid.material).color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n\r\n        this._groundPlane.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n        this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n\r\n        let eps = 0.005;\r\n        let bs = bb.boundingSphere;\r\n        this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n    }\r\n\r\n    public init(): void {\r\n        this._environmentGeometryObject = new SDObject('environmentGeometry', '');\r\n        this._renderingEngine.sceneTreeManager.scene.add(this._environmentGeometryObject);\r\n        \r\n        this._gridObject = new SDData('grid', '');\r\n        this._grid = new THREE.GridHelper();\r\n        (<THREE.LineBasicMaterial>this._grid.material).opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        (<THREE.LineBasicMaterial>this._grid.material).transparent = (<THREE.LineBasicMaterial>this._grid.material).opacity !== 1;\r\n        (<THREE.LineBasicMaterial>this._grid.material).color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n        this._gridObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._gridObject);\r\n\r\n        this._groundPlaneObject = new SDData('groundPlane', '');\r\n        let mat = new MaterialStandardData();\r\n        mat.color = this._groundPlaneColor;\r\n        mat.side = MATERIAL_SIDE.FRONT;\r\n        mat.opacity = this._converter.toAlpha(this._groundPlaneColor);        \r\n        mat.roughness = 1;\r\n        mat.metalness = 0;\r\n        this._groundPlane = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(mat));\r\n        this._groundPlane.receiveShadow = true;\r\n        this._groundPlane.visible = this._renderingEngine.groundPlaneVisibility;\r\n        this._groundPlaneObject.add(this._groundPlane);\r\n        this._groundPlaneObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._groundPlaneObject);\r\n\r\n        this._groundPlaneShadowObject = new SDData('groundPlaneShadow', '');\r\n        let matShadow = new MaterialShadowData();\r\n        matShadow.color = this._groundPlaneShadowColor;\r\n        matShadow.opacity = this._converter.toAlpha(this._groundPlaneShadowColor);\r\n        this._groundPlaneShadow = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(matShadow));\r\n        this._groundPlaneShadow.receiveShadow = true;\r\n        this._groundPlaneShadow.visible = this._renderingEngine.groundPlaneShadowVisibility;\r\n        this._groundPlaneShadowObject.add(this._groundPlaneShadow);\r\n        this._groundPlaneShadowObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._groundPlaneShadowObject);\r\n\r\n        let eps = 0.005;\r\n        this._grid.position.set(0, 0, -eps);\r\n        this._groundPlane.position.set(0, 0, -eps);\r\n        this._groundPlaneShadow.position.set(0, 0, -eps);\r\n    }\r\n\r\n    public updateEnvironmentGeometryPosition(): void {\r\n        const bb = new Box(this._renderingEngine.sceneTreeManager.boundingBox.min, this._renderingEngine.sceneTreeManager.boundingBox.max);\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty()) return;\r\n\r\n        if(!this._initialized) {\r\n            this.changeSceneExtents(bb)\r\n        } else {\r\n            let eps = 0.005;\r\n            let bs = bb.boundingSphere;\r\n\r\n            let sceneExtents = vec3.distance(bb.min, bb.max);\r\n            const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n            this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n\r\n            if(this._grid) this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n            if(this._groundPlane) this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n            if(this._groundPlaneShadow) this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n}"]}},"error":null,"hash":"90160562b971f60478a3256e5854d009","cacheData":{"env":{}}}