{"id":"node_modules/@shapediver/sdk.sdtf-geometry/dist/SdtfGeometryTypeGuard.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeGuard.js.map","includedInParent":true,"mtime":1706542084931},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\package.json","includedInParent":true,"mtime":1706542084377},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":4,"column":32,"index":149},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeGuard.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfGeometryTypeGuard = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nclass SdtfGeometryTypeGuard {\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */\n    static assertArc(value) {\n        if (!this.isArc(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry arc type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ARC`. */\n    static isArc(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            typeof value.radius === \"number\" &&\n            typeof value.angle === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */\n    static assertBoundingBox(value) {\n        if (!this.isBoundingBox(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry bounding box type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX`. */\n    static isBoundingBox(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPoint3d(value.min) &&\n            this.isPoint3d(value.max);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */\n    static assertBox(value) {\n        if (!this.isBox(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry box type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_BOX`. */\n    static isBox(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            Array.isArray(value.extents) &&\n            value.extents.length === 3 &&\n            value.extents.every(e => (0, sdk_sdtf_core_1.isNumberArray)(e) && e.length === 2);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */\n    static assertCircle(value) {\n        if (!this.isCircle(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry circle type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CIRCLE`. */\n    static isCircle(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            typeof value.radius === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */\n    static assertComplex(value) {\n        if (!this.isComplex(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry complex type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_COMPLEX`. */\n    static isComplex(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */\n    static assertCone(value) {\n        if (!this.isCone(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry cone type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CONE`. */\n    static isCone(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            typeof value.radius === \"number\" &&\n            typeof value.height === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */\n    static assertCylinder(value) {\n        if (!this.isCylinder(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry cylinder type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_CYLINDER`. */\n    static isCylinder(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isCircle(value.baseCircle) &&\n            typeof value.height === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */\n    static assertEllipse(value) {\n        if (!this.isEllipse(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry ellipse type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE`. */\n    static isEllipse(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            typeof value.r1 === \"number\" &&\n            typeof value.r2 === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */\n    static assertInterval(value) {\n        if (!this.isInterval(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry interval type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL`. */\n    static isInterval(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */\n    static assertInterval2(value) {\n        if (!this.isInterval2(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry interval2 type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2`. */\n    static isInterval2(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isInterval(value.u) &&\n            this.isInterval(value.v);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */\n    static assertLine(value) {\n        if (!this.isLine(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry line type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_LINE`. */\n    static isLine(value) {\n        return Array.isArray(value) &&\n            value.length === 2 &&\n            this.isPoint3d(value[0]) &&\n            this.isPoint3d(value[1]);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */\n    static assertMatrix(value) {\n        if (!this.isMatrix(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry matrix type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_MATRIX`. */\n    static isMatrix(value) {\n        if (!Array.isArray(value))\n            return false;\n        // All sub-arrays must have the same length with numeric content\n        const nItems = value[0].length;\n        return value.every(v => (0, sdk_sdtf_core_1.isNumberArray)(v) && v.length === nItems);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */\n    static assertPlane(value) {\n        if (!this.isPlane(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry plane type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_PLANE`. */\n    static isPlane(value) {\n        return Array.isArray(value) &&\n            value.length === 3 &&\n            this.isPoint3d(value[0]) &&\n            this.isVector3d(value[1]) &&\n            this.isVector3d(value[2]);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */\n    static assertPoint(value) {\n        if (!this.isPoint(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry point type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2, 3 or 4 elements. */\n    static isPoint(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && (value.length === 2 || value.length === 3 || value.length === 4);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */\n    static assertPoint2d(value) {\n        if (!this.isPoint2d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry point type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 2 elements. */\n    static isPoint2d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */\n    static assertPoint3d(value) {\n        if (!this.isPoint3d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry point type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 3 elements. */\n    static isPoint3d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 3;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POINT`. */\n    static assertPoint4d(value) {\n        if (!this.isPoint4d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry point type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POINT` with 4 elements. */\n    static isPoint4d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 4;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */\n    static assertPolyline(value) {\n        if (!this.isPolyline(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry polyline type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_POLYLINE`. */\n    static isPolyline(value) {\n        return Array.isArray(value) && value.every(v => this.isPoint3d(v));\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */\n    static assertRay(value) {\n        if (!this.isRay(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry ray type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RAY`. */\n    static isRay(value) {\n        return Array.isArray(value) &&\n            value.length === 2 &&\n            this.isPoint3d(value[0]) &&\n            this.isVector3d(value[1]);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */\n    static assertRectangle(value) {\n        if (!this.isRectangle(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry rectangle type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE`. */\n    static isRectangle(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            this.isInterval(value.x) &&\n            this.isInterval(value.y);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */\n    static assertSphere(value) {\n        if (!this.isSphere(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry sphere type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_SPHERE`. */\n    static isSphere(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPoint3d(value.center) &&\n            typeof value.radius === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */\n    static assertTorus(value) {\n        if (!this.isTorus(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry torus type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TORUS`. */\n    static isTorus(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) &&\n            this.isPlane(value.plane) &&\n            typeof value.majorRadius === \"number\" &&\n            typeof value.minorRadius === \"number\";\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */\n    static assertTransform(value) {\n        if (!this.isTransform(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry transform type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM`. */\n    static isTransform(value) {\n        return Array.isArray(value) && value.length === 4 && value.every(v => (0, sdk_sdtf_core_1.isNumberArray)(v) && v.length === 4);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM_LIST`. */\n    static assertTransformList(value) {\n        if (!this.isTransformList(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry transform-list type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM_LIST`. */\n    static isTransformList(value) {\n        return Array.isArray(value) && value.every(v => this.isTransform(v));\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */\n    static assertVector(value) {\n        if (!this.isVector(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry vector type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2, 3 or 4 elements. */\n    static isVector(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && (value.length === 2 || value.length === 3 || value.length === 4);\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */\n    static assertVector2d(value) {\n        if (!this.isVector2d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry vector type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 2 elements. */\n    static isVector2d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 2;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */\n    static assertVector3d(value) {\n        if (!this.isVector3d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry vector type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 3 elements. */\n    static isVector3d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 3;\n    }\n    /** Runtime check that raises an error when the given value is not of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR`. */\n    static assertVector4d(value) {\n        if (!this.isVector4d(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a geometry vector type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfGeometryTypeHintName.GEOMETRY_VECTOR` with 4 elements. */\n    static isVector4d(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 4;\n    }\n}\nexports.SdtfGeometryTypeGuard = SdtfGeometryTypeGuard;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfGeometryTypeGuard.js","sourceRoot":"","sources":["../src/SdtfGeometryTypeGuard.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"3fa148712629768eb8ed3acee87529f5","cacheData":{"env":{}}}