{"id":"node_modules/@shapediver/sdk.sdtf-primitives/dist/SdtfPrimitiveTypeGuard.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeGuard.js.map","includedInParent":true,"mtime":1706527148405},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\package.json","includedInParent":true,"mtime":1706527147999},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":4,"column":32,"index":150},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeGuard.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfPrimitiveTypeGuard = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nclass SdtfPrimitiveTypeGuard {\n    /**\n     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.BOOLEAN`.\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertBoolean(value) {\n        if (!this.isBoolean(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive boolean type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */\n    static isBoolean(value) {\n        return typeof value === \"boolean\";\n    }\n    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.BOOLEAN`. */\n    static isBooleanType(typeHint) {\n        return typeHint === sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.BOOLEAN;\n    }\n    /**\n     * Runtime check that raises an error when the given value is not of type:\n     *   * `SdtfPrimitiveTypeHintName.CHAR`\n     *   * `SdtfPrimitiveTypeHintName.GUID`\n     *   * `SdtfPrimitiveTypeHintName.STRING`\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertString(value) {\n        if (!this.isString(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive string type.\");\n    }\n    /**\n     * Returns `true` when the given value is of type:\n     *   * `SdtfPrimitiveTypeHintName.CHAR`\n     *   * `SdtfPrimitiveTypeHintName.GUID`\n     *   * `SdtfPrimitiveTypeHintName.STRING`\n     */\n    static isString(value) {\n        return typeof value === \"string\";\n    }\n    /**\n     * Returns `true` when the given type hint name is of type:\n     *   * `SdtfPrimitiveTypeHintName.CHAR`\n     *   * `SdtfPrimitiveTypeHintName.GUID`\n     *   * `SdtfPrimitiveTypeHintName.STRING`\n     */\n    static isStringType(typeHint) {\n        return [\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.CHAR,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.GUID,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.STRING,\n        ].includes(typeHint);\n    }\n    /**\n     * Runtime check that raises an error when the given value is not of type:\n     *   * `SdtfPrimitiveTypeHintName.DECIMAL`\n     *   * `SdtfPrimitiveTypeHintName.DOUBLE`\n     *   * `SdtfPrimitiveTypeHintName.SINGLE`\n     *   * `SdtfPrimitiveTypeHintName.INT8`\n     *   * `SdtfPrimitiveTypeHintName.INT16`\n     *   * `SdtfPrimitiveTypeHintName.INT32`\n     *   * `SdtfPrimitiveTypeHintName.INT64`\n     *   * `SdtfPrimitiveTypeHintName.UINT8`\n     *   * `SdtfPrimitiveTypeHintName.UINT16`\n     *   * `SdtfPrimitiveTypeHintName.UINT32`\n     *   * `SdtfPrimitiveTypeHintName.UINT64`\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertNumber(value) {\n        if (!this.isNumber(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive number type.\");\n    }\n    /**\n     * Returns `true` when the given value is of type:\n     *   * `SdtfPrimitiveTypeHintName.DECIMAL`\n     *   * `SdtfPrimitiveTypeHintName.DOUBLE`\n     *   * `SdtfPrimitiveTypeHintName.SINGLE`\n     *   * `SdtfPrimitiveTypeHintName.INT8`\n     *   * `SdtfPrimitiveTypeHintName.INT16`\n     *   * `SdtfPrimitiveTypeHintName.INT32`\n     *   * `SdtfPrimitiveTypeHintName.INT64`\n     *   * `SdtfPrimitiveTypeHintName.UINT8`\n     *   * `SdtfPrimitiveTypeHintName.UINT16`\n     *   * `SdtfPrimitiveTypeHintName.UINT32`\n     *   * `SdtfPrimitiveTypeHintName.UINT64`\n     */\n    static isNumber(value) {\n        return (0, sdk_sdtf_core_1.isNumber)(value);\n    }\n    /**\n     * Returns `true` when the given type hint name is of type:\n     *   * `SdtfPrimitiveTypeHintName.DECIMAL`\n     *   * `SdtfPrimitiveTypeHintName.DOUBLE`\n     *   * `SdtfPrimitiveTypeHintName.SINGLE`\n     *   * `SdtfPrimitiveTypeHintName.INT8`\n     *   * `SdtfPrimitiveTypeHintName.INT16`\n     *   * `SdtfPrimitiveTypeHintName.INT32`\n     *   * `SdtfPrimitiveTypeHintName.INT64`\n     *   * `SdtfPrimitiveTypeHintName.UINT8`\n     *   * `SdtfPrimitiveTypeHintName.UINT16`\n     *   * `SdtfPrimitiveTypeHintName.UINT32`\n     *   * `SdtfPrimitiveTypeHintName.UINT64`\n     */\n    static isNumberType(typeHint) {\n        return [\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DECIMAL,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DOUBLE,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.SINGLE,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT8,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT16,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT32,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT64,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT8,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT16,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT32,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT64,\n        ].includes(typeHint);\n    }\n    /**\n     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.COLOR`.\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertColor(value) {\n        if (!this.isColor(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive color type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.COLOR`. */\n    static isColor(value) {\n        return (0, sdk_sdtf_core_1.isNumberArray)(value) && value.length === 4;\n    }\n    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.COLOR`. */\n    static isColorType(typeHint) {\n        return typeHint === sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.COLOR;\n    }\n    /**\n     * Runtime check that raises an error when the given value is not of type:\n     *   * `SdtfPrimitiveTypeHintName.DATA`\n     *   * `SdtfPrimitiveTypeHintName.IMAGE`\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertDataView(value) {\n        if (!this.isDataView(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive data type.\");\n    }\n    /**\n     * Returns `true` when the given value is of type:\n     *   * `SdtfPrimitiveTypeHintName.DATA`\n     *   * `SdtfPrimitiveTypeHintName.IMAGE`\n     */\n    static isDataView(value) {\n        return ArrayBuffer.isView(value);\n    }\n    /**\n     * Returns `true` when the given type hint name is of type:\n     *   * `SdtfPrimitiveTypeHintName.DATA`\n     *   * `SdtfPrimitiveTypeHintName.IMAGE`\n     */\n    static isDataViewType(typeHint) {\n        return [\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DATA,\n            sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.IMAGE,\n        ].includes(typeHint);\n    }\n    /**\n     * Runtime check that raises an error when the given value is not of type `SdtfPrimitiveTypeHintName.JSON`.\n     * @throws {@link SdtfError} when the invariant is not met.\n     */\n    static assertJson(value) {\n        if (!this.isJson(value))\n            throw new sdk_sdtf_core_1.SdtfError(\"Assertion error: Value is not a primitive json type.\");\n    }\n    /** Returns `true` when the given value is of type `SdtfPrimitiveTypeHintName.JSON`. */\n    static isJson(value) {\n        return (0, sdk_sdtf_core_1.isDataObject)(value) || Array.isArray(value);\n    }\n    /** Returns `true` when the given type hint name is of type `SdtfPrimitiveTypeHintName.JSON`. */\n    static isJsonType(typeHint) {\n        return typeHint === sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.JSON;\n    }\n}\nexports.SdtfPrimitiveTypeGuard = SdtfPrimitiveTypeGuard;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfPrimitiveTypeGuard.js","sourceRoot":"","sources":["../src/SdtfPrimitiveTypeGuard.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"3ae3791ff4eed81aa72538b88d5beb66","cacheData":{"env":{}}}