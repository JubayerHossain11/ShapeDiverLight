{"id":"node_modules/@shapediver/sdk.sdtf-geometry/dist/SdtfGeometryTypeValidator.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeValidator.js.map","includedInParent":true,"mtime":1706527148606},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-geometry\\package.json","includedInParent":true,"mtime":1706527148020},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":4,"column":32,"index":153},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeValidator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"},{"name":"./SdtfGeometryTypeGuard","loc":{"line":5,"column":40,"index":223},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeValidator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeGuard.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfGeometryTypeValidator = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nconst SdtfGeometryTypeGuard_1 = require(\"./SdtfGeometryTypeGuard\");\n/** Validates values that are of a type hint supported by this integration. */\nclass SdtfGeometryTypeValidator {\n    /**\n     * Validates the given component of the given type.\n     * @throws {@link SdtfError} when the given type is not supported.\n     */\n    validateComponent(typeHint, value, accessor) {\n        switch (typeHint) {\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ARC:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isArc(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isBoundingBox(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOX:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isBox(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CIRCLE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCircle(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_COMPLEX:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isComplex(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CONE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCone(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CYLINDER:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isCylinder(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isEllipse(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isInterval(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isInterval2(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_LINE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isLine(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_MATRIX:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isMatrix(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_PLANE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPlane(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT2D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint2d(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT3D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint3d(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT4D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPoint4d(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POLYLINE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isPolyline(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RAY:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isRay(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isRectangle(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_SPHERE:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isSphere(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TORUS:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTorus(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTransform(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM_LIST:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isTransformList(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR2D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector2d(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR3D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector3d(value);\n            case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR4D:\n                return SdtfGeometryTypeGuard_1.SdtfGeometryTypeGuard.isVector4d(value);\n            default:\n                (0, sdk_sdtf_core_1.sdAssertUnreachable)(typeHint);\n        }\n    }\n}\nexports.SdtfGeometryTypeValidator = SdtfGeometryTypeValidator;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfGeometryTypeValidator.js","sourceRoot":"","sources":["../src/SdtfGeometryTypeValidator.ts"],"names":[],"mappings":";;;AAAA,6DAKkC;AAClC,mEAA+D;AAE/D,8EAA8E;AAC9E,MAAa,yBAAyB;IAElC;;;OAGG;IACH,iBAAiB,CAAE,QAAkC,EAAE,KAAe,EAAE,QAAyD;QAC7H,QAAQ,QAAQ,EAAE;YACd,KAAK,wCAAwB,CAAC,YAAY;gBACtC,OAAO,6CAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAC7C,KAAK,wCAAwB,CAAC,qBAAqB;gBAC/C,OAAO,6CAAqB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;YACrD,KAAK,wCAAwB,CAAC,YAAY;gBACtC,OAAO,6CAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAC7C,KAAK,wCAAwB,CAAC,eAAe;gBACzC,OAAO,6CAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAChD,KAAK,wCAAwB,CAAC,gBAAgB;gBAC1C,OAAO,6CAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,wCAAwB,CAAC,aAAa;gBACvC,OAAO,6CAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YAC9C,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD,KAAK,wCAAwB,CAAC,gBAAgB;gBAC1C,OAAO,6CAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD,KAAK,wCAAwB,CAAC,kBAAkB;gBAC5C,OAAO,6CAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;YACnD,KAAK,wCAAwB,CAAC,aAAa;gBACvC,OAAO,6CAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YAC9C,KAAK,wCAAwB,CAAC,eAAe;gBACzC,OAAO,6CAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAChD,KAAK,wCAAwB,CAAC,cAAc;gBACxC,OAAO,6CAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAC/C,KAAK,wCAAwB,CAAC,cAAc;gBACxC,OAAO,6CAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAC/C,KAAK,wCAAwB,CAAC,gBAAgB;gBAC1C,OAAO,6CAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,wCAAwB,CAAC,gBAAgB;gBAC1C,OAAO,6CAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,wCAAwB,CAAC,gBAAgB;gBAC1C,OAAO,6CAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YACjD,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD,KAAK,wCAAwB,CAAC,YAAY;gBACtC,OAAO,6CAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAC7C,KAAK,wCAAwB,CAAC,kBAAkB;gBAC5C,OAAO,6CAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;YACnD,KAAK,wCAAwB,CAAC,eAAe;gBACzC,OAAO,6CAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAChD,KAAK,wCAAwB,CAAC,cAAc;gBACxC,OAAO,6CAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAC/C,KAAK,wCAAwB,CAAC,kBAAkB;gBAC5C,OAAO,6CAAqB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;YACnD,KAAK,wCAAwB,CAAC,uBAAuB;gBACjD,OAAO,6CAAqB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;YACvD,KAAK,wCAAwB,CAAC,eAAe;gBACzC,OAAO,6CAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAChD,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD,KAAK,wCAAwB,CAAC,iBAAiB;gBAC3C,OAAO,6CAAqB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAClD;gBACI,IAAA,mCAAmB,EAAC,QAAQ,CAAC,CAAA;SACpC;IACL,CAAC;CAEJ;AArED,8DAqEC","sourcesContent":[null]}},"error":null,"hash":"f0e7b6ace103ff25cfee84db1877051e","cacheData":{"env":{}}}