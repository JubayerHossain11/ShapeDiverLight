{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/managers/SceneTreeManager.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js.map","includedInParent":true,"mtime":1706527153695},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\managers\\SceneTreeManager.ts","includedInParent":true,"mtime":1706527154295},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":23,"column":35,"index":1028},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":24,"column":38,"index":1078},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":25,"column":42,"index":1157},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":26,"column":37,"index":1235},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":27,"column":41,"index":1312},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.light-engine","loc":{"line":28,"column":55,"index":1407},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":29,"column":28,"index":1489},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":30,"column":59,"index":1563},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"../types/ThreejsData","loc":{"line":31,"column":30,"index":1651},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\types\\ThreejsData.js"},{"name":"@shapediver/viewer.rendering-engine.camera-engine","loc":{"line":32,"column":56,"index":1733},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"../objects/SDData","loc":{"line":33,"column":25,"index":1813},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDData.js"},{"name":"../objects/SDObject","loc":{"line":34,"column":27,"index":1863},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDObject.js"},{"name":"../objects/SDBone","loc":{"line":35,"column":25,"index":1913},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDBone.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SceneTreeManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst ThreejsData_1 = require(\"../types/ThreejsData\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nconst SDObject_1 = require(\"../objects/SDObject\");\r\nconst SDBone_1 = require(\"../objects/SDBone\");\r\nclass SceneTreeManager {\r\n    // #endregion Properties (13)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (13)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._inputValidator = viewer_shared_services_1.InputValidator.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._scene = new THREE.Scene();\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._boundingBox = new viewer_shared_math_1.Box();\r\n        this._boundingBoxSensitiveData = [];\r\n        this._lastRendererType = viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD;\r\n        this._lastRootVersion = '';\r\n        this._scene.background = new THREE.Color('#ffffff');\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (4)\r\n    get boundingBox() {\r\n        return this._boundingBox;\r\n    }\r\n    get lastRendererType() {\r\n        return this._lastRendererType;\r\n    }\r\n    get lastRootVersion() {\r\n        return this._lastRootVersion;\r\n    }\r\n    get scene() {\r\n        return this._scene;\r\n    }\r\n    // #endregion Public Accessors (4)\r\n    // #region Public Methods (6)\r\n    init() { }\r\n    isEmpty() {\r\n        return ((this._boundingBox.min[0] === 0 && this._boundingBox.min[1] === 0 && this._boundingBox.min[2] === 0 &&\r\n            this._boundingBox.max[0] === 0 && this._boundingBox.max[1] === 0 && this._boundingBox.max[2] === 0) || this._boundingBox.isEmpty());\r\n    }\r\n    /**\r\n     * Convert the data of the scene graph node into the format of the implementation.\r\n     *\r\n     * @param data the data element\r\n     * @param obj the corresponding type node\r\n     */\r\n    updateData(node, obj, data, filter, skeleton) {\r\n        let dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);\r\n        let newChild = false;\r\n        if (!dataChild) {\r\n            newChild = true;\r\n            dataChild = new SDData_1.SDData(data.id, data.version);\r\n            obj.add(dataChild);\r\n        }\r\n        if (this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES)\r\n            this.injectAttributeData(node, data);\r\n        switch (true) {\r\n            case data instanceof viewer_shared_types_1.GeometryData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.GEOMETRY;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.geometryLoader.load(data, dataChild, newChild, skeleton);\r\n                const bb = data.primitive.computeBoundingBox(node.worldMatrix);\r\n                // adjust the general BB\r\n                node.boundingBox.union(bb);\r\n                // create the specific BB if it doesn't exist yet\r\n                if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                    node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n                // adjust the specific BB\r\n                node.boundingBoxViewport[this._renderingEngine.id].union(bb);\r\n                break;\r\n            case data instanceof ThreejsData_1.ThreejsData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.THREEJS;\r\n                dataChild.add(data.obj);\r\n                const bbThree = new THREE.Box3().setFromObject(data.obj);\r\n                // adjust the general BB\r\n                node.boundingBox.union(new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(...bbThree.min.toArray()), gl_matrix_1.vec3.fromValues(...bbThree.max.toArray())));\r\n                // create the specific BB if it doesn't exist yet\r\n                if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                    node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n                // adjust the specific BB\r\n                node.boundingBoxViewport[this._renderingEngine.id].union(new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(...bbThree.min.toArray()), gl_matrix_1.vec3.fromValues(...bbThree.max.toArray())));\r\n                break;\r\n            case data instanceof viewer_shared_types_1.AbstractMaterialData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.MATERIAL;\r\n                break;\r\n            case data instanceof viewer_rendering_engine_light_engine_1.AbstractLight:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.LIGHT;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.lightLoader.load(data, dataChild);\r\n                if (data instanceof viewer_rendering_engine_light_engine_1.DirectionalLight && data.useNodeData === false)\r\n                    this._boundingBoxSensitiveData.push({ data: data, dataChild });\r\n                break;\r\n            case data instanceof viewer_rendering_engine_camera_engine_1.AbstractCamera:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.CAMERA;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.cameraManager.load(data, dataChild);\r\n                break;\r\n            case data instanceof viewer_shared_types_1.HTMLElementAnchorData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.htmlElementAnchorLoader.load(node, data);\r\n                break;\r\n            case data instanceof viewer_shared_types_1.AnimationData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.ANIMATION;\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n    updateMorphWeights(node = this._tree.root, obj = this._mainNode) {\r\n        if (!node || !obj)\r\n            return;\r\n        for (let i = 0, len = node.data.length; i < len; i++) {\r\n            if (node.data[i] instanceof viewer_shared_types_1.GeometryData) {\r\n                const data = node.data[i];\r\n                let dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);\r\n                if (dataChild)\r\n                    dataChild.traverse(o => {\r\n                        if (o instanceof THREE.Points ||\r\n                            o instanceof THREE.LineSegments ||\r\n                            o instanceof THREE.LineLoop ||\r\n                            o instanceof THREE.Line ||\r\n                            o instanceof THREE.Mesh)\r\n                            o.morphTargetInfluences = data.morphWeights;\r\n                    });\r\n            }\r\n        }\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            if (!nodeChild)\r\n                continue;\r\n            const objChild = obj.children.find(oc => oc.SDid === nodeChild.id);\r\n            if (objChild)\r\n                this.updateMorphWeights(nodeChild, objChild);\r\n        }\r\n    }\r\n    /**\r\n     * Update the current node via the scene graph node.\r\n     * Convert the data if needed.\r\n     *\r\n     * @param node the scene graph node\r\n     * @param obj the current type object\r\n     */\r\n    updateNode(node = this._tree.root, obj = this._mainNode, filter = { transformationOnly: false }, skeleton) {\r\n        const convertedObject = obj;\r\n        // reset the general bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBox.reset();\r\n        // create the specific BB if it doesn't exist yet\r\n        if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n            node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n        // reset the specific bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBoxViewport[this._renderingEngine.id].reset();\r\n        if (filter.transformationOnly === false) {\r\n            // remove all data items that do not exist anymore\r\n            const dataIds = node.data.map(d => d.id);\r\n            const dataToRemove = convertedObject.children.filter(oc => oc instanceof SDData_1.SDData ? !(dataIds.includes(oc.SDid)) || !(node.data.find(d => d.id === oc.SDid).version === oc.SDversion) : false);\r\n            dataToRemove.forEach(dTR => {\r\n                this.removeData(dTR);\r\n                convertedObject.remove(dTR);\r\n            });\r\n            // remove all child nodes in the transformed object that do not exist anymore\r\n            // the filter goes also through the data items as they were already added\r\n            const nodeIds = node.children.filter(d => !d.excludeViewports.includes(this._renderingEngine.id)).map(d => d.id);\r\n            const childrenToRemove = convertedObject.children.filter(oc => oc instanceof SDObject_1.SDObject && !(oc instanceof SDData_1.SDData) ? !nodeIds.includes(oc.SDid) : false);\r\n            childrenToRemove.forEach(cTR => {\r\n                cTR.traverse(o => {\r\n                    if (o instanceof SDData_1.SDData)\r\n                        this.removeData(o);\r\n                });\r\n                convertedObject.remove(cTR);\r\n            });\r\n        }\r\n        // create the skeleton if the node is marked as the skin node (root node of the skeleton)\r\n        if (node.skinNode === true) {\r\n            const bones = [];\r\n            for (let i = 0; i < node.bones.length; i++)\r\n                bones.push(this.getBone(node.bones[i]));\r\n            const boneInverses = [];\r\n            for (let i = 0; i < node.boneInverses.length; i++)\r\n                boneInverses.push(new THREE.Matrix4().fromArray(node.boneInverses[i]));\r\n            skeleton = new THREE.Skeleton(bones, boneInverses);\r\n        }\r\n        // convert all data items of the current node\r\n        // old versions will be replaced by new ones\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            this.updateData(node, convertedObject, node.data[i], filter, skeleton);\r\n        // add new children and update the ones that have a different version\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            const objChild = convertedObject.children.find(oc => oc.SDid === nodeChild.id);\r\n            if (!objChild) {\r\n                const newChild = node.data.find(d => d instanceof viewer_shared_types_1.BoneData) ? new SDBone_1.SDBone(nodeChild.id, nodeChild.version) : new SDObject_1.SDObject(nodeChild.id, nodeChild.version);\r\n                const oldChild = nodeChild.threeJsObject[this._renderingEngine.id];\r\n                nodeChild.threeJsObject[this._renderingEngine.id] = newChild;\r\n                if (nodeChild.updateCallbackThreeJsObject)\r\n                    nodeChild.updateCallbackThreeJsObject(newChild, oldChild, this._renderingEngine.id);\r\n                convertedObject.add(newChild);\r\n                this.updateNode(nodeChild, newChild, filter, skeleton);\r\n            }\r\n            else if (objChild.SDversion !== nodeChild.version) {\r\n                // if the version is different, update the child\r\n                this.updateNode(nodeChild, objChild, filter, skeleton);\r\n                objChild.SDversion = nodeChild.version;\r\n            }\r\n            else {\r\n                this.updateNode(nodeChild, objChild, filter, skeleton);\r\n            }\r\n            // adjust the general BB\r\n            if (!nodeChild.boundingBox.isEmpty())\r\n                node.boundingBox.union(nodeChild.boundingBox);\r\n            // adjust the specific BB\r\n            if (nodeChild.boundingBoxViewport[this._renderingEngine.id] && !nodeChild.boundingBoxViewport[this._renderingEngine.id].isEmpty()) {\r\n                // only do this if the node is\r\n                // 1. visible\r\n                // 2. no included in the \"excludeViewports\"\r\n                // 3. if there are \"restrictViewports\", it needs to be in them\r\n                if (node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id))) {\r\n                    node.boundingBoxViewport[this._renderingEngine.id].union(nodeChild.boundingBoxViewport[this._renderingEngine.id]);\r\n                }\r\n            }\r\n        }\r\n        convertedObject.visible = node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id));\r\n        convertedObject.applyTransformation(node.nodeMatrix);\r\n    }\r\n    updateSceneTree(root, lightEngine) {\r\n        if (this._tree.root.version === this._lastRootVersion && this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD)\r\n            return;\r\n        this._lastRootVersion = this._tree.root.version;\r\n        this._lastRendererType = this._renderingEngine.type;\r\n        if (this._renderingEngine.closed)\r\n            return;\r\n        const oldBB = this._boundingBox.clone();\r\n        this._boundingBox = new viewer_shared_math_1.Box();\r\n        this._renderingEngine.lightLoader.shadowMapCount = 0;\r\n        if (!this._mainNode) {\r\n            this._mainNode = new SDObject_1.SDObject(root.id, root.version);\r\n            const oldObj = root.threeJsObject[this._renderingEngine.id];\r\n            root.threeJsObject[this._renderingEngine.id] = this._mainNode;\r\n            if (root.updateCallbackThreeJsObject)\r\n                root.updateCallbackThreeJsObject(this._mainNode, oldObj, this._renderingEngine.id);\r\n            this._scene.add(this._mainNode);\r\n        }\r\n        this._boundingBoxSensitiveData = [];\r\n        this._currentSDTFOverview = this.createSDTFOverview();\r\n        this.updateNode(root, this._mainNode);\r\n        this._boundingBox = root.boundingBoxViewport[this._renderingEngine.id].clone();\r\n        for (let i = 0; i < this._boundingBoxSensitiveData.length; i++)\r\n            this._renderingEngine.lightLoader.adjustToBoundingBox(this._boundingBoxSensitiveData[i].data, this._boundingBoxSensitiveData[i].dataChild, this._boundingBox);\r\n        if (!(this._boundingBox.min[0] === oldBB.min[0] && this._boundingBox.min[1] === oldBB.min[1] && this._boundingBox.min[2] === oldBB.min[2] &&\r\n            this._boundingBox.max[0] === oldBB.max[0] && this._boundingBox.max[1] === oldBB.max[1] && this._boundingBox.max[2] === oldBB.max[2])) {\r\n            if (!this._stateEngine.renderingEngines[this._renderingEngine.id].boundingBoxCreated.resolved && !this._boundingBox.isEmpty())\r\n                this._stateEngine.renderingEngines[this._renderingEngine.id].boundingBoxCreated.resolve(true);\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, {\r\n                viewportId: this._renderingEngine.id, boundingBox: {\r\n                    min: gl_matrix_1.vec3.clone(this._boundingBox.min),\r\n                    max: gl_matrix_1.vec3.clone(this._boundingBox.max),\r\n                }\r\n            });\r\n        }\r\n        this._renderingEngine.renderingManager.evaluateTextureUnitCount(this._renderingEngine.lightLoader.shadowMapCount + this._renderingEngine.materialLoader.maxMapCount);\r\n    }\r\n    // #endregion Public Methods (6)\r\n    // #region Private Methods (5)\r\n    collectSDTFItemData(node) {\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFItemData)\r\n                return node.data[i];\r\n        if (!node.parent)\r\n            return;\r\n        return this.collectSDTFItemData(node.parent);\r\n    }\r\n    createSDTFOverview(node = this._tree.root) {\r\n        const out = new viewer_shared_types_1.SDTFOverviewData({});\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFOverviewData)\r\n                out.merge(node.data[i]);\r\n        for (let i = 0, len = node.children.length; i < len; i++)\r\n            out.merge(new viewer_shared_types_1.SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n        return out.overview;\r\n    }\r\n    getBone(node) {\r\n        let bone;\r\n        this._mainNode.traverse((o) => {\r\n            if (o.SDid === node.id)\r\n                bone = o;\r\n        });\r\n        return bone;\r\n    }\r\n    injectAttributeData(node, data) {\r\n        const itemData = this.collectSDTFItemData(node);\r\n        let visData = {\r\n            material: new viewer_shared_types_1.MaterialStandardData({ color: this._renderingEngine.defaultMaterialColor, opacity: 1 }),\r\n            matrix: gl_matrix_1.mat4.create()\r\n        };\r\n        if (this._renderingEngine.visualizeAttributes) {\r\n            const userVisData = this._renderingEngine.visualizeAttributes(this._currentSDTFOverview, itemData);\r\n            this._inputValidator.validateAndError(`Viewer.visualizeAttributes`, userVisData, 'object', true);\r\n            this._inputValidator.validateAndError(`Viewer.visualizeAttributes`, userVisData.matrix, 'mat4', true);\r\n            visData.material = userVisData.material;\r\n            visData.matrix = visData.matrix;\r\n        }\r\n        node.addTransformation({\r\n            id: 'sdtf',\r\n            matrix: visData.matrix\r\n        });\r\n        if (data instanceof viewer_shared_types_1.GeometryData)\r\n            data.attributeMaterial = visData.material;\r\n    }\r\n    removeData(dataObject) {\r\n        switch (true) {\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.GEOMETRY:\r\n                dataObject.traverse((o) => {\r\n                    if (o instanceof THREE.Mesh) {\r\n                        this._renderingEngine.geometryLoader.removeFromGeometryCache(o.geometry.userData.SDid + '_' + o.geometry.userData.SDversion);\r\n                        this._renderingEngine.geometryLoader.removeFromPrimitiveCache(o.geometry.userData.primitiveSDid + '_' + o.geometry.userData.primitiveSDversion);\r\n                        this._renderingEngine.materialLoader.removeFromMaterialCache(o.material.userData.SDid + '_' + o.material.userData.SDversion);\r\n                        for (let t in o.material) {\r\n                            if (o.material[t] instanceof THREE.Texture) {\r\n                                if (t !== 'envMap')\r\n                                    o.material[t].dispose();\r\n                            }\r\n                        }\r\n                        o.material.dispose();\r\n                    }\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.THREEJS:\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.MATERIAL:\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.LIGHT:\r\n                dataObject.traverse((o) => {\r\n                    if (o instanceof THREE.Light)\r\n                        o.dispose();\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR:\r\n                this._renderingEngine.htmlElementAnchorLoader.removeData(dataObject.SDid, dataObject.SDversion);\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.ANIMATION:\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.SceneTreeManager = SceneTreeManager;\r\n"},"sourceMaps":{"js":{"version":3,"file":"SceneTreeManager.js","sourceRoot":"","sources":["../../src/managers/SceneTreeManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport {\r\n    IMaterialAbstractData,\r\n    IAnimationData,\r\n    IGeometryData,\r\n    IHTMLElementAnchorData,\r\n    IMaterialStandardData,\r\n    SDTFOverviewData,\r\n    SDTFItemData,\r\n    GeometryData,\r\n    AbstractMaterialData,\r\n    HTMLElementAnchorData,\r\n    AnimationData,\r\n    MaterialStandardData,\r\n    ISDTFOverview,\r\n    BoneData\r\n} from '@shapediver/viewer.shared.types'\r\nimport { ITree, ITreeNode, ITreeNodeData, Tree, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { Box, IBox } from '@shapediver/viewer.shared.math'\r\nimport {\r\n    Converter,\r\n    EventEngine,\r\n    EVENTTYPE,\r\n    InputValidator,\r\n    Logger,\r\n    StateEngine,\r\n} from '@shapediver/viewer.shared.services'\r\nimport { AbstractLight, DirectionalLight, LightEngine } from '@shapediver/viewer.rendering-engine.light-engine'\r\nimport { mat4, quat, vec3 } from 'gl-matrix'\r\nimport { IManager, ISDObject, RENDERER_TYPE } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\n\r\nimport { ThreejsData } from '../types/ThreejsData'\r\nimport { RenderingEngine } from '../RenderingEngine'\r\nimport { Bone } from 'three'\r\nimport { AbstractCamera } from '@shapediver/viewer.rendering-engine.camera-engine'\r\nimport { SDData, SD_DATA_TYPE } from '../objects/SDData'\r\nimport { SDObject } from '../objects/SDObject'\r\nimport { SDBone } from '../objects/SDBone'\r\n\r\ntype UpdateFilter = {\r\n    transformationOnly: boolean\r\n}\r\n\r\nexport class SceneTreeManager implements IManager {\r\n    // #region Properties (13)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _inputValidator: InputValidator = InputValidator.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _scene: THREE.Scene = new THREE.Scene();\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n    private readonly _tree: ITree = Tree.instance;\r\n\r\n    private _boundingBox: IBox = new Box();\r\n    private _boundingBoxSensitiveData: {\r\n        data: AbstractLight,\r\n        dataChild: SDData\r\n    }[] = [];\r\n    private _currentSDTFOverview!: ISDTFOverview;\r\n    private _lastRendererType: RENDERER_TYPE = RENDERER_TYPE.STANDARD;\r\n    private _lastRootVersion: string = '';\r\n    private _mainNode!: SDObject;\r\n\r\n    // #endregion Properties (13)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) {\r\n        this._scene.background = new THREE.Color('#ffffff');\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (4)\r\n\r\n    public get boundingBox(): IBox {\r\n        return this._boundingBox;\r\n    }\r\n\r\n    public get lastRendererType(): RENDERER_TYPE {\r\n        return this._lastRendererType;\r\n    }\r\n\r\n    public get lastRootVersion(): string {\r\n        return this._lastRootVersion;\r\n    }\r\n\r\n    public get scene() {\r\n        return this._scene;\r\n    }\r\n\r\n    // #endregion Public Accessors (4)\r\n\r\n    // #region Public Methods (6)\r\n\r\n    public init(): void { }\r\n\r\n    public isEmpty() {\r\n        return ((this._boundingBox.min[0] === 0 && this._boundingBox.min[1] === 0 && this._boundingBox.min[2] === 0 &&\r\n            this._boundingBox.max[0] === 0 && this._boundingBox.max[1] === 0 && this._boundingBox.max[2] === 0) || this._boundingBox.isEmpty());\r\n    }\r\n\r\n    /**\r\n     * Convert the data of the scene graph node into the format of the implementation.\r\n     * \r\n     * @param data the data element\r\n     * @param obj the corresponding type node\r\n     */\r\n    public updateData(node: ITreeNode, obj: SDObject, data: ITreeNodeData, filter: UpdateFilter, skeleton?: THREE.Skeleton): void {\r\n        let dataChild = <SDData>obj.children.find(oc => (<SDData>oc).SDid === data.id && (<SDData>oc).SDversion === data.version);\r\n        let newChild = false;\r\n\r\n        if (!dataChild) {\r\n            newChild = true;\r\n            dataChild = new SDData(data.id, data.version);\r\n            obj.add(dataChild);\r\n        }\r\n\r\n        if (this._renderingEngine.type === RENDERER_TYPE.ATTRIBUTES)\r\n            this.injectAttributeData(node, data);\r\n\r\n        switch (true) {\r\n            case data instanceof GeometryData:\r\n                dataChild.SDtype = SD_DATA_TYPE.GEOMETRY;\r\n\r\n                if (filter.transformationOnly === false) \r\n                    this._renderingEngine.geometryLoader.load(<GeometryData>data, dataChild, newChild, skeleton);\r\n\r\n                const bb = (<GeometryData>data).primitive.computeBoundingBox(node.worldMatrix)\r\n\r\n                // adjust the general BB\r\n                node.boundingBox.union(bb);\r\n\r\n                // create the specific BB if it doesn't exist yet\r\n                if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                    node.boundingBoxViewport[this._renderingEngine.id] = new Box();\r\n\r\n                // adjust the specific BB\r\n                node.boundingBoxViewport[this._renderingEngine.id].union(bb);\r\n\r\n                break;\r\n            case data instanceof ThreejsData:\r\n                dataChild.SDtype = SD_DATA_TYPE.THREEJS;\r\n                dataChild.add(<SDData>(<ThreejsData>data).obj);\r\n\r\n                const bbThree = new THREE.Box3().setFromObject((<ThreejsData>data).obj);\r\n\r\n                // adjust the general BB\r\n                node.boundingBox.union(new Box(vec3.fromValues(...bbThree.min.toArray()), vec3.fromValues(...bbThree.max.toArray())));\r\n\r\n                // create the specific BB if it doesn't exist yet\r\n                if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                    node.boundingBoxViewport[this._renderingEngine.id] = new Box();\r\n\r\n                // adjust the specific BB\r\n                node.boundingBoxViewport[this._renderingEngine.id].union(new Box(vec3.fromValues(...bbThree.min.toArray()), vec3.fromValues(...bbThree.max.toArray())));\r\n\r\n                break;\r\n            case data instanceof AbstractMaterialData:\r\n                dataChild.SDtype = SD_DATA_TYPE.MATERIAL;\r\n                break;\r\n            case data instanceof AbstractLight:\r\n                dataChild.SDtype = SD_DATA_TYPE.LIGHT;\r\n                if (filter.transformationOnly === false) this._renderingEngine.lightLoader.load(<AbstractLight>data, dataChild);\r\n                if (data instanceof DirectionalLight && (<DirectionalLight>data).useNodeData === false)\r\n                    this._boundingBoxSensitiveData.push({ data: <AbstractLight>data, dataChild })\r\n                break;\r\n            case data instanceof AbstractCamera:\r\n                dataChild.SDtype = SD_DATA_TYPE.CAMERA;\r\n                if (filter.transformationOnly === false) this._renderingEngine.cameraManager.load(<AbstractCamera>data, dataChild);\r\n                break;\r\n            case data instanceof HTMLElementAnchorData:\r\n                dataChild.SDtype = SD_DATA_TYPE.HTML_ELEMENT_ANCHOR;\r\n                if (filter.transformationOnly === false) this._renderingEngine.htmlElementAnchorLoader.load(node, <HTMLElementAnchorData>data);\r\n                break;\r\n            case data instanceof AnimationData:\r\n                dataChild.SDtype = SD_DATA_TYPE.ANIMATION;\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n\r\n    public updateMorphWeights(node: ITreeNode = this._tree.root, obj: SDObject = this._mainNode) {\r\n        if (!node || !obj) return;\r\n\r\n        for (let i = 0, len = node.data.length; i < len; i++) {\r\n            if (node.data[i] instanceof GeometryData) {\r\n                const data: GeometryData = <GeometryData>node.data[i];\r\n                let dataChild = <SDData>obj.children.find(oc => (<SDData>oc).SDid === data.id && (<SDData>oc).SDversion === data.version);\r\n                if (dataChild)\r\n                    dataChild.traverse(o => {\r\n                        if (o instanceof THREE.Points ||\r\n                            o instanceof THREE.LineSegments ||\r\n                            o instanceof THREE.LineLoop ||\r\n                            o instanceof THREE.Line ||\r\n                            o instanceof THREE.Mesh)\r\n                            o.morphTargetInfluences = data.morphWeights;\r\n                    })\r\n            }\r\n        }\r\n\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            if (!nodeChild) continue;\r\n            const objChild = <SDObject>obj.children.find(oc => (<SDObject>oc).SDid === nodeChild.id);\r\n            if (objChild) this.updateMorphWeights(nodeChild, objChild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the current node via the scene graph node.\r\n     * Convert the data if needed.\r\n     * \r\n     * @param node the scene graph node\r\n     * @param obj the current type object\r\n     */\r\n    public updateNode(node: ITreeNode = this._tree.root, obj: THREE.Object3D = this._mainNode, filter: UpdateFilter = { transformationOnly: false }, skeleton?: THREE.Skeleton) {\r\n        const convertedObject = <SDObject>obj;\r\n\r\n        // reset the general bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBox.reset();\r\n\r\n        // create the specific BB if it doesn't exist yet\r\n        if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n            node.boundingBoxViewport[this._renderingEngine.id] = new Box();\r\n\r\n        // reset the specific bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBoxViewport[this._renderingEngine.id].reset();\r\n\r\n        if (filter.transformationOnly === false) {\r\n            // remove all data items that do not exist anymore\r\n            const dataIds = node.data.map(d => d.id);\r\n            const dataToRemove = convertedObject.children.filter(oc => oc instanceof SDData ? !(dataIds.includes(oc.SDid)) || !(node.data.find(d => d.id === oc.SDid)!.version === oc.SDversion) : false);\r\n            dataToRemove.forEach(dTR => {\r\n                this.removeData(<SDData>dTR)\r\n                convertedObject.remove(dTR);\r\n            })\r\n\r\n            // remove all child nodes in the transformed object that do not exist anymore\r\n            // the filter goes also through the data items as they were already added\r\n            const nodeIds = node.children.filter(d => !d.excludeViewports.includes(this._renderingEngine.id)).map(d => d.id);\r\n            const childrenToRemove = convertedObject.children.filter(oc => oc instanceof SDObject && !(oc instanceof SDData) ? !nodeIds.includes(oc.SDid) : false);\r\n            childrenToRemove.forEach(cTR => {\r\n                cTR.traverse(o => {\r\n                    if (o instanceof SDData)\r\n                        this.removeData(o);\r\n                })\r\n                convertedObject.remove(cTR);\r\n            });\r\n        }\r\n\r\n        // create the skeleton if the node is marked as the skin node (root node of the skeleton)\r\n        if(node.skinNode === true) { \r\n            const bones: THREE.Bone[] = [];\r\n            for (let i = 0; i < node.bones.length; i++)\r\n                bones.push(this.getBone(node.bones[i]));\r\n\r\n            const boneInverses: THREE.Matrix4[] = [];\r\n            for (let i = 0; i < node.boneInverses.length; i++)\r\n                boneInverses.push(new THREE.Matrix4().fromArray(node.boneInverses[i]));\r\n\r\n            skeleton = new THREE.Skeleton(bones, boneInverses)\r\n        }\r\n\r\n        // convert all data items of the current node\r\n        // old versions will be replaced by new ones\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            this.updateData(node, convertedObject, node.data[i], filter, skeleton);\r\n\r\n        // add new children and update the ones that have a different version\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            const objChild = <SDObject>convertedObject.children.find(oc => (<SDObject>oc).SDid === nodeChild.id);\r\n\r\n            if (!objChild) {\r\n                const newChild = node.data.find(d => d instanceof BoneData) ? new SDBone(nodeChild.id, nodeChild.version) : new SDObject(nodeChild.id, nodeChild.version);\r\n                const oldChild = nodeChild.threeJsObject[this._renderingEngine.id];\r\n                nodeChild.threeJsObject[this._renderingEngine.id] = newChild;\r\n                if (nodeChild.updateCallbackThreeJsObject)\r\n                    nodeChild.updateCallbackThreeJsObject(newChild, oldChild, this._renderingEngine.id)\r\n                convertedObject.add(newChild);\r\n                this.updateNode(nodeChild, newChild, filter, skeleton);\r\n            } else if (objChild.SDversion !== nodeChild.version) {\r\n                // if the version is different, update the child\r\n                this.updateNode(nodeChild, objChild, filter, skeleton);\r\n                objChild.SDversion = nodeChild.version;\r\n            } else {\r\n                this.updateNode(nodeChild, objChild, filter, skeleton);\r\n            }\r\n\r\n            // adjust the general BB\r\n            if (!nodeChild.boundingBox.isEmpty())\r\n                node.boundingBox.union(nodeChild.boundingBox);\r\n\r\n            // adjust the specific BB\r\n            if (nodeChild.boundingBoxViewport[this._renderingEngine.id] && !nodeChild.boundingBoxViewport[this._renderingEngine.id].isEmpty()) {\r\n                // only do this if the node is\r\n                // 1. visible\r\n                // 2. no included in the \"excludeViewports\"\r\n                // 3. if there are \"restrictViewports\", it needs to be in them\r\n                if (node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id))) {\r\n                    node.boundingBoxViewport[this._renderingEngine.id].union(nodeChild.boundingBoxViewport[this._renderingEngine.id]);\r\n                }\r\n            }\r\n        }\r\n\r\n        convertedObject.visible = node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id));\r\n        convertedObject.applyTransformation(node.nodeMatrix);\r\n    }\r\n\r\n    public updateSceneTree(root: ITreeNode, lightEngine: LightEngine): void {\r\n        if (this._tree.root.version === this._lastRootVersion && this._renderingEngine.type === RENDERER_TYPE.STANDARD) return;\r\n        this._lastRootVersion = this._tree.root.version;\r\n        this._lastRendererType = this._renderingEngine.type;\r\n\r\n        if (this._renderingEngine.closed) return;\r\n        const oldBB = this._boundingBox.clone();\r\n        this._boundingBox = new Box();\r\n        this._renderingEngine.lightLoader.shadowMapCount = 0;\r\n\r\n        if (!this._mainNode) {\r\n            this._mainNode = new SDObject(root.id, root.version);\r\n            const oldObj = root.threeJsObject[this._renderingEngine.id];\r\n            root.threeJsObject[this._renderingEngine.id] = this._mainNode;\r\n            if (root.updateCallbackThreeJsObject)\r\n                root.updateCallbackThreeJsObject(this._mainNode, oldObj, this._renderingEngine.id)\r\n            this._scene.add(this._mainNode);\r\n        }\r\n\r\n        this._boundingBoxSensitiveData = [];\r\n\r\n        this._currentSDTFOverview = this.createSDTFOverview();\r\n        this.updateNode(root, this._mainNode);\r\n        this._boundingBox = root.boundingBoxViewport[this._renderingEngine.id].clone();\r\n\r\n        for (let i = 0; i < this._boundingBoxSensitiveData.length; i++)\r\n            this._renderingEngine.lightLoader.adjustToBoundingBox(this._boundingBoxSensitiveData[i].data, this._boundingBoxSensitiveData[i].dataChild, this._boundingBox)\r\n\r\n        if (!(this._boundingBox.min[0] === oldBB.min[0] && this._boundingBox.min[1] === oldBB.min[1] && this._boundingBox.min[2] === oldBB.min[2] &&\r\n            this._boundingBox.max[0] === oldBB.max[0] && this._boundingBox.max[1] === oldBB.max[1] && this._boundingBox.max[2] === oldBB.max[2])) {\r\n            if (!this._stateEngine.renderingEngines[this._renderingEngine.id].boundingBoxCreated.resolved && !this._boundingBox.isEmpty())\r\n                this._stateEngine.renderingEngines[this._renderingEngine.id].boundingBoxCreated.resolve(true);\r\n\r\n            this._eventEngine.emitEvent(EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, {\r\n                viewportId: this._renderingEngine.id, boundingBox: {\r\n                    min: vec3.clone(this._boundingBox.min),\r\n                    max: vec3.clone(this._boundingBox.max),\r\n                }\r\n            });\r\n        }\r\n\r\n        this._renderingEngine.renderingManager.evaluateTextureUnitCount(this._renderingEngine.lightLoader.shadowMapCount + this._renderingEngine.materialLoader.maxMapCount);\r\n    }\r\n\r\n    // #endregion Public Methods (6)\r\n\r\n    // #region Private Methods (5)\r\n\r\n    private collectSDTFItemData(node: ITreeNode): SDTFItemData | undefined {\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof SDTFItemData)\r\n                return <SDTFItemData>node.data[i];\r\n\r\n        if (!node.parent) return;\r\n        return this.collectSDTFItemData(node.parent);\r\n    }\r\n\r\n    private createSDTFOverview(node: ITreeNode = this._tree.root): ISDTFOverview {\r\n        const out: SDTFOverviewData = new SDTFOverviewData({});\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof SDTFOverviewData)\r\n                out.merge(<SDTFOverviewData>node.data[i])\r\n\r\n        for (let i = 0, len = node.children.length; i < len; i++)\r\n            out.merge(new SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n\r\n        return out.overview;\r\n    }\r\n\r\n    private getBone(node: ITreeNode): SDBone {\r\n        let bone: SDBone;\r\n        this._mainNode.traverse((o) => {\r\n            if ((<SDObject>o).SDid === node.id)\r\n                bone = (<SDBone>o);\r\n        });\r\n        return bone!;\r\n    }\r\n\r\n    private injectAttributeData(node: ITreeNode, data: ITreeNodeData) {\r\n        const itemData = this.collectSDTFItemData(node);\r\n        let visData: {\r\n            material: IMaterialAbstractData,\r\n            matrix: mat4\r\n        } = {\r\n            material: new MaterialStandardData({ color: this._renderingEngine.defaultMaterialColor, opacity: 1 }),\r\n            matrix: mat4.create()\r\n        };\r\n\r\n        if (this._renderingEngine.visualizeAttributes) {\r\n            const userVisData = this._renderingEngine.visualizeAttributes(this._currentSDTFOverview, itemData);\r\n            this._inputValidator.validateAndError(`Viewer.visualizeAttributes`, userVisData, 'object', true);\r\n            this._inputValidator.validateAndError(`Viewer.visualizeAttributes`, userVisData.matrix, 'mat4', true)\r\n            visData.material = userVisData.material;\r\n            visData.matrix = visData.matrix;\r\n        }\r\n\r\n        node.addTransformation({\r\n            id: 'sdtf',\r\n            matrix: visData.matrix\r\n        })\r\n\r\n        if (data instanceof GeometryData)\r\n            data.attributeMaterial = visData.material;\r\n    }\r\n\r\n    private removeData(dataObject: SDData) {\r\n        switch (true) {\r\n            case dataObject.SDtype === SD_DATA_TYPE.GEOMETRY:\r\n                dataObject.traverse((o) => {\r\n                    if (o instanceof THREE.Mesh) {\r\n                        this._renderingEngine.geometryLoader.removeFromGeometryCache(o.geometry.userData.SDid + '_' + o.geometry.userData.SDversion)\r\n                        this._renderingEngine.geometryLoader.removeFromPrimitiveCache(o.geometry.userData.primitiveSDid + '_' + o.geometry.userData.primitiveSDversion)\r\n                        this._renderingEngine.materialLoader.removeFromMaterialCache(o.material.userData.SDid + '_' + o.material.userData.SDversion)\r\n\r\n                        for (let t in o.material) {\r\n                            if (o.material[t] instanceof THREE.Texture) {\r\n                                if (t !== 'envMap')\r\n                                    o.material[t].dispose();\r\n                            }\r\n                        }\r\n\r\n                        o.material.dispose();\r\n                    }\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SD_DATA_TYPE.THREEJS:\r\n                break;\r\n            case dataObject.SDtype === SD_DATA_TYPE.MATERIAL:\r\n                break;\r\n            case dataObject.SDtype === SD_DATA_TYPE.LIGHT:\r\n                dataObject.traverse((o) => {\r\n                    if (o instanceof THREE.Light)\r\n                        o.dispose();\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SD_DATA_TYPE.HTML_ELEMENT_ANCHOR:\r\n                this._renderingEngine.htmlElementAnchorLoader.removeData(dataObject.SDid, dataObject.SDversion);\r\n                break;\r\n            case dataObject.SDtype === SD_DATA_TYPE.ANIMATION:\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n\r\n    // #endregion Private Methods (5)\r\n}\r\n"]}},"error":null,"hash":"645f241525f71903f964cd725a41b346","cacheData":{"env":{}}}