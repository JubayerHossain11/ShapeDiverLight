{"id":"node_modules/@shapediver/sdk.sdtf-v1/dist/writer/builder/SdtfGrasshopperSdtfBuilder.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\builder\\SdtfGrasshopperSdtfBuilder.js.map","includedInParent":true,"mtime":1706527150057},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\package.json","includedInParent":true,"mtime":1706527149378},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":4,"column":32,"index":154},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\builder\\SdtfGrasshopperSdtfBuilder.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfGrasshopperSdtfBuilder = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nclass SdtfGrasshopperSdtfBuilder {\n    constructor(factory) {\n        this.factory = factory;\n        this.asset = factory.createAsset();\n    }\n    addChunkForListData(parameterId, list, chunkAttributes) {\n        this.addChunkForTreeData(parameterId, { branches: [list], paths: [[0]] }, chunkAttributes);\n    }\n    addChunkForTreeData(parameterId, tree, chunkAttributes) {\n        const chunk = this.factory.createChunk(parameterId);\n        this.asset.chunks.push(chunk);\n        // Add chunk attributes if given\n        if (chunkAttributes)\n            chunk.attributes = chunkAttributes;\n        // Validate grasshopper structure - `branches` and `paths` must have the same number of elements (first array level).\n        if (tree.branches.length !== tree.paths.length)\n            throw new sdk_sdtf_core_1.SdtfError(\"Invalid tree parameter: 'branches' and 'paths' of the grasshopper structure must have the same number of elements.\");\n        // Validate grasshopper structure - The numbers in `paths` must all be integers.\n        if (!tree.paths.every(path => (0, sdk_sdtf_core_1.isIntArray)(path)))\n            throw new sdk_sdtf_core_1.SdtfError(\"Invalid tree parameter: 'paths' of the grasshopper structure must only consist of integer values.\");\n        // Validate grasshopper structure - All data items must contain a type hint.\n        if (!tree.branches.every(branch => branch.every(item => { var _a; return !!((_a = item.typeHint) === null || _a === void 0 ? void 0 : _a.name); })))\n            throw new sdk_sdtf_core_1.SdtfError(\"Invalid tree parameter: All data items in 'tree.branches' must contain a type hint.\");\n        let typeHint;\n        // Create nodes according to the given grasshopper tree structure\n        for (let i = 0; i < tree.branches.length; i++) {\n            const branch = tree.branches[i], path = tree.paths[i];\n            const node = this.factory.createNode();\n            // The numbers in path represent the name of the node\n            node.name = \"[\" + path.join(\",\") + \"]\";\n            // The branch holds all data of the node\n            branch.forEach(item => {\n                // The first data item sets the required type hint\n                if (!typeHint)\n                    typeHint = item.typeHint.name;\n                // Validate grasshopper structure - All data items must have the same type hint.\n                if (typeHint !== item.typeHint.name)\n                    throw new sdk_sdtf_core_1.SdtfError(\"Invalid tree parameter: All data items in 'tree.branches' must have the same type hint.\");\n                // Add item to node\n                node.items.push(item);\n            });\n            chunk.nodes.push(node);\n        }\n    }\n    build() {\n        return this.asset;\n    }\n}\nexports.SdtfGrasshopperSdtfBuilder = SdtfGrasshopperSdtfBuilder;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfGrasshopperSdtfBuilder.js","sourceRoot":"","sources":["../../../src/writer/builder/SdtfGrasshopperSdtfBuilder.ts"],"names":[],"mappings":";;;AAAA,6DAOkC;AAGlC,MAAa,0BAA0B;IAInC,YAA8B,OAAuC;QAAvC,YAAO,GAAP,OAAO,CAAgC;QACjE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;IACtC,CAAC;IAED,mBAAmB,CACf,WAAmB,EACnB,IAA8B,EAC9B,eAA0C;QAE1C,IAAI,CAAC,mBAAmB,CACpB,WAAW,EACX,EAAE,QAAQ,EAAE,CAAE,IAAI,CAAE,EAAE,KAAK,EAAE,CAAE,CAAE,CAAC,CAAE,CAAE,EAAE,EACxC,eAAe,CAClB,CAAA;IACL,CAAC;IAED,mBAAmB,CACf,WAAmB,EACnB,IAA+B,EAC/B,eAA0C;QAE1C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAE7B,gCAAgC;QAChC,IAAI,eAAe;YAAE,KAAK,CAAC,UAAU,GAAG,eAAe,CAAA;QAEvD,qHAAqH;QACrH,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM;YAC1C,MAAM,IAAI,yBAAS,CAAC,oHAAoH,CAAC,CAAA;QAE7I,gFAAgF;QAChF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,0BAAU,EAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,IAAI,yBAAS,CAAC,mGAAmG,CAAC,CAAA;QAE5H,4EAA4E;QAC5E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,WAAC,OAAA,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,IAAI,CAAA,CAAA,EAAA,CAAC,CAAC;YAC3E,MAAM,IAAI,yBAAS,CAAC,qFAAqF,CAAC,CAAA;QAE9G,IAAI,QAA4B,CAAA;QAEhC,iEAAiE;QACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAErD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAA;YACtC,qDAAqD;YACrD,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;YAEtC,wCAAwC;YACxC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAClB,kDAAkD;gBAClD,IAAI,CAAC,QAAQ;oBAAE,QAAQ,GAAG,IAAI,CAAC,QAAS,CAAC,IAAI,CAAA;gBAE7C,gFAAgF;gBAChF,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAS,CAAC,IAAI;oBAChC,MAAM,IAAI,yBAAS,CAAC,yFAAyF,CAAC,CAAA;gBAElH,mBAAmB;gBACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC,CAAC,CAAA;YAGF,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACzB;IACL,CAAC;IAED,KAAK;QACD,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;CAEJ;AA3ED,gEA2EC","sourcesContent":[null]}},"error":null,"hash":"bfebec63fda6d2dedca2edbaf563eadc","cacheData":{"env":{}}}