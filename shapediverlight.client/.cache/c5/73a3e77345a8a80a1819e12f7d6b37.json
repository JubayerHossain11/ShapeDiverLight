{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/camera/PerspectiveCamera.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js.map","includedInParent":true,"mtime":1706527152673},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\camera\\PerspectiveCamera.ts","includedInParent":true,"mtime":1706527153623},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706527151358},{"name":"@shapediver/viewer.shared.services","loc":{"line":25,"column":41,"index":2186},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":26,"column":28,"index":2254},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":27,"column":37,"index":2306},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":28,"column":42,"index":2384},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"../../interfaces/ICameraEngine","loc":{"line":29,"column":32,"index":2457},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\interfaces\\ICameraEngine.js"},{"name":"./AbstractCamera","loc":{"line":30,"column":33,"index":2526},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\AbstractCamera.js"},{"name":"../controls/PerspectiveCameraControls","loc":{"line":31,"column":44,"index":2592},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\camera\\PerspectiveCamera.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _PerspectiveCamera_converter, _PerspectiveCamera_logger, _PerspectiveCamera_tree, _PerspectiveCamera_domEventListenerToken, _PerspectiveCamera_domEventEngine, _PerspectiveCamera_aspect, _PerspectiveCamera_fov, _PerspectiveCamera_threeJsObject;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PerspectiveCamera = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst ICameraEngine_1 = require(\"../../interfaces/ICameraEngine\");\r\nconst AbstractCamera_1 = require(\"./AbstractCamera\");\r\nconst PerspectiveCameraControls_1 = require(\"../controls/PerspectiveCameraControls\");\r\nclass PerspectiveCamera extends AbstractCamera_1.AbstractCamera {\r\n    // #endregion Properties (3)\r\n    // #region Constructors (1)\r\n    constructor(id, version) {\r\n        super(id, ICameraEngine_1.CAMERA_TYPE.PERSPECTIVE, version);\r\n        // #region Properties (3)\r\n        _PerspectiveCamera_converter.set(this, viewer_shared_services_1.Converter.instance);\r\n        _PerspectiveCamera_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _PerspectiveCamera_tree.set(this, viewer_shared_node_tree_1.Tree.instance);\r\n        _PerspectiveCamera_domEventListenerToken.set(this, void 0);\r\n        _PerspectiveCamera_domEventEngine.set(this, void 0);\r\n        _PerspectiveCamera_aspect.set(this, void 0);\r\n        _PerspectiveCamera_fov.set(this, 60);\r\n        _PerspectiveCamera_threeJsObject.set(this, {});\r\n        this._controls = new PerspectiveCameraControls_1.PerspectiveCameraControls(this, true);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (4)\r\n    get aspect() {\r\n        return __classPrivateFieldGet(this, _PerspectiveCamera_aspect, \"f\");\r\n    }\r\n    set aspect(value) {\r\n        __classPrivateFieldSet(this, _PerspectiveCamera_aspect, value, \"f\");\r\n    }\r\n    get controls() {\r\n        return this._controls;\r\n    }\r\n    set controls(value) {\r\n        this._controls = value;\r\n    }\r\n    get fov() {\r\n        return __classPrivateFieldGet(this, _PerspectiveCamera_fov, \"f\");\r\n    }\r\n    set fov(value) {\r\n        __classPrivateFieldSet(this, _PerspectiveCamera_fov, value, \"f\");\r\n    }\r\n    get threeJsObject() {\r\n        return __classPrivateFieldGet(this, _PerspectiveCamera_threeJsObject, \"f\");\r\n    }\r\n    // #endregion Public Accessors (4)\r\n    // #region Public Methods (6)\r\n    applySettings(settingsEngine) {\r\n        const cameraSetting = settingsEngine.camera.cameras[this.id];\r\n        if (cameraSetting) {\r\n            this.name = cameraSetting.name;\r\n            this.autoAdjust = cameraSetting.autoAdjust;\r\n            this.cameraMovementDuration = cameraSetting.cameraMovementDuration;\r\n            this.enableCameraControls = cameraSetting.enableCameraControls;\r\n            this.revertAtMouseUp = cameraSetting.revertAtMouseUp;\r\n            this.revertAtMouseUpDuration = cameraSetting.revertAtMouseUpDuration;\r\n            this.zoomExtentsFactor = cameraSetting.zoomExtentsFactor;\r\n            let position = __classPrivateFieldGet(this, _PerspectiveCamera_converter, \"f\").toVec3(cameraSetting.position);\r\n            let target = __classPrivateFieldGet(this, _PerspectiveCamera_converter, \"f\").toVec3(cameraSetting.target);\r\n            this.defaultPosition = gl_matrix_1.vec3.clone(position);\r\n            this.defaultTarget = gl_matrix_1.vec3.clone(target);\r\n            this.position = position;\r\n            this.target = target;\r\n            this.fov = cameraSetting.fov;\r\n        }\r\n        if (this.position[0] === this.target[0] && this.position[1] === this.target[1] && this.position[2] === this.target[2]) {\r\n            if (this._viewportId) {\r\n                this._stateEngine.renderingEngines[this._viewportId].boundingBoxCreated.then(() => __awaiter(this, void 0, void 0, function* () {\r\n                    yield this.zoomTo(undefined, { duration: 0 });\r\n                    this.defaultPosition = gl_matrix_1.vec3.clone(this._controls.position);\r\n                    this.defaultTarget = gl_matrix_1.vec3.clone(this._controls.target);\r\n                }));\r\n            }\r\n        }\r\n        this._controls.applySettings(settingsEngine);\r\n    }\r\n    assignViewer(renderingEngine) {\r\n        if (renderingEngine.closed)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerCameraError(`OrthographicCamera(${this.id}).assignViewer: Viewer with id ${renderingEngine.id} not found.`);\r\n        this.assignViewerInternal(renderingEngine.id, renderingEngine.canvas);\r\n        this._controls.assignViewer(renderingEngine.id, renderingEngine.canvas);\r\n        if (__classPrivateFieldGet(this, _PerspectiveCamera_domEventListenerToken, \"f\") && __classPrivateFieldGet(this, _PerspectiveCamera_domEventEngine, \"f\"))\r\n            __classPrivateFieldGet(this, _PerspectiveCamera_domEventEngine, \"f\").removeDomEventListener(__classPrivateFieldGet(this, _PerspectiveCamera_domEventListenerToken, \"f\"));\r\n        __classPrivateFieldSet(this, _PerspectiveCamera_domEventEngine, renderingEngine.domEventEngine, \"f\");\r\n        __classPrivateFieldSet(this, _PerspectiveCamera_domEventListenerToken, __classPrivateFieldGet(this, _PerspectiveCamera_domEventEngine, \"f\").addDomEventListener(this._controls.cameraControlsEventDistribution), \"f\");\r\n        this.boundingBox = __classPrivateFieldGet(this, _PerspectiveCamera_tree, \"f\").root.boundingBox.clone();\r\n        this._stateEngine.renderingEngines[renderingEngine.id].boundingBoxCreated.then(() => __awaiter(this, void 0, void 0, function* () {\r\n            if (this.position[0] === this.target[0] && this.position[1] === this.target[1] && this.position[2] === this.target[2])\r\n                yield this.zoomTo(undefined, { duration: 0 });\r\n        }));\r\n    }\r\n    clone() {\r\n        return new PerspectiveCamera(this.id, this.version);\r\n    }\r\n    calculateZoomTo(zoomTarget, startingPosition = this.position, startingTarget = this.target) {\r\n        let box;\r\n        // Part 1 - calculate the bounding box that we should zoom to\r\n        if (!zoomTarget) {\r\n            // complete scene\r\n            box = this._boundingBox.clone();\r\n        }\r\n        else {\r\n            // specified Box\r\n            box = zoomTarget.clone();\r\n        }\r\n        if (box.isEmpty())\r\n            return { position: gl_matrix_1.vec3.create(), target: gl_matrix_1.vec3.create() };\r\n        const samePosition = startingPosition[0] === startingTarget[0] && startingPosition[1] === startingTarget[1] && startingPosition[2] === startingTarget[2];\r\n        let target = gl_matrix_1.vec3.fromValues((box.max[0] + box.min[0]) / 2, (box.max[1] + box.min[1]) / 2, (box.max[2] + box.min[2]) / 2);\r\n        // if the camera position and the target are the same, we set a corner position\r\n        if (startingPosition[0] === startingTarget[0] && startingPosition[1] === startingTarget[1] && startingPosition[2] === startingTarget[2])\r\n            startingPosition = gl_matrix_1.vec3.fromValues(target[0], target[1] - 7.5, target[2] + 5);\r\n        // extend box by the factor\r\n        const boxDir = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), box.max, target);\r\n        gl_matrix_1.vec3.multiply(boxDir, boxDir, samePosition ? gl_matrix_1.vec3.fromValues(2, 2, 2) : gl_matrix_1.vec3.fromValues(this.zoomExtentsFactor, this.zoomExtentsFactor, this.zoomExtentsFactor));\r\n        box = new viewer_shared_math_1.Box(gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), target, boxDir), gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), target, boxDir));\r\n        const direction = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), target, startingPosition));\r\n        let cross = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.cross(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(0, 0, 1), direction));\r\n        let up = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.cross(gl_matrix_1.vec3.create(), cross, direction));\r\n        let position = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), target, gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), direction, gl_matrix_1.vec3.fromValues(-0.00000001, -0.00000001, -0.00000001)));\r\n        let points = [];\r\n        points.push(gl_matrix_1.vec3.fromValues(box.min[0], box.min[1], box.min[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.min[0], box.min[1], box.max[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.min[0], box.max[1], box.min[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.min[0], box.max[1], box.max[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.max[0], box.min[1], box.min[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.max[0], box.min[1], box.max[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.max[0], box.max[1], box.min[2]));\r\n        points.push(gl_matrix_1.vec3.fromValues(box.max[0], box.max[1], box.max[2]));\r\n        let fovDown = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.transformQuat(gl_matrix_1.vec3.create(), direction, gl_matrix_1.quat.setAxisAngle(gl_matrix_1.quat.create(), cross, (this.fov / 2) * (Math.PI / 180))));\r\n        let fovUp = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.transformQuat(gl_matrix_1.vec3.create(), direction, gl_matrix_1.quat.setAxisAngle(gl_matrix_1.quat.create(), cross, -(this.fov / 2) * (Math.PI / 180))));\r\n        const aspect = samePosition ? 1.5 : this.aspect || 1.5;\r\n        let hFoV = 2 * Math.atan(Math.tan(this.fov * Math.PI / 180 / 2) * aspect);\r\n        let fovRight = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.transformQuat(gl_matrix_1.vec3.create(), direction, gl_matrix_1.quat.setAxisAngle(gl_matrix_1.quat.create(), up, hFoV / 2)));\r\n        let fovLeft = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.transformQuat(gl_matrix_1.vec3.create(), direction, gl_matrix_1.quat.setAxisAngle(gl_matrix_1.quat.create(), up, -hFoV / 2)));\r\n        let planeCross = new viewer_shared_math_1.Plane(gl_matrix_1.vec3.clone(cross), 0);\r\n        planeCross.setFromNormalAndCoplanarPoint(gl_matrix_1.vec3.clone(cross), gl_matrix_1.vec3.clone(target));\r\n        let planeUp = new viewer_shared_math_1.Plane(gl_matrix_1.vec3.fromValues(0, 0, 1), 0);\r\n        planeUp.setFromNormalAndCoplanarPoint(gl_matrix_1.vec3.clone(up), gl_matrix_1.vec3.clone(target));\r\n        let distanceCamera = 0.0;\r\n        for (let i = 0; i < points.length; i++) {\r\n            let projected = planeCross.clampPoint(points[i]);\r\n            let toP = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), projected, position));\r\n            if (gl_matrix_1.vec3.dot(direction, fovDown) > gl_matrix_1.vec3.dot(direction, toP)) {\r\n                const currentDir = gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.dot(fovDown, toP) > gl_matrix_1.vec3.dot(fovUp, toP) ? fovDown : fovUp, gl_matrix_1.vec3.fromValues(-1, -1, -1));\r\n                const distance = planeUp.intersect(projected, currentDir);\r\n                if (distance) {\r\n                    const cameraPoint = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), currentDir, gl_matrix_1.vec3.fromValues(distance, distance, distance)), projected);\r\n                    distanceCamera = Math.max(distanceCamera, gl_matrix_1.vec3.distance(target, cameraPoint));\r\n                }\r\n            }\r\n            projected = planeUp.clampPoint(points[i]);\r\n            toP = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), projected, position));\r\n            if (gl_matrix_1.vec3.dot(direction, fovRight) > gl_matrix_1.vec3.dot(direction, toP)) {\r\n                const currentDir = gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.dot(fovRight, toP) > gl_matrix_1.vec3.dot(fovLeft, toP) ? fovRight : fovLeft, gl_matrix_1.vec3.fromValues(-1, -1, -1));\r\n                const distance = planeCross.intersect(projected, currentDir);\r\n                if (distance) {\r\n                    const cameraPoint = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), currentDir, gl_matrix_1.vec3.fromValues(distance, distance, distance)), projected);\r\n                    distanceCamera = Math.max(distanceCamera, gl_matrix_1.vec3.distance(target, cameraPoint));\r\n                }\r\n            }\r\n        }\r\n        position = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), target, gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), direction, gl_matrix_1.vec3.fromValues(-distanceCamera, -distanceCamera, -distanceCamera)));\r\n        return {\r\n            position, target\r\n        };\r\n    }\r\n    project(pos, position = this.position, target = this.target) {\r\n        const m = gl_matrix_1.mat4.targetTo(gl_matrix_1.mat4.create(), position, target, gl_matrix_1.vec3.fromValues(0, 0, 1));\r\n        const aspect = this.aspect || 1.5;\r\n        const p = gl_matrix_1.mat4.perspective(gl_matrix_1.mat4.create(), this.fov / (180 / Math.PI), aspect, this.near, this.far);\r\n        gl_matrix_1.vec3.transformMat4(pos, pos, gl_matrix_1.mat4.invert(m, m));\r\n        gl_matrix_1.vec3.transformMat4(pos, pos, p);\r\n        return gl_matrix_1.vec2.fromValues(pos[0], pos[1]);\r\n    }\r\n    unproject(pos, position = this.position, target = this.target) {\r\n        const m = gl_matrix_1.mat4.targetTo(gl_matrix_1.mat4.create(), position, target, gl_matrix_1.vec3.fromValues(0, 0, 1));\r\n        const aspect = this.aspect || 1.5;\r\n        const p = gl_matrix_1.mat4.perspective(gl_matrix_1.mat4.create(), this.fov / (180 / Math.PI), aspect, this.near, this.far);\r\n        gl_matrix_1.vec3.transformMat4(pos, pos, gl_matrix_1.mat4.invert(p, p));\r\n        gl_matrix_1.vec3.transformMat4(pos, pos, m);\r\n        return gl_matrix_1.vec3.clone(pos);\r\n    }\r\n}\r\nexports.PerspectiveCamera = PerspectiveCamera;\r\n_PerspectiveCamera_converter = new WeakMap(), _PerspectiveCamera_logger = new WeakMap(), _PerspectiveCamera_tree = new WeakMap(), _PerspectiveCamera_domEventListenerToken = new WeakMap(), _PerspectiveCamera_domEventEngine = new WeakMap(), _PerspectiveCamera_aspect = new WeakMap(), _PerspectiveCamera_fov = new WeakMap(), _PerspectiveCamera_threeJsObject = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"PerspectiveCamera.js","sourceRoot":"","sources":["../../../src/implementation/camera/PerspectiveCamera.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Converter,\r\n  DomEventEngine,\r\n  Logger,\r\n  SettingsEngine,\r\n  ShapeDiverViewerCameraError,\r\n  StateEngine,\r\n} from '@shapediver/viewer.shared.services'\r\nimport { mat4, quat, vec2, vec3 } from 'gl-matrix'\r\nimport { Box, IBox, Plane } from '@shapediver/viewer.shared.math'\r\nimport { IPerspectiveCameraSettingsV3 } from '@shapediver/viewer.settings'\r\nimport { IRenderingEngine } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\nimport { ITree, Tree } from '@shapediver/viewer.shared.node-tree'\r\n\r\nimport { CAMERA_TYPE } from '../../interfaces/ICameraEngine'\r\nimport { AbstractCamera } from './AbstractCamera'\r\nimport { PerspectiveCameraControls } from '../controls/PerspectiveCameraControls'\r\nimport { IPerspectiveCamera } from '../../interfaces/camera/IPerspectiveCamera'\r\nimport { IPerspectiveCameraControls } from '../../interfaces/controls/IPerspectiveCameraControls'\r\n\r\nexport class PerspectiveCamera extends AbstractCamera implements IPerspectiveCamera {\r\n  // #region Properties (3)\r\n\r\n  readonly #converter: Converter = Converter.instance;\r\n  readonly #logger: Logger = Logger.instance;\r\n  readonly #tree: ITree = Tree.instance;\r\n\r\n  protected _controls: IPerspectiveCameraControls;\r\n\r\n  #domEventListenerToken?: string;\r\n  #domEventEngine?: DomEventEngine;\r\n\r\n  #aspect: number | undefined;\r\n  #fov: number = 60;\r\n  #threeJsObject: { [key: string]: THREE.PerspectiveCamera } = {};\r\n\r\n  // #endregion Properties (3)\r\n\r\n  // #region Constructors (1)\r\n\r\n  constructor(id: string, version?: string) {\r\n    super(id, CAMERA_TYPE.PERSPECTIVE, version);\r\n    this._controls = new PerspectiveCameraControls(this, true);\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (4)\r\n\r\n  public get aspect(): number | undefined {\r\n    return this.#aspect;\r\n  }\r\n\r\n  public set aspect(value: number | undefined) {\r\n    this.#aspect = value;\r\n  }\r\n\r\n  public get controls(): IPerspectiveCameraControls {\r\n    return this._controls;\r\n  }\r\n\r\n  public set controls(value: IPerspectiveCameraControls) {\r\n    this._controls = value;\r\n  }\r\n\r\n  public get fov(): number {\r\n    return this.#fov;\r\n  }\r\n\r\n  public set fov(value: number) {\r\n    this.#fov = value;\r\n  }\r\n\r\n  public get threeJsObject(): { [key: string]: THREE.PerspectiveCamera } {\r\n    return this.#threeJsObject;\r\n  }\r\n\r\n  // #endregion Public Accessors (4)\r\n\r\n  // #region Public Methods (6)\r\n\r\n  public applySettings(settingsEngine: SettingsEngine) {\r\n    const cameraSetting = <IPerspectiveCameraSettingsV3>settingsEngine.camera.cameras[this.id];\r\n    if (cameraSetting) {\r\n      this.name = cameraSetting.name;\r\n      this.autoAdjust = cameraSetting.autoAdjust;\r\n      this.cameraMovementDuration = cameraSetting.cameraMovementDuration;\r\n      this.enableCameraControls = cameraSetting.enableCameraControls;\r\n      this.revertAtMouseUp = cameraSetting.revertAtMouseUp;\r\n      this.revertAtMouseUpDuration = cameraSetting.revertAtMouseUpDuration;\r\n      this.zoomExtentsFactor = cameraSetting.zoomExtentsFactor;\r\n\r\n      let position = this.#converter.toVec3(cameraSetting.position);\r\n      let target = this.#converter.toVec3(cameraSetting.target);\r\n      this.defaultPosition = vec3.clone(position);\r\n      this.defaultTarget = vec3.clone(target);\r\n\r\n      this.position = position;\r\n      this.target = target;\r\n      this.fov = cameraSetting.fov;\r\n    }\r\n\r\n    if (this.position[0] === this.target[0] && this.position[1] === this.target[1] && this.position[2] === this.target[2]) {\r\n      if(this._viewportId) {\r\n        this._stateEngine.renderingEngines[this._viewportId].boundingBoxCreated.then(async () => {\r\n          await this.zoomTo(undefined, { duration: 0 });\r\n          this.defaultPosition = vec3.clone(this._controls.position);\r\n          this.defaultTarget = vec3.clone(this._controls.target);\r\n        })      \r\n      }\r\n    }\r\n    (<PerspectiveCameraControls>this._controls).applySettings(settingsEngine);\r\n  }\r\n\r\n  public assignViewer(renderingEngine: IRenderingEngine): void {\r\n    if(renderingEngine.closed) \r\n      throw new ShapeDiverViewerCameraError(`OrthographicCamera(${this.id}).assignViewer: Viewer with id ${renderingEngine.id} not found.`);\r\n\r\n    this.assignViewerInternal(renderingEngine.id, renderingEngine.canvas);\r\n    this._controls.assignViewer(renderingEngine.id, renderingEngine.canvas);\r\n\r\n    if (this.#domEventListenerToken && this.#domEventEngine)\r\n      this.#domEventEngine.removeDomEventListener(this.#domEventListenerToken);\r\n\r\n    this.#domEventEngine = renderingEngine.domEventEngine;\r\n    this.#domEventListenerToken = this.#domEventEngine.addDomEventListener((<PerspectiveCameraControls>this._controls).cameraControlsEventDistribution);\r\n\r\n    this.boundingBox = this.#tree.root.boundingBox.clone();\r\n\r\n    this._stateEngine.renderingEngines[renderingEngine.id].boundingBoxCreated.then(async () => {\r\n      if (this.position[0] === this.target[0] && this.position[1] === this.target[1] && this.position[2] === this.target[2])\r\n        await this.zoomTo(undefined, { duration: 0 });\r\n    })\r\n  }\r\n\r\n  public clone(): IPerspectiveCamera {\r\n    return new PerspectiveCamera(this.id, this.version);\r\n  }\r\n\r\n  public calculateZoomTo(zoomTarget?: Box, startingPosition: vec3 = this.position, startingTarget: vec3 = this.target): { position: vec3, target: vec3 } {\r\n    let box: IBox;\r\n\r\n    // Part 1 - calculate the bounding box that we should zoom to\r\n    if (!zoomTarget) {\r\n      // complete scene\r\n      box = this._boundingBox.clone();\r\n    } else {\r\n      // specified Box\r\n      box = zoomTarget.clone();\r\n    }\r\n\r\n    if (box.isEmpty()) return { position: vec3.create(), target: vec3.create() }\r\n\r\n    const samePosition = startingPosition[0] === startingTarget[0] && startingPosition[1] === startingTarget[1] && startingPosition[2] === startingTarget[2];\r\n    let target = vec3.fromValues((box.max[0] + box.min[0]) / 2, (box.max[1] + box.min[1]) / 2, (box.max[2] + box.min[2]) / 2);\r\n\r\n    // if the camera position and the target are the same, we set a corner position\r\n    if (startingPosition[0] === startingTarget[0] && startingPosition[1] === startingTarget[1] && startingPosition[2] === startingTarget[2])\r\n      startingPosition = vec3.fromValues(target[0], target[1] - 7.5, target[2] + 5);\r\n\r\n    // extend box by the factor\r\n    const boxDir = vec3.subtract(vec3.create(), box.max, target)\r\n    vec3.multiply(boxDir, boxDir, samePosition ? vec3.fromValues(2, 2, 2) : vec3.fromValues(this.zoomExtentsFactor, this.zoomExtentsFactor, this.zoomExtentsFactor));\r\n    box = new Box(vec3.subtract(vec3.create(), target, boxDir), vec3.add(vec3.create(), target, boxDir))\r\n\r\n    const direction = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), target, startingPosition));\r\n\r\n    let cross = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), vec3.fromValues(0, 0, 1), direction));\r\n    let up = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), cross, direction));\r\n\r\n    let position = vec3.add(vec3.create(), target, vec3.multiply(vec3.create(), direction, vec3.fromValues(-0.00000001, -0.00000001, -0.00000001)));\r\n\r\n    let points = [];\r\n    points.push(vec3.fromValues(box.min[0], box.min[1], box.min[2]));\r\n    points.push(vec3.fromValues(box.min[0], box.min[1], box.max[2]));\r\n    points.push(vec3.fromValues(box.min[0], box.max[1], box.min[2]));\r\n    points.push(vec3.fromValues(box.min[0], box.max[1], box.max[2]));\r\n    points.push(vec3.fromValues(box.max[0], box.min[1], box.min[2]));\r\n    points.push(vec3.fromValues(box.max[0], box.min[1], box.max[2]));\r\n    points.push(vec3.fromValues(box.max[0], box.max[1], box.min[2]));\r\n    points.push(vec3.fromValues(box.max[0], box.max[1], box.max[2]));\r\n\r\n    let fovDown = vec3.normalize(vec3.create(), vec3.transformQuat(vec3.create(), direction, quat.setAxisAngle(quat.create(), cross, (this.fov / 2) * (Math.PI / 180))));\r\n    let fovUp = vec3.normalize(vec3.create(), vec3.transformQuat(vec3.create(), direction, quat.setAxisAngle(quat.create(), cross, -(this.fov / 2) * (Math.PI / 180))));\r\n\r\n    const aspect = samePosition ? 1.5 : this.aspect || 1.5;\r\n    let hFoV = 2 * Math.atan(Math.tan(this.fov * Math.PI / 180 / 2) * aspect);\r\n    let fovRight = vec3.normalize(vec3.create(), vec3.transformQuat(vec3.create(), direction, quat.setAxisAngle(quat.create(), up, hFoV / 2)));\r\n    let fovLeft = vec3.normalize(vec3.create(), vec3.transformQuat(vec3.create(), direction, quat.setAxisAngle(quat.create(), up, -hFoV / 2)));\r\n\r\n    let planeCross = new Plane(vec3.clone(cross), 0);\r\n    planeCross.setFromNormalAndCoplanarPoint(vec3.clone(cross), vec3.clone(target));\r\n\r\n    let planeUp = new Plane(vec3.fromValues(0, 0, 1), 0);\r\n    planeUp.setFromNormalAndCoplanarPoint(vec3.clone(up), vec3.clone(target));\r\n\r\n    let distanceCamera = 0.0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      let projected = planeCross.clampPoint(points[i]);\r\n      let toP = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), projected, position));\r\n\r\n      if (vec3.dot(direction, fovDown) > vec3.dot(direction, toP)) {\r\n        const currentDir = vec3.multiply(vec3.create(), vec3.dot(fovDown, toP) > vec3.dot(fovUp, toP) ? fovDown : fovUp, vec3.fromValues(-1, -1, -1));\r\n        const distance = planeUp.intersect(projected, currentDir)\r\n        if (distance) {\r\n          const cameraPoint = vec3.add(vec3.create(), vec3.multiply(vec3.create(), currentDir, vec3.fromValues(distance, distance, distance)), projected);\r\n          distanceCamera = Math.max(distanceCamera, vec3.distance(target, cameraPoint));\r\n        }\r\n      }\r\n\r\n      projected = planeUp.clampPoint(points[i]);\r\n      toP = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), projected, position));\r\n\r\n      if (vec3.dot(direction, fovRight) > vec3.dot(direction, toP)) {\r\n        const currentDir = vec3.multiply(vec3.create(), vec3.dot(fovRight, toP) > vec3.dot(fovLeft, toP) ? fovRight : fovLeft, vec3.fromValues(-1, -1, -1));\r\n        const distance = planeCross.intersect(projected, currentDir)\r\n        if (distance) {\r\n          const cameraPoint = vec3.add(vec3.create(), vec3.multiply(vec3.create(), currentDir, vec3.fromValues(distance, distance, distance)), projected);\r\n          distanceCamera = Math.max(distanceCamera, vec3.distance(target, cameraPoint));\r\n        }\r\n      }\r\n    }\r\n\r\n    position = vec3.add(vec3.create(), target, vec3.multiply(vec3.create(), direction, vec3.fromValues(-distanceCamera, -distanceCamera, -distanceCamera)));\r\n\r\n    return {\r\n      position, target\r\n    }\r\n  }\r\n\r\n  public project(pos: vec3, position = this.position, target = this.target): vec2 {\r\n    const m = mat4.targetTo(mat4.create(), position, target, vec3.fromValues(0, 0, 1));\r\n    const aspect = this.aspect || 1.5;\r\n    const p = mat4.perspective(mat4.create(), this.fov / (180 / Math.PI), aspect, this.near, this.far);\r\n    vec3.transformMat4(pos, pos, mat4.invert(m, m))\r\n    vec3.transformMat4(pos, pos, p)\r\n    return vec2.fromValues(pos[0], pos[1])\r\n  }\r\n\r\n  public unproject(pos: vec3, position = this.position, target = this.target): vec3 {\r\n    const m = mat4.targetTo(mat4.create(), position, target, vec3.fromValues(0, 0, 1));\r\n    const aspect = this.aspect || 1.5;\r\n    const p = mat4.perspective(mat4.create(), this.fov / (180 / Math.PI), aspect, this.near, this.far);\r\n    vec3.transformMat4(pos, pos, mat4.invert(p, p))\r\n    vec3.transformMat4(pos, pos, m)\r\n    return vec3.clone(pos);\r\n  }\r\n\r\n  // #endregion Public Methods (6)\r\n}"]}},"error":null,"hash":"1c03cf444ac7c7082b0dedc1965f29a3","cacheData":{"env":{}}}