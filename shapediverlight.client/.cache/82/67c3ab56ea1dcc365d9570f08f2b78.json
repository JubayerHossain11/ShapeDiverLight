{"id":"node_modules/@shapediver/sdk.sdtf-v1/dist/reader/SdtfDataParser.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\reader\\SdtfDataParser.js.map","includedInParent":true,"mtime":1706542087038},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-v1\\package.json","includedInParent":true,"mtime":1706542086604}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfDataParser = void 0;\nclass SdtfDataParser {\n    constructor(integrations) {\n        this.integrations = integrations;\n    }\n    parseContent(component) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the first integration that is supporting the given type hint\n            const integration = this.integrations.find(i => { var _a, _b; return i.isTypeHintSupported((_b = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : \"\"); });\n            // When an integration was found, all further steps are done by this integration (validation, mapping, etc)\n            if (integration) {\n                return integration.getReader().readComponent(component);\n            }\n            // Fallback behaviour, when no integration was found - return content.\n            // According to the sdTF specification, value precedes accessor!\n            if (component.value === undefined && !!component.accessor) {\n                return component.accessor.getContent();\n            }\n            else {\n                return component.value;\n            }\n        });\n    }\n}\nexports.SdtfDataParser = SdtfDataParser;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfDataParser.js","sourceRoot":"","sources":["../../src/reader/SdtfDataParser.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,MAAa,cAAc;IAEvB,YAA8B,YAAgC;QAAhC,iBAAY,GAAZ,YAAY,CAAoB;IAC9D,CAAC;IAEK,YAAY,CAAE,SAAwC;;YACxD,mEAAmE;YACnE,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAC,OAAA,CAAC,CAAC,mBAAmB,CAAC,MAAA,MAAA,SAAS,CAAC,QAAQ,0CAAE,IAAI,mCAAI,EAAE,CAAC,CAAA,EAAA,CAAC,CAAA;YAEtG,2GAA2G;YAC3G,IAAI,WAAW,EAAE;gBACb,OAAO,WAAW,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;aAC1D;YAED,sEAAsE;YACtE,gEAAgE;YAChE,IAAI,SAAS,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACvD,OAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAA;aACzC;iBAAM;gBACH,OAAO,SAAS,CAAC,KAAK,CAAA;aACzB;QACL,CAAC;KAAA;CAEJ;AAvBD,wCAuBC","sourcesContent":[null]}},"error":null,"hash":"a4e7fef6e51f650cef471a53ed60e554","cacheData":{"env":{}}}