{"id":"node_modules/@shapediver/sdk.sdtf-v1/dist/http/SdtfHttpClient.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\http\\SdtfHttpClient.js.map","includedInParent":true,"mtime":1706527150096},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\package.json","includedInParent":true,"mtime":1706527149378},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":16,"column":32,"index":962},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\http\\SdtfHttpClient.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"},{"name":"axios","loc":{"line":17,"column":40,"index":1032},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\http\\SdtfHttpClient.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\axios\\index.js"},{"name":"../binary_sdtf/SdtfBinarySdtf","loc":{"line":18,"column":33,"index":1076},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\http\\SdtfHttpClient.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\binary_sdtf\\SdtfBinarySdtf.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfHttpClient = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst SdtfBinarySdtf_1 = require(\"../binary_sdtf/SdtfBinarySdtf\");\n/** HTTP client of a single sdTF asset. */\nclass SdtfHttpClient {\n    constructor(jsonContentUrl, authToken) {\n        this.binarySdtfParser = new SdtfBinarySdtf_1.SdtfBinarySdtf();\n        // This initializes this http client for the specified sdTF asset\n        this.jsonContentUrl = jsonContentUrl;\n        // Initialize tha basic HTTP header object\n        this.basicHttpHeader = {};\n        if (authToken)\n            this.basicHttpHeader.authorization = \"Bearer \" + authToken;\n    }\n    /**\n     * Constructs the URL of this sdTF asset for the given URI.\n     * The URIs of all sdTF buffers of this sdTF asset are relative to the path of the JSON content file.\n     * When no URI is specified, the URL of the JSON content is returned.\n     * @private\n     */\n    calcUrl(uri) {\n        if (!uri)\n            return this.jsonContentUrl;\n        const index = this.jsonContentUrl.lastIndexOf(\"/\");\n        return `${this.jsonContentUrl.substring(0, index)}/${uri}`;\n    }\n    getJsonContent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data, partial, } = yield this.fetch(this.jsonContentUrl, 0, this.binarySdtfParser.binaryHeaderLength);\n                if (partial) {\n                    // Partial requests are supported by the server - fetch json content next\n                    const [contentLength, _] = this.binarySdtfParser.readHeader(data);\n                    const jsonContentBuffer = yield this.fetch(this.jsonContentUrl, 20, contentLength);\n                    return [new DataView(jsonContentBuffer.data), undefined];\n                }\n                else {\n                    // Entire sdTF has been returned - parse and return\n                    return this.binarySdtfParser.parseBinarySdtf(data);\n                }\n            }\n            catch (e) {\n                throw new sdk_sdtf_core_1.SdtfError(`Could not fetch sdTF JSON content: ${e.message}`);\n            }\n        });\n    }\n    getBinaryBuffer(uri, offset, length) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data, partial } = yield this.fetch(this.calcUrl(uri), offset, length);\n                if (partial) {\n                    // Partial requests are supported by the server - partial buffer was fetched\n                    return [new DataView(data), undefined];\n                }\n                else {\n                    // Partial requests are supported by the server - entire buffer was fetched\n                    return [new DataView(data, offset, length), data];\n                }\n            }\n            catch (e) {\n                throw new sdk_sdtf_core_1.SdtfError(`Could not fetch sdTF binary buffer: ${e.message}`);\n            }\n        });\n    }\n    /**\n     * Checks if the server supports HTTP range requests by sending a HEAD request and analyzing the response header.\n     * When the server supports range requests, only the requested part is fetched.\n     * Otherwise, the entire sdTF file is fetched.\n     * @private\n     * @param url\n     * @param offset - Zero-based byte index at which to begin (inclusive).\n     * @param length - Length of the buffer.\n     * @throws {@link SdtfError} when the request was not successful.\n     */\n    fetch(url, offset, length) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            let response;\n            try {\n                response = yield axios_1.default.head(url, { headers: this.basicHttpHeader });\n            }\n            catch (e) {\n                throw new sdk_sdtf_core_1.SdtfError(e.message);\n            }\n            // Validate response status\n            if (response.status > 299)\n                throw new sdk_sdtf_core_1.SdtfError(`Received HTTP status ${response.status}.`);\n            // Check if the content has been encoded (no range request possible)\n            const contentEncoding = !!((_a = response.headers[\"Content-Encoding\"]) !== null && _a !== void 0 ? _a : response.headers[\"content-encoding\"]);\n            // Check if HTTP range requests are supported\n            const acceptRanges = (_b = response.headers[\"Accept-Ranges\"]) !== null && _b !== void 0 ? _b : response.headers[\"accept-ranges\"];\n            // When the data has not been encoded and range requests are supported -> fetch partially.\n            // Otherwise -> fetch all.\n            const rangeRequestsSupported = (!contentEncoding && acceptRanges === \"bytes\");\n            // Fetch the actual data.\n            const data = (rangeRequestsSupported) ?\n                yield this.fetchPartially(url, offset, length) :\n                yield this.fetchFully(url);\n            // This is required to support Node.js as well as Browsers\n            const buffer = (data instanceof ArrayBuffer) ? data : Uint8Array.from(data).buffer;\n            return {\n                data: buffer,\n                partial: rangeRequestsSupported,\n            };\n        });\n    }\n    /**\n     * Sends an HTTP range request to fetch only the requested part.\n     * Assumes, that the server supports HTTP range requests and that the response is NOT compressed.\n     * Otherwise, Axios throws an `ERR_CONTENT_DECODING_FAILED` error in the browser.\n     * @private\n     * @param url\n     * @param offset - Zero-based byte index at which to begin (inclusive).\n     * @param length - Length of the buffer.\n     * @throws {@link SdtfError} when the request was not successful.\n     */\n    fetchPartially(url, offset, length) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response;\n            try {\n                response = yield axios_1.default.get(url, {\n                    headers: Object.assign(Object.assign({}, this.basicHttpHeader), { range: `bytes=${offset}-${offset + length - 1}` }),\n                    responseType: \"arraybuffer\",\n                });\n            }\n            catch (e) {\n                throw new sdk_sdtf_core_1.SdtfError(e.message);\n            }\n            // Validate response status\n            if (response.status === 416)\n                throw new sdk_sdtf_core_1.SdtfError(\"Invalid range requested.\");\n            if (response.status !== 206)\n                throw new sdk_sdtf_core_1.SdtfError(`Received HTTP status ${response.status}.`);\n            return response.data;\n        });\n    }\n    /**\n     * Fetches the entire sdTF file (either a binary sdTF or just binary data).\n     * Fallback when HTTP range requests are not supported by the server.\n     * @private\n     * @param url\n     * @throws {@link SdtfError} when the request was not successful.\n     */\n    fetchFully(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response;\n            try {\n                // NOTE: Axios automatically decodes the body (e.g. GZIP compression)\n                response = yield axios_1.default.get(url, {\n                    headers: this.basicHttpHeader,\n                    responseType: \"arraybuffer\",\n                });\n            }\n            catch (e) {\n                throw new sdk_sdtf_core_1.SdtfError(e.message);\n            }\n            // Validate response status\n            if (response.status !== 200)\n                throw new sdk_sdtf_core_1.SdtfError(`Received HTTP status ${response.status}.`);\n            return response.data;\n        });\n    }\n}\nexports.SdtfHttpClient = SdtfHttpClient;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfHttpClient.js","sourceRoot":"","sources":["../../src/http/SdtfHttpClient.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"3876a68b70acfc1d560d2f634ac8cf59","cacheData":{"env":{}}}