{"id":"node_modules/@shapediver/viewer.shared.types/dist/implementation/data/GeometryData.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\data\\GeometryData.js.map","includedInParent":true,"mtime":1706542086548},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\src\\implementation\\data\\GeometryData.ts","includedInParent":true,"mtime":1706542087165},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\package.json","includedInParent":true,"mtime":1706542086386},{"name":"gl-matrix","loc":{"line":16,"column":28,"index":2086},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\data\\GeometryData.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":17,"column":42,"index":2143},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\data\\GeometryData.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":18,"column":37,"index":2221},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\data\\GeometryData.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"},{"name":"../../interfaces/data/IGeometryData","loc":{"line":19,"column":32,"index":2289},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\data\\GeometryData.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\interfaces\\data\\IGeometryData.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _AttributeData_array, _AttributeData_byteOffset, _AttributeData_byteStride, _AttributeData_count, _AttributeData_elementBytes, _AttributeData_itemBytes, _AttributeData_itemSize, _AttributeData_max, _AttributeData_min, _AttributeData_morphAttributeData, _AttributeData_normalized, _AttributeData_sparse, _AttributeData_sparseIndices, _AttributeData_sparseValues, _AttributeData_target, _PrimitiveData_attributes, _PrimitiveData_boundingBoxes, _PrimitiveData_indices, _PrimitiveData_threeJsObject, _GeometryData_mode, _GeometryData_primitive, _GeometryData_attributeMaterial, _GeometryData_boundingBox, _GeometryData_effectMaterials, _GeometryData_material, _GeometryData_materialVariants, _GeometryData_morphWeights, _GeometryData_renderOrder, _GeometryData_standardMaterial, _GeometryData_threeJsObject;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GeometryData = exports.PrimitiveData = exports.AttributeData = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst IGeometryData_1 = require(\"../../interfaces/data/IGeometryData\");\r\nclass AttributeData extends viewer_shared_node_tree_1.AbstractTreeNodeData {\r\n    // #endregion Properties (15)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Creates an attribute data object.\r\n     *\r\n     * @param _array the array of the data\r\n     * @param _itemSize the size\r\n     * @param _hasOffset notifier if there is an offset\r\n     * @param _offset the offset\r\n     * @param _stride the stride\r\n     * @param _normalized boolean if the data is normalized\r\n     */\r\n    constructor(array, itemSize, itemBytes, byteOffset, elementBytes, normalized, count, min = [], max = [], byteStride, target, sparse, sparseIndices, sparseValues, morphAttributeData = [], id, version) {\r\n        super(id, version);\r\n        // #region Properties (15)\r\n        _AttributeData_array.set(this, void 0);\r\n        _AttributeData_byteOffset.set(this, void 0);\r\n        _AttributeData_byteStride.set(this, void 0);\r\n        _AttributeData_count.set(this, void 0);\r\n        _AttributeData_elementBytes.set(this, void 0);\r\n        _AttributeData_itemBytes.set(this, void 0);\r\n        _AttributeData_itemSize.set(this, void 0);\r\n        _AttributeData_max.set(this, []);\r\n        _AttributeData_min.set(this, []);\r\n        _AttributeData_morphAttributeData.set(this, []);\r\n        _AttributeData_normalized.set(this, void 0);\r\n        _AttributeData_sparse.set(this, void 0);\r\n        _AttributeData_sparseIndices.set(this, void 0);\r\n        _AttributeData_sparseValues.set(this, void 0);\r\n        _AttributeData_target.set(this, void 0);\r\n        __classPrivateFieldSet(this, _AttributeData_array, array, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_itemSize, itemSize, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_itemBytes, itemBytes, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_byteOffset, byteOffset, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_elementBytes, elementBytes, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_normalized, normalized, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_count, count, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_min, min, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_max, max, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_byteStride, byteStride, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_target, target, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_sparse, sparse, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_sparseIndices, sparseIndices, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_sparseValues, sparseValues, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeData_morphAttributeData, morphAttributeData, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (15)\r\n    get array() {\r\n        return __classPrivateFieldGet(this, _AttributeData_array, \"f\");\r\n    }\r\n    get byteOffset() {\r\n        return __classPrivateFieldGet(this, _AttributeData_byteOffset, \"f\");\r\n    }\r\n    get byteStride() {\r\n        return __classPrivateFieldGet(this, _AttributeData_byteStride, \"f\");\r\n    }\r\n    get count() {\r\n        return __classPrivateFieldGet(this, _AttributeData_count, \"f\");\r\n    }\r\n    get elementBytes() {\r\n        return __classPrivateFieldGet(this, _AttributeData_elementBytes, \"f\");\r\n    }\r\n    get itemBytes() {\r\n        return __classPrivateFieldGet(this, _AttributeData_itemBytes, \"f\");\r\n    }\r\n    get itemSize() {\r\n        return __classPrivateFieldGet(this, _AttributeData_itemSize, \"f\");\r\n    }\r\n    get max() {\r\n        return __classPrivateFieldGet(this, _AttributeData_max, \"f\");\r\n    }\r\n    get min() {\r\n        return __classPrivateFieldGet(this, _AttributeData_min, \"f\");\r\n    }\r\n    get morphAttributeData() {\r\n        return __classPrivateFieldGet(this, _AttributeData_morphAttributeData, \"f\");\r\n    }\r\n    get normalized() {\r\n        return __classPrivateFieldGet(this, _AttributeData_normalized, \"f\");\r\n    }\r\n    get sparse() {\r\n        return __classPrivateFieldGet(this, _AttributeData_sparse, \"f\");\r\n    }\r\n    get sparseIndices() {\r\n        return __classPrivateFieldGet(this, _AttributeData_sparseIndices, \"f\");\r\n    }\r\n    get sparseValues() {\r\n        return __classPrivateFieldGet(this, _AttributeData_sparseValues, \"f\");\r\n    }\r\n    get target() {\r\n        return __classPrivateFieldGet(this, _AttributeData_target, \"f\");\r\n    }\r\n    // #endregion Public Accessors (15)\r\n    // #region Public Methods (1)\r\n    /**\r\n     * Clones the attribute data.\r\n     */\r\n    clone() {\r\n        return new AttributeData(__classPrivateFieldGet(this, _AttributeData_array, \"f\"), __classPrivateFieldGet(this, _AttributeData_itemSize, \"f\"), __classPrivateFieldGet(this, _AttributeData_itemBytes, \"f\"), __classPrivateFieldGet(this, _AttributeData_byteOffset, \"f\"), __classPrivateFieldGet(this, _AttributeData_elementBytes, \"f\"), __classPrivateFieldGet(this, _AttributeData_normalized, \"f\"), __classPrivateFieldGet(this, _AttributeData_count, \"f\"), __classPrivateFieldGet(this, _AttributeData_min, \"f\"), __classPrivateFieldGet(this, _AttributeData_max, \"f\"), __classPrivateFieldGet(this, _AttributeData_byteStride, \"f\"), __classPrivateFieldGet(this, _AttributeData_target, \"f\"), __classPrivateFieldGet(this, _AttributeData_sparse, \"f\"), __classPrivateFieldGet(this, _AttributeData_sparseIndices, \"f\"), __classPrivateFieldGet(this, _AttributeData_sparseValues, \"f\"), __classPrivateFieldGet(this, _AttributeData_morphAttributeData, \"f\"), this.id, this.version);\r\n    }\r\n}\r\nexports.AttributeData = AttributeData;\r\n_AttributeData_array = new WeakMap(), _AttributeData_byteOffset = new WeakMap(), _AttributeData_byteStride = new WeakMap(), _AttributeData_count = new WeakMap(), _AttributeData_elementBytes = new WeakMap(), _AttributeData_itemBytes = new WeakMap(), _AttributeData_itemSize = new WeakMap(), _AttributeData_max = new WeakMap(), _AttributeData_min = new WeakMap(), _AttributeData_morphAttributeData = new WeakMap(), _AttributeData_normalized = new WeakMap(), _AttributeData_sparse = new WeakMap(), _AttributeData_sparseIndices = new WeakMap(), _AttributeData_sparseValues = new WeakMap(), _AttributeData_target = new WeakMap();\r\nclass PrimitiveData extends viewer_shared_node_tree_1.AbstractTreeNodeData {\r\n    // #endregion Properties (4)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Creates a primitive data object.\r\n     *\r\n     * @param _attributes the attributes as key-value pairs\r\n     * @param _indices the indices\r\n     */\r\n    constructor(attributes = {}, indices = null, id, version) {\r\n        super(id, version);\r\n        // #region Properties (4)\r\n        _PrimitiveData_attributes.set(this, {});\r\n        _PrimitiveData_boundingBoxes.set(this, []);\r\n        _PrimitiveData_indices.set(this, null);\r\n        _PrimitiveData_threeJsObject.set(this, {});\r\n        __classPrivateFieldSet(this, _PrimitiveData_attributes, attributes, \"f\");\r\n        __classPrivateFieldSet(this, _PrimitiveData_indices, indices, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (5)\r\n    get attributes() {\r\n        return __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\");\r\n    }\r\n    get boundingBox() {\r\n        return this.computeBoundingBox(gl_matrix_1.mat4.create());\r\n    }\r\n    get indices() {\r\n        return __classPrivateFieldGet(this, _PrimitiveData_indices, \"f\");\r\n    }\r\n    set indices(value) {\r\n        __classPrivateFieldSet(this, _PrimitiveData_indices, value, \"f\");\r\n    }\r\n    get threeJsObject() {\r\n        return __classPrivateFieldGet(this, _PrimitiveData_threeJsObject, \"f\");\r\n    }\r\n    // #endregion Public Accessors (5)\r\n    // #region Public Methods (2)\r\n    /**\r\n     * Clones the primitive data.\r\n     */\r\n    clone() {\r\n        let attributes = {};\r\n        for (let attribute in __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\"))\r\n            attributes[attribute] = __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")[attribute].clone();\r\n        return new PrimitiveData(attributes, __classPrivateFieldGet(this, _PrimitiveData_indices, \"f\"), this.id, this.version);\r\n    }\r\n    computeBoundingBox(matrix) {\r\n        const res = __classPrivateFieldGet(this, _PrimitiveData_boundingBoxes, \"f\").find(b => gl_matrix_1.mat4.equals(matrix, b.matrix));\r\n        if (res)\r\n            return res.boundingBox;\r\n        if (__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION']) {\r\n            if (__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].min.length === 3 && __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].max.length === 3 && gl_matrix_1.mat4.equals(matrix, gl_matrix_1.mat4.create())) {\r\n                const boundingBox = new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].min[0], __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].min[1], __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].min[2]), gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].max[0], __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].max[1], __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].max[2]));\r\n                __classPrivateFieldGet(this, _PrimitiveData_boundingBoxes, \"f\").push({\r\n                    boundingBox,\r\n                    matrix: gl_matrix_1.mat4.clone(matrix)\r\n                });\r\n                return boundingBox;\r\n            }\r\n            else if (gl_matrix_1.mat4.equals(matrix, gl_matrix_1.mat4.create())) {\r\n                const boundingBox = new viewer_shared_math_1.Box();\r\n                boundingBox.setFromAttributeArray(__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].array, __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].byteStride, __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].itemBytes, matrix);\r\n                __classPrivateFieldGet(this, _PrimitiveData_boundingBoxes, \"f\").push({\r\n                    boundingBox,\r\n                    matrix: gl_matrix_1.mat4.clone(matrix)\r\n                });\r\n            }\r\n            else if (gl_matrix_1.quat.equals(gl_matrix_1.mat4.getRotation(gl_matrix_1.quat.create(), matrix), gl_matrix_1.quat.create())) {\r\n                const identityBB = this.computeBoundingBox(gl_matrix_1.mat4.create());\r\n                const boundingBox = identityBB.clone().applyMatrix(matrix);\r\n                __classPrivateFieldGet(this, _PrimitiveData_boundingBoxes, \"f\").push({\r\n                    boundingBox,\r\n                    matrix: gl_matrix_1.mat4.clone(matrix)\r\n                });\r\n                return boundingBox;\r\n            }\r\n            else {\r\n                const boundingBox = new viewer_shared_math_1.Box();\r\n                boundingBox.setFromAttributeArray(__classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].array, __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].byteStride, __classPrivateFieldGet(this, _PrimitiveData_attributes, \"f\")['POSITION'].itemBytes, matrix);\r\n                __classPrivateFieldGet(this, _PrimitiveData_boundingBoxes, \"f\").push({\r\n                    boundingBox,\r\n                    matrix: gl_matrix_1.mat4.clone(matrix)\r\n                });\r\n                return boundingBox;\r\n            }\r\n        }\r\n        return new viewer_shared_math_1.Box();\r\n    }\r\n}\r\nexports.PrimitiveData = PrimitiveData;\r\n_PrimitiveData_attributes = new WeakMap(), _PrimitiveData_boundingBoxes = new WeakMap(), _PrimitiveData_indices = new WeakMap(), _PrimitiveData_threeJsObject = new WeakMap();\r\nclass GeometryData extends viewer_shared_node_tree_1.AbstractTreeNodeData {\r\n    // #endregion Properties (11)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Creates a geometry data object.\r\n     *\r\n     * @param _primitive the primitive\r\n     * @param id the id\r\n     */\r\n    constructor(primitive, mode = IGeometryData_1.PRIMITIVE_MODE.TRIANGLES, material = null, morphWeights = [], attributeMaterial = null, id, version) {\r\n        super(id, version);\r\n        // #region Properties (11)\r\n        _GeometryData_mode.set(this, IGeometryData_1.PRIMITIVE_MODE.TRIANGLES);\r\n        _GeometryData_primitive.set(this, void 0);\r\n        _GeometryData_attributeMaterial.set(this, null);\r\n        _GeometryData_boundingBox.set(this, new viewer_shared_math_1.Box());\r\n        _GeometryData_effectMaterials.set(this, []);\r\n        _GeometryData_material.set(this, null);\r\n        _GeometryData_materialVariants.set(this, []);\r\n        _GeometryData_morphWeights.set(this, []);\r\n        _GeometryData_renderOrder.set(this, 0);\r\n        _GeometryData_standardMaterial.set(this, null);\r\n        _GeometryData_threeJsObject.set(this, {});\r\n        __classPrivateFieldSet(this, _GeometryData_primitive, primitive, \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_boundingBox, this.primitive.boundingBox.clone(), \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_morphWeights, morphWeights, \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_mode, mode, \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_material, material, \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_standardMaterial, material, \"f\");\r\n        __classPrivateFieldSet(this, _GeometryData_attributeMaterial, attributeMaterial, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (16)\r\n    get attributeMaterial() {\r\n        return __classPrivateFieldGet(this, _GeometryData_attributeMaterial, \"f\");\r\n    }\r\n    set attributeMaterial(value) {\r\n        __classPrivateFieldSet(this, _GeometryData_attributeMaterial, value, \"f\");\r\n    }\r\n    get boundingBox() {\r\n        return __classPrivateFieldGet(this, _GeometryData_boundingBox, \"f\");\r\n    }\r\n    get effectMaterials() {\r\n        return __classPrivateFieldGet(this, _GeometryData_effectMaterials, \"f\");\r\n    }\r\n    get material() {\r\n        return __classPrivateFieldGet(this, _GeometryData_material, \"f\");\r\n    }\r\n    set material(value) {\r\n        __classPrivateFieldSet(this, _GeometryData_material, value, \"f\");\r\n    }\r\n    get materialVariants() {\r\n        return __classPrivateFieldGet(this, _GeometryData_materialVariants, \"f\");\r\n    }\r\n    get mode() {\r\n        return __classPrivateFieldGet(this, _GeometryData_mode, \"f\");\r\n    }\r\n    get morphWeights() {\r\n        return __classPrivateFieldGet(this, _GeometryData_morphWeights, \"f\");\r\n    }\r\n    set morphWeights(value) {\r\n        __classPrivateFieldSet(this, _GeometryData_morphWeights, value, \"f\");\r\n    }\r\n    get primitive() {\r\n        return __classPrivateFieldGet(this, _GeometryData_primitive, \"f\");\r\n    }\r\n    get renderOrder() {\r\n        return __classPrivateFieldGet(this, _GeometryData_renderOrder, \"f\");\r\n    }\r\n    set renderOrder(value) {\r\n        __classPrivateFieldSet(this, _GeometryData_renderOrder, value, \"f\");\r\n    }\r\n    get standardMaterial() {\r\n        return __classPrivateFieldGet(this, _GeometryData_standardMaterial, \"f\");\r\n    }\r\n    set standardMaterial(value) {\r\n        __classPrivateFieldSet(this, _GeometryData_standardMaterial, value, \"f\");\r\n    }\r\n    get threeJsObject() {\r\n        return __classPrivateFieldGet(this, _GeometryData_threeJsObject, \"f\");\r\n    }\r\n    // #endregion Public Accessors (16)\r\n    // #region Public Methods (2)\r\n    /**\r\n     * Clones the scene graph data.\r\n     */\r\n    clone() {\r\n        return new GeometryData(__classPrivateFieldGet(this, _GeometryData_primitive, \"f\"), __classPrivateFieldGet(this, _GeometryData_mode, \"f\"), __classPrivateFieldGet(this, _GeometryData_material, \"f\"), __classPrivateFieldGet(this, _GeometryData_morphWeights, \"f\"), __classPrivateFieldGet(this, _GeometryData_attributeMaterial, \"f\"));\r\n    }\r\n    intersect(origin, direction) {\r\n        if (this.mode !== IGeometryData_1.PRIMITIVE_MODE.TRIANGLES)\r\n            return null;\r\n        return this.boundingBox.intersect(origin, direction);\r\n    }\r\n}\r\nexports.GeometryData = GeometryData;\r\n_GeometryData_mode = new WeakMap(), _GeometryData_primitive = new WeakMap(), _GeometryData_attributeMaterial = new WeakMap(), _GeometryData_boundingBox = new WeakMap(), _GeometryData_effectMaterials = new WeakMap(), _GeometryData_material = new WeakMap(), _GeometryData_materialVariants = new WeakMap(), _GeometryData_morphWeights = new WeakMap(), _GeometryData_renderOrder = new WeakMap(), _GeometryData_standardMaterial = new WeakMap(), _GeometryData_threeJsObject = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"GeometryData.js","sourceRoot":"","sources":["../../../src/implementation/data/GeometryData.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, vec3, quat } from 'gl-matrix'\r\nimport { AbstractTreeNodeData, ITreeNode, ITreeNodeData } from '@shapediver/viewer.shared.node-tree'\r\nimport { Box, IBox } from '@shapediver/viewer.shared.math'\r\nimport { IAttributeData, IGeometryData, IPrimitiveData, PRIMITIVE_MODE } from '../../interfaces/data/IGeometryData';\r\nimport { IMaterialAbstractData } from '../../interfaces/data/material/IMaterialAbstractData';\r\n\r\nexport class AttributeData extends AbstractTreeNodeData implements IAttributeData {\r\n  // #region Properties (15)\r\n\r\n  readonly #array: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array;\r\n  readonly #byteOffset: number;\r\n  readonly #byteStride?: number;\r\n  readonly #count: number;\r\n  readonly #elementBytes: number;\r\n  readonly #itemBytes: number;\r\n  readonly #itemSize: number;\r\n  readonly #max: number[] = [];\r\n  readonly #min: number[] = [];\r\n  readonly #morphAttributeData: IAttributeData[] = [];\r\n  readonly #normalized: boolean;\r\n  readonly #sparse?: boolean;\r\n  readonly #sparseIndices?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array;\r\n  readonly #sparseValues?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array;\r\n  readonly #target?: number;\r\n\r\n  // #endregion Properties (15)\r\n\r\n  // #region Constructors (1)\r\n\r\n  /**\r\n   * Creates an attribute data object.\r\n   * \r\n   * @param _array the array of the data\r\n   * @param _itemSize the size\r\n   * @param _hasOffset notifier if there is an offset\r\n   * @param _offset the offset\r\n   * @param _stride the stride\r\n   * @param _normalized boolean if the data is normalized\r\n   */\r\n  constructor(\r\n    array: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array,\r\n    itemSize: number,\r\n    itemBytes: number,\r\n    byteOffset: number,\r\n    elementBytes: number,\r\n    normalized: boolean,\r\n    count: number,\r\n    min: number[] = [],\r\n    max: number[] = [],\r\n    byteStride?: number,\r\n    target?: number,\r\n    sparse?: boolean,\r\n    sparseIndices?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array,\r\n    sparseValues?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array,\r\n    morphAttributeData: IAttributeData[] = [],\r\n    id?: string,\r\n    version?: string\r\n  ) {\r\n    super(id, version);\r\n    this.#array = array;\r\n    this.#itemSize = itemSize;\r\n    this.#itemBytes = itemBytes;\r\n    this.#byteOffset = byteOffset;\r\n    this.#elementBytes = elementBytes;\r\n    this.#normalized = normalized;\r\n    this.#count = count;\r\n    this.#min = min;\r\n    this.#max = max;\r\n    this.#byteStride = byteStride;\r\n    this.#target = target;\r\n    this.#sparse = sparse;\r\n    this.#sparseIndices = sparseIndices;\r\n    this.#sparseValues = sparseValues;\r\n    this.#morphAttributeData = morphAttributeData;\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (15)\r\n\r\n  public get array(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array {\r\n    return this.#array;\r\n  }\r\n\r\n  public get byteOffset(): number {\r\n    return this.#byteOffset;\r\n  }\r\n\r\n  public get byteStride(): number | undefined {\r\n    return this.#byteStride;\r\n  }\r\n\r\n  public get count(): number {\r\n    return this.#count;\r\n  }\r\n\r\n  public get elementBytes(): number {\r\n    return this.#elementBytes;\r\n  }\r\n\r\n  public get itemBytes(): number {\r\n    return this.#itemBytes;\r\n  }\r\n\r\n  public get itemSize(): number {\r\n    return this.#itemSize;\r\n  }\r\n\r\n  public get max(): number[] {\r\n    return this.#max;\r\n  }\r\n\r\n  public get min(): number[] {\r\n    return this.#min;\r\n  }\r\n\r\n  public get morphAttributeData(): IAttributeData[] {\r\n    return this.#morphAttributeData;\r\n  }\r\n\r\n  public get normalized(): boolean {\r\n    return this.#normalized;\r\n  }\r\n\r\n  public get sparse(): boolean | undefined {\r\n    return this.#sparse;\r\n  }\r\n\r\n  public get sparseIndices(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array | undefined {\r\n    return this.#sparseIndices;\r\n  }\r\n\r\n  public get sparseValues(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array | undefined {\r\n    return this.#sparseValues;\r\n  }\r\n\r\n  public get target(): number | undefined {\r\n    return this.#target;\r\n  }\r\n\r\n  // #endregion Public Accessors (15)\r\n\r\n  // #region Public Methods (1)\r\n\r\n  /**\r\n   * Clones the attribute data.\r\n   */\r\n  public clone(): IAttributeData {\r\n    return new AttributeData(\r\n      this.#array,\r\n      this.#itemSize,\r\n      this.#itemBytes,\r\n      this.#byteOffset,\r\n      this.#elementBytes,\r\n      this.#normalized,\r\n      this.#count,\r\n      this.#min,\r\n      this.#max,\r\n      this.#byteStride,\r\n      this.#target,\r\n      this.#sparse,\r\n      this.#sparseIndices,\r\n      this.#sparseValues,\r\n      this.#morphAttributeData,\r\n      this.id,\r\n      this.version\r\n    );\r\n  }\r\n\r\n  // #endregion Public Methods (1)\r\n}\r\n\r\nexport class PrimitiveData extends AbstractTreeNodeData implements IPrimitiveData {\r\n  // #region Properties (4)\r\n\r\n  readonly #attributes: {\r\n    [key: string]: IAttributeData\r\n  } = {};\r\n\r\n  #boundingBoxes: {\r\n    matrix: mat4,\r\n    boundingBox: IBox\r\n  }[] = [];\r\n  #indices: IAttributeData | null = null;\r\n  #threeJsObject: { [key: string]: THREE.BufferGeometry } = {};\r\n\r\n  // #endregion Properties (4)\r\n\r\n  // #region Constructors (1)\r\n\r\n  /**\r\n   * Creates a primitive data object.\r\n   * \r\n   * @param _attributes the attributes as key-value pairs \r\n   * @param _indices the indices\r\n   */\r\n  constructor(\r\n    attributes: {\r\n      [key: string]: IAttributeData\r\n    } = {},\r\n    indices: IAttributeData | null = null,\r\n    id?: string,\r\n    version?: string\r\n  ) {\r\n    super(id, version);\r\n    this.#attributes = attributes;\r\n    this.#indices = indices;\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (5)\r\n\r\n  public get attributes(): {\r\n    [key: string]: IAttributeData\r\n  } {\r\n    return this.#attributes;\r\n  }\r\n\r\n  public get boundingBox(): IBox {\r\n    return this.computeBoundingBox(mat4.create());\r\n  }\r\n\r\n  public get indices(): IAttributeData | null {\r\n    return this.#indices;\r\n  }\r\n\r\n  public set indices(value: IAttributeData | null) {\r\n    this.#indices = value\r\n  }\r\n\r\n  public get threeJsObject(): { [key: string]: THREE.BufferGeometry } {\r\n    return this.#threeJsObject;\r\n  }\r\n\r\n  // #endregion Public Accessors (5)\r\n\r\n  // #region Public Methods (2)\r\n\r\n  /**\r\n   * Clones the primitive data.\r\n   */\r\n  public clone(): IPrimitiveData {\r\n    let attributes: {\r\n      [key: string]: IAttributeData\r\n    } = {};\r\n    for (let attribute in this.#attributes)\r\n      attributes[attribute] = <IAttributeData>this.#attributes[attribute].clone();\r\n\r\n    return new PrimitiveData(attributes, <AttributeData>this.#indices, this.id, this.version);\r\n  }\r\n\r\n  public computeBoundingBox(matrix: mat4): IBox {\r\n    const res = this.#boundingBoxes.find(b => mat4.equals(matrix, b.matrix));\r\n    if(res) return res.boundingBox;\r\n\r\n    if (this.#attributes['POSITION']) {\r\n      if (this.#attributes['POSITION'].min.length === 3 && this.#attributes['POSITION'].max.length === 3 && mat4.equals(matrix, mat4.create())) {\r\n        const boundingBox = new Box(vec3.fromValues(this.#attributes['POSITION'].min[0], this.#attributes['POSITION'].min[1], this.#attributes['POSITION'].min[2]), vec3.fromValues(this.#attributes['POSITION'].max[0], this.#attributes['POSITION'].max[1], this.#attributes['POSITION'].max[2]));\r\n        this.#boundingBoxes.push({\r\n          boundingBox,\r\n          matrix: mat4.clone(matrix)\r\n        })\r\n        return boundingBox;\r\n      } else if(mat4.equals(matrix, mat4.create())) {\r\n        const boundingBox = new Box();\r\n        boundingBox.setFromAttributeArray(this.#attributes['POSITION'].array, this.#attributes['POSITION'].byteStride, this.#attributes['POSITION'].itemBytes, matrix);\r\n        this.#boundingBoxes.push({\r\n          boundingBox,\r\n          matrix: mat4.clone(matrix)\r\n        })\r\n      } else if(quat.equals(mat4.getRotation(quat.create(), matrix), quat.create())) {\r\n        const identityBB = this.computeBoundingBox(mat4.create());\r\n        const boundingBox = identityBB.clone().applyMatrix(matrix);\r\n        this.#boundingBoxes.push({\r\n          boundingBox,\r\n          matrix: mat4.clone(matrix)\r\n        })\r\n        return boundingBox;\r\n      } else {\r\n        const boundingBox = new Box();\r\n        boundingBox.setFromAttributeArray(this.#attributes['POSITION'].array, this.#attributes['POSITION'].byteStride, this.#attributes['POSITION'].itemBytes, matrix);\r\n        this.#boundingBoxes.push({\r\n          boundingBox,\r\n          matrix: mat4.clone(matrix)\r\n        })\r\n        return boundingBox;\r\n      }\r\n    }\r\n    return new Box();\r\n  }\r\n\r\n  // #endregion Public Methods (2)\r\n}\r\n\r\nexport class GeometryData extends AbstractTreeNodeData implements IGeometryData {\r\n  // #region Properties (11)\r\n\r\n  readonly #mode: PRIMITIVE_MODE = PRIMITIVE_MODE.TRIANGLES;\r\n  readonly #primitive: IPrimitiveData;\r\n\r\n  #attributeMaterial: IMaterialAbstractData | null = null;\r\n  #boundingBox: IBox = new Box();\r\n  #effectMaterials: { material: IMaterialAbstractData, token: string }[] = [];\r\n  #material: IMaterialAbstractData | null = null;\r\n  #materialVariants: { material: IMaterialAbstractData, variant: number }[] = [];\r\n  #morphWeights: number[] = [];\r\n  #renderOrder: number = 0;\r\n  #standardMaterial: IMaterialAbstractData | null = null;\r\n  #threeJsObject: { [key: string]: THREE.Mesh | THREE.Points | THREE.LineSegments | THREE.LineLoop | THREE.Line } = {};\r\n\r\n  // #endregion Properties (11)\r\n\r\n  // #region Constructors (1)\r\n\r\n  /**\r\n   * Creates a geometry data object.\r\n   * \r\n   * @param _primitive the primitive\r\n   * @param id the id\r\n   */\r\n  constructor(\r\n    primitive: IPrimitiveData,\r\n    mode: PRIMITIVE_MODE = PRIMITIVE_MODE.TRIANGLES,\r\n    material: IMaterialAbstractData | null = null,\r\n    morphWeights: number[] = [],\r\n    attributeMaterial: IMaterialAbstractData | null = null,\r\n    id?: string,\r\n    version?: string\r\n  ) {\r\n    super(id, version);\r\n    this.#primitive = primitive;\r\n    this.#boundingBox = this.primitive.boundingBox.clone();\r\n    this.#morphWeights = morphWeights;\r\n\r\n    this.#mode = mode;\r\n    this.#material = material;\r\n    this.#standardMaterial = material;\r\n    this.#attributeMaterial = attributeMaterial;\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (16)\r\n\r\n  public get attributeMaterial(): IMaterialAbstractData | null {\r\n    return this.#attributeMaterial;\r\n  }\r\n\r\n  public set attributeMaterial(value: IMaterialAbstractData | null) {\r\n    this.#attributeMaterial = value;\r\n  }\r\n\r\n  public get boundingBox(): IBox {\r\n    return this.#boundingBox;\r\n  }\r\n\r\n  public get effectMaterials(): { material: IMaterialAbstractData, token: string }[] {\r\n    return this.#effectMaterials;\r\n  }\r\n\r\n  public get material(): IMaterialAbstractData | null {\r\n    return this.#material;\r\n  }\r\n\r\n  public set material(value: IMaterialAbstractData | null) {\r\n    this.#material = value;\r\n  }\r\n\r\n  public get materialVariants(): { material: IMaterialAbstractData, variant: number }[] {\r\n    return this.#materialVariants;\r\n  }\r\n\r\n  public get mode(): PRIMITIVE_MODE {\r\n    return this.#mode;\r\n  }\r\n\r\n  public get morphWeights(): number[] {\r\n    return this.#morphWeights;\r\n  }\r\n\r\n  public set morphWeights(value: number[]) {\r\n    this.#morphWeights = value\r\n  }\r\n\r\n  public get primitive(): IPrimitiveData {\r\n    return this.#primitive;\r\n  }\r\n\r\n  public get renderOrder(): number {\r\n    return this.#renderOrder;\r\n  }\r\n\r\n  public set renderOrder(value: number) {\r\n    this.#renderOrder = value;\r\n  }\r\n\r\n  public get standardMaterial(): IMaterialAbstractData | null {\r\n    return this.#standardMaterial;\r\n  }\r\n\r\n  public set standardMaterial(value: IMaterialAbstractData | null) {\r\n    this.#standardMaterial = value;\r\n  }\r\n\r\n  public get threeJsObject(): { [key: string]: THREE.Mesh | THREE.Points | THREE.LineSegments | THREE.LineLoop | THREE.Line } {\r\n    return this.#threeJsObject;\r\n  }\r\n\r\n  // #endregion Public Accessors (16)\r\n\r\n  // #region Public Methods (2)\r\n\r\n  /**\r\n   * Clones the scene graph data.\r\n   */\r\n  public clone(): IGeometryData {\r\n    return new GeometryData(this.#primitive, this.#mode, this.#material, this.#morphWeights, this.#attributeMaterial);\r\n  }\r\n\r\n  public intersect(origin: vec3, direction: vec3): number | null {\r\n    if (this.mode !== PRIMITIVE_MODE.TRIANGLES) return null;\r\n    return this.boundingBox.intersect(origin, direction);\r\n  }\r\n\r\n  // #endregion Public Methods (2)\r\n}"]}},"error":null,"hash":"94a80c8c0c9b7074bd26e739b5e7e361","cacheData":{"env":{}}}