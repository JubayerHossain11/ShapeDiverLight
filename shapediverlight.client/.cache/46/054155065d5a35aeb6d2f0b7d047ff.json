{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/RenderingEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js.map","includedInParent":true,"mtime":1706542086997},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\RenderingEngine.ts","includedInParent":true,"mtime":1706542087476},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"three","loc":{"line":38,"column":35,"index":2371},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"},{"name":"gl-matrix","loc":{"line":39,"column":28,"index":2411},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.rendering-engine.camera-engine","loc":{"line":40,"column":56,"index":2482},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.canvas-engine","loc":{"line":41,"column":56,"index":2593},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.canvas-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":42,"column":42,"index":2690},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.light-engine","loc":{"line":43,"column":55,"index":2786},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":44,"column":59,"index":2899},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":45,"column":41,"index":2998},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":46,"column":38,"index":3076},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.animation-engine","loc":{"line":47,"column":59,"index":3172},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.animation-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.intersection-engine","loc":{"line":48,"column":62,"index":3292},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.intersection-engine\\dist\\index.js"},{"name":"./managers/SceneTreeManager","loc":{"line":49,"column":35,"index":3388},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTreeManager.js"},{"name":"./managers/RenderingManager","loc":{"line":50,"column":35,"index":3456},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js"},{"name":"./loaders/MaterialLoader","loc":{"line":51,"column":33,"index":3522},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js"},{"name":"./loaders/EnvironmentMapLoader","loc":{"line":52,"column":39,"index":3591},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js"},{"name":"./loaders/GeometryLoader","loc":{"line":53,"column":33,"index":3660},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js"},{"name":"./loaders/LightLoader","loc":{"line":54,"column":30,"index":3720},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\LightLoader.js"},{"name":"./loaders/HTMLElementAnchorLoader","loc":{"line":55,"column":42,"index":3789},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\HTMLElementAnchorLoader.js"},{"name":"./managers/BeautyRenderingManager","loc":{"line":56,"column":41,"index":3869},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\BeautyRenderingManager.js"},{"name":"./managers/EnvironmentGeometryManager","loc":{"line":57,"column":45,"index":3953},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\EnvironmentGeometryManager.js"},{"name":"./managers/SceneTracingManager","loc":{"line":58,"column":38,"index":4034},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\SceneTracingManager.js"},{"name":"./managers/CameraManager","loc":{"line":59,"column":32,"index":4102},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\CameraManager.js"},{"name":"./objects/SDColor","loc":{"line":60,"column":26,"index":4158},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\RenderingEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDColor.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _RenderingEngine_defaultLogo, _RenderingEngine_defaultLogoStatic, _RenderingEngine_defaultSpinner, _RenderingEngine_animations, _RenderingEngine_flags;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderingEngine = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_rendering_engine_canvas_engine_1 = require(\"@shapediver/viewer.rendering-engine.canvas-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_rendering_engine_animation_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-engine\");\r\nconst viewer_rendering_engine_intersection_engine_1 = require(\"@shapediver/viewer.rendering-engine.intersection-engine\");\r\nconst SceneTreeManager_1 = require(\"./managers/SceneTreeManager\");\r\nconst RenderingManager_1 = require(\"./managers/RenderingManager\");\r\nconst MaterialLoader_1 = require(\"./loaders/MaterialLoader\");\r\nconst EnvironmentMapLoader_1 = require(\"./loaders/EnvironmentMapLoader\");\r\nconst GeometryLoader_1 = require(\"./loaders/GeometryLoader\");\r\nconst LightLoader_1 = require(\"./loaders/LightLoader\");\r\nconst HTMLElementAnchorLoader_1 = require(\"./loaders/HTMLElementAnchorLoader\");\r\nconst BeautyRenderingManager_1 = require(\"./managers/BeautyRenderingManager\");\r\nconst EnvironmentGeometryManager_1 = require(\"./managers/EnvironmentGeometryManager\");\r\nconst SceneTracingManager_1 = require(\"./managers/SceneTracingManager\");\r\nconst CameraManager_1 = require(\"./managers/CameraManager\");\r\nconst SDColor_1 = require(\"./objects/SDColor\");\r\nclass RenderingEngine {\r\n    // #endregion Properties (61)\r\n    // #region Constructors (1)\r\n    constructor(properties) {\r\n        this._canvasEngine = viewer_rendering_engine_canvas_engine_1.CanvasEngine.instance;\r\n        this._animationEngine = viewer_rendering_engine_animation_engine_1.AnimationEngine.instance;\r\n        // utils\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._intersectionManager = viewer_rendering_engine_intersection_engine_1.IntersectionEngine.instance;\r\n        this._systemInfo = viewer_shared_services_1.SystemInfo.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._colorCache = [];\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        // settings\r\n        this._ambientOcclusion = true;\r\n        this._ambientOcclusionIntensity = 0.1;\r\n        this._arRotation = gl_matrix_1.vec3.create();\r\n        this._arScale = gl_matrix_1.vec3.fromValues(1, 1, 1);\r\n        this._arTranslation = gl_matrix_1.vec3.create();\r\n        this._automaticColorAdjustment = true;\r\n        this._automaticResizing = true;\r\n        this._beautyRenderBlendingDuration = 1500;\r\n        this._beautyRenderDelay = 50;\r\n        this._busy = false;\r\n        this._busyModeDisplay = viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER;\r\n        this._clearAlpha = 1.0;\r\n        this._clearColor = '#ffffff';\r\n        // viewer global vars\r\n        this._closed = false;\r\n        this._defaultMaterialColor = \"#199b9b\";\r\n        this._enableAR = true;\r\n        this._environmentMap = 'null';\r\n        this._environmentMapAsBackground = false;\r\n        this._environmentMapBlurriness = 0;\r\n        this._environmentMapIntensity = 1;\r\n        this._environmentMapResolution = '1024';\r\n        this._environmentMapForUnlitMaterials = false;\r\n        this._environmentMapRotation = gl_matrix_1.quat.create();\r\n        this._gridVisibility = true;\r\n        this._groundPlaneVisibility = true;\r\n        this._groundPlaneShadowVisibility = false;\r\n        this._lights = true;\r\n        this._maximumRenderingSize = { width: 1920, height: 1080 };\r\n        this._pointSize = 1.0;\r\n        this._shadows = true;\r\n        this._show = false;\r\n        this._showStatistics = false;\r\n        this._type = viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD;\r\n        _RenderingEngine_defaultLogo.set(this, 'https://viewer.shapediver.com/v3/graphics/logo_animated_breath.svg');\r\n        _RenderingEngine_defaultLogoStatic.set(this, 'https://viewer.shapediver.com/v3/graphics/logo.png');\r\n        _RenderingEngine_defaultSpinner.set(this, 'https://viewer.shapediver.com/v3/graphics/spinner_ripple.svg');\r\n        _RenderingEngine_animations.set(this, {});\r\n        _RenderingEngine_flags.set(this, {\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE]: [],\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING]: [],\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE]: [],\r\n        });\r\n        // THREE object has default Y, we change that (although it doesn't work everywhere)\r\n        THREE.Object3D.DEFAULT_UP = new THREE.Vector3(0, 0, 1);\r\n        const prop = Object.assign({}, properties);\r\n        const branding = Object.assign({}, prop.branding);\r\n        // setting some of the provided properties\r\n        this._id = prop.id || (viewer_shared_services_1.UuidGenerator.instance).create();\r\n        this._visibility = prop.visibility || viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION;\r\n        this._sessionSettingsMode = prop.sessionSettingsMode || viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST;\r\n        this._sessionSettingsId = prop.sessionSettingsId;\r\n        this._branding = {\r\n            logo: branding.logo === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultLogo, \"f\") : branding.logo,\r\n            backgroundColor: branding.backgroundColor || '#393a45FF',\r\n            busyModeSpinner: branding.busyModeSpinner === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultSpinner, \"f\") : branding.busyModeSpinner,\r\n            busyModeDisplay: branding.busyModeDisplay || viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER,\r\n            spinnerPositioning: branding.spinnerPositioning || viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT\r\n        };\r\n        // creation of viewer essentials\r\n        this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(prop.canvas));\r\n        // creation of the engines (all singleton engines were created already)\r\n        this._domEventEngine = new viewer_shared_services_1.DomEventEngine(this._canvas.canvasElement);\r\n        this._cameraEngine = new viewer_rendering_engine_camera_engine_1.CameraEngine(this, this._canvas.canvasElement);\r\n        this._lightEngine = new viewer_rendering_engine_light_engine_1.LightEngine(this);\r\n        // creation of the managers (all singleton engines were created already)\r\n        this._beautyRenderingManager = new BeautyRenderingManager_1.BeautyRenderingManager(this);\r\n        this._cameraManager = new CameraManager_1.CameraManager(this);\r\n        this._environmentGeometryManager = new EnvironmentGeometryManager_1.EnvironmentGeometryManager(this);\r\n        this._sceneTracingManager = new SceneTracingManager_1.SceneTracingManager(this);\r\n        this._sceneTreeManager = new SceneTreeManager_1.SceneTreeManager(this);\r\n        this._renderingManager = new RenderingManager_1.RenderingManager(this);\r\n        // loaders\r\n        this._environmentMapLoader = new EnvironmentMapLoader_1.EnvironmentMapLoader(this);\r\n        this._materialLoader = new MaterialLoader_1.MaterialLoader(this);\r\n        this._geometryLoader = new GeometryLoader_1.GeometryLoader(this);\r\n        this._htmlElementAnchorLoader = new HTMLElementAnchorLoader_1.HTMLElementAnchorLoader(this);\r\n        this._lightLoader = new LightLoader_1.LightLoader(this);\r\n        // start the creation and initialization process \r\n        this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);\r\n        this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._branding);\r\n        this._spinnerDivElement = this.renderingManager.addSpinner(this._canvas.canvasElement, this._branding);\r\n        // creation of the managers (all singleton engines were created already)\r\n        this._beautyRenderingManager.init();\r\n        this._cameraManager.init();\r\n        this._environmentGeometryManager.init();\r\n        this._sceneTracingManager.init();\r\n        this._sceneTreeManager.init();\r\n        this._renderingManager.init();\r\n        // loaders\r\n        this._environmentMapLoader.init();\r\n        this._materialLoader.init();\r\n        this._geometryLoader.init();\r\n        this._htmlElementAnchorLoader.init();\r\n        this._lightLoader.init();\r\n        this._renderingManager.start();\r\n        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {\r\n            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n        });\r\n        if (this._sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.NONE) {\r\n            this.environmentMap = 'photo_studio';\r\n            this.ambientOcclusion = false;\r\n        }\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (103)\r\n    get ambientOcclusion() {\r\n        return this._ambientOcclusion;\r\n    }\r\n    set ambientOcclusion(value) {\r\n        this._ambientOcclusion = value;\r\n    }\r\n    get ambientOcclusionIntensity() {\r\n        return this._ambientOcclusionIntensity;\r\n    }\r\n    set ambientOcclusionIntensity(value) {\r\n        this._ambientOcclusionIntensity = value;\r\n    }\r\n    get arRotation() {\r\n        return this._arRotation;\r\n    }\r\n    set arRotation(value) {\r\n        this._arRotation = value;\r\n    }\r\n    get arScale() {\r\n        return this._arScale;\r\n    }\r\n    set arScale(value) {\r\n        this._arScale = value;\r\n    }\r\n    get arTranslation() {\r\n        return this._arTranslation;\r\n    }\r\n    set arTranslation(value) {\r\n        this._arTranslation = value;\r\n    }\r\n    get automaticColorAdjustment() {\r\n        return this._automaticColorAdjustment;\r\n    }\r\n    set automaticColorAdjustment(value) {\r\n        if (this._automaticColorAdjustment === value)\r\n            return;\r\n        this._automaticColorAdjustment = value;\r\n        this._colorCache.forEach(c => c.colorCorrection(value));\r\n        this._materialLoader.assignColorCorrection(value);\r\n    }\r\n    get automaticResizing() {\r\n        return this._automaticResizing;\r\n    }\r\n    set automaticResizing(value) {\r\n        this._automaticResizing = value;\r\n    }\r\n    get beautyRenderBlendingDuration() {\r\n        return this._beautyRenderBlendingDuration;\r\n    }\r\n    set beautyRenderBlendingDuration(value) {\r\n        this._beautyRenderBlendingDuration = value;\r\n    }\r\n    get beautyRenderDelay() {\r\n        return this._beautyRenderDelay;\r\n    }\r\n    set beautyRenderDelay(value) {\r\n        this._beautyRenderDelay = value;\r\n    }\r\n    get beautyRenderingManager() {\r\n        return this._beautyRenderingManager;\r\n    }\r\n    get busy() {\r\n        return this._busy;\r\n    }\r\n    set busy(value) {\r\n        this._busy = value;\r\n    }\r\n    get busyModeDisplay() {\r\n        return this._busyModeDisplay;\r\n    }\r\n    set busyModeDisplay(value) {\r\n        this._busyModeDisplay = value;\r\n    }\r\n    get branding() {\r\n        return this._branding;\r\n    }\r\n    get cameraEngine() {\r\n        return this._cameraEngine;\r\n    }\r\n    get cameraManager() {\r\n        return this._cameraManager;\r\n    }\r\n    get canvas() {\r\n        return this._canvas.canvasElement;\r\n    }\r\n    get canvasEngine() {\r\n        return this._canvasEngine;\r\n    }\r\n    get clearAlpha() {\r\n        return this._clearAlpha;\r\n    }\r\n    set clearAlpha(value) {\r\n        this._clearAlpha = value;\r\n    }\r\n    get clearColor() {\r\n        return this._clearColor;\r\n    }\r\n    set clearColor(value) {\r\n        this._clearColor = value;\r\n    }\r\n    get closed() {\r\n        return this._closed;\r\n    }\r\n    get colorCache() {\r\n        return this._colorCache;\r\n    }\r\n    get continuousRendering() {\r\n        return this._renderingManager.continuousRendering;\r\n    }\r\n    set continuousRendering(value) {\r\n        this._renderingManager.continuousRendering = value;\r\n    }\r\n    get continuousShadowMapUpdate() {\r\n        return this._renderingManager.continuousShadowMapUpdate;\r\n    }\r\n    set continuousShadowMapUpdate(value) {\r\n        this._renderingManager.continuousShadowMapUpdate = value;\r\n    }\r\n    get defaultMaterialColor() {\r\n        return this._defaultMaterialColor;\r\n    }\r\n    set defaultMaterialColor(value) {\r\n        this._defaultMaterialColor = value;\r\n        this._materialLoader.assignDefaultMaterialColor();\r\n    }\r\n    get domEventEngine() {\r\n        return this._domEventEngine;\r\n    }\r\n    get enableAR() {\r\n        return this._enableAR;\r\n    }\r\n    set enableAR(value) {\r\n        this._enableAR = value;\r\n    }\r\n    get environmentMap() {\r\n        return this._environmentMap;\r\n    }\r\n    set environmentMap(value) {\r\n        this._environmentMap = value;\r\n        this._environmentMapLoader.load(this.environmentMap);\r\n    }\r\n    get environmentMapAsBackground() {\r\n        return this._environmentMapAsBackground;\r\n    }\r\n    set environmentMapAsBackground(value) {\r\n        this._environmentMapAsBackground = value;\r\n    }\r\n    get environmentMapBlurriness() {\r\n        return this._environmentMapBlurriness;\r\n    }\r\n    set environmentMapBlurriness(value) {\r\n        this._environmentMapBlurriness = value;\r\n        this._sceneTreeManager.scene.backgroundBlurriness = this._environmentMapBlurriness;\r\n    }\r\n    get environmentMapIntensity() {\r\n        return this._environmentMapIntensity;\r\n    }\r\n    set environmentMapIntensity(value) {\r\n        this._environmentMapIntensity = value;\r\n        this._sceneTreeManager.scene.backgroundIntensity = value;\r\n        this._materialLoader.assignEnvironmentMapIntensity(value);\r\n    }\r\n    get environmentMapLoader() {\r\n        return this._environmentMapLoader;\r\n    }\r\n    get environmentMapResolution() {\r\n        return this._environmentMapResolution;\r\n    }\r\n    set environmentMapResolution(value) {\r\n        this._environmentMapResolution = value;\r\n        this._environmentMapLoader.load(this.environmentMap);\r\n    }\r\n    get environmentMapForUnlitMaterials() {\r\n        return this._environmentMapForUnlitMaterials;\r\n    }\r\n    set environmentMapForUnlitMaterials(value) {\r\n        this._environmentMapForUnlitMaterials = value;\r\n        this._materialLoader.assignEnvironmentMapForUnlitMaterials(value);\r\n    }\r\n    get environmentMapRotation() {\r\n        return this._environmentMapRotation;\r\n    }\r\n    set environmentMapRotation(value) {\r\n        this._environmentMapRotation = value;\r\n        this._materialLoader.updateEnvironmentMapRotation(value);\r\n    }\r\n    get eventEngine() {\r\n        return this._eventEngine;\r\n    }\r\n    get geometryLoader() {\r\n        return this._geometryLoader;\r\n    }\r\n    get gridColor() {\r\n        return this._environmentGeometryManager.gridColor;\r\n    }\r\n    set gridColor(value) {\r\n        this._environmentGeometryManager.gridColor = value;\r\n    }\r\n    get gridVisibility() {\r\n        return this._gridVisibility;\r\n    }\r\n    set gridVisibility(value) {\r\n        if (this._environmentGeometryManager.grid)\r\n            this._environmentGeometryManager.grid.visible = value;\r\n        this._gridVisibility = value;\r\n    }\r\n    get groundPlaneColor() {\r\n        return this._environmentGeometryManager.groundPlaneColor;\r\n    }\r\n    set groundPlaneColor(value) {\r\n        this._environmentGeometryManager.groundPlaneColor = value;\r\n    }\r\n    get groundPlaneVisibility() {\r\n        return this._groundPlaneVisibility;\r\n    }\r\n    set groundPlaneVisibility(value) {\r\n        if (this._environmentGeometryManager.groundPlane)\r\n            this._environmentGeometryManager.groundPlane.visible = value;\r\n        this._groundPlaneVisibility = value;\r\n    }\r\n    get groundPlaneShadowColor() {\r\n        return this._environmentGeometryManager.groundPlaneShadowColor;\r\n    }\r\n    set groundPlaneShadowColor(value) {\r\n        this._environmentGeometryManager.groundPlaneShadowColor = value;\r\n    }\r\n    get groundPlaneShadowVisibility() {\r\n        return this._groundPlaneShadowVisibility;\r\n    }\r\n    set groundPlaneShadowVisibility(value) {\r\n        if (this._environmentGeometryManager.groundPlaneShadow)\r\n            this._environmentGeometryManager.groundPlaneShadow.visible = value;\r\n        this._groundPlaneShadowVisibility = value;\r\n    }\r\n    get htmlElementAnchorLoader() {\r\n        return this._htmlElementAnchorLoader;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get lightEngine() {\r\n        return this._lightEngine;\r\n    }\r\n    get lightLoader() {\r\n        return this._lightLoader;\r\n    }\r\n    get lights() {\r\n        return this._lights;\r\n    }\r\n    set lights(value) {\r\n        this._lights = value;\r\n    }\r\n    get lightScene() {\r\n        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n    }\r\n    get lightSceneId() {\r\n        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n    }\r\n    get logoDivElement() {\r\n        return this._logoDivElement;\r\n    }\r\n    get materialLoader() {\r\n        return this._materialLoader;\r\n    }\r\n    get maximumRenderingSize() {\r\n        return this._maximumRenderingSize;\r\n    }\r\n    set maximumRenderingSize(value) {\r\n        this._maximumRenderingSize = value;\r\n    }\r\n    get minimalRendering() {\r\n        return this.renderingManager.minimalRendering;\r\n    }\r\n    get outputEncoding() {\r\n        switch (this._renderer.outputEncoding) {\r\n            case (THREE.sRGBEncoding):\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;\r\n            case (THREE.LinearEncoding):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;\r\n        }\r\n    }\r\n    set outputEncoding(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):\r\n                this._renderer.outputEncoding = THREE.sRGBEncoding;\r\n                this._beautyRenderingManager.assignOutputEncoding(THREE.sRGBEncoding);\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):\r\n            default:\r\n                this._renderer.outputEncoding = THREE.LinearEncoding;\r\n                this._beautyRenderingManager.assignOutputEncoding(THREE.LinearEncoding);\r\n                break;\r\n        }\r\n    }\r\n    get physicallyCorrectLights() {\r\n        return this._renderer.physicallyCorrectLights;\r\n    }\r\n    set physicallyCorrectLights(value) {\r\n        this._renderer.physicallyCorrectLights = value;\r\n    }\r\n    get pointSize() {\r\n        return this._pointSize;\r\n    }\r\n    set pointSize(value) {\r\n        this._pointSize = value;\r\n        this.materialLoader.assignPointSize(value);\r\n    }\r\n    get renderer() {\r\n        return this._renderer;\r\n    }\r\n    get renderingManager() {\r\n        return this._renderingManager;\r\n    }\r\n    get scene() {\r\n        return this._sceneTreeManager.scene;\r\n    }\r\n    get sceneTracingManager() {\r\n        return this._sceneTracingManager;\r\n    }\r\n    get sceneTreeManager() {\r\n        return this._sceneTreeManager;\r\n    }\r\n    get sessionSettingsId() {\r\n        return this._sessionSettingsId;\r\n    }\r\n    set sessionSettingsId(value) {\r\n        this._sessionSettingsId = value;\r\n    }\r\n    get sessionSettingsMode() {\r\n        return this._sessionSettingsMode;\r\n    }\r\n    set sessionSettingsMode(value) {\r\n        this._sessionSettingsMode = value;\r\n    }\r\n    get settingsEngine() {\r\n        return this._settingsEngine;\r\n    }\r\n    set settingsEngine(value) {\r\n        this._settingsEngine = value;\r\n    }\r\n    get shadows() {\r\n        return this._shadows;\r\n    }\r\n    set shadows(value) {\r\n        this._shadows = value;\r\n    }\r\n    get show() {\r\n        return this._show;\r\n    }\r\n    set show(value) {\r\n        this._show = value;\r\n    }\r\n    get showStatistics() {\r\n        return this._showStatistics;\r\n    }\r\n    set showStatistics(value) {\r\n        this._showStatistics = value;\r\n    }\r\n    get spinnerDivElement() {\r\n        return this._spinnerDivElement;\r\n    }\r\n    get stateEngine() {\r\n        return this._stateEngine;\r\n    }\r\n    get textureEncoding() {\r\n        switch (this.materialLoader.textureEncoding) {\r\n            case (THREE.sRGBEncoding):\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;\r\n            case (THREE.LinearEncoding):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;\r\n        }\r\n    }\r\n    set textureEncoding(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):\r\n                this.environmentMapLoader.textureEncoding = THREE.sRGBEncoding;\r\n                this.materialLoader.textureEncoding = THREE.sRGBEncoding;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):\r\n            default:\r\n                this.environmentMapLoader.textureEncoding = THREE.LinearEncoding;\r\n                this.materialLoader.textureEncoding = THREE.LinearEncoding;\r\n        }\r\n    }\r\n    get toneMapping() {\r\n        switch (this._renderer.toneMapping) {\r\n            case (THREE.LinearToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR;\r\n            case (THREE.ReinhardToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD;\r\n            case (THREE.CineonToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON;\r\n            case (THREE.ACESFilmicToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC;\r\n            case (THREE.NoToneMapping):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE;\r\n        }\r\n    }\r\n    set toneMapping(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR):\r\n                this._renderer.toneMapping = THREE.LinearToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD):\r\n                this._renderer.toneMapping = THREE.ReinhardToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON):\r\n                this._renderer.toneMapping = THREE.CineonToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC):\r\n                this._renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE):\r\n            default:\r\n                this._renderer.toneMapping = THREE.NoToneMapping;\r\n        }\r\n        this.materialLoader.updateMaterials();\r\n    }\r\n    get toneMappingExposure() {\r\n        return this._renderer.toneMappingExposure;\r\n    }\r\n    set toneMappingExposure(value) {\r\n        this._renderer.toneMappingExposure = value;\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    set type(value) {\r\n        this._type = value;\r\n        this.update('RenderingEngine.type');\r\n    }\r\n    get usingSwiftShader() {\r\n        return this.renderingManager.usingSwiftShader;\r\n    }\r\n    get visibility() {\r\n        return this._visibility;\r\n    }\r\n    get visualizeAttributes() {\r\n        return this._visualizeAttributes;\r\n    }\r\n    set visualizeAttributes(value) {\r\n        this._visualizeAttributes = value;\r\n    }\r\n    // #endregion Public Accessors (103)\r\n    // #region Public Methods (16)\r\n    addFlag(flag) {\r\n        const token = this._uuidGenerator.create();\r\n        if (flag === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {\r\n            this.stateEngine.renderingEngines[this.id].busy.push(token);\r\n        }\r\n        else {\r\n            __classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[flag].push(token);\r\n        }\r\n        this.evaluateFlagState();\r\n        return token;\r\n    }\r\n    applySettings(sections = {\r\n        ar: true,\r\n        scene: true,\r\n        camera: true,\r\n        light: true,\r\n        environment: true,\r\n        general: true\r\n    }, settingsEngine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            settingsEngine = settingsEngine || this._settingsEngine;\r\n            if (!settingsEngine)\r\n                return;\r\n            if (sections.environment) {\r\n                // as the environment map is the only thing that needs time to load, load it first\r\n                yield new Promise((resolve, reject) => {\r\n                    this._stateEngine.renderingEngines[this.id].environmentMapLoaded.then(() => {\r\n                        try {\r\n                            if (!settingsEngine)\r\n                                return;\r\n                            this.environmentMapAsBackground = settingsEngine.environment.mapAsBackground;\r\n                            this.clearAlpha = settingsEngine.environment.clearAlpha;\r\n                            this.clearColor = this._converter.toHexColor(settingsEngine.environment.clearColor);\r\n                            this.environmentMapRotation = [settingsEngine.environment.rotation.x, settingsEngine.environment.rotation.y, settingsEngine.environment.rotation.z, settingsEngine.environment.rotation.w];\r\n                            this.environmentMapBlurriness = settingsEngine.environment.blurriness;\r\n                            this.environmentMapIntensity = settingsEngine.environment.intensity;\r\n                            this.applySyncSettings(sections);\r\n                            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, { viewportId: this.id });\r\n                            resolve();\r\n                        }\r\n                        catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    }).catch(e => reject(e));\r\n                    // set it like this to not trigger the loading\r\n                    this.environmentMap = settingsEngine.environment.map;\r\n                });\r\n            }\r\n            else {\r\n                this.applySyncSettings(sections);\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, { viewportId: this.id });\r\n            }\r\n        });\r\n    }\r\n    convert3Dto2D(p) {\r\n        return this.sceneTracingManager.convert3Dto2D(p);\r\n    }\r\n    close() {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._closed = true;\r\n            this._lightEngine.close();\r\n            this._renderer.clear(true, true, true);\r\n            this._renderer.dispose();\r\n            this._domEventEngine.removeAllDomEventListener();\r\n            this._domEventEngine.dispose();\r\n            (_a = this._canvas.canvasElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._logoDivElement);\r\n            (_b = this._canvas.canvasElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this._spinnerDivElement);\r\n            (_c = this._canvas.canvasElement.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(this._htmlElementAnchorLoader.parentDiv);\r\n            this._canvas.reset();\r\n        });\r\n    }\r\n    createSDTFOverview(node) {\r\n        const out = new viewer_shared_types_1.SDTFOverviewData({});\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFOverviewData)\r\n                out.merge(node.data[i]);\r\n        for (let i = 0, len = node.children.length; i < len; i++)\r\n            out.merge(new viewer_shared_types_1.SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n        return out.overview;\r\n    }\r\n    createThreeJsColor(color) {\r\n        const sdColor = new SDColor_1.SDColor(this._converter.toThreeJsColorInput(color), color);\r\n        sdColor.colorCorrection(this.automaticColorAdjustment);\r\n        this._colorCache.push(sdColor);\r\n        return sdColor;\r\n    }\r\n    displayErrorMessage(message) {\r\n        for (let i = 0; i < this.logoDivElement.children.length; i++)\r\n            this.logoDivElement.children[i].style.visibility = 'hidden';\r\n        const d = document.createElement('div');\r\n        d.style.position = 'absolute';\r\n        d.style.top = '50%';\r\n        d.style.left = '50%';\r\n        d.style.transform = 'translateX(-50%) translateY(-50%)';\r\n        d.style.textAlign = 'center';\r\n        this.logoDivElement.appendChild(d);\r\n        const p = document.createElement('p');\r\n        p.textContent = message;\r\n        p.style.fontFamily = '\"CircularXXWeb-Book\",sans-serif';\r\n        p.style.fontSize = 'x-large';\r\n        p.style.color = this.logoDivElement.style.backgroundColor;\r\n        p.style['filter'] = 'invert(100%)';\r\n        d.appendChild(p);\r\n    }\r\n    evaluateFlagState() {\r\n        // busy\r\n        {\r\n            const currentBusyState = this.busy;\r\n            if (this.stateEngine.renderingEngines[this.id] && this.stateEngine.renderingEngines[this.id].busy.length > 0) {\r\n                if (!currentBusyState) {\r\n                    this.busy = true;\r\n                    this._renderingManager.render();\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_ON, { viewportId: this.id });\r\n                }\r\n            }\r\n            else {\r\n                if (currentBusyState) {\r\n                    this.busy = false;\r\n                    this._renderingManager.render();\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_OFF, { viewportId: this.id });\r\n                }\r\n            }\r\n        }\r\n        // camera freeze\r\n        {\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE].length > 0) {\r\n                this.cameraEngine.deactivateCameraEvents();\r\n            }\r\n            else {\r\n                this.cameraEngine.activateCameraEvents();\r\n            }\r\n        }\r\n        // continuous rendering\r\n        {\r\n            const currentContinuousRenderingState = this.continuousRendering;\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING].length > 0) {\r\n                if (!currentContinuousRenderingState) {\r\n                    this.continuousRendering = true;\r\n                    this._renderingManager.render();\r\n                }\r\n            }\r\n            else {\r\n                if (currentContinuousRenderingState) {\r\n                    this.continuousRendering = false;\r\n                }\r\n            }\r\n        }\r\n        // continuous shadow map update\r\n        {\r\n            const currentShadowMapUpdateState = this.continuousShadowMapUpdate;\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE].length > 0) {\r\n                if (!currentShadowMapUpdateState) {\r\n                    this.continuousShadowMapUpdate = true;\r\n                    this._renderingManager.render();\r\n                }\r\n            }\r\n            else {\r\n                if (currentShadowMapUpdateState) {\r\n                    this.continuousShadowMapUpdate = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getEnvironmentMapImageUrl() {\r\n        return this._environmentMapLoader.getEnvironmentMapImageUrl(this.environmentMap);\r\n    }\r\n    getScreenshot(type, encoderOptions) {\r\n        return this._renderingManager.getScreenshot(type, encoderOptions);\r\n    }\r\n    isMobileDeviceWithoutBrowserARSupport() {\r\n        // has to be a mobile device (duh)\r\n        if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n            return false;\r\n        // no Firefox on Android\r\n        if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n            return true;\r\n        // no Firefox on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)\r\n            return true;\r\n        // no Instagram on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n            return true;\r\n        return false;\r\n    }\r\n    mouseEventToRay(event) {\r\n        return this._sceneTracingManager.mouseEventToRay(event);\r\n    }\r\n    raytraceScene(origin, direction, root) {\r\n        const intersect = this._intersectionManager.intersect({ origin, direction }, undefined, undefined, root);\r\n        return intersect.map(i => {\r\n            return {\r\n                distance: i.distance,\r\n                node: i.node,\r\n                data: i.geometryData\r\n            };\r\n        });\r\n    }\r\n    removeFlag(token) {\r\n        let success = false;\r\n        const Flags = Object.values(viewer_rendering_engine_rendering_engine_1.FLAG_TYPE);\r\n        for (let f of Flags) {\r\n            if (f === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {\r\n                if (this.stateEngine.renderingEngines[this.id].busy.includes(token)) {\r\n                    this.stateEngine.renderingEngines[this.id].busy.splice(this.stateEngine.renderingEngines[this.id].busy.indexOf(token), 1);\r\n                    success = true;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].includes(token)) {\r\n                    __classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].splice(__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].indexOf(token), 1);\r\n                    success = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.evaluateFlagState();\r\n        return success;\r\n    }\r\n    reset() {\r\n        this._stateEngine.renderingEngines[this.id].settingsAssigned.reset();\r\n        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.reset();\r\n        this._stateEngine.renderingEngines[this.id].environmentMapLoaded.reset();\r\n        this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {\r\n            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n        });\r\n    }\r\n    resize(width, height) {\r\n        this._renderingManager.resize(width, height);\r\n        this._renderingManager.render();\r\n    }\r\n    saveSettings(settingsEngine) {\r\n        settingsEngine = settingsEngine || this._settingsEngine;\r\n        if (!settingsEngine)\r\n            return;\r\n        this.lightEngine.saveSettings(settingsEngine);\r\n        this.cameraEngine.saveSettings(settingsEngine);\r\n        settingsEngine.ar.enable = this.enableAR;\r\n        settingsEngine.environment.mapResolution = this.environmentMapResolution;\r\n        settingsEngine.environment.map = Array.isArray(this.environmentMap) ? JSON.stringify(this.environmentMap) : this.environmentMap;\r\n        settingsEngine.environment.mapAsBackground = this.environmentMapAsBackground;\r\n        settingsEngine.environment.clearAlpha = this.clearAlpha;\r\n        settingsEngine.environment.clearColor = this._converter.toHexColor(this.clearColor);\r\n        settingsEngine.environment.rotation = { x: this.environmentMapRotation[0], y: this.environmentMapRotation[1], z: this.environmentMapRotation[2], w: this.environmentMapRotation[3] };\r\n        settingsEngine.environment.blurriness = this.environmentMapBlurriness;\r\n        settingsEngine.environment.intensity = this.environmentMapIntensity;\r\n        settingsEngine.environmentGeometry.gridVisibility = this.gridVisibility;\r\n        settingsEngine.environmentGeometry.groundPlaneVisibility = this.groundPlaneVisibility;\r\n        settingsEngine.environmentGeometry.groundPlaneShadowVisibility = this.groundPlaneShadowVisibility;\r\n        settingsEngine.environmentGeometry.gridColor = this._converter.toHexColor(this.gridColor);\r\n        settingsEngine.environmentGeometry.groundPlaneColor = this._converter.toHexColor(this.groundPlaneColor);\r\n        settingsEngine.environmentGeometry.groundPlaneShadowColor = this._converter.toHexColor(this.groundPlaneShadowColor);\r\n        settingsEngine.general.pointSize = this.pointSize;\r\n        settingsEngine.general.transformation.rotation = { x: this.arRotation[0], y: this.arRotation[1], z: this.arRotation[2] };\r\n        settingsEngine.general.transformation.translation = { x: this.arTranslation[0], y: this.arTranslation[1], z: this.arTranslation[2] };\r\n        settingsEngine.general.transformation.scale = { x: this.arScale[0], y: this.arScale[1], z: this.arScale[2] };\r\n        settingsEngine.general.defaultMaterialColor = this._converter.toHexColor(this.defaultMaterialColor);\r\n        settingsEngine.rendering.ambientOcclusion = this.ambientOcclusion;\r\n        settingsEngine.rendering.ambientOcclusionIntensity = this.ambientOcclusionIntensity;\r\n        settingsEngine.rendering.automaticColorAdjustment = this.automaticColorAdjustment;\r\n        settingsEngine.rendering.lights = this.lights;\r\n        settingsEngine.rendering.outputEncoding = this.outputEncoding;\r\n        settingsEngine.rendering.physicallyCorrectLights = this.physicallyCorrectLights;\r\n        settingsEngine.rendering.textureEncoding = this.textureEncoding;\r\n        settingsEngine.rendering.toneMapping = this.toneMapping;\r\n        settingsEngine.rendering.toneMappingExposure = this.toneMappingExposure;\r\n        settingsEngine.rendering.beautyRenderBlendingDuration = this.beautyRenderBlendingDuration;\r\n        settingsEngine.rendering.beautyRenderDelay = this.beautyRenderDelay;\r\n        settingsEngine.rendering.shadows = this.shadows;\r\n    }\r\n    touchToRay(event) {\r\n        return this._sceneTracingManager.touchToRay(event);\r\n    }\r\n    touchEventToRay(event) {\r\n        return this._sceneTracingManager.touchEventToRay(event);\r\n    }\r\n    update(id) {\r\n        if (this.closed)\r\n            return;\r\n        this._sceneTreeManager.updateSceneTree(this._tree.root, this._lightEngine);\r\n        this._renderingManager.updateShadowMap();\r\n        this._animationEngine.updateAnimationData();\r\n        this._renderingManager.render();\r\n        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, { viewportId: this.id });\r\n    }\r\n    updateEnvironmentGeometry() {\r\n        this._environmentGeometryManager.updateEnvironmentGeometryPosition();\r\n    }\r\n    viewInAR(file, options = { arScale: 'auto', arPlacement: 'floor', xrEnvironment: false }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 0, status: 'Loading AR scene' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);\r\n            // if this is not a supported device, throw an error\r\n            if (this.viewableInAR() === false) {\r\n                const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);\r\n                throw new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: The device or browser is not supported for this functionality, please call \"viewableInAR\" for more information.');\r\n            }\r\n            const arScale = options.arScale !== 'auto' ? 'fixed' : 'auto';\r\n            const arPlacement = options.arPlacement !== 'wall' ? 'floor' : 'wall';\r\n            const xrEnvironment = options.xrEnvironment !== true ? false : true;\r\n            let arEnvironment = '';\r\n            const envMapUrl = this.getEnvironmentMapImageUrl();\r\n            if (envMapUrl !== '') {\r\n                if (envMapUrl.endsWith('.hdr')) {\r\n                    arEnvironment = 'skybox-image=' + envMapUrl;\r\n                }\r\n                else {\r\n                    arEnvironment = 'environment-image=' + envMapUrl;\r\n                }\r\n            }\r\n            if (this._systemInfo.isIOS) {\r\n                // create the link and click it\r\n                const a = document.createElement('a');\r\n                a.href = file + (arScale === 'fixed' ? '.usdz_allowsContentScaling=0' : '.usdz');\r\n                a.rel = 'ar';\r\n                const img = document.createElement('img');\r\n                img.src = __classPrivateFieldGet(this, _RenderingEngine_defaultLogoStatic, \"f\");\r\n                a.appendChild(img);\r\n                a.click();\r\n            }\r\n            else {\r\n                const a = document.createElement('a');\r\n                a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${arScale === 'fixed' ? 'false' : 'true'}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;end;`;\r\n                a.click();\r\n            }\r\n            const event2 = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Done loading AR scene, launching AR' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event2);\r\n        });\r\n    }\r\n    viewableInAR() {\r\n        // has to be a mobile device (duh)\r\n        if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n            return false;\r\n        // no Firefox on Android\r\n        if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n            return false;\r\n        // no Firefox on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)\r\n            return false;\r\n        // no Instagram on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n            return false;\r\n        return true;\r\n    }\r\n    // #endregion Public Methods (16)\r\n    // #region Private Methods (1)\r\n    applySyncSettings(sections = {\r\n        ar: true,\r\n        scene: true,\r\n        camera: true,\r\n        light: true,\r\n        environment: true,\r\n        general: true\r\n    }) {\r\n        if (!this._settingsEngine)\r\n            return;\r\n        if (sections.ar) {\r\n            this.enableAR = this._settingsEngine.ar.enable;\r\n            this.arScale = [this._settingsEngine.general.transformation.scale.x, this._settingsEngine.general.transformation.scale.y, this._settingsEngine.general.transformation.scale.z];\r\n            this.arTranslation = [this._settingsEngine.general.transformation.translation.x, this._settingsEngine.general.transformation.translation.y, this._settingsEngine.general.transformation.translation.z];\r\n            this.arRotation = [this._settingsEngine.general.transformation.rotation.x, this._settingsEngine.general.transformation.rotation.y, this._settingsEngine.general.transformation.rotation.z];\r\n        }\r\n        if (sections.scene) {\r\n            this.gridColor = this._settingsEngine.environmentGeometry.gridColor;\r\n            this.gridVisibility = this._settingsEngine.environmentGeometry.gridVisibility;\r\n            this.groundPlaneColor = this._settingsEngine.environmentGeometry.groundPlaneColor;\r\n            this.groundPlaneVisibility = this._settingsEngine.environmentGeometry.groundPlaneVisibility;\r\n            this.groundPlaneShadowColor = this._settingsEngine.environmentGeometry.groundPlaneShadowColor;\r\n            this.groundPlaneShadowVisibility = this._settingsEngine.environmentGeometry.groundPlaneShadowVisibility;\r\n            this.shadows = this._settingsEngine.rendering.shadows;\r\n            this.ambientOcclusion = this._settingsEngine.rendering.ambientOcclusion;\r\n            this.lights = this._settingsEngine.rendering.lights;\r\n            this.automaticColorAdjustment = this._settingsEngine.rendering.automaticColorAdjustment;\r\n            this.textureEncoding = this._settingsEngine.rendering.textureEncoding;\r\n            this.outputEncoding = this._settingsEngine.rendering.outputEncoding;\r\n            this.physicallyCorrectLights = this._settingsEngine.rendering.physicallyCorrectLights;\r\n            this.toneMapping = this._settingsEngine.rendering.toneMapping;\r\n            this.toneMappingExposure = this._settingsEngine.rendering.toneMappingExposure;\r\n        }\r\n        if (sections.general) {\r\n            this.defaultMaterialColor = this._settingsEngine.general.defaultMaterialColor;\r\n            this.pointSize = this._settingsEngine.general.pointSize;\r\n        }\r\n        if (sections.light)\r\n            this.lightEngine.applySettings(this._settingsEngine);\r\n        if (sections.camera)\r\n            this.cameraEngine.applySettings(this._settingsEngine);\r\n        this._stateEngine.renderingEngines[this.id].settingsAssigned.resolve(true);\r\n        this.update('RenderingEngine.applySyncSettings');\r\n    }\r\n}\r\nexports.RenderingEngine = RenderingEngine;\r\n_RenderingEngine_defaultLogo = new WeakMap(), _RenderingEngine_defaultLogoStatic = new WeakMap(), _RenderingEngine_defaultSpinner = new WeakMap(), _RenderingEngine_animations = new WeakMap(), _RenderingEngine_flags = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"RenderingEngine.js","sourceRoot":"","sources":["../src/RenderingEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport { quat, vec2, vec3 } from 'gl-matrix'\r\nimport {\r\n  CameraEngine,\r\n} from '@shapediver/viewer.rendering-engine.camera-engine'\r\nimport { CanvasEngine, ICanvas } from '@shapediver/viewer.rendering-engine.canvas-engine'\r\nimport { ITree, ITreeNode, Tree } from '@shapediver/viewer.shared.node-tree'\r\nimport { LightEngine } from '@shapediver/viewer.rendering-engine.light-engine'\r\nimport {\r\n  BUSY_MODE_DISPLAY,\r\n  FLAG_TYPE,\r\n  SPINNER_POSITIONING,\r\n  RENDERER_TYPE,\r\n  SESSION_SETTINGS_MODE,\r\n  TEXTURE_ENCODING,\r\n  TONE_MAPPING,\r\n  VISIBILITY_MODE,\r\n} from '@shapediver/viewer.rendering-engine.rendering-engine'\r\nimport {\r\n  Converter,\r\n  DomEventEngine,\r\n  EventEngine,\r\n  EVENTTYPE,\r\n  EVENTTYPE_VIEWPORT,\r\n  Logger,\r\n  SettingsEngine,\r\n  ShapeDiverViewerArError,\r\n  StateEngine,\r\n  SystemInfo,\r\n  UuidGenerator,\r\n} from '@shapediver/viewer.shared.services'\r\nimport {\r\n  AnimationData,\r\n  ISDTFOverviewData,\r\n  ISDTFAttributeVisualizationData,\r\n  ISDTFOverview,\r\n  ISDTFItemData,\r\n  SDTFOverviewData,\r\n  ITaskEvent,\r\n  TASK_TYPE,\r\n  IAnimationData,\r\n  IGeometryData,\r\n  Color,\r\n  IViewportEvent,\r\n} from '@shapediver/viewer.shared.types'\r\nimport {\r\n  AnimationEngine\r\n} from \"@shapediver/viewer.rendering-engine.animation-engine\"\r\nimport { IntersectionEngine } from '@shapediver/viewer.rendering-engine.intersection-engine'\r\n\r\nimport { SceneTreeManager } from './managers/SceneTreeManager'\r\nimport { RenderingManager } from './managers/RenderingManager'\r\nimport { MaterialLoader } from './loaders/MaterialLoader'\r\nimport { EnvironmentMapLoader } from './loaders/EnvironmentMapLoader'\r\nimport { GeometryLoader } from './loaders/GeometryLoader'\r\nimport { LightLoader } from './loaders/LightLoader'\r\nimport { HTMLElementAnchorLoader } from './loaders/HTMLElementAnchorLoader'\r\nimport { BeautyRenderingManager } from './managers/BeautyRenderingManager'\r\nimport { EnvironmentGeometryManager } from './managers/EnvironmentGeometryManager'\r\nimport { SceneTracingManager } from './managers/SceneTracingManager'\r\nimport { CameraManager } from './managers/CameraManager'\r\nimport { IRenderingEngineThreeJS } from './interfaces/IRenderingEngine'\r\nimport { SDColor } from './objects/SDColor'\r\n\r\nexport class RenderingEngine implements IRenderingEngineThreeJS {\r\n  // #region Properties (61)\r\n\r\n  // managers\r\n  private readonly _beautyRenderingManager: BeautyRenderingManager;\r\n  // engines\r\n  private readonly _cameraEngine: CameraEngine;\r\n  private readonly _cameraManager: CameraManager;\r\n  // viewer essentials\r\n  private readonly _canvas: ICanvas;\r\n  private readonly _canvasEngine: CanvasEngine = CanvasEngine.instance;\r\n  private readonly _animationEngine: AnimationEngine = AnimationEngine.instance;\r\n  // utils\r\n  private readonly _converter: Converter = Converter.instance;\r\n  private readonly _domEventEngine: DomEventEngine;\r\n  private readonly _environmentGeometryManager: EnvironmentGeometryManager;\r\n  private readonly _intersectionManager: IntersectionEngine = IntersectionEngine.instance;\r\n  private readonly _systemInfo: SystemInfo = SystemInfo.instance;\r\n  // loaders\r\n  private readonly _environmentMapLoader: EnvironmentMapLoader;\r\n  private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n  private readonly _geometryLoader: GeometryLoader;\r\n  private readonly _htmlElementAnchorLoader: HTMLElementAnchorLoader;\r\n  // constructor properties\r\n  private readonly _branding: {\r\n    logo: string | null,\r\n    backgroundColor: string,\r\n    busyModeSpinner: string,\r\n    busyModeDisplay: BUSY_MODE_DISPLAY,\r\n    spinnerPositioning: SPINNER_POSITIONING\r\n  };\r\n  private readonly _colorCache: SDColor[] = [];\r\n  private readonly _id: string;\r\n  private readonly _lightEngine: LightEngine;\r\n  private readonly _lightLoader: LightLoader;\r\n  private readonly _logger: Logger = Logger.instance;\r\n  private readonly _materialLoader: MaterialLoader;\r\n  private readonly _renderingManager: RenderingManager;\r\n  private readonly _sceneTracingManager: SceneTracingManager;\r\n  private readonly _sceneTreeManager: SceneTreeManager;\r\n  private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n  private readonly _tree: ITree = Tree.instance;\r\n  private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n  private readonly _visibility: VISIBILITY_MODE;\r\n\r\n  // settings\r\n  private _ambientOcclusion: boolean = true;\r\n  private _ambientOcclusionIntensity: number = 0.1;\r\n  private _arRotation: vec3 = vec3.create();\r\n  private _arScale: vec3 = vec3.fromValues(1, 1, 1);\r\n  private _arTranslation: vec3 = vec3.create();\r\n  private _automaticColorAdjustment: boolean = true;\r\n  private _automaticResizing: boolean = true;\r\n  private _beautyRenderBlendingDuration: number = 1500;\r\n  private _beautyRenderDelay: number = 50;\r\n  private _busy: boolean = false;\r\n  private _busyModeDisplay: BUSY_MODE_DISPLAY = BUSY_MODE_DISPLAY.SPINNER;\r\n  private _clearAlpha: number = 1.0;\r\n  private _clearColor: Color = '#ffffff';\r\n  // viewer global vars\r\n  private _closed: boolean = false;\r\n  private _defaultMaterialColor: Color = \"#199b9b\";\r\n  private _enableAR: boolean = true;\r\n  private _environmentMap: string | string[] = 'null';\r\n  private _environmentMapAsBackground: boolean = false;\r\n  private _environmentMapBlurriness: number = 0;\r\n  private _environmentMapIntensity: number = 1;\r\n  private _environmentMapResolution: string = '1024';\r\n  private _environmentMapForUnlitMaterials: boolean = false;\r\n  private _environmentMapRotation: quat = quat.create();\r\n  private _gridVisibility: boolean = true;\r\n  private _groundPlaneVisibility: boolean = true;\r\n  private _groundPlaneShadowVisibility: boolean = false;\r\n  private _lights: boolean = true;\r\n  private _logoDivElement: HTMLDivElement;\r\n  private _maximumRenderingSize: { width: number; height: number } = { width: 1920, height: 1080 };\r\n  private _pointSize: number = 1.0;\r\n  private _renderer: THREE.WebGLRenderer;\r\n  private _sessionSettingsId?: string;\r\n  private _sessionSettingsMode: SESSION_SETTINGS_MODE;\r\n  private _settingsEngine?: SettingsEngine;\r\n  private _shadows: boolean = true;\r\n  private _show: boolean = false;\r\n  private _showStatistics: boolean = false;\r\n  private _spinnerDivElement: HTMLDivElement;\r\n  private _type: RENDERER_TYPE = RENDERER_TYPE.STANDARD;\r\n  private _visualizeAttributes: ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined;\r\n\r\n  readonly #defaultLogo: string = 'https://viewer.shapediver.com/v3/graphics/logo_animated_breath.svg';\r\n  readonly #defaultLogoStatic: string = 'https://viewer.shapediver.com/v3/graphics/logo.png';\r\n  readonly #defaultSpinner: string = 'https://viewer.shapediver.com/v3/graphics/spinner_ripple.svg';\r\n\r\n  #animations: {\r\n    [key: string]: IAnimationData\r\n  } = {};\r\n  #flags: { [key: string]: string[] } = {\r\n    [FLAG_TYPE.CAMERA_FREEZE]: [],\r\n    [FLAG_TYPE.CONTINUOUS_RENDERING]: [],\r\n    [FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE]: [],\r\n  };\r\n\r\n  // #endregion Properties (61)\r\n\r\n  // #region Constructors (1)\r\n\r\n  constructor(properties?: {\r\n    canvas?: HTMLCanvasElement,\r\n    id?: string,\r\n    branding?: {\r\n      logo?: string | null,\r\n      backgroundColor?: string,\r\n      busyModeSpinner?: string,\r\n      busyModeDisplay?: BUSY_MODE_DISPLAY,\r\n      spinnerPositioning?: SPINNER_POSITIONING\r\n    },\r\n    sessionSettingsId?: string,\r\n    sessionSettingsMode?: SESSION_SETTINGS_MODE,\r\n    visibility?: VISIBILITY_MODE,\r\n  }) {\r\n    // THREE object has default Y, we change that (although it doesn't work everywhere)\r\n    THREE.Object3D.DEFAULT_UP = new THREE.Vector3(0, 0, 1);\r\n\r\n    const prop = Object.assign({}, properties);\r\n    const branding = Object.assign({}, prop.branding);\r\n\r\n    // setting some of the provided properties\r\n    this._id = prop.id || (UuidGenerator.instance).create();\r\n    this._visibility = prop.visibility || VISIBILITY_MODE.SESSION;\r\n    this._sessionSettingsMode = prop.sessionSettingsMode || SESSION_SETTINGS_MODE.FIRST;\r\n    this._sessionSettingsId = prop.sessionSettingsId;\r\n    this._branding = {\r\n      logo: branding.logo === undefined ? this.#defaultLogo : branding.logo,\r\n      backgroundColor: branding.backgroundColor || '#393a45FF',\r\n      busyModeSpinner: branding.busyModeSpinner === undefined ? this.#defaultSpinner : branding.busyModeSpinner,\r\n      busyModeDisplay: branding.busyModeDisplay || BUSY_MODE_DISPLAY.SPINNER,\r\n      spinnerPositioning: branding.spinnerPositioning || SPINNER_POSITIONING.BOTTOM_RIGHT\r\n    };\r\n\r\n    // creation of viewer essentials\r\n    this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(prop.canvas));\r\n\r\n    // creation of the engines (all singleton engines were created already)\r\n    this._domEventEngine = new DomEventEngine(this._canvas.canvasElement);\r\n    this._cameraEngine = new CameraEngine(this, this._canvas.canvasElement);\r\n    this._lightEngine = new LightEngine(this);\r\n\r\n    // creation of the managers (all singleton engines were created already)\r\n    this._beautyRenderingManager = new BeautyRenderingManager(this);\r\n    this._cameraManager = new CameraManager(this);\r\n    this._environmentGeometryManager = new EnvironmentGeometryManager(this);\r\n    this._sceneTracingManager = new SceneTracingManager(this);\r\n    this._sceneTreeManager = new SceneTreeManager(this);\r\n    this._renderingManager = new RenderingManager(this);\r\n\r\n    // loaders\r\n    this._environmentMapLoader = new EnvironmentMapLoader(this);\r\n    this._materialLoader = new MaterialLoader(this);\r\n    this._geometryLoader = new GeometryLoader(this);\r\n    this._htmlElementAnchorLoader = new HTMLElementAnchorLoader(this);\r\n    this._lightLoader = new LightLoader(this);\r\n\r\n    // start the creation and initialization process \r\n    this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);\r\n    this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._branding);\r\n    this._spinnerDivElement = this.renderingManager.addSpinner(this._canvas.canvasElement, this._branding);\r\n\r\n    // creation of the managers (all singleton engines were created already)\r\n    this._beautyRenderingManager.init();\r\n    this._cameraManager.init();\r\n    this._environmentGeometryManager.init();\r\n    this._sceneTracingManager.init();\r\n    this._sceneTreeManager.init();\r\n    this._renderingManager.init();\r\n\r\n    // loaders\r\n    this._environmentMapLoader.init();\r\n    this._materialLoader.init();\r\n    this._geometryLoader.init();\r\n    this._htmlElementAnchorLoader.init();\r\n    this._lightLoader.init();\r\n\r\n    this._renderingManager.start()\r\n\r\n    this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {\r\n      this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n    })\r\n\r\n    if (this._sessionSettingsMode === SESSION_SETTINGS_MODE.NONE) {\r\n      this.environmentMap = 'photo_studio';\r\n      this.ambientOcclusion = false;\r\n    }\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (103)\r\n\r\n  public get ambientOcclusion(): boolean {\r\n    return this._ambientOcclusion;\r\n  }\r\n\r\n  public set ambientOcclusion(value: boolean) {\r\n    this._ambientOcclusion = value;\r\n  }\r\n\r\n  public get ambientOcclusionIntensity(): number {\r\n    return this._ambientOcclusionIntensity;\r\n  }\r\n\r\n  public set ambientOcclusionIntensity(value: number) {\r\n    this._ambientOcclusionIntensity = value;\r\n  }\r\n\r\n  public get arRotation(): vec3 {\r\n    return this._arRotation;\r\n  }\r\n\r\n  public set arRotation(value: vec3) {\r\n    this._arRotation = value;\r\n  }\r\n\r\n  public get arScale(): vec3 {\r\n    return this._arScale;\r\n  }\r\n\r\n  public set arScale(value: vec3) {\r\n    this._arScale = value;\r\n  }\r\n\r\n  public get arTranslation(): vec3 {\r\n    return this._arTranslation;\r\n  }\r\n\r\n  public set arTranslation(value: vec3) {\r\n    this._arTranslation = value;\r\n  }\r\n\r\n  public get automaticColorAdjustment(): boolean {\r\n    return this._automaticColorAdjustment;\r\n  }\r\n\r\n  public set automaticColorAdjustment(value: boolean) {\r\n    if(this._automaticColorAdjustment === value) return;\r\n    this._automaticColorAdjustment = value;\r\n    this._colorCache.forEach(c => c.colorCorrection(value));\r\n    this._materialLoader.assignColorCorrection(value);\r\n  }\r\n\r\n  public get automaticResizing(): boolean {\r\n    return this._automaticResizing;\r\n  }\r\n\r\n  public set automaticResizing(value: boolean) {\r\n    this._automaticResizing = value;\r\n  }\r\n\r\n  public get beautyRenderBlendingDuration(): number {\r\n    return this._beautyRenderBlendingDuration;\r\n  }\r\n\r\n  public set beautyRenderBlendingDuration(value: number) {\r\n    this._beautyRenderBlendingDuration = value;\r\n  }\r\n\r\n  public get beautyRenderDelay(): number {\r\n    return this._beautyRenderDelay;\r\n  }\r\n\r\n  public set beautyRenderDelay(value: number) {\r\n    this._beautyRenderDelay = value;\r\n  }\r\n\r\n  public get beautyRenderingManager(): BeautyRenderingManager {\r\n    return this._beautyRenderingManager;\r\n  }\r\n\r\n  public get busy(): boolean {\r\n    return this._busy;\r\n  }\r\n\r\n  public set busy(value: boolean) {\r\n    this._busy = value;\r\n  }\r\n\r\n  public get busyModeDisplay(): BUSY_MODE_DISPLAY {\r\n    return this._busyModeDisplay;\r\n  }\r\n\r\n  public set busyModeDisplay(value: BUSY_MODE_DISPLAY) {\r\n    this._busyModeDisplay = value;\r\n  }\r\n\r\n  public get branding(): {\r\n    logo: string | null;\r\n    backgroundColor: string;\r\n    busyModeSpinner: string;\r\n    busyModeDisplay: BUSY_MODE_DISPLAY;\r\n    spinnerPositioning: SPINNER_POSITIONING\r\n  } {\r\n    return this._branding;\r\n  }\r\n\r\n  public get cameraEngine(): CameraEngine {\r\n    return this._cameraEngine;\r\n  }\r\n\r\n  public get cameraManager(): CameraManager {\r\n    return this._cameraManager;\r\n  }\r\n\r\n  public get canvas(): HTMLCanvasElement {\r\n    return this._canvas.canvasElement;\r\n  }\r\n\r\n  public get canvasEngine(): CanvasEngine {\r\n    return this._canvasEngine;\r\n  }\r\n\r\n  public get clearAlpha(): number {\r\n    return this._clearAlpha;\r\n  }\r\n\r\n  public set clearAlpha(value: number) {\r\n    this._clearAlpha = value;\r\n  }\r\n\r\n  public get clearColor(): Color {\r\n    return this._clearColor;\r\n  }\r\n\r\n  public set clearColor(value: Color) {\r\n    this._clearColor = value;\r\n  }\r\n\r\n  public get closed(): boolean {\r\n    return this._closed;\r\n  }\r\n\r\n  public get colorCache(): SDColor[] {\r\n    return this._colorCache;\r\n  }\r\n\r\n  public get continuousRendering(): boolean {\r\n    return this._renderingManager.continuousRendering;\r\n  }\r\n\r\n  public set continuousRendering(value: boolean) {\r\n    this._renderingManager.continuousRendering = value;\r\n  }\r\n\r\n  public get continuousShadowMapUpdate(): boolean {\r\n    return this._renderingManager.continuousShadowMapUpdate;\r\n  }\r\n\r\n  public set continuousShadowMapUpdate(value: boolean) {\r\n    this._renderingManager.continuousShadowMapUpdate = value;\r\n  }\r\n\r\n  public get defaultMaterialColor(): Color {\r\n    return this._defaultMaterialColor;\r\n  }\r\n\r\n  public set defaultMaterialColor(value: Color) {\r\n    this._defaultMaterialColor = value;\r\n    this._materialLoader.assignDefaultMaterialColor();\r\n  }\r\n\r\n  public get domEventEngine(): DomEventEngine {\r\n    return this._domEventEngine;\r\n  }\r\n\r\n  public get enableAR(): boolean {\r\n    return this._enableAR;\r\n  }\r\n\r\n  public set enableAR(value: boolean) {\r\n    this._enableAR = value;\r\n  }\r\n\r\n  public get environmentMap(): string | string[] {\r\n    return this._environmentMap;\r\n  }\r\n\r\n  public set environmentMap(value: string | string[]) {\r\n    this._environmentMap = value;\r\n    this._environmentMapLoader.load(this.environmentMap);\r\n  }\r\n\r\n  public get environmentMapAsBackground(): boolean {\r\n    return this._environmentMapAsBackground;\r\n  }\r\n\r\n  public set environmentMapAsBackground(value: boolean) {\r\n    this._environmentMapAsBackground = value;\r\n  }\r\n\r\n  public get environmentMapBlurriness(): number {\r\n    return this._environmentMapBlurriness;\r\n  }\r\n\r\n  public set environmentMapBlurriness(value: number) {\r\n    this._environmentMapBlurriness = value;\r\n    this._sceneTreeManager.scene.backgroundBlurriness = this._environmentMapBlurriness\r\n  }\r\n\r\n  public get environmentMapIntensity(): number {\r\n    return this._environmentMapIntensity;\r\n  }\r\n\r\n  public set environmentMapIntensity(value: number) {\r\n    this._environmentMapIntensity = value;\r\n    this._sceneTreeManager.scene.backgroundIntensity = value;\r\n    this._materialLoader.assignEnvironmentMapIntensity(value);\r\n  }\r\n\r\n  public get environmentMapLoader(): EnvironmentMapLoader {\r\n    return this._environmentMapLoader;\r\n  }\r\n\r\n  public get environmentMapResolution(): string {\r\n    return this._environmentMapResolution;\r\n  }\r\n\r\n  public set environmentMapResolution(value: string) {\r\n    this._environmentMapResolution = value;\r\n    this._environmentMapLoader.load(this.environmentMap);\r\n  }\r\n\r\n  public get environmentMapForUnlitMaterials(): boolean {\r\n    return this._environmentMapForUnlitMaterials;\r\n  }\r\n\r\n  public set environmentMapForUnlitMaterials(value: boolean) {\r\n    this._environmentMapForUnlitMaterials = value;\r\n    this._materialLoader.assignEnvironmentMapForUnlitMaterials(value);\r\n  }\r\n\r\n  public get environmentMapRotation(): quat {\r\n    return this._environmentMapRotation;\r\n  }\r\n\r\n  public set environmentMapRotation(value: quat) {\r\n    this._environmentMapRotation = value;\r\n    this._materialLoader.updateEnvironmentMapRotation(value);\r\n  }\r\n\r\n  public get eventEngine(): EventEngine {\r\n    return this._eventEngine;\r\n  }\r\n\r\n  public get geometryLoader(): GeometryLoader {\r\n    return this._geometryLoader;\r\n  }\r\n\r\n  public get gridColor(): Color {\r\n    return this._environmentGeometryManager.gridColor;\r\n  }\r\n\r\n  public set gridColor(value: Color) {\r\n    this._environmentGeometryManager.gridColor = value;\r\n  }\r\n\r\n  public get gridVisibility(): boolean {\r\n    return this._gridVisibility;\r\n  }\r\n\r\n  public set gridVisibility(value: boolean) {\r\n    if (this._environmentGeometryManager.grid) this._environmentGeometryManager.grid.visible = value;\r\n    this._gridVisibility = value;\r\n  }\r\n\r\n  public get groundPlaneColor(): Color {\r\n    return this._environmentGeometryManager.groundPlaneColor;\r\n  }\r\n\r\n  public set groundPlaneColor(value: Color) {\r\n    this._environmentGeometryManager.groundPlaneColor = value;\r\n  }\r\n\r\n  public get groundPlaneVisibility(): boolean {\r\n    return this._groundPlaneVisibility;\r\n  }\r\n\r\n  public set groundPlaneVisibility(value: boolean) {\r\n    if (this._environmentGeometryManager.groundPlane) this._environmentGeometryManager.groundPlane.visible = value;\r\n    this._groundPlaneVisibility = value;\r\n  }\r\n\r\n  public get groundPlaneShadowColor(): Color {\r\n    return this._environmentGeometryManager.groundPlaneShadowColor;\r\n  }\r\n\r\n  public set groundPlaneShadowColor(value: Color) {\r\n    this._environmentGeometryManager.groundPlaneShadowColor = value;\r\n  }\r\n\r\n  public get groundPlaneShadowVisibility(): boolean {\r\n    return this._groundPlaneShadowVisibility;\r\n  }\r\n\r\n  public set groundPlaneShadowVisibility(value: boolean) {\r\n    if (this._environmentGeometryManager.groundPlaneShadow) this._environmentGeometryManager.groundPlaneShadow.visible = value;\r\n    this._groundPlaneShadowVisibility = value;\r\n  }\r\n\r\n  public get htmlElementAnchorLoader(): HTMLElementAnchorLoader {\r\n    return this._htmlElementAnchorLoader;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  public get lightEngine(): LightEngine {\r\n    return this._lightEngine;\r\n  }\r\n\r\n  public get lightLoader(): LightLoader {\r\n    return this._lightLoader;\r\n  }\r\n\r\n  public get lights(): boolean {\r\n    return this._lights;\r\n  }\r\n\r\n  public set lights(value: boolean) {\r\n    this._lights = value;\r\n  }\r\n\r\n  public get lightScene(): string {\r\n    return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n  }\r\n\r\n  public get lightSceneId(): string {\r\n    return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n  }\r\n\r\n  public get logoDivElement(): HTMLDivElement {\r\n    return this._logoDivElement;\r\n  }\r\n\r\n  public get materialLoader(): MaterialLoader {\r\n    return this._materialLoader;\r\n  }\r\n\r\n  public get maximumRenderingSize(): {\r\n    width: number,\r\n    height: number\r\n  } {\r\n    return this._maximumRenderingSize;\r\n  }\r\n\r\n  public set maximumRenderingSize(value: {\r\n    width: number,\r\n    height: number\r\n  }) {\r\n    this._maximumRenderingSize = value;\r\n  }\r\n\r\n  public get minimalRendering(): boolean {\r\n    return this.renderingManager.minimalRendering;\r\n  }\r\n\r\n  public get outputEncoding(): TEXTURE_ENCODING {\r\n    switch (this._renderer.outputEncoding) {\r\n      case (THREE.sRGBEncoding):\r\n        return TEXTURE_ENCODING.SRGB;\r\n      case (THREE.LinearEncoding):\r\n      default:\r\n        return TEXTURE_ENCODING.LINEAR;\r\n    }\r\n  }\r\n\r\n  public set outputEncoding(value: TEXTURE_ENCODING) {\r\n    switch (value) {\r\n      case (TEXTURE_ENCODING.SRGB):\r\n        this._renderer.outputEncoding = THREE.sRGBEncoding;\r\n        this._beautyRenderingManager.assignOutputEncoding(THREE.sRGBEncoding);\r\n        break;\r\n      case (TEXTURE_ENCODING.LINEAR):\r\n      default:\r\n        this._renderer.outputEncoding = THREE.LinearEncoding;\r\n        this._beautyRenderingManager.assignOutputEncoding(THREE.LinearEncoding);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public get physicallyCorrectLights(): boolean {\r\n    return this._renderer.physicallyCorrectLights;\r\n  }\r\n\r\n  public set physicallyCorrectLights(value: boolean) {\r\n    this._renderer.physicallyCorrectLights = value;\r\n  }\r\n\r\n  public get pointSize(): number {\r\n    return this._pointSize;\r\n  }\r\n\r\n  public set pointSize(value: number) {\r\n    this._pointSize = value;\r\n    this.materialLoader.assignPointSize(value)\r\n  }\r\n\r\n  public get renderer(): THREE.WebGLRenderer {\r\n    return this._renderer;\r\n  }\r\n\r\n  public get renderingManager(): RenderingManager {\r\n    return this._renderingManager;\r\n  }\r\n\r\n  public get scene(): THREE.Scene {\r\n    return this._sceneTreeManager.scene;\r\n  }\r\n\r\n  public get sceneTracingManager(): SceneTracingManager {\r\n    return this._sceneTracingManager;\r\n  }\r\n\r\n  public get sceneTreeManager(): SceneTreeManager {\r\n    return this._sceneTreeManager;\r\n  }\r\n\r\n  public get sessionSettingsId(): string | undefined {\r\n    return this._sessionSettingsId;\r\n  }\r\n\r\n  public set sessionSettingsId(value: string | undefined) {\r\n    this._sessionSettingsId = value;\r\n  }\r\n\r\n  public get sessionSettingsMode(): SESSION_SETTINGS_MODE {\r\n    return this._sessionSettingsMode;\r\n  }\r\n\r\n  public set sessionSettingsMode(value: SESSION_SETTINGS_MODE) {\r\n    this._sessionSettingsMode = value;\r\n  }\r\n\r\n  public get settingsEngine(): SettingsEngine | undefined {\r\n    return this._settingsEngine;\r\n  }\r\n\r\n  public set settingsEngine(value: SettingsEngine | undefined) {\r\n    this._settingsEngine = value;\r\n  }\r\n\r\n  public get shadows(): boolean {\r\n    return this._shadows;\r\n  }\r\n\r\n  public set shadows(value: boolean) {\r\n    this._shadows = value;\r\n  }\r\n\r\n  public get show(): boolean {\r\n    return this._show;\r\n  }\r\n\r\n  public set show(value: boolean) {\r\n    this._show = value;\r\n  }\r\n\r\n  public get showStatistics(): boolean {\r\n    return this._showStatistics;\r\n  }\r\n\r\n  public set showStatistics(value: boolean) {\r\n    this._showStatistics = value;\r\n  }\r\n\r\n  public get spinnerDivElement(): HTMLDivElement {\r\n    return this._spinnerDivElement;\r\n  }\r\n\r\n  public get stateEngine(): StateEngine {\r\n    return this._stateEngine;\r\n  }\r\n\r\n  public get textureEncoding(): TEXTURE_ENCODING {\r\n    switch (this.materialLoader.textureEncoding) {\r\n      case (THREE.sRGBEncoding):\r\n        return TEXTURE_ENCODING.SRGB;\r\n      case (THREE.LinearEncoding):\r\n      default:\r\n        return TEXTURE_ENCODING.LINEAR;\r\n    }\r\n  }\r\n\r\n  public set textureEncoding(value: TEXTURE_ENCODING) {\r\n    switch (value) {\r\n      case (TEXTURE_ENCODING.SRGB):\r\n        this.environmentMapLoader.textureEncoding = THREE.sRGBEncoding;\r\n        this.materialLoader.textureEncoding = THREE.sRGBEncoding;\r\n        break;\r\n      case (TEXTURE_ENCODING.LINEAR):\r\n      default:\r\n        this.environmentMapLoader.textureEncoding = THREE.LinearEncoding;\r\n        this.materialLoader.textureEncoding = THREE.LinearEncoding;\r\n    }\r\n  }\r\n\r\n  public get toneMapping(): TONE_MAPPING {\r\n    switch (this._renderer.toneMapping) {\r\n      case (THREE.LinearToneMapping):\r\n        return TONE_MAPPING.LINEAR;\r\n      case (THREE.ReinhardToneMapping):\r\n        return TONE_MAPPING.REINHARD;\r\n      case (THREE.CineonToneMapping):\r\n        return TONE_MAPPING.CINEON;\r\n      case (THREE.ACESFilmicToneMapping):\r\n        return TONE_MAPPING.ACES_FILMIC;\r\n      case (THREE.NoToneMapping):\r\n      default:\r\n        return TONE_MAPPING.NONE;\r\n    }\r\n  }\r\n\r\n  public set toneMapping(value: TONE_MAPPING) {\r\n    switch (value) {\r\n      case (TONE_MAPPING.LINEAR):\r\n        this._renderer.toneMapping = THREE.LinearToneMapping;\r\n        break;\r\n      case (TONE_MAPPING.REINHARD):\r\n        this._renderer.toneMapping = THREE.ReinhardToneMapping;\r\n        break;\r\n      case (TONE_MAPPING.CINEON):\r\n        this._renderer.toneMapping = THREE.CineonToneMapping;\r\n        break;\r\n      case (TONE_MAPPING.ACES_FILMIC):\r\n        this._renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        break;\r\n      case (TONE_MAPPING.NONE):\r\n      default:\r\n        this._renderer.toneMapping = THREE.NoToneMapping;\r\n    }\r\n    this.materialLoader.updateMaterials();\r\n  }\r\n\r\n  public get toneMappingExposure(): number {\r\n    return this._renderer.toneMappingExposure;\r\n  }\r\n\r\n  public set toneMappingExposure(value: number) {\r\n    this._renderer.toneMappingExposure = value;\r\n  }\r\n\r\n  public get type(): RENDERER_TYPE {\r\n    return this._type;\r\n  }\r\n\r\n  public set type(value: RENDERER_TYPE) {\r\n    this._type = value;\r\n    this.update('RenderingEngine.type')\r\n  }\r\n\r\n  public get usingSwiftShader(): boolean {\r\n    return this.renderingManager.usingSwiftShader;\r\n  }\r\n\r\n  public get visibility(): VISIBILITY_MODE {\r\n    return this._visibility;\r\n  }\r\n\r\n  public get visualizeAttributes(): ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined {\r\n    return this._visualizeAttributes;\r\n  }\r\n\r\n  public set visualizeAttributes(value: ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined) {\r\n    this._visualizeAttributes = value;\r\n  }\r\n\r\n  // #endregion Public Accessors (103)\r\n\r\n  // #region Public Methods (16)\r\n\r\n  public addFlag(flag: FLAG_TYPE): string {\r\n    const token = this._uuidGenerator.create();\r\n    if (flag === FLAG_TYPE.BUSY_MODE) {\r\n      this.stateEngine.renderingEngines[this.id].busy.push(token);\r\n    } else {\r\n      this.#flags[flag].push(token);\r\n    }\r\n    this.evaluateFlagState();\r\n    return token;\r\n  }\r\n\r\n  public async applySettings(\r\n    sections: {\r\n      ar?: boolean,\r\n      scene?: boolean,\r\n      camera?: boolean,\r\n      light?: boolean,\r\n      environment?: boolean,\r\n      general?: boolean\r\n    } = {\r\n      ar: true,\r\n      scene: true,\r\n      camera: true,\r\n      light: true,\r\n      environment: true,\r\n      general: true\r\n    },\r\n    settingsEngine?: SettingsEngine\r\n  ): Promise<void> {\r\n\r\n    settingsEngine = settingsEngine || this._settingsEngine\r\n    if (!settingsEngine) return;\r\n\r\n    if (sections.environment) {\r\n      // as the environment map is the only thing that needs time to load, load it first\r\n      await new Promise<void>((resolve, reject) => {\r\n        this._stateEngine.renderingEngines[this.id].environmentMapLoaded.then(() => {\r\n          try {\r\n            if (!settingsEngine) return;\r\n            this.environmentMapAsBackground = settingsEngine.environment.mapAsBackground;\r\n            this.clearAlpha = settingsEngine.environment.clearAlpha;\r\n            this.clearColor = this._converter.toHexColor(settingsEngine.environment.clearColor);\r\n            this.environmentMapRotation = [settingsEngine.environment.rotation.x, settingsEngine.environment.rotation.y, settingsEngine.environment.rotation.z, settingsEngine.environment.rotation.w];\r\n            this.environmentMapBlurriness = settingsEngine.environment.blurriness;\r\n            this.environmentMapIntensity = settingsEngine.environment.intensity;\r\n            this.applySyncSettings(sections);\r\n  \r\n            this._eventEngine.emitEvent(EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, <IViewportEvent>{ viewportId: this.id });\r\n            resolve();\r\n          } catch(e) {\r\n            reject(e);\r\n          }\r\n        }).catch(e => reject(e))\r\n        \r\n        // set it like this to not trigger the loading\r\n        this.environmentMap = settingsEngine!.environment.map;\r\n      })\r\n    } else {\r\n      this.applySyncSettings(sections)\r\n      this._eventEngine.emitEvent(EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, <IViewportEvent>{ viewportId: this.id });\r\n    }\r\n  }\r\n\r\n  public convert3Dto2D(p: vec3): { container: vec2; client: vec2; page: vec2; hidden: boolean; } {\r\n    return this.sceneTracingManager.convert3Dto2D(p)\r\n  }\r\n\r\n  public async close(): Promise<void> {\r\n    this._closed = true;\r\n    this._lightEngine.close();\r\n    this._renderer.clear(true, true, true);\r\n    this._renderer.dispose();\r\n    this._domEventEngine.removeAllDomEventListener();\r\n    this._domEventEngine.dispose();\r\n    this._canvas.canvasElement.parentElement?.removeChild(this._logoDivElement);\r\n    this._canvas.canvasElement.parentElement?.removeChild(this._spinnerDivElement);\r\n    this._canvas.canvasElement.parentNode?.removeChild(this._htmlElementAnchorLoader.parentDiv);\r\n    this._canvas.reset();\r\n  }\r\n\r\n  public createSDTFOverview(node: ITreeNode): ISDTFOverview {\r\n    const out: ISDTFOverviewData = new SDTFOverviewData({});\r\n    for (let i = 0, len = node.data.length; i < len; i++)\r\n      if (node.data[i] instanceof SDTFOverviewData)\r\n        out.merge(<ISDTFOverviewData>node.data[i])\r\n\r\n    for (let i = 0, len = node.children.length; i < len; i++)\r\n      out.merge(new SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n\r\n    return out.overview;\r\n  }\r\n\r\n  public createThreeJsColor(color: Color): THREE.Color {\r\n    const sdColor = new SDColor(this._converter.toThreeJsColorInput(color), color);\r\n    sdColor.colorCorrection(this.automaticColorAdjustment);\r\n    this._colorCache.push(sdColor);\r\n    return sdColor;\r\n  }\r\n\r\n  public displayErrorMessage(message: string) {\r\n    for (let i = 0; i < this.logoDivElement.children.length; i++)\r\n      (<HTMLElement>this.logoDivElement.children[i]).style.visibility = 'hidden';\r\n\r\n    const d = <HTMLDivElement>document.createElement('div');\r\n    d.style.position = 'absolute';\r\n    d.style.top = '50%';\r\n    d.style.left = '50%';\r\n    d.style.transform = 'translateX(-50%) translateY(-50%)';\r\n    d.style.textAlign = 'center';\r\n    this.logoDivElement.appendChild(d);\r\n\r\n    const p = <HTMLParagraphElement>document.createElement('p');\r\n    p.textContent = message;\r\n    p.style.fontFamily = '\"CircularXXWeb-Book\",sans-serif';\r\n    p.style.fontSize = 'x-large';\r\n    p.style.color = this.logoDivElement.style.backgroundColor;\r\n    p.style['filter'] = 'invert(100%)';\r\n    d.appendChild(p);\r\n  }\r\n\r\n  public evaluateFlagState() {\r\n    // busy\r\n    {\r\n      const currentBusyState = this.busy;\r\n      if (this.stateEngine.renderingEngines[this.id] && this.stateEngine.renderingEngines[this.id].busy.length > 0) {\r\n        if (!currentBusyState) {\r\n          this.busy = true;\r\n          this._renderingManager.render();\r\n          this._eventEngine.emitEvent(EVENTTYPE.VIEWPORT.BUSY_MODE_ON, { viewportId: this.id });\r\n        }\r\n      } else {\r\n        if (currentBusyState) {\r\n          this.busy = false;\r\n          this._renderingManager.render();\r\n          this._eventEngine.emitEvent(EVENTTYPE.VIEWPORT.BUSY_MODE_OFF, { viewportId: this.id });\r\n        }\r\n      }\r\n    }\r\n\r\n    // camera freeze\r\n    {\r\n      if (this.#flags[FLAG_TYPE.CAMERA_FREEZE].length > 0) {\r\n        this.cameraEngine.deactivateCameraEvents();\r\n      } else {\r\n        this.cameraEngine.activateCameraEvents();\r\n      }\r\n    }\r\n\r\n    // continuous rendering\r\n    {\r\n      const currentContinuousRenderingState = this.continuousRendering;\r\n      if (this.#flags[FLAG_TYPE.CONTINUOUS_RENDERING].length > 0) {\r\n        if (!currentContinuousRenderingState) {\r\n          this.continuousRendering = true;\r\n          this._renderingManager.render();\r\n        }\r\n      } else {\r\n        if (currentContinuousRenderingState) {\r\n          this.continuousRendering = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // continuous shadow map update\r\n    {\r\n      const currentShadowMapUpdateState = this.continuousShadowMapUpdate;\r\n      if (this.#flags[FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE].length > 0) {\r\n        if (!currentShadowMapUpdateState) {\r\n          this.continuousShadowMapUpdate = true;\r\n          this._renderingManager.render();\r\n        }\r\n      } else {\r\n        if (currentShadowMapUpdateState) {\r\n          this.continuousShadowMapUpdate = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getEnvironmentMapImageUrl() {\r\n    return this._environmentMapLoader.getEnvironmentMapImageUrl(this.environmentMap);\r\n  }\r\n\r\n  public getScreenshot(type?: string, encoderOptions?: number): string {\r\n    return this._renderingManager.getScreenshot(type, encoderOptions);\r\n  }\r\n\r\n  public isMobileDeviceWithoutBrowserARSupport(): boolean {\r\n    // has to be a mobile device (duh)\r\n    if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n      return false;\r\n\r\n    // no Firefox on Android\r\n    if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n      return true;\r\n\r\n    // no Firefox on iOS\r\n    if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)\r\n      return true;\r\n\r\n    // no Instagram on iOS\r\n    if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  public mouseEventToRay(event: MouseEvent): { origin: vec3, direction: vec3 } {\r\n    return this._sceneTracingManager.mouseEventToRay(event);\r\n  }\r\n\r\n  public raytraceScene(origin: vec3, direction: vec3, root?: ITreeNode): { distance: number, node: ITreeNode, data?: IGeometryData; }[] {\r\n    const intersect = this._intersectionManager.intersect({ origin, direction }, undefined, undefined, root);\r\n    return intersect.map(i => {\r\n      return {\r\n        distance: i.distance,\r\n        node: i.node,\r\n        data: i.geometryData\r\n      }\r\n    })\r\n  }\r\n\r\n  public removeFlag(token: string): boolean {\r\n    let success = false;\r\n    const Flags = Object.values(FLAG_TYPE);\r\n    for (let f of Flags) {\r\n      if (f === FLAG_TYPE.BUSY_MODE) {\r\n        if (this.stateEngine.renderingEngines[this.id].busy.includes(token)) {\r\n          this.stateEngine.renderingEngines[this.id].busy.splice(this.stateEngine.renderingEngines[this.id].busy.indexOf(token), 1);\r\n          success = true;\r\n          break;\r\n        }\r\n      } else {\r\n        if (this.#flags[f].includes(token)) {\r\n          this.#flags[f].splice(this.#flags[f].indexOf(token), 1);\r\n          success = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.evaluateFlagState();\r\n    return success;\r\n  }\r\n\r\n  public reset() {\r\n    this._stateEngine.renderingEngines[this.id].settingsAssigned.reset();\r\n    this._stateEngine.renderingEngines[this.id].boundingBoxCreated.reset();\r\n    this._stateEngine.renderingEngines[this.id].environmentMapLoaded.reset();\r\n\r\n    this._stateEngine.renderingEngines[this.id].boundingBoxCreated.then(() => {\r\n      this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n    })\r\n  }\r\n\r\n  public resize(width: number, height: number): void {\r\n    this._renderingManager.resize(width, height);\r\n    this._renderingManager.render();\r\n  }\r\n\r\n  public saveSettings(settingsEngine?: SettingsEngine) {\r\n    settingsEngine = settingsEngine || this._settingsEngine\r\n    if (!settingsEngine) return;\r\n\r\n    (<LightEngine>this.lightEngine).saveSettings(settingsEngine);\r\n    (<CameraEngine>this.cameraEngine).saveSettings(settingsEngine);\r\n\r\n    settingsEngine.ar.enable = this.enableAR;\r\n\r\n    settingsEngine.environment.mapResolution = this.environmentMapResolution;\r\n    settingsEngine.environment.map = Array.isArray(this.environmentMap) ? JSON.stringify(this.environmentMap) : this.environmentMap;\r\n    settingsEngine.environment.mapAsBackground = this.environmentMapAsBackground;\r\n    settingsEngine.environment.clearAlpha = this.clearAlpha;\r\n    settingsEngine.environment.clearColor = this._converter.toHexColor(this.clearColor);\r\n    settingsEngine.environment.rotation = { x: this.environmentMapRotation[0], y: this.environmentMapRotation[1], z: this.environmentMapRotation[2], w: this.environmentMapRotation[3] };\r\n    settingsEngine.environment.blurriness = this.environmentMapBlurriness;\r\n    settingsEngine.environment.intensity = this.environmentMapIntensity;\r\n\r\n    settingsEngine.environmentGeometry.gridVisibility = this.gridVisibility;\r\n    settingsEngine.environmentGeometry.groundPlaneVisibility = this.groundPlaneVisibility;\r\n    settingsEngine.environmentGeometry.groundPlaneShadowVisibility = this.groundPlaneShadowVisibility;\r\n    settingsEngine.environmentGeometry.gridColor = this._converter.toHexColor(this.gridColor);\r\n    settingsEngine.environmentGeometry.groundPlaneColor = this._converter.toHexColor(this.groundPlaneColor);\r\n    settingsEngine.environmentGeometry.groundPlaneShadowColor = this._converter.toHexColor(this.groundPlaneShadowColor);\r\n\r\n    settingsEngine.general.pointSize = this.pointSize;\r\n    settingsEngine.general.transformation.rotation = { x: this.arRotation[0], y: this.arRotation[1], z: this.arRotation[2] };\r\n    settingsEngine.general.transformation.translation = { x: this.arTranslation[0], y: this.arTranslation[1], z: this.arTranslation[2] };\r\n    settingsEngine.general.transformation.scale = { x: this.arScale[0], y: this.arScale[1], z: this.arScale[2] };\r\n    settingsEngine.general.defaultMaterialColor = this._converter.toHexColor(this.defaultMaterialColor);\r\n\r\n    settingsEngine.rendering.ambientOcclusion = this.ambientOcclusion;\r\n    settingsEngine.rendering.ambientOcclusionIntensity = this.ambientOcclusionIntensity;\r\n    settingsEngine.rendering.automaticColorAdjustment = this.automaticColorAdjustment;\r\n    settingsEngine.rendering.lights = this.lights;\r\n    settingsEngine.rendering.outputEncoding = this.outputEncoding;\r\n    settingsEngine.rendering.physicallyCorrectLights = this.physicallyCorrectLights;\r\n    settingsEngine.rendering.textureEncoding = this.textureEncoding;\r\n    settingsEngine.rendering.toneMapping = this.toneMapping;\r\n    settingsEngine.rendering.toneMappingExposure = this.toneMappingExposure;\r\n    settingsEngine.rendering.beautyRenderBlendingDuration = this.beautyRenderBlendingDuration;\r\n    settingsEngine.rendering.beautyRenderDelay = this.beautyRenderDelay;\r\n    settingsEngine.rendering.shadows = this.shadows;\r\n    \r\n  }\r\n  \r\n  public touchToRay(event: Touch): { origin: vec3, direction: vec3 } {\r\n    return this._sceneTracingManager.touchToRay(event);\r\n  }\r\n\r\n  public touchEventToRay(event: TouchEvent): { origin: vec3, direction: vec3 } {\r\n    return this._sceneTracingManager.touchEventToRay(event);\r\n  }\r\n\r\n  public update(id: string): void {\r\n    if(this.closed) return;\r\n    this._sceneTreeManager.updateSceneTree(this._tree.root, <LightEngine>this._lightEngine);\r\n    this._renderingManager.updateShadowMap();\r\n    this._animationEngine.updateAnimationData();\r\n    this._renderingManager.render();\r\n    this._eventEngine.emitEvent(EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, <IViewportEvent>{ viewportId: this.id })\r\n  }\r\n\r\n  public updateEnvironmentGeometry(): void {\r\n    this._environmentGeometryManager.updateEnvironmentGeometryPosition();\r\n  }\r\n\r\n  public async viewInAR(file: string, options: { arScale?: 'auto' | 'fixed', arPlacement?: 'floor' | 'wall', xrEnvironment?: boolean } = { arScale: 'auto', arPlacement: 'floor', xrEnvironment: false }): Promise<void> {\r\n    const eventId = this._uuidGenerator.create();\r\n    const event: ITaskEvent = { type: TASK_TYPE.AR_LOADING, id: eventId, progress: 0, status: 'Loading AR scene' };\r\n    this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, event);\r\n\r\n    // if this is not a supported device, throw an error\r\n    if (this.viewableInAR() === false) {\r\n      const event: ITaskEvent = { type: TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };\r\n      this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, event);\r\n      throw new ShapeDiverViewerArError('Api.viewInAR: The device or browser is not supported for this functionality, please call \"viewableInAR\" for more information.');\r\n    }\r\n\r\n    const arScale = options.arScale !== 'auto' ? 'fixed' : 'auto';\r\n    const arPlacement = options.arPlacement !== 'wall' ? 'floor' : 'wall';\r\n    const xrEnvironment = options.xrEnvironment !== true ? false : true;\r\n\r\n    let arEnvironment = '';\r\n    const envMapUrl = this.getEnvironmentMapImageUrl();\r\n    if (envMapUrl !== '') {\r\n      if (envMapUrl.endsWith('.hdr')) {\r\n        arEnvironment = 'skybox-image=' + envMapUrl;\r\n      } else {\r\n        arEnvironment = 'environment-image=' + envMapUrl;\r\n      }\r\n    }\r\n\r\n    if (this._systemInfo.isIOS) {\r\n      // create the link and click it\r\n      const a = document.createElement('a');\r\n      a.href = file + (arScale === 'fixed' ? '.usdz_allowsContentScaling=0' : '.usdz')\r\n      a.rel = 'ar';\r\n      const img = document.createElement('img');\r\n      img.src = this.#defaultLogoStatic;\r\n      a.appendChild(img);\r\n      a.click();\r\n    } else {\r\n      const a = document.createElement('a');\r\n      a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${arScale === 'fixed' ? 'false' : 'true'}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;end;`\r\n      a.click();\r\n    }\r\n\r\n    const event2: ITaskEvent = { type: TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Done loading AR scene, launching AR' };\r\n    this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, event2);\r\n  }\r\n\r\n  public viewableInAR(): boolean {\r\n    // has to be a mobile device (duh)\r\n    if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n      return false;\r\n\r\n    // no Firefox on Android\r\n    if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n      return false;\r\n\r\n    // no Firefox on iOS\r\n    if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)\r\n      return false;\r\n\r\n    // no Instagram on iOS\r\n    if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n      return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  // #endregion Public Methods (16)\r\n\r\n  // #region Private Methods (1)\r\n\r\n  private applySyncSettings(sections: {\r\n    ar?: boolean,\r\n    scene?: boolean,\r\n    camera?: boolean,\r\n    light?: boolean,\r\n    environment?: boolean,\r\n    general?: boolean\r\n  } = {\r\n      ar: true,\r\n      scene: true,\r\n      camera: true,\r\n      light: true,\r\n      environment: true,\r\n      general: true\r\n    }) {\r\n    if (!this._settingsEngine) return;\r\n    \r\n    if (sections.ar) {\r\n      this.enableAR = this._settingsEngine.ar.enable;\r\n      this.arScale = [this._settingsEngine.general.transformation.scale.x, this._settingsEngine.general.transformation.scale.y, this._settingsEngine.general.transformation.scale.z];\r\n      this.arTranslation = [this._settingsEngine.general.transformation.translation.x, this._settingsEngine.general.transformation.translation.y, this._settingsEngine.general.transformation.translation.z];\r\n      this.arRotation = [this._settingsEngine.general.transformation.rotation.x, this._settingsEngine.general.transformation.rotation.y, this._settingsEngine.general.transformation.rotation.z];\r\n    }\r\n\r\n    if (sections.scene) {\r\n      this.gridColor = this._settingsEngine.environmentGeometry.gridColor;\r\n      this.gridVisibility = this._settingsEngine.environmentGeometry.gridVisibility;\r\n      this.groundPlaneColor = this._settingsEngine.environmentGeometry.groundPlaneColor;\r\n      this.groundPlaneVisibility = this._settingsEngine.environmentGeometry.groundPlaneVisibility;\r\n      this.groundPlaneShadowColor = this._settingsEngine.environmentGeometry.groundPlaneShadowColor;\r\n      this.groundPlaneShadowVisibility = this._settingsEngine.environmentGeometry.groundPlaneShadowVisibility;\r\n\r\n      this.shadows = this._settingsEngine.rendering.shadows;\r\n      this.ambientOcclusion = this._settingsEngine.rendering.ambientOcclusion;\r\n      this.lights = this._settingsEngine.rendering.lights;\r\n\r\n      this.automaticColorAdjustment = this._settingsEngine.rendering.automaticColorAdjustment;\r\n      this.textureEncoding = <TEXTURE_ENCODING>this._settingsEngine.rendering.textureEncoding;\r\n      this.outputEncoding = <TEXTURE_ENCODING>this._settingsEngine.rendering.outputEncoding;\r\n      this.physicallyCorrectLights = this._settingsEngine.rendering.physicallyCorrectLights;\r\n      this.toneMapping = <TONE_MAPPING>this._settingsEngine.rendering.toneMapping;\r\n      this.toneMappingExposure = this._settingsEngine.rendering.toneMappingExposure;\r\n    }\r\n\r\n    if (sections.general) {\r\n      this.defaultMaterialColor = this._settingsEngine.general.defaultMaterialColor;\r\n      this.pointSize = this._settingsEngine.general.pointSize;\r\n    }\r\n\r\n    if (sections.light) (<LightEngine>this.lightEngine).applySettings(this._settingsEngine);\r\n    if (sections.camera) (<CameraEngine>this.cameraEngine).applySettings(this._settingsEngine);\r\n    this._stateEngine.renderingEngines[this.id].settingsAssigned.resolve(true);\r\n    this.update('RenderingEngine.applySyncSettings');\r\n  }\r\n\r\n  // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"8b94a40d49da9b57ccb2393b85cfc378","cacheData":{"env":{}}}