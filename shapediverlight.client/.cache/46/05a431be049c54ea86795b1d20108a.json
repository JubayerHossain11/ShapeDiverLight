{"id":"node_modules/@shapediver/viewer.shared.services/dist/input-validator/InputValidator.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\input-validator\\InputValidator.js.map","includedInParent":true,"mtime":1706542086427},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\src\\input-validator\\InputValidator.ts","includedInParent":true,"mtime":1706542086888},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\package.json","includedInParent":true,"mtime":1706542085933},{"name":"dompurify","loc":{"line":7,"column":44,"index":299},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\input-validator\\InputValidator.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\dompurify\\dist\\purify.js"},{"name":"../logger/Logger","loc":{"line":8,"column":25,"index":340},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\input-validator\\InputValidator.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\logger\\Logger.js"},{"name":"../logger/ShapeDiverViewerErrors","loc":{"line":9,"column":41,"index":403},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\input-validator\\InputValidator.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\logger\\ShapeDiverViewerErrors.js"},{"name":"../type-check/TypeChecker","loc":{"line":10,"column":30,"index":471},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\input-validator\\InputValidator.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\type-check\\TypeChecker.js"}],"generated":{"js":"\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.InputValidator = void 0;\r\nconst dompurify_1 = __importDefault(require(\"dompurify\"));\r\nconst Logger_1 = require(\"../logger/Logger\");\r\nconst ShapeDiverViewerErrors_1 = require(\"../logger/ShapeDiverViewerErrors\");\r\nconst TypeChecker_1 = require(\"../type-check/TypeChecker\");\r\nclass InputValidator {\r\n    constructor() {\r\n        // #region Properties (3)\r\n        this._logger = Logger_1.Logger.instance;\r\n        this._typeChecker = TypeChecker_1.TypeChecker.instance;\r\n        // #endregion Private Methods (1)\r\n    }\r\n    // #endregion Properties (3)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (2)\r\n    sanitize(input) {\r\n        return dompurify_1.default.sanitize(input);\r\n    }\r\n    validateAndError(scope, value, type, defined = true, enumValues = []) {\r\n        const res = this.validate(value, type, defined, enumValues);\r\n        if (res)\r\n            return;\r\n        throw new ShapeDiverViewerErrors_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${value} is not of type ${type}.${defined === false ? ' (Can also be undefined)' : ''}`, value, type);\r\n    }\r\n    // #endregion Public Methods (2)\r\n    // #region Private Methods (1)\r\n    validate(value, stringLiteral, defined = true, enumValues = []) {\r\n        if (defined === false && typeof value === 'undefined')\r\n            return true;\r\n        switch (stringLiteral) {\r\n            case 'array':\r\n                if (Array.isArray(value))\r\n                    return true;\r\n                break;\r\n            case 'string':\r\n                if (this._typeChecker.isTypeOf(value, 'string'))\r\n                    return true;\r\n                break;\r\n            case 'boolean':\r\n                if (this._typeChecker.isTypeOf(value, 'boolean'))\r\n                    return true;\r\n                break;\r\n            case 'function':\r\n                if (this._typeChecker.isTypeOf(value, 'function'))\r\n                    return true;\r\n                break;\r\n            case 'number':\r\n                if (this._typeChecker.isTypeOf(value, 'number') && !isNaN(value))\r\n                    return true;\r\n                break;\r\n            case 'factor':\r\n                if (this._typeChecker.isTypeOf(value, 'number') && value >= 0 && value <= 1)\r\n                    return true;\r\n                break;\r\n            case 'positive':\r\n                if (this._typeChecker.isTypeOf(value, 'number') && value >= 0)\r\n                    return true;\r\n                break;\r\n            case 'HTMLCanvasElement':\r\n                if (this._typeChecker.isHTMLCanvasElement(value))\r\n                    return true;\r\n                break;\r\n            case 'enum':\r\n                if (this._typeChecker.isTypeOf(value, 'string') && enumValues.includes(value))\r\n                    return true;\r\n                break;\r\n            case 'vec3':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if (Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number'))\r\n                    return true;\r\n                break;\r\n            case 'quat':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if (Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number') && this._typeChecker.isTypeOf(value[3], 'number'))\r\n                    return true;\r\n                break;\r\n            case 'cubeMap':\r\n                if (Array.isArray(value) && value.length === 6 && this._typeChecker.isTypeOf(value[0], 'string') && this._typeChecker.isTypeOf(value[1], 'string') && this._typeChecker.isTypeOf(value[2], 'string') && this._typeChecker.isTypeOf(value[3], 'string') && this._typeChecker.isTypeOf(value[4], 'string') && this._typeChecker.isTypeOf(value[5], 'string'))\r\n                    return true;\r\n                if (this._typeChecker.isTypeOf(value, 'string'))\r\n                    return true;\r\n                break;\r\n            case 'stringArray':\r\n                if (Array.isArray(value)) {\r\n                    let check = true;\r\n                    for (let i = 0; i < value.length; i++)\r\n                        if (typeof value[i] !== 'string')\r\n                            check = false;\r\n                    if (check === true)\r\n                        return true;\r\n                }\r\n                break;\r\n            case 'object':\r\n                if (this._typeChecker.isTypeOf(value, 'object'))\r\n                    return true;\r\n                break;\r\n            case 'file':\r\n                if (this._typeChecker.isTypeOf(value, 'string') || value instanceof File || value instanceof Blob)\r\n                    return true;\r\n                break;\r\n            case 'color':\r\n                if (this._typeChecker.isTypeOf(value, 'string') || (Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number')) || this._typeChecker.isTypeOf(value, 'number'))\r\n                    return true;\r\n                break;\r\n            case 'mat4':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if (Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number') && this._typeChecker.isTypeOf(value[3], 'number')\r\n                    && this._typeChecker.isTypeOf(value[4], 'number') && this._typeChecker.isTypeOf(value[5], 'number') && this._typeChecker.isTypeOf(value[6], 'number') && this._typeChecker.isTypeOf(value[7], 'number')\r\n                    && this._typeChecker.isTypeOf(value[8], 'number') && this._typeChecker.isTypeOf(value[9], 'number') && this._typeChecker.isTypeOf(value[10], 'number') && this._typeChecker.isTypeOf(value[11], 'number')\r\n                    && this._typeChecker.isTypeOf(value[12], 'number') && this._typeChecker.isTypeOf(value[13], 'number') && this._typeChecker.isTypeOf(value[14], 'number') && this._typeChecker.isTypeOf(value[15], 'number'))\r\n                    return true;\r\n                break;\r\n            default:\r\n                return false;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.InputValidator = InputValidator;\r\n"},"sourceMaps":{"js":{"version":3,"file":"InputValidator.js","sourceRoot":"","sources":["../../src/input-validator/InputValidator.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAkC;AAClC,6CAAyC;AACzC,6EAAmF;AACnF,2DAAuD;AAOvD,MAAa,cAAc;IAA3B;QACI,yBAAyB;QAER,YAAO,GAAW,eAAM,CAAC,QAAQ,CAAC;QAClC,iBAAY,GAAgB,yBAAW,CAAC,QAAQ,CAAC;QA2GlE,iCAAiC;IACrC,CAAC;IAxGG,4BAA4B;IAE5B,sCAAsC;IAE/B,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,yCAAyC;IAEzC,6BAA6B;IAEtB,QAAQ,CAAC,KAAa;QACzB,OAAO,mBAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,gBAAgB,CAAC,KAAa,EAAE,KAAU,EAAE,IAAW,EAAE,UAAmB,IAAI,EAAE,aAAuB,EAAE;QAC9G,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAC5D,IAAG,GAAG;YAAE,OAAO;QAEf,MAAM,IAAI,wDAA+B,CAAC,GAAG,KAAK,mCAAmC,KAAK,mBAAmB,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7L,CAAC;IAED,gCAAgC;IAEhC,8BAA8B;IAEtB,QAAQ,CAAC,KAAU,EAAE,aAAoB,EAAE,UAAmB,IAAI,EAAE,aAAuB,EAAE;QACjG,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAEnE,QAAQ,aAAa,EAAE;YACnB,KAAK,OAAO;gBACR,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACrC,MAAM;YACV,KAAK,QAAQ;gBACT,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC5D,MAAM;YACV,KAAK,SAAS;gBACV,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC7D,MAAM;YACV,KAAK,UAAU;gBACX,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC9D,MAAM;YACV,KAAK,QAAQ;gBACT,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC7E,MAAM;YACV,KAAK,QAAQ;gBACT,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACxF,MAAM;YACV,KAAK,UAAU;gBACX,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC1E,MAAM;YACV,KAAK,mBAAmB;gBACpB,IAAG,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC7D,MAAM;YACV,KAAK,MAAM;gBACP,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC1F,MAAM;YACV,KAAK,MAAM;gBACP,IAAI,KAAK,CAAC,WAAW,KAAK,YAAY;oBAClC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC3L,MAAM;YACV,KAAK,MAAM;gBACP,IAAI,KAAK,CAAC,WAAW,KAAK,YAAY;oBAClC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC7O,MAAM;YACV,KAAK,SAAS;gBACV,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACvW,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC5D,MAAM;YACV,KAAK,aAAa;gBACd,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACrB,IAAI,KAAK,GAAG,IAAI,CAAC;oBACjB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;wBAChC,IAAG,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ;4BAAE,KAAK,GAAG,KAAK,CAAC;oBACnD,IAAI,KAAK,KAAK,IAAI;wBAAE,OAAO,IAAI,CAAC;iBACnC;gBACD,MAAM;YACV,KAAK,QAAQ;gBACT,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC5D,MAAM;YACV,KAAK,MAAM;gBACP,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,YAAY,IAAI;oBAAE,OAAO,IAAI,CAAC;gBAC9G,MAAM;YACV,KAAK,OAAO;gBACR,IAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC3R,MAAM;YACV,KAAK,MAAM;gBACP,IAAI,KAAK,CAAC,WAAW,KAAK,YAAY;oBAClC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;uBACxN,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;uBACpM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;uBACtM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC7N,MAAM;YACV;gBACI,OAAO,KAAK,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;CAGJ;AAhHD,wCAgHC","sourcesContent":["import DOMPurify from 'dompurify';\r\nimport { Logger } from '../logger/Logger'\r\nimport { ShapeDiverViewerValidationError } from '../logger/ShapeDiverViewerErrors';\r\nimport { TypeChecker } from '../type-check/TypeChecker'\r\n\r\nexport type Types = 'string' | 'boolean' | 'function' |\r\n                    'HTMLCanvasElement' | 'enum' | \r\n                    'number' | 'factor' | 'positive' |\r\n                    'vec3' | 'mat4' | 'cubeMap' | 'array' | 'stringArray' | 'object' | 'file' | 'color' | 'quat';\r\n\r\nexport class InputValidator {\r\n    // #region Properties (3)\r\n\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _typeChecker: TypeChecker = TypeChecker.instance;\r\n\r\n    private static _instance: InputValidator;\r\n\r\n    // #endregion Properties (3)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public sanitize(input: string): string {\r\n        return DOMPurify.sanitize(input);\r\n    }\r\n\r\n    public validateAndError(scope: string, value: any, type: Types, defined: boolean = true, enumValues: string[] = []) {\r\n        const res = this.validate(value, type, defined, enumValues);\r\n        if(res) return;\r\n\r\n        throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${value} is not of type ${type}.${defined === false ? ' (Can also be undefined)' : ''}`, value, type);\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n\r\n    // #region Private Methods (1)\r\n\r\n    private validate(value: any, stringLiteral: Types, defined: boolean = true, enumValues: string[] = []): boolean {\r\n        if (defined === false && typeof value === 'undefined') return true;\r\n\r\n        switch (stringLiteral) {\r\n            case 'array':\r\n                if(Array.isArray(value)) return true;\r\n                break;\r\n            case 'string':\r\n                if(this._typeChecker.isTypeOf(value, 'string')) return true;\r\n                break;\r\n            case 'boolean':\r\n                if(this._typeChecker.isTypeOf(value, 'boolean')) return true;\r\n                break;\r\n            case 'function':\r\n                if(this._typeChecker.isTypeOf(value, 'function')) return true;\r\n                break;\r\n            case 'number':\r\n                if(this._typeChecker.isTypeOf(value, 'number') && !isNaN(value)) return true;\r\n                break;\r\n            case 'factor':\r\n                if(this._typeChecker.isTypeOf(value, 'number') && value >= 0 && value <= 1) return true;\r\n                break;\r\n            case 'positive':\r\n                if(this._typeChecker.isTypeOf(value, 'number') && value >= 0) return true;\r\n                break;\r\n            case 'HTMLCanvasElement':\r\n                if(this._typeChecker.isHTMLCanvasElement(value)) return true;\r\n                break;\r\n            case 'enum':\r\n                if(this._typeChecker.isTypeOf(value, 'string') && enumValues.includes(value)) return true;\r\n                break;\r\n            case 'vec3':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if(Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number')) return true;\r\n                break;\r\n            case 'quat':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if(Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number') && this._typeChecker.isTypeOf(value[3], 'number')) return true;\r\n                break;\r\n            case 'cubeMap':\r\n                if(Array.isArray(value) && value.length === 6 && this._typeChecker.isTypeOf(value[0], 'string') && this._typeChecker.isTypeOf(value[1], 'string') && this._typeChecker.isTypeOf(value[2], 'string') && this._typeChecker.isTypeOf(value[3], 'string') && this._typeChecker.isTypeOf(value[4], 'string') && this._typeChecker.isTypeOf(value[5], 'string')) return true;\r\n                if(this._typeChecker.isTypeOf(value, 'string')) return true;\r\n                break;\r\n            case 'stringArray':\r\n                if(Array.isArray(value)) {\r\n                    let check = true;\r\n                    for(let i = 0; i < value.length; i++)\r\n                        if(typeof value[i] !== 'string') check = false;\r\n                    if (check === true) return true;\r\n                }\r\n                break;\r\n            case 'object':\r\n                if(this._typeChecker.isTypeOf(value, 'object')) return true;\r\n                break;\r\n            case 'file':\r\n                if(this._typeChecker.isTypeOf(value, 'string') || value instanceof File || value instanceof Blob) return true;\r\n                break;\r\n            case 'color':\r\n                if(this._typeChecker.isTypeOf(value, 'string') || (Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number')) || this._typeChecker.isTypeOf(value, 'number')) return true;\r\n                break;\r\n            case 'mat4':\r\n                if (value.constructor === Float32Array)\r\n                    value = Array.from(value);\r\n                if(Array.isArray(value) && this._typeChecker.isTypeOf(value[0], 'number') && this._typeChecker.isTypeOf(value[1], 'number') && this._typeChecker.isTypeOf(value[2], 'number') && this._typeChecker.isTypeOf(value[3], 'number')\r\n                    && this._typeChecker.isTypeOf(value[4], 'number') && this._typeChecker.isTypeOf(value[5], 'number') && this._typeChecker.isTypeOf(value[6], 'number') && this._typeChecker.isTypeOf(value[7], 'number')\r\n                    && this._typeChecker.isTypeOf(value[8], 'number') && this._typeChecker.isTypeOf(value[9], 'number') && this._typeChecker.isTypeOf(value[10], 'number') && this._typeChecker.isTypeOf(value[11], 'number')\r\n                    && this._typeChecker.isTypeOf(value[12], 'number') && this._typeChecker.isTypeOf(value[13], 'number') && this._typeChecker.isTypeOf(value[14], 'number') && this._typeChecker.isTypeOf(value[15], 'number')) return true;\r\n                break;\r\n            default:\r\n                return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"cffeb925f14d870af146f8614b26b204","cacheData":{"env":{}}}