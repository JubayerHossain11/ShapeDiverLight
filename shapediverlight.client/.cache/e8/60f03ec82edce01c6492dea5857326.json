{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/loaders/MaterialLoader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js.map","includedInParent":true,"mtime":1706527153528},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\loaders\\MaterialLoader.ts","includedInParent":true,"mtime":1706527154191},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":23,"column":35,"index":1050},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":24,"column":38,"index":1100},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":25,"column":28,"index":1165},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"../shaders/PCSS","loc":{"line":26,"column":23,"index":1203},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\shaders\\PCSS.js"},{"name":"../materials/SpecularGlossinessMaterial","loc":{"line":27,"column":45,"index":1269},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\SpecularGlossinessMaterial.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":28,"column":41,"index":1355},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"./EnvironmentMapLoader","loc":{"line":29,"column":39,"index":1434},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js"},{"name":"../materials/GemMaterial","loc":{"line":30,"column":30,"index":1492},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\GemMaterial.js"},{"name":"../objects/SDColor","loc":{"line":31,"column":26,"index":1548},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\MaterialLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDColor.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MaterialLoader = exports.MATERIAL_TYPE = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst PCSS_1 = require(\"../shaders/PCSS\");\r\nconst SpecularGlossinessMaterial_1 = require(\"../materials/SpecularGlossinessMaterial\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst EnvironmentMapLoader_1 = require(\"./EnvironmentMapLoader\");\r\nconst GemMaterial_1 = require(\"../materials/GemMaterial\");\r\nconst SDColor_1 = require(\"../objects/SDColor\");\r\nvar MATERIAL_TYPE;\r\n(function (MATERIAL_TYPE) {\r\n    MATERIAL_TYPE[\"POINT\"] = \"point\";\r\n    MATERIAL_TYPE[\"LINE\"] = \"line\";\r\n    MATERIAL_TYPE[\"MESH\"] = \"mesh\";\r\n})(MATERIAL_TYPE = exports.MATERIAL_TYPE || (exports.MATERIAL_TYPE = {}));\r\nclass MaterialLoader {\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (8)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._materialCache = {};\r\n        this._blending = 0.0;\r\n        this._envMap = null;\r\n        this._envMapIntensity = 1;\r\n        this._height = 1020;\r\n        this._lightSizeUV = 0.025;\r\n        this._pointSize = 1.0;\r\n        this._textureEncoding = THREE.sRGBEncoding;\r\n        this._maxMapCount = 0;\r\n        this._envMapType = EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.NULL;\r\n        this._environmentMapRotationMatrix = new THREE.Matrix4();\r\n        let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\r\n        if (!shader.includes('PCSS implementation')) {\r\n            shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP' + PCSS_1.main);\r\n            shader = shader.replace(shader.substr(shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )'), shader.indexOf('#elif defined( SHADOWMAP_TYPE_PCF_SOFT )') - shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )')), '#if defined( SHADOWMAP_TYPE_PCF )\\n' + PCSS_1.entry);\r\n        }\r\n        THREE.ShaderChunk.shadowmap_pars_fragment = shader;\r\n        // set the uniform for the background envmap calculation initially\r\n        THREE.ShaderLib.backgroundCube.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n        // console.log(THREE.ShaderChunk.envmap_common_pars_fragment)\r\n        if (!THREE.ShaderChunk.cube_uv_reflection_fragment.includes('uniform mat4 envMapRotation;')) {\r\n            THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(`#ifdef ENVMAP_TYPE_CUBE_UV`, `uniform mat4 envMapRotation;\r\n                #ifdef ENVMAP_TYPE_CUBE_UV`);\r\n        }\r\n        // console.log(THREE.ShaderChunk.envmap_fragment.includes(`vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );`))\r\n        THREE.ShaderChunk.envmap_fragment = THREE.ShaderChunk.envmap_fragment.replace(`vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );`, `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * reflectVec.x, reflectVec.yz, 1.0 ) * envMapRotation;\r\n                vec4 envColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * reflectVec.x, reflectVec.zy, 1.0 ) * envMapRotation;\r\n                vec4 envColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #endif\r\n            `);\r\n        // console.log(THREE.ShaderChunk.backgroundCube_frag.includes(`vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );`))\r\n        THREE.ShaderChunk.backgroundCube_frag = THREE.ShaderChunk.backgroundCube_frag.replace(`vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );`, `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * vWorldDirection.x, vWorldDirection.yz, 1.0 ) * envMapRotation;\r\n                vec4 texColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * vWorldDirection.x, vWorldDirection.zy, 1.0 ) * envMapRotation;\r\n                vec4 texColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #endif`);\r\n        // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment.includes(`vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );`))\r\n        THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(`vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );`, `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir, 1.0) * envMapRotation;\r\n                vec3 color0 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt );            \r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir.xzy, 1.0) * envMapRotation;\r\n                vec3 color0 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt );            \r\n            #endif`);\r\n        // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment.includes(`vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );`))\r\n        THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(`vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );`, `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir, 1.0) * envMapRotation;\r\n                vec3 color1 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt + 1.0 );            \r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir.xzy, 1.0) * envMapRotation;\r\n                vec3 color1 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt + 1.0 );        \r\n            #endif`);\r\n        if (!THREE.ShaderChunk.lights_fragment_maps.includes('vec3 reflectVec')) {\r\n            var index = THREE.ShaderChunk.lights_fragment_maps.lastIndexOf('#endif');\r\n            THREE.ShaderChunk.lights_fragment_maps = THREE.ShaderChunk.lights_fragment_maps.substring(0, index) +\r\n                `#else\r\n                #ifdef ENVMAP_TYPE_NONE\r\n                    vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\r\n                    reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n                    vec4 adjustedEnvReflectVector = vec4(reflectVec, 1.0) * envMapRotation;\r\n                    radiance += (vec3((adjustedEnvReflectVector.z + 1.0) / 2.0) + 0.5) / 1.5;\r\n                #endif\r\n            #endif\r\n            ` + THREE.ShaderChunk.lights_fragment_maps.substring(index + '#endif'.length);\r\n        }\r\n    }\r\n    // #endregion Properties (8)\r\n    // #region Constructors (1)\r\n    cacheSize() {\r\n        return Object.entries(this._materialCache).length;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (7)\r\n    assignEnvironmentMap(e, type) {\r\n        this._envMap = e;\r\n        this._envMapType = type;\r\n        for (let m in this._materialCache) {\r\n            if ((this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial || this._materialCache[m].material instanceof THREE.MeshBasicMaterial)) {\r\n                const material = this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData &&\r\n                    (this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialStandardData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialGemData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialUnlitData) &&\r\n                    this._materialCache[m].materialData.envMap !== undefined)\r\n                    continue;\r\n                if (this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialUnlitData && this._renderingEngine.environmentMapForUnlitMaterials === false)\r\n                    return;\r\n                material.envMap = e;\r\n                material.needsUpdate = true;\r\n                for (let d in material.defines) {\r\n                    if (d.startsWith('ENVMAP_TYPE_'))\r\n                        delete material.defines[d];\r\n                }\r\n                if (material.defines)\r\n                    material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMapIntensity(value) {\r\n        this._envMapIntensity = value;\r\n        for (let m in this._materialCache) {\r\n            if ((this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial)) {\r\n                const material = this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData &&\r\n                    (this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialStandardData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialGemData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData ||\r\n                        this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialUnlitData) &&\r\n                    this._materialCache[m].materialData.envMap !== undefined)\r\n                    continue;\r\n                material.envMapIntensity = value;\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMapForUnlitMaterials(toggle) {\r\n        for (let m in this._materialCache) {\r\n            if (this._materialCache[m].material instanceof THREE.MeshBasicMaterial) {\r\n                const material = this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData &&\r\n                    this._materialCache[m].materialData instanceof viewer_shared_types_1.MaterialUnlitData &&\r\n                    this._materialCache[m].materialData.envMap !== undefined)\r\n                    continue;\r\n                if (toggle) {\r\n                    material.envMap = this._envMap;\r\n                    material.needsUpdate = true;\r\n                    for (let d in material.defines) {\r\n                        if (d.startsWith('ENVMAP_TYPE_'))\r\n                            delete material.defines[d];\r\n                    }\r\n                    if (material.defines)\r\n                        material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n                }\r\n                else {\r\n                    material.envMap = null;\r\n                    material.needsUpdate = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assignPointSize(p) {\r\n        const height = this._renderingEngine.renderer ? this._renderingEngine.renderer.getSize(new THREE.Vector2()).y : 1080;\r\n        if (height === this._height && p * (this._height / 1080) === this._pointSize)\r\n            return;\r\n        this._height = height;\r\n        this._pointSize = p * (this._height / 1080);\r\n        for (let m in this._materialCache) {\r\n            if (this._materialCache[m].material instanceof THREE.PointsMaterial) {\r\n                this._materialCache[m].material.size = this._pointSize;\r\n                this._materialCache[m].material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignTextureEncoding() {\r\n        for (let m in this._materialCache) {\r\n            if (this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial) {\r\n                const material = this._materialCache[m].material;\r\n                if (material.emissiveMap) {\r\n                    material.emissiveMap.encoding = this._textureEncoding;\r\n                    material.emissiveMap.needsUpdate = true;\r\n                }\r\n                if (material.map) {\r\n                    material.map.encoding = this._textureEncoding;\r\n                    material.map.needsUpdate = true;\r\n                }\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignDefaultMaterialColor() {\r\n        for (let m in this._materialCache) {\r\n            const { material, materialData, materialSettings } = this._materialCache[m];\r\n            // if there is no materialData stored in the cache that means that the default material was used\r\n            if (!materialData && !(materialSettings !== undefined && materialSettings.useVertexColors))\r\n                material.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n        }\r\n    }\r\n    assignColorCorrection(value) {\r\n        const convertColor = (c, toggle) => {\r\n            if (!c)\r\n                return;\r\n            if (c instanceof SDColor_1.SDColor) {\r\n                c.colorCorrection(toggle);\r\n                return c;\r\n            }\r\n            else {\r\n                const sdColor = this._renderingEngine.colorCache.find(color => color.equals(c));\r\n                if (sdColor) {\r\n                    sdColor.colorCorrection(toggle);\r\n                    return sdColor;\r\n                }\r\n                else {\r\n                    // we check in this case if the converted color has been stored already\r\n                    const clone = c.clone();\r\n                    toggle === true ? clone.convertSRGBToLinear() : clone.convertLinearToSRGB();\r\n                    const sdColorClone = this._renderingEngine.colorCache.find(color => color.equals(clone));\r\n                    if (sdColorClone) {\r\n                        sdColorClone.colorCorrection(toggle);\r\n                        return sdColorClone;\r\n                    }\r\n                    else {\r\n                        // some colors may not have been set by us, but have been set automatically\r\n                        // in this case we expect the color to be linear either way and therefore omit a color correction\r\n                        return c;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        for (let m in this._materialCache) {\r\n            const material = this._materialCache[m].material;\r\n            material.color = convertColor(material.color, value);\r\n            material.specular = convertColor(material.specular, value);\r\n            material.emissive = convertColor(material.emissive, value);\r\n            material.colorTransferBegin = convertColor(material.colorTransferBegin, value);\r\n            material.colorTransferEnd = convertColor(material.colorTransferEnd, value);\r\n            material.attenuationColor = convertColor(material.attenuationColor, value);\r\n            material.sheencolor = convertColor(material.sheencolor, value);\r\n            material.specularColor = convertColor(material.specularColor, value);\r\n            material.needsUpdate = true;\r\n        }\r\n    }\r\n    emptyMaterialCache() {\r\n        this._materialCache = {};\r\n    }\r\n    removeFromMaterialCache(id) {\r\n        for (let m in this._materialCache) {\r\n            if (m.startsWith(id)) {\r\n                delete this._materialCache[m];\r\n            }\r\n        }\r\n    }\r\n    init() { }\r\n    getMaterialProperties(materialData, type, materialSettings) {\r\n        const generalProperties = {};\r\n        let mapCount = 0;\r\n        // if no MaterialStandardData is provided, we return our default\r\n        if (!materialData) {\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n            if (materialSettings !== undefined && materialSettings.useVertexColors)\r\n                generalProperties.color = this._renderingEngine.createThreeJsColor('#d3d3d3');\r\n            generalProperties.side = THREE.DoubleSide;\r\n            if (!(type === MATERIAL_TYPE.POINT || type === MATERIAL_TYPE.LINE)) {\r\n                generalProperties.envMap = this._envMap;\r\n                generalProperties.emissiveIntensity = this._envMapIntensity;\r\n            }\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n        /**\r\n         * We know evaluate properties that can be applied to all materials\r\n         */\r\n        generalProperties.alphaTest = materialData.alphaCutoff;\r\n        if (materialData.opacity !== undefined) {\r\n            generalProperties.opacity = materialData.opacity;\r\n            generalProperties.transparent = generalProperties.opacity < 1;\r\n        }\r\n        if (materialData.alphaMode === viewer_shared_types_1.MATERIAL_ALPHA.BLEND) {\r\n            generalProperties.transparent = true;\r\n            generalProperties.depthWrite = false;\r\n        }\r\n        else if (!generalProperties.transparent) {\r\n            generalProperties.transparent = false;\r\n        }\r\n        if (materialData.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.color);\r\n        if (materialData.color === undefined && materialData.map !== undefined && materialData.map.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.map.color);\r\n        if (materialData.color === undefined && materialData.map !== undefined && materialData.map.color === undefined && !(materialSettings !== undefined && materialSettings.useVertexColors))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n        if ((materialSettings !== undefined && materialSettings.useVertexColors) && (materialData.color === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color + 'ff' === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color === this._renderingEngine.defaultMaterialColor || materialData.color === this._renderingEngine.defaultMaterialColor + 'ff' || materialData.color === undefined))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor('#d3d3d3');\r\n        if (materialData.side !== undefined)\r\n            generalProperties.side = materialData.side === viewer_shared_types_1.MATERIAL_SIDE.BACK ? THREE.BackSide : materialData.side === viewer_shared_types_1.MATERIAL_SIDE.FRONT ? THREE.FrontSide : THREE.DoubleSide;\r\n        /**\r\n         *\r\n         * First exit, lines ans points\r\n         *\r\n         */\r\n        if (type === MATERIAL_TYPE.POINT) {\r\n            generalProperties.size = this._pointSize;\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n        else if (type === MATERIAL_TYPE.LINE) {\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * Second exit, the shadow material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialShadowData)\r\n            return { properties: generalProperties, mapCount };\r\n        /**\r\n         * We know evaluate properties that can be applied to basic mesh materials (and the ones extending from them)\r\n         */\r\n        const basicProperties = generalProperties;\r\n        if (materialData.alphaMap !== undefined) {\r\n            basicProperties.alphaMap = this.createTexture(materialData.alphaMap);\r\n            basicProperties.transparent = true;\r\n            basicProperties.depthWrite = false;\r\n            mapCount++;\r\n        }\r\n        if (materialData.aoMap !== undefined) {\r\n            basicProperties.aoMap = this.createTexture(materialData.aoMap);\r\n            mapCount++;\r\n        }\r\n        if (materialData.aoMapIntensity !== undefined) {\r\n            basicProperties.aoMapIntensity = materialData.aoMapIntensity;\r\n        }\r\n        if (materialData.map !== undefined) {\r\n            basicProperties.map = this.createTexture(materialData.map);\r\n            basicProperties.map.encoding = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n        /**\r\n         *\r\n         * Third exit, the unlit material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialUnlitData)\r\n            return { properties: basicProperties, mapCount };\r\n        /**\r\n         * We know evaluate properties that can be applied to MeshPhysicalMaterials, SpecularGlossinessMaterials and GemMaterialParameters\r\n         */\r\n        const standardProperties = basicProperties;\r\n        if (materialData.shading !== undefined)\r\n            standardProperties.flatShading = materialData.shading !== 'smooth';\r\n        if (materialData.bumpMap !== undefined) {\r\n            standardProperties.bumpMap = this.createTexture(materialData.bumpMap);\r\n            mapCount++;\r\n        }\r\n        standardProperties.bumpScale = materialData.bumpScale;\r\n        if (materialData.emissiveness !== undefined)\r\n            standardProperties.emissive = this._renderingEngine.createThreeJsColor(materialData.emissiveness);\r\n        if (materialData.emissiveMap !== undefined) {\r\n            standardProperties.emissiveMap = this.createTexture(materialData.emissiveMap);\r\n            standardProperties.emissiveMap.encoding = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n        standardProperties.envMap = this._envMap;\r\n        standardProperties.emissiveIntensity = this._envMapIntensity;\r\n        if (materialData.normalMap !== undefined) {\r\n            standardProperties.normalMap = this.createTexture(materialData.normalMap);\r\n            mapCount++;\r\n        }\r\n        if (materialData.normalScale !== undefined)\r\n            standardProperties.normalScale = new THREE.Vector2(materialData.normalScale, -materialData.normalScale);\r\n        /**\r\n         *\r\n         * Fourth exit, the specular-glossiness material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n            const specularGlossinessProperties = standardProperties;\r\n            specularGlossinessProperties.specular = this._renderingEngine.createThreeJsColor(materialData.specular);\r\n            specularGlossinessProperties.glossiness = materialData.glossiness;\r\n            if (materialData.specularGlossinessMap !== undefined) {\r\n                specularGlossinessProperties.specularMap = this.createTexture(materialData.specularGlossinessMap);\r\n                specularGlossinessProperties.specularMap.encoding = THREE.sRGBEncoding;\r\n                specularGlossinessProperties.glossinessMap = specularGlossinessProperties.specularMap;\r\n                mapCount++;\r\n            }\r\n            else {\r\n                if (materialData.specularMap !== undefined) {\r\n                    specularGlossinessProperties.specularMap = this.createTexture(materialData.specularMap);\r\n                    specularGlossinessProperties.specularMap.encoding = THREE.sRGBEncoding;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.glossinessMap !== undefined) {\r\n                    specularGlossinessProperties.glossinessMap = this.createTexture(materialData.glossinessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n            return { properties: specularGlossinessProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * Fourth exit, the gem material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n            const gemProperties = standardProperties;\r\n            gemProperties.refractionIndex = materialData.refractionIndex;\r\n            if (materialData.impurityMap !== undefined) {\r\n                gemProperties.impurityMap = this.createTexture(materialData.impurityMap);\r\n                mapCount++;\r\n            }\r\n            gemProperties.impurityScale = materialData.impurityScale;\r\n            if (materialData.colorTransferBegin !== undefined) {\r\n                gemProperties.colorTransferBegin = this._renderingEngine.createThreeJsColor(materialData.colorTransferBegin);\r\n            }\r\n            if (materialData.colorTransferEnd !== undefined) {\r\n                gemProperties.colorTransferEnd = this._renderingEngine.createThreeJsColor(materialData.colorTransferEnd);\r\n            }\r\n            gemProperties.center = new THREE.Vector3(materialData.center[0], materialData.center[1], materialData.center[2]);\r\n            gemProperties.tracingDepth = materialData.tracingDepth;\r\n            gemProperties.radius = materialData.radius;\r\n            gemProperties.sphericalNormalMap = materialData.sphericalNormalMap;\r\n            gemProperties.gamma = materialData.gamma;\r\n            gemProperties.contrast = materialData.contrast;\r\n            gemProperties.brightness = materialData.brightness;\r\n            gemProperties.dispersion = materialData.dispersion;\r\n            gemProperties.tracingOpacity = materialData.tracingOpacity;\r\n            gemProperties.roughness = 0;\r\n            gemProperties.metalness = 1;\r\n            gemProperties.transparent = true;\r\n            gemProperties.opacity = 1.0;\r\n            gemProperties.side = THREE.FrontSide;\r\n            return { properties: gemProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * the final exit, the MeshPhysicalMaterial\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialStandardData) {\r\n            const meshPhysicalProperties = standardProperties;\r\n            meshPhysicalProperties.clearcoat = materialData.clearcoat;\r\n            if (materialData.clearcoatMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatMap = this.createTexture(materialData.clearcoatMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.clearcoatNormalMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatNormalMap = this.createTexture(materialData.clearcoatNormalMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.clearcoatRoughness = materialData.clearcoatRoughness;\r\n            if (materialData.clearcoatRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatRoughnessMap = this.createTexture(materialData.clearcoatRoughnessMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.displacementMap !== undefined) {\r\n                meshPhysicalProperties.displacementMap = this.createTexture(materialData.displacementMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.displacementScale = materialData.displacementScale;\r\n            meshPhysicalProperties.displacementBias = materialData.displacementBias;\r\n            meshPhysicalProperties.ior = materialData.ior;\r\n            meshPhysicalProperties.transmission = materialData.transmission;\r\n            if (materialData.transmissionMap !== undefined) {\r\n                meshPhysicalProperties.transmissionMap = this.createTexture(materialData.transmissionMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.thickness = materialData.thickness;\r\n            if (materialData.thicknessMap !== undefined) {\r\n                meshPhysicalProperties.thicknessMap = this.createTexture(materialData.thicknessMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.attenuationDistance = materialData.attenuationDistance;\r\n            meshPhysicalProperties.attenuationColor = this._renderingEngine.createThreeJsColor(materialData.attenuationColor);\r\n            meshPhysicalProperties.sheen = materialData.sheen;\r\n            meshPhysicalProperties.sheenColor = this._renderingEngine.createThreeJsColor(materialData.sheenColor);\r\n            meshPhysicalProperties.sheenRoughness = materialData.sheenRoughness;\r\n            if (materialData.sheenColorMap !== undefined) {\r\n                meshPhysicalProperties.sheenColorMap = this.createTexture(materialData.sheenColorMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.sheenRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.sheenRoughnessMap = this.createTexture(materialData.sheenRoughnessMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.specularIntensity = materialData.specularIntensity;\r\n            if (materialData.specularIntensityMap !== undefined) {\r\n                meshPhysicalProperties.specularIntensityMap = this.createTexture(materialData.specularIntensityMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.specularColor = this._renderingEngine.createThreeJsColor(materialData.specularColor);\r\n            if (materialData.specularColorMap !== undefined) {\r\n                meshPhysicalProperties.specularColorMap = this.createTexture(materialData.specularColorMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.metalness = materialData.metalness;\r\n            meshPhysicalProperties.roughness = materialData.roughness;\r\n            if (materialData.metalnessRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessRoughnessMap);\r\n                meshPhysicalProperties.roughnessMap = meshPhysicalProperties.metalnessMap;\r\n                mapCount++;\r\n            }\r\n            else {\r\n                if (materialData.metalnessMap !== undefined) {\r\n                    meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessMap);\r\n                    mapCount++;\r\n                }\r\n                if (materialData.roughnessMap !== undefined) {\r\n                    meshPhysicalProperties.roughnessMap = this.createTexture(materialData.roughnessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n            return { properties: meshPhysicalProperties, mapCount };\r\n        }\r\n        // we should never get here\r\n        throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`MaterialLoader.getMaterialProperties: No proper material properties were found.`);\r\n    }\r\n    createMaterial(type, incomingData, materialData, materialSettings) {\r\n        let { properties, mapCount } = this.getMaterialProperties(materialData, type, materialSettings);\r\n        this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n        let material;\r\n        if (type === MATERIAL_TYPE.POINT) {\r\n            material = new THREE.PointsMaterial(Object.assign(properties, { size: this._pointSize }));\r\n        }\r\n        else if (type === MATERIAL_TYPE.LINE) {\r\n            material = new THREE.LineBasicMaterial(properties);\r\n        }\r\n        else {\r\n            if (materialData instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n                material = new THREE.MeshBasicMaterial(properties);\r\n            }\r\n            else {\r\n                if (materialData instanceof viewer_shared_types_1.MaterialShadowData) {\r\n                    material = new THREE.ShadowMaterial({ opacity: properties.opacity, color: properties.color });\r\n                }\r\n                else if (materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n                    material = new SpecularGlossinessMaterial_1.SpecularGlossinessMaterial(properties);\r\n                }\r\n                else if (materialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n                    material = new GemMaterial_1.GemMaterial(properties);\r\n                }\r\n                else {\r\n                    material = new THREE.MeshPhysicalMaterial(properties);\r\n                }\r\n                const before = material.onBeforeCompile;\r\n                material.onBeforeCompile = (shader, renderer) => {\r\n                    before(shader, renderer);\r\n                    shader.uniforms.lightSizeUV = { value: this._lightSizeUV };\r\n                    shader.uniforms.blending = { value: this._blending };\r\n                    shader.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n                    material.userData.shader = shader;\r\n                };\r\n                if (material instanceof SpecularGlossinessMaterial_1.SpecularGlossinessMaterial || material instanceof THREE.MeshPhysicalMaterial) {\r\n                    material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n                    if (materialSettings && materialSettings.useVertexTangents)\r\n                        material.normalScale.y *= -1;\r\n                    if (materialSettings && materialSettings.useVertexTangents && material instanceof THREE.MeshPhysicalMaterial)\r\n                        material.clearcoatNormalScale.y *= -1;\r\n                    if (materialSettings && materialSettings.useFlatShading)\r\n                        material.flatShading = true;\r\n                }\r\n            }\r\n        }\r\n        if (materialSettings && materialSettings.useVertexColors)\r\n            material.vertexColors = true;\r\n        if (materialData instanceof viewer_shared_types_1.MaterialStandardData || materialData instanceof viewer_shared_types_1.MaterialGemData || materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData || materialData instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n            if (materialData.envMap !== undefined) {\r\n                const envMapInput = materialData.envMap;\r\n                if (envMapInput !== undefined) {\r\n                    this._renderingEngine.environmentMapLoader.loadEnvMap(envMapInput).then(envMapResult => {\r\n                        if (material instanceof THREE.MeshBasicMaterial && this._renderingEngine.environmentMapForUnlitMaterials === false)\r\n                            return;\r\n                        material.envMap = envMapResult.map;\r\n                        const envMapType = material.envMap instanceof THREE.CubeTexture ? EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.LDR : EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.HDR;\r\n                        for (let d in material.defines) {\r\n                            if (d.startsWith('ENVMAP_TYPE_'))\r\n                                delete material.defines[d];\r\n                        }\r\n                        if (material.defines)\r\n                            material.defines['ENVMAP_TYPE_' + envMapType.toUpperCase()] = '';\r\n                        material.needsUpdate = true;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (materialData)\r\n            materialData.threeJsObject[this._renderingEngine.id] = material;\r\n        material.needsUpdate = true;\r\n        material.userData = {\r\n            SDid: incomingData.id,\r\n            SDversion: incomingData.version\r\n        };\r\n        return material;\r\n    }\r\n    /**\r\n     * Create a material object with the provided material data.\r\n     *\r\n     * @param material the material data\r\n     * @returns the material object\r\n     */\r\n    load(incomingData, materialSettings) {\r\n        let materialData = null;\r\n        if (!(incomingData instanceof viewer_shared_types_1.GeometryData))\r\n            materialData = incomingData;\r\n        // evaluate which type of material properties we are constructing\r\n        let type;\r\n        if (materialSettings && materialSettings.mode === 0) {\r\n            type = MATERIAL_TYPE.POINT;\r\n        }\r\n        else if (materialSettings && (materialSettings.mode === 1 || materialSettings.mode === 2 || materialSettings.mode === 3)) {\r\n            type = MATERIAL_TYPE.LINE;\r\n        }\r\n        else {\r\n            type = MATERIAL_TYPE.MESH;\r\n        }\r\n        if (!materialData) {\r\n            // evaluate which type of material properties we are constructing\r\n            if (materialSettings && materialSettings.mode === 0) {\r\n                if (this._defaultPointsMaterial)\r\n                    return this._defaultPointsMaterial;\r\n            }\r\n            else if (materialSettings && (materialSettings.mode === 1 || materialSettings.mode === 2 || materialSettings.mode === 3)) {\r\n                if (this._defaultLineMaterial)\r\n                    return this._defaultLineMaterial;\r\n            }\r\n            else {\r\n                if (this._defaultMaterial)\r\n                    return this._defaultMaterial;\r\n            }\r\n            const material = this.createMaterial(type, incomingData, materialData, materialSettings);\r\n            if (type === MATERIAL_TYPE.POINT) {\r\n                this._defaultPointsMaterial = material;\r\n            }\r\n            else if (type === MATERIAL_TYPE.LINE) {\r\n                this._defaultLineMaterial = material;\r\n            }\r\n            else {\r\n                this._defaultMaterial = material;\r\n            }\r\n            this._materialCache[type + '_' + type] = {\r\n                material,\r\n                materialData,\r\n                materialSettings\r\n            };\r\n            return material;\r\n        }\r\n        if (this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type])\r\n            return this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material;\r\n        const material = this.createMaterial(type, incomingData, materialData, materialSettings);\r\n        if (this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type]) {\r\n            this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material.copy(material);\r\n            return this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material;\r\n        }\r\n        this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type] = {\r\n            material,\r\n            materialData,\r\n            materialSettings\r\n        };\r\n        return material;\r\n    }\r\n    updateMaterials() {\r\n        for (let m in this._materialCache)\r\n            this._materialCache[m].material.needsUpdate = true;\r\n    }\r\n    updateEnvironmentMapRotation(quaternion) {\r\n        this._environmentMapRotationMatrix = new THREE.Matrix4().fromArray(gl_matrix_1.mat4.fromQuat(gl_matrix_1.mat4.create(), quaternion)).transpose();\r\n        for (let m in this._materialCache)\r\n            if (this._materialCache[m].material.userData.shader) {\r\n                this._materialCache[m].material.userData.shader.uniforms.envMapRotation.value = this._environmentMapRotationMatrix;\r\n            }\r\n        // set the new uniform value as the default if the environment is recomputed\r\n        THREE.ShaderLib.backgroundCube.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n        // the background cube is its own mesh that lives somewhere within three.js\r\n        // therefore our way to change the uniform is to go through the renderer list and set the uniforms there\r\n        const list = this._renderingEngine.renderer.renderLists.get(this._renderingEngine.scene, 0);\r\n        list.opaque.forEach(element => element.material.uniforms && element.material.uniforms.envMapRotation && (element.material.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix }));\r\n    }\r\n    updateSoftShadow(lightSizeUV, blending) {\r\n        this._lightSizeUV = lightSizeUV;\r\n        this._blending = blending;\r\n        for (let m in this._materialCache) {\r\n            if (this._materialCache[m].material.userData.shader) {\r\n                this._materialCache[m].material.userData.shader.uniforms.lightSizeUV.value = lightSizeUV;\r\n                this._materialCache[m].material.userData.shader.uniforms.blending.value = blending;\r\n            }\r\n        }\r\n    }\r\n    // #endregion Public Methods (7)\r\n    // #region Private Methods (1)\r\n    createTexture(map) {\r\n        const texture = new THREE.Texture(map.image);\r\n        texture.format = THREE.RGBAFormat;\r\n        texture.minFilter = (() => {\r\n            switch (map.minFilter) {\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST:\r\n                    return THREE.NearestFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST_MIPMAP_NEAREST:\r\n                    return THREE.NearestMipMapNearestFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_NEAREST:\r\n                    return THREE.LinearMipMapNearestFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST_MIPMAP_LINEAR:\r\n                    return THREE.NearestMipMapLinearFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR:\r\n                    return THREE.LinearFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR:\r\n                default:\r\n                    return THREE.LinearMipMapLinearFilter;\r\n            }\r\n        })();\r\n        texture.magFilter = (() => {\r\n            switch (map.magFilter) {\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST:\r\n                    return THREE.NearestFilter;\r\n                case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR:\r\n                default:\r\n                    return THREE.LinearFilter;\r\n            }\r\n        })();\r\n        texture.wrapS = (() => {\r\n            switch (map.wrapS) {\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                    return THREE.ClampToEdgeWrapping;\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                    return THREE.MirroredRepeatWrapping;\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT:\r\n                default:\r\n                    return THREE.RepeatWrapping;\r\n            }\r\n        })();\r\n        texture.wrapT = (() => {\r\n            switch (map.wrapT) {\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                    return THREE.ClampToEdgeWrapping;\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                    return THREE.MirroredRepeatWrapping;\r\n                case viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT:\r\n                default:\r\n                    return THREE.RepeatWrapping;\r\n            }\r\n        })();\r\n        texture.center = new THREE.Vector2(map.center[0], map.center[1]);\r\n        texture.offset = new THREE.Vector2(map.offset[0], map.offset[1]);\r\n        texture.repeat = new THREE.Vector2(map.repeat[0], map.repeat[1]);\r\n        texture.rotation = map.rotation;\r\n        texture.flipY = map.flipY;\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    get maxMapCount() {\r\n        return this._maxMapCount;\r\n    }\r\n    set maxMapCount(value) {\r\n        this._maxMapCount = value;\r\n    }\r\n    get textureEncoding() {\r\n        return this._textureEncoding;\r\n    }\r\n    set textureEncoding(value) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n}\r\nexports.MaterialLoader = MaterialLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"MaterialLoader.js","sourceRoot":"","sources":["../../src/loaders/MaterialLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport {\r\n  MapData,\r\n  MATERIAL_SIDE,\r\n  TEXTURE_FILTERING,\r\n  TEXTURE_WRAPPING,\r\n  MATERIAL_ALPHA,\r\n  PRIMITIVE_MODE,\r\n  IMaterialAbstractData,\r\n  MaterialUnlitData,\r\n  MaterialSpecularGlossinessData,\r\n  MaterialGemData,\r\n  MaterialStandardData,\r\n  IMapData,\r\n  MaterialShadowData,\r\n  GeometryData,\r\n} from '@shapediver/viewer.shared.types'\r\nimport { mat4, quat } from 'gl-matrix'\r\n\r\nimport { RenderingEngine } from '../RenderingEngine'\r\nimport { entry, main } from '../shaders/PCSS'\r\nimport { SpecularGlossinessMaterial, SpecularGlossinessMaterialParameters } from '../materials/SpecularGlossinessMaterial'\r\nimport { RenderingManager } from '../managers/RenderingManager'\r\nimport { ILoader } from '../interfaces/ILoader'\r\nimport { MeshUnlitMaterialParameters } from '../materials/MeshUnlitMaterialParameters'\r\nimport { Converter, Logger, ShapeDiverViewerDataProcessingError } from '@shapediver/viewer.shared.services'\r\nimport { ENVIRONMENT_MAP_TYPE } from './EnvironmentMapLoader'\r\nimport { GemMaterial, GemMaterialParameters } from '../materials/GemMaterial'\r\nimport { SDColor } from '../objects/SDColor'\r\n\r\nexport enum MATERIAL_TYPE {\r\n    POINT = 'point',\r\n    LINE = 'line',\r\n    MESH = 'mesh',\r\n}\r\n\r\nexport type MaterialSettings = {\r\n    mode: PRIMITIVE_MODE,\r\n    useVertexTangents: boolean,\r\n    useVertexColors: boolean,\r\n    useFlatShading: boolean,\r\n    useMorphTargets: boolean,\r\n    useMorphNormals: boolean\r\n}\r\n\r\nexport class MaterialLoader implements ILoader {\r\n    // #region Properties (8)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private _materialCache: {\r\n        [key: string]: {\r\n            materialData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | MaterialShadowData | null,\r\n            material: (THREE.Material | THREE.MeshPhysicalMaterial | THREE.MeshBasicMaterial | THREE.PointsMaterial | THREE.LineBasicMaterial | THREE.ShadowMaterial),\r\n            materialSettings?: MaterialSettings \r\n        }\r\n    } = {};\r\n    private _defaultPointsMaterial?: THREE.PointsMaterial;\r\n    private _defaultLineMaterial?: THREE.LineBasicMaterial;\r\n    private _defaultMaterial?: THREE.MeshPhysicalMaterial;\r\n\r\n    private _blending: number = 0.0;\r\n    private _envMap: THREE.CubeTexture | THREE.Texture | null = null;\r\n    private _envMapIntensity: number = 1;\r\n    private _height: number = 1020;\r\n    private _lightSizeUV: number = 0.025;\r\n    private _pointSize: number = 1.0;\r\n    private _textureEncoding: THREE.TextureEncoding = THREE.sRGBEncoding;\r\n    private _maxMapCount: number = 0;\r\n    private _envMapType: ENVIRONMENT_MAP_TYPE = ENVIRONMENT_MAP_TYPE.NULL;\r\n    private _environmentMapRotationMatrix: THREE.Matrix4 = new THREE.Matrix4();\r\n\r\n    // #endregion Properties (8)\r\n\r\n    // #region Constructors (1)\r\n    \r\n    public cacheSize() {\r\n        return Object.entries(this._materialCache).length;\r\n    }\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) {\r\n        let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\r\n        if (!shader.includes('PCSS implementation')) {\r\n            shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP' + main);\r\n            shader = shader.replace(shader.substr(shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )'), shader.indexOf('#elif defined( SHADOWMAP_TYPE_PCF_SOFT )') - shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )')), '#if defined( SHADOWMAP_TYPE_PCF )\\n' + entry);\r\n        }\r\n        THREE.ShaderChunk.shadowmap_pars_fragment = shader;\r\n\r\n        // set the uniform for the background envmap calculation initially\r\n        THREE.ShaderLib.backgroundCube.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n\r\n        // console.log(THREE.ShaderChunk.envmap_common_pars_fragment)\r\n        if (!THREE.ShaderChunk.cube_uv_reflection_fragment.includes('uniform mat4 envMapRotation;')) {\r\n            THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(\r\n                `#ifdef ENVMAP_TYPE_CUBE_UV`,\r\n                `uniform mat4 envMapRotation;\r\n                #ifdef ENVMAP_TYPE_CUBE_UV`\r\n            )\r\n        }\r\n\r\n        // console.log(THREE.ShaderChunk.envmap_fragment.includes(`vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );`))\r\n        THREE.ShaderChunk.envmap_fragment = THREE.ShaderChunk.envmap_fragment.replace(\r\n            `vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );`,\r\n            `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * reflectVec.x, reflectVec.yz, 1.0 ) * envMapRotation;\r\n                vec4 envColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * reflectVec.x, reflectVec.zy, 1.0 ) * envMapRotation;\r\n                vec4 envColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #endif\r\n            `\r\n        )\r\n\r\n        // console.log(THREE.ShaderChunk.backgroundCube_frag.includes(`vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );`))\r\n        THREE.ShaderChunk.backgroundCube_frag = THREE.ShaderChunk.backgroundCube_frag.replace(\r\n            `vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );`,\r\n            `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * vWorldDirection.x, vWorldDirection.yz, 1.0 ) * envMapRotation;\r\n                vec4 texColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4( flipEnvMap * vWorldDirection.x, vWorldDirection.zy, 1.0 ) * envMapRotation;\r\n                vec4 texColor = textureCube( envMap, adjustedEnvReflectVector.xyz );\r\n            #endif`\r\n        )\r\n        \r\n        // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment.includes(`vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );`))\r\n        THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(\r\n            `vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );`,\r\n            `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir, 1.0) * envMapRotation;\r\n                vec3 color0 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt );            \r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir.xzy, 1.0) * envMapRotation;\r\n                vec3 color0 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt );            \r\n            #endif`\r\n        )\r\n\r\n        // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment.includes(`vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );`))\r\n        THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace(\r\n            `vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );`,\r\n            `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir, 1.0) * envMapRotation;\r\n                vec3 color1 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt + 1.0 );            \r\n            #else\r\n                vec4 adjustedEnvReflectVector = vec4(sampleDir.xzy, 1.0) * envMapRotation;\r\n                vec3 color1 = bilinearCubeUV( envMap, adjustedEnvReflectVector.xyz, mipInt + 1.0 );        \r\n            #endif`\r\n        )\r\n\r\n        if(!THREE.ShaderChunk.lights_fragment_maps.includes('vec3 reflectVec')) {\r\n            var index = THREE.ShaderChunk.lights_fragment_maps.lastIndexOf('#endif');\r\n            THREE.ShaderChunk.lights_fragment_maps = THREE.ShaderChunk.lights_fragment_maps.substring(0, index) +\r\n            `#else\r\n                #ifdef ENVMAP_TYPE_NONE\r\n                    vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\r\n                    reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n                    vec4 adjustedEnvReflectVector = vec4(reflectVec, 1.0) * envMapRotation;\r\n                    radiance += (vec3((adjustedEnvReflectVector.z + 1.0) / 2.0) + 0.5) / 1.5;\r\n                #endif\r\n            #endif\r\n            ` + THREE.ShaderChunk.lights_fragment_maps.substring(index + '#endif'.length);\r\n        }\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (7)\r\n\r\n    public assignEnvironmentMap(e: THREE.CubeTexture | THREE.Texture | null, type: ENVIRONMENT_MAP_TYPE) {\r\n        this._envMap = e;\r\n        this._envMapType = type;\r\n        for(let m in this._materialCache) {\r\n            if((this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial || this._materialCache[m].material instanceof THREE.MeshBasicMaterial)) {\r\n                const material: THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial | THREE.MeshBasicMaterial = <THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial | THREE.MeshBasicMaterial>this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData &&\r\n                    (\r\n                        this._materialCache[m].materialData instanceof MaterialStandardData ||\r\n                        this._materialCache[m].materialData instanceof MaterialGemData ||\r\n                        this._materialCache[m].materialData instanceof MaterialSpecularGlossinessData ||\r\n                        this._materialCache[m].materialData instanceof MaterialUnlitData\r\n                    ) &&\r\n                    (<MaterialStandardData | MaterialGemData | MaterialSpecularGlossinessData | MaterialUnlitData>this._materialCache[m].materialData).envMap !== undefined\r\n                ) continue;\r\n\r\n                if(this._materialCache[m].materialData instanceof MaterialUnlitData && this._renderingEngine.environmentMapForUnlitMaterials === false) return;\r\n\r\n                material.envMap = e;\r\n                material.needsUpdate = true;\r\n                for(let d in material.defines) {\r\n                    if(d.startsWith('ENVMAP_TYPE_'))\r\n                        delete material.defines[d];\r\n                }\r\n                if(material.defines)\r\n                    material.defines['ENVMAP_TYPE_'+this._envMapType.toUpperCase()] = '';\r\n            }\r\n        }\r\n    }\r\n    \r\n    public assignEnvironmentMapIntensity(value: number) {\r\n        this._envMapIntensity = value;\r\n        for(let m in this._materialCache) {\r\n            if((this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial)) {\r\n                const material: THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial = <THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial>this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData &&\r\n                    (\r\n                        this._materialCache[m].materialData instanceof MaterialStandardData ||\r\n                        this._materialCache[m].materialData instanceof MaterialGemData ||\r\n                        this._materialCache[m].materialData instanceof MaterialSpecularGlossinessData ||\r\n                        this._materialCache[m].materialData instanceof MaterialUnlitData\r\n                    ) &&\r\n                    (<MaterialStandardData | MaterialGemData | MaterialSpecularGlossinessData | MaterialUnlitData>this._materialCache[m].materialData).envMap !== undefined\r\n                ) continue;\r\n\r\n                material.envMapIntensity = value;\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public assignEnvironmentMapForUnlitMaterials(toggle: boolean) {\r\n        for(let m in this._materialCache) {\r\n            if(this._materialCache[m].material instanceof THREE.MeshBasicMaterial) {\r\n                const material: THREE.MeshBasicMaterial = <THREE.MeshBasicMaterial>this._materialCache[m].material;\r\n                if (this._materialCache[m].materialData && \r\n                    this._materialCache[m].materialData instanceof MaterialUnlitData &&\r\n                    (<MaterialUnlitData>this._materialCache[m].materialData).envMap !== undefined\r\n                ) continue;\r\n\r\n                if(toggle) {\r\n                    material.envMap = this._envMap;\r\n                    material.needsUpdate = true;\r\n                    for(let d in material.defines) {\r\n                        if(d.startsWith('ENVMAP_TYPE_'))\r\n                            delete material.defines[d];\r\n                    }\r\n                    if(material.defines)\r\n                        material.defines['ENVMAP_TYPE_'+this._envMapType.toUpperCase()] = '';\r\n\r\n                } else {\r\n                    material.envMap = null;\r\n                    material.needsUpdate = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public assignPointSize(p: number) {\r\n        const height = this._renderingEngine.renderer ? this._renderingEngine.renderer.getSize(new THREE.Vector2()).y : 1080;\r\n        if(height === this._height && p * (this._height/1080) === this._pointSize) return;\r\n        this._height = height;\r\n        this._pointSize = p * (this._height/1080);\r\n        for(let m in this._materialCache) {\r\n            if(this._materialCache[m].material instanceof THREE.PointsMaterial) {\r\n                (<THREE.PointsMaterial>this._materialCache[m].material).size = this._pointSize;\r\n                (<THREE.PointsMaterial>this._materialCache[m].material).needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignTextureEncoding() {\r\n        for(let m in this._materialCache) {\r\n            if(this._materialCache[m].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[m].material instanceof THREE.MeshStandardMaterial) {\r\n                const material: THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial = <THREE.MeshPhysicalMaterial | THREE.MeshStandardMaterial>this._materialCache[m].material;\r\n                if(material.emissiveMap) {\r\n                    material.emissiveMap!.encoding = this._textureEncoding;\r\n                    material.emissiveMap!.needsUpdate = true;\r\n                }\r\n                if(material.map) {\r\n                    material.map!.encoding = this._textureEncoding;\r\n                    material.map!.needsUpdate = true;\r\n                }\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public assignDefaultMaterialColor() {\r\n        for(let m in this._materialCache) {\r\n            const { material, materialData, materialSettings } = this._materialCache[m];\r\n\r\n            // if there is no materialData stored in the cache that means that the default material was used\r\n            if(!materialData && !(materialSettings !== undefined && materialSettings.useVertexColors)) \r\n                (<THREE.MeshPhysicalMaterial | THREE.MeshBasicMaterial | THREE.PointsMaterial | THREE.LineBasicMaterial | THREE.ShadowMaterial>material).color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n        }\r\n    }\r\n\r\n    public assignColorCorrection(value: boolean) {\r\n        const convertColor = (c: THREE.Color | SDColor | undefined, toggle: boolean): THREE.Color | SDColor | undefined => {\r\n            if(!c) return;\r\n\r\n            if(c instanceof SDColor) {\r\n                c.colorCorrection(toggle);\r\n                return c;\r\n            } else {\r\n                const sdColor = this._renderingEngine.colorCache.find(color => color.equals(c));\r\n                if(sdColor) {\r\n                    sdColor.colorCorrection(toggle);\r\n                    return sdColor;\r\n                } else {\r\n                    // we check in this case if the converted color has been stored already\r\n                    const clone = c.clone();\r\n                    toggle === true ? clone.convertSRGBToLinear() : clone.convertLinearToSRGB();\r\n                    const sdColorClone = this._renderingEngine.colorCache.find(color => color.equals(clone));\r\n                    \r\n                    if(sdColorClone) {\r\n                        sdColorClone.colorCorrection(toggle);\r\n                        return sdColorClone;\r\n                    } else {\r\n                        // some colors may not have been set by us, but have been set automatically\r\n                        // in this case we expect the color to be linear either way and therefore omit a color correction\r\n                        return c;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let m in this._materialCache) {\r\n            const material: any = this._materialCache[m].material;\r\n\r\n            material.color = convertColor(material.color, value);\r\n            material.specular = convertColor(material.specular, value);\r\n            material.emissive = convertColor(material.emissive, value);\r\n            material.colorTransferBegin = convertColor(material.colorTransferBegin, value);\r\n            material.colorTransferEnd = convertColor(material.colorTransferEnd, value);\r\n            material.attenuationColor = convertColor(material.attenuationColor, value);\r\n            material.sheencolor = convertColor(material.sheencolor, value);\r\n            material.specularColor = convertColor(material.specularColor, value);\r\n\r\n            material.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    public emptyMaterialCache() {\r\n        this._materialCache = {};\r\n    }\r\n\r\n    public removeFromMaterialCache(id: string) {\r\n        for(let m in this._materialCache) {\r\n            if(m.startsWith(id)) {\r\n                delete this._materialCache[m];\r\n            }\r\n        }\r\n    }\r\n\r\n    public init(): void {}\r\n\r\n    public getMaterialProperties(\r\n        materialData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | MaterialShadowData | null,\r\n        type: MATERIAL_TYPE,\r\n        materialSettings?: MaterialSettings\r\n    ): {\r\n        properties: THREE.PointsMaterialParameters | THREE.LineBasicMaterialParameters | MeshUnlitMaterialParameters | THREE.MeshPhysicalMaterialParameters | SpecularGlossinessMaterialParameters | GemMaterialParameters | THREE.ShadowMaterialParameters,\r\n        mapCount: number\r\n    } {\r\n        const generalProperties: THREE.PointsMaterialParameters | THREE.LineBasicMaterialParameters | MeshUnlitMaterialParameters | THREE.MeshPhysicalMaterialParameters | SpecularGlossinessMaterialParameters | GemMaterialParameters | THREE.ShadowMaterialParameters = {}\r\n        \r\n        let mapCount = 0;\r\n\r\n\r\n        // if no MaterialStandardData is provided, we return our default\r\n        if(!materialData) {\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n            if(materialSettings !== undefined && materialSettings.useVertexColors)\r\n                generalProperties.color = this._renderingEngine.createThreeJsColor('#d3d3d3');\r\n            generalProperties.side = THREE.DoubleSide;\r\n            if(!(type === MATERIAL_TYPE.POINT || type === MATERIAL_TYPE.LINE)) {\r\n                (<THREE.MeshPhysicalMaterialParameters>generalProperties).envMap = this._envMap;\r\n                (<THREE.MeshPhysicalMaterialParameters>generalProperties).emissiveIntensity = this._envMapIntensity;\r\n            }\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n\r\n        /**\r\n         * We know evaluate properties that can be applied to all materials\r\n         */\r\n\r\n        generalProperties.alphaTest = materialData.alphaCutoff;\r\n\r\n        if(materialData.opacity !== undefined){\r\n            generalProperties.opacity = materialData.opacity;\r\n            generalProperties.transparent = generalProperties.opacity < 1;\r\n        }\r\n            \r\n        if(materialData.alphaMode === MATERIAL_ALPHA.BLEND) {\r\n            generalProperties.transparent = true;\r\n            generalProperties.depthWrite = false;\r\n        } else if(!generalProperties.transparent) {\r\n            generalProperties.transparent = false;\r\n        }\r\n\r\n        if(materialData.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.color);\r\n\r\n        if(materialData.color === undefined && materialData.map !== undefined && materialData.map.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.map.color);\r\n\r\n        if(materialData.color === undefined && materialData.map !== undefined && materialData.map.color === undefined && !(materialSettings !== undefined && materialSettings.useVertexColors))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n\r\n        if((materialSettings !== undefined && materialSettings.useVertexColors) && (materialData.color === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color+'ff' === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color === this._renderingEngine.defaultMaterialColor || materialData.color === this._renderingEngine.defaultMaterialColor+'ff' || materialData.color === undefined))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor('#d3d3d3');\r\n\r\n        if(materialData.side !== undefined)\r\n            generalProperties.side = materialData.side === MATERIAL_SIDE.BACK ? THREE.BackSide : materialData.side === MATERIAL_SIDE.FRONT ? THREE.FrontSide : THREE.DoubleSide;\r\n\r\n        /**\r\n         * \r\n         * First exit, lines ans points\r\n         * \r\n         */\r\n\r\n        if(type === MATERIAL_TYPE.POINT) {\r\n            (<THREE.PointsMaterialParameters>generalProperties).size = this._pointSize;\r\n            return { properties: generalProperties, mapCount };\r\n        } else if(type === MATERIAL_TYPE.LINE) {\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n\r\n        /**\r\n         * \r\n         * Second exit, the shadow material\r\n         * \r\n         */\r\n\r\n        if(materialData instanceof MaterialShadowData) \r\n            return { properties: generalProperties, mapCount };\r\n\r\n\r\n        /**\r\n         * We know evaluate properties that can be applied to basic mesh materials (and the ones extending from them)\r\n         */\r\n\r\n        const basicProperties: MeshUnlitMaterialParameters | THREE.MeshPhysicalMaterialParameters | SpecularGlossinessMaterialParameters = generalProperties;\r\n\r\n        if (materialData.alphaMap !== undefined) {\r\n            basicProperties.alphaMap = this.createTexture(materialData.alphaMap);\r\n            basicProperties.transparent = true;\r\n            basicProperties.depthWrite = false;\r\n            mapCount++;\r\n        }\r\n\r\n        if (materialData.aoMap !== undefined) {\r\n            basicProperties.aoMap = this.createTexture(materialData.aoMap);\r\n            mapCount++;\r\n        }\r\n\r\n        if (materialData.aoMapIntensity !== undefined) {\r\n            basicProperties.aoMapIntensity = materialData.aoMapIntensity;\r\n        }\r\n\r\n        if (materialData.map !== undefined) {\r\n            basicProperties.map = this.createTexture(materialData.map);\r\n            basicProperties.map.encoding = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * Third exit, the unlit material\r\n         * \r\n         */\r\n\r\n        if(materialData instanceof MaterialUnlitData) \r\n            return { properties: basicProperties, mapCount };\r\n\r\n        /**\r\n         * We know evaluate properties that can be applied to MeshPhysicalMaterials, SpecularGlossinessMaterials and GemMaterialParameters\r\n         */\r\n\r\n        const standardProperties: THREE.MeshPhysicalMaterialParameters | SpecularGlossinessMaterialParameters | GemMaterialParameters = basicProperties;\r\n\r\n        if(materialData.shading !== undefined)\r\n            standardProperties.flatShading = materialData.shading !== 'smooth';\r\n\r\n        if (materialData.bumpMap !== undefined) {\r\n            standardProperties.bumpMap = this.createTexture(materialData.bumpMap);\r\n            mapCount++;\r\n        }\r\n\r\n        standardProperties.bumpScale = materialData.bumpScale;\r\n\r\n        if(materialData.emissiveness !== undefined) \r\n            standardProperties.emissive = this._renderingEngine.createThreeJsColor(materialData.emissiveness);\r\n\r\n        if (materialData.emissiveMap !== undefined) {\r\n            standardProperties.emissiveMap = this.createTexture(materialData.emissiveMap);\r\n            standardProperties.emissiveMap.encoding = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n\r\n        standardProperties.envMap = this._envMap;\r\n        standardProperties.emissiveIntensity = this._envMapIntensity;\r\n\r\n        if (materialData.normalMap !== undefined) {\r\n            standardProperties.normalMap = this.createTexture(materialData.normalMap);\r\n            mapCount++;\r\n        }\r\n\r\n        if(materialData.normalScale !== undefined)\r\n            standardProperties.normalScale = new THREE.Vector2(materialData.normalScale, -materialData.normalScale);\r\n\r\n\r\n        /**\r\n         * \r\n         * Fourth exit, the specular-glossiness material\r\n         * \r\n         */\r\n        if (materialData instanceof MaterialSpecularGlossinessData) {\r\n            const specularGlossinessProperties: SpecularGlossinessMaterialParameters = standardProperties;\r\n\r\n            specularGlossinessProperties.specular = this._renderingEngine.createThreeJsColor(materialData.specular);\r\n            specularGlossinessProperties.glossiness = materialData.glossiness;\r\n\r\n            if (materialData.specularGlossinessMap !== undefined) {\r\n                specularGlossinessProperties.specularMap = this.createTexture(materialData.specularGlossinessMap);\r\n                specularGlossinessProperties.specularMap.encoding = THREE.sRGBEncoding;\r\n                specularGlossinessProperties.glossinessMap = specularGlossinessProperties.specularMap;\r\n                mapCount++;\r\n            } else {\r\n                if (materialData.specularMap !== undefined) {\r\n                    specularGlossinessProperties.specularMap = this.createTexture(materialData.specularMap);\r\n                    specularGlossinessProperties.specularMap.encoding = THREE.sRGBEncoding;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.glossinessMap !== undefined) {\r\n                    specularGlossinessProperties.glossinessMap = this.createTexture(materialData.glossinessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n\r\n            return { properties: specularGlossinessProperties, mapCount };\r\n        }\r\n        \r\n        /**\r\n         * \r\n         * Fourth exit, the gem material\r\n         * \r\n         */\r\n         if (materialData instanceof MaterialGemData) {\r\n            const gemProperties: GemMaterialParameters = standardProperties;\r\n\r\n            gemProperties.refractionIndex = materialData.refractionIndex;\r\n\r\n            if (materialData.impurityMap !== undefined) {\r\n                gemProperties.impurityMap = this.createTexture(materialData.impurityMap);\r\n                mapCount++;\r\n            }\r\n\r\n            gemProperties.impurityScale = materialData.impurityScale;\r\n\r\n            if (materialData.colorTransferBegin !== undefined) {\r\n                gemProperties.colorTransferBegin = this._renderingEngine.createThreeJsColor(materialData.colorTransferBegin);\r\n            }\r\n\r\n            if (materialData.colorTransferEnd !== undefined) {\r\n                gemProperties.colorTransferEnd = this._renderingEngine.createThreeJsColor(materialData.colorTransferEnd);\r\n            }\r\n\r\n            gemProperties.center = new THREE.Vector3(materialData.center[0], materialData.center[1], materialData.center[2]);\r\n\r\n            gemProperties.tracingDepth = materialData.tracingDepth;\r\n\r\n            gemProperties.radius = materialData.radius;\r\n\r\n            gemProperties.sphericalNormalMap = <THREE.CubeTexture><any>materialData.sphericalNormalMap;\r\n\r\n            gemProperties.gamma = materialData.gamma;\r\n\r\n            gemProperties.contrast = materialData.contrast;\r\n\r\n            gemProperties.brightness = materialData.brightness;\r\n\r\n            gemProperties.dispersion = materialData.dispersion;\r\n\r\n            gemProperties.tracingOpacity = materialData.tracingOpacity;\r\n\r\n            gemProperties.roughness = 0;\r\n            gemProperties.metalness = 1;\r\n            \r\n            gemProperties.transparent = true;\r\n            gemProperties.opacity = 1.0;\r\n\r\n            gemProperties.side = THREE.FrontSide;\r\n\r\n            return { properties: gemProperties, mapCount };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         * the final exit, the MeshPhysicalMaterial\r\n         * \r\n         */\r\n        if (materialData instanceof MaterialStandardData) {\r\n            const meshPhysicalProperties: THREE.MeshPhysicalMaterialParameters = standardProperties;\r\n            \r\n            meshPhysicalProperties.clearcoat = materialData.clearcoat;\r\n\r\n            if (materialData.clearcoatMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatMap = this.createTexture(materialData.clearcoatMap);\r\n                mapCount++;\r\n            }\r\n\r\n            if (materialData.clearcoatNormalMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatNormalMap = this.createTexture(materialData.clearcoatNormalMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.clearcoatRoughness = materialData.clearcoatRoughness;\r\n\r\n            if (materialData.clearcoatRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatRoughnessMap = this.createTexture(materialData.clearcoatRoughnessMap);\r\n                mapCount++;\r\n            }\r\n\r\n            if (materialData.displacementMap !== undefined) {\r\n                meshPhysicalProperties.displacementMap = this.createTexture(materialData.displacementMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.displacementScale = materialData.displacementScale;\r\n\r\n            meshPhysicalProperties.displacementBias = materialData.displacementBias;\r\n\r\n            meshPhysicalProperties.ior = materialData.ior;\r\n\r\n            meshPhysicalProperties.transmission = materialData.transmission;\r\n\r\n            if (materialData.transmissionMap !== undefined) {\r\n                meshPhysicalProperties.transmissionMap = this.createTexture(materialData.transmissionMap);\r\n                mapCount++;\r\n            }\r\n\r\n            (<THREE.MeshPhysicalMaterial>meshPhysicalProperties).thickness = materialData.thickness;\r\n\r\n            if (materialData.thicknessMap !== undefined) {\r\n                (<THREE.MeshPhysicalMaterial>meshPhysicalProperties).thicknessMap = this.createTexture(materialData.thicknessMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.attenuationDistance = materialData.attenuationDistance;\r\n            meshPhysicalProperties.attenuationColor = this._renderingEngine.createThreeJsColor(materialData.attenuationColor);\r\n\r\n            meshPhysicalProperties.sheen = materialData.sheen;\r\n            meshPhysicalProperties.sheenColor = this._renderingEngine.createThreeJsColor(materialData.sheenColor);\r\n            meshPhysicalProperties.sheenRoughness = materialData.sheenRoughness;\r\n\r\n            if (materialData.sheenColorMap !== undefined) {\r\n                (<THREE.MeshPhysicalMaterial>meshPhysicalProperties).sheenColorMap = this.createTexture(materialData.sheenColorMap);\r\n                mapCount++;\r\n            }\r\n\r\n            if (materialData.sheenRoughnessMap !== undefined) {\r\n                (<THREE.MeshPhysicalMaterial>meshPhysicalProperties).sheenRoughnessMap = this.createTexture(materialData.sheenRoughnessMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.specularIntensity = materialData.specularIntensity;\r\n\r\n            if (materialData.specularIntensityMap !== undefined) {\r\n                meshPhysicalProperties.specularIntensityMap = this.createTexture(materialData.specularIntensityMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.specularColor = this._renderingEngine.createThreeJsColor(materialData.specularColor);\r\n\r\n            if (materialData.specularColorMap !== undefined) {\r\n                meshPhysicalProperties.specularColorMap = this.createTexture(materialData.specularColorMap);\r\n                mapCount++;\r\n            }\r\n\r\n            meshPhysicalProperties.metalness = materialData.metalness;\r\n            meshPhysicalProperties.roughness = materialData.roughness;\r\n\r\n            if (materialData.metalnessRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessRoughnessMap);\r\n                meshPhysicalProperties.roughnessMap = meshPhysicalProperties.metalnessMap;\r\n                mapCount++;\r\n            } else {\r\n                if (materialData.metalnessMap !== undefined) {\r\n                    meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessMap);\r\n                    mapCount++;\r\n                }\r\n                if (materialData.roughnessMap !== undefined) {\r\n                    meshPhysicalProperties.roughnessMap = this.createTexture(materialData.roughnessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n            return { properties: meshPhysicalProperties, mapCount };\r\n        }\r\n\r\n        // we should never get here\r\n        throw new ShapeDiverViewerDataProcessingError(`MaterialLoader.getMaterialProperties: No proper material properties were found.`);\r\n    }\r\n\r\n    public createMaterial(\r\n        type: MATERIAL_TYPE, \r\n        incomingData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | GeometryData,\r\n        materialData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | null, \r\n        materialSettings?: MaterialSettings\r\n        ) \r\n    {\r\n        let {properties, mapCount} = this.getMaterialProperties(materialData, type, materialSettings);\r\n        this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n\r\n        let material: THREE.PointsMaterial | THREE.LineBasicMaterial | THREE.MeshBasicMaterial | THREE.MeshPhysicalMaterial | SpecularGlossinessMaterial | GemMaterial | THREE.ShadowMaterial;\r\n        if(type === MATERIAL_TYPE.POINT) {\r\n            material = new THREE.PointsMaterial(Object.assign(properties, { size: this._pointSize }));\r\n        } else if(type === MATERIAL_TYPE.LINE) {\r\n            material = new THREE.LineBasicMaterial(properties);\r\n        } else {\r\n            if (materialData instanceof MaterialUnlitData) {\r\n                material = new THREE.MeshBasicMaterial(properties);\r\n            } else {\r\n                if(materialData instanceof MaterialShadowData) {\r\n                    material = new THREE.ShadowMaterial({ opacity: properties.opacity, color: properties.color });\r\n                } else if (materialData instanceof MaterialSpecularGlossinessData) {\r\n                    material = new SpecularGlossinessMaterial(properties);\r\n                } else if (materialData instanceof MaterialGemData) {\r\n                    material = new GemMaterial(properties);\r\n                } else {\r\n                    material = new THREE.MeshPhysicalMaterial(properties);\r\n                }\r\n                const before = material.onBeforeCompile;\r\n                material.onBeforeCompile = (shader: THREE.Shader, renderer: THREE.WebGLRenderer) => {\r\n                    before(shader, renderer);\r\n                    shader.uniforms.lightSizeUV = { value: this._lightSizeUV };\r\n                    shader.uniforms.blending = { value: this._blending };\r\n                    shader.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n                    material.userData.shader = shader;\r\n                };\r\n\r\n                if(material instanceof SpecularGlossinessMaterial || material instanceof THREE.MeshPhysicalMaterial) {\r\n                    material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n    \r\n                    if (materialSettings && materialSettings.useVertexTangents) material.normalScale.y *= - 1;\r\n                    if (materialSettings && materialSettings.useVertexTangents && material instanceof THREE.MeshPhysicalMaterial) material.clearcoatNormalScale.y *= - 1;\r\n                    if (materialSettings && materialSettings.useFlatShading) material.flatShading = true;\r\n                }\r\n            }\r\n        }\r\n            \r\n        if (materialSettings && materialSettings.useVertexColors) material.vertexColors = true;\r\n\r\n        if (materialData instanceof MaterialStandardData || materialData instanceof MaterialGemData || materialData instanceof MaterialSpecularGlossinessData || materialData instanceof MaterialUnlitData) {\r\n            if(materialData.envMap !== undefined) {\r\n                const envMapInput = (<MaterialStandardData | MaterialGemData | MaterialSpecularGlossinessData | MaterialUnlitData>materialData).envMap;\r\n                if (envMapInput !== undefined) {\r\n                    this._renderingEngine.environmentMapLoader.loadEnvMap(envMapInput).then(envMapResult => {\r\n                        if(material instanceof THREE.MeshBasicMaterial && this._renderingEngine.environmentMapForUnlitMaterials === false) return;\r\n\r\n                        (<THREE.MeshBasicMaterial | SpecularGlossinessMaterial | GemMaterial | THREE.MeshPhysicalMaterial>material).envMap = envMapResult.map;\r\n\r\n                        const envMapType = (<THREE.MeshBasicMaterial | SpecularGlossinessMaterial | GemMaterial | THREE.MeshPhysicalMaterial>material).envMap instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                        for(let d in material.defines) {\r\n                            if(d.startsWith('ENVMAP_TYPE_'))\r\n                                delete material.defines[d];\r\n                        }\r\n                        if(material.defines)\r\n                            material.defines['ENVMAP_TYPE_'+envMapType.toUpperCase()] = '';\r\n\r\n                        material.needsUpdate = true;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if(materialData) \r\n            materialData.threeJsObject[this._renderingEngine.id] = material;\r\n\r\n        material.needsUpdate = true;\r\n        material.userData = {\r\n            SDid: incomingData.id,\r\n            SDversion: incomingData.version\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Create a material object with the provided material data.\r\n     * \r\n     * @param material the material data\r\n     * @returns the material object\r\n     */\r\n    public load(\r\n        incomingData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | GeometryData,\r\n        materialSettings?: MaterialSettings\r\n    ): THREE.Material {\r\n        let materialData: IMaterialAbstractData | MaterialUnlitData | MaterialSpecularGlossinessData | MaterialStandardData | MaterialGemData | null = null;\r\n        if(!(incomingData instanceof GeometryData))\r\n            materialData = incomingData;\r\n\r\n        // evaluate which type of material properties we are constructing\r\n        let type: MATERIAL_TYPE;\r\n        if (materialSettings && materialSettings.mode === 0) {\r\n            type = MATERIAL_TYPE.POINT;\r\n        } else if (materialSettings && (materialSettings.mode === 1 || materialSettings.mode === 2 || materialSettings.mode === 3)) {\r\n            type = MATERIAL_TYPE.LINE;\r\n        } else {\r\n            type = MATERIAL_TYPE.MESH;\r\n        }\r\n\r\n        if(!materialData) {            \r\n            // evaluate which type of material properties we are constructing\r\n            if (materialSettings && materialSettings.mode === 0) {\r\n                if(this._defaultPointsMaterial) return this._defaultPointsMaterial;\r\n            } else if (materialSettings && (materialSettings.mode === 1 || materialSettings.mode === 2 || materialSettings.mode === 3)) {\r\n                if(this._defaultLineMaterial) return this._defaultLineMaterial;\r\n            } else {\r\n                if(this._defaultMaterial) return this._defaultMaterial;\r\n            }\r\n\r\n            const material = this.createMaterial(type, incomingData, materialData, materialSettings);\r\n            if (type === MATERIAL_TYPE.POINT) {\r\n                this._defaultPointsMaterial = <THREE.PointsMaterial>material;\r\n            } else if (type === MATERIAL_TYPE.LINE) {\r\n                this._defaultLineMaterial = <THREE.LineBasicMaterial>material;\r\n            } else {\r\n                this._defaultMaterial = <THREE.MeshPhysicalMaterial>material;\r\n            }\r\n\r\n            this._materialCache[type + '_' + type] = {\r\n                material,\r\n                materialData,\r\n                materialSettings\r\n            };\r\n\r\n            return material;\r\n        }\r\n\r\n        if(this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type]) \r\n            return this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material;\r\n\r\n        const material = this.createMaterial(type, incomingData, materialData, materialSettings);\r\n        \r\n        if(this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type]) {\r\n            this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material.copy(material)\r\n            return this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type].material;\r\n        }\r\n\r\n        this._materialCache[incomingData.id + '_' + incomingData.version + '_' + type] = {\r\n            material,\r\n            materialData,\r\n            materialSettings\r\n        };\r\n\r\n        return material;\r\n    }\r\n\r\n    public updateMaterials(): void {\r\n        for(let m in this._materialCache)\r\n            this._materialCache[m].material.needsUpdate = true;\r\n    }\r\n\r\n    public updateEnvironmentMapRotation(quaternion: quat) {\r\n        this._environmentMapRotationMatrix = new THREE.Matrix4().fromArray(mat4.fromQuat(mat4.create(), quaternion)).transpose();\r\n        for(let m in this._materialCache) \r\n            if(this._materialCache[m].material.userData.shader) {\r\n                this._materialCache[m].material.userData.shader.uniforms.envMapRotation.value = this._environmentMapRotationMatrix;\r\n            }\r\n\r\n        // set the new uniform value as the default if the environment is recomputed\r\n        THREE.ShaderLib.backgroundCube.uniforms.envMapRotation = { value: this._environmentMapRotationMatrix };\r\n\r\n        // the background cube is its own mesh that lives somewhere within three.js\r\n        // therefore our way to change the uniform is to go through the renderer list and set the uniforms there\r\n        const list = this._renderingEngine.renderer.renderLists.get(this._renderingEngine.scene, 0);\r\n        list.opaque.forEach(element => (<any>element.material).uniforms && (<any>element.material).uniforms.envMapRotation && ((<any>element.material).uniforms.envMapRotation = { value: this._environmentMapRotationMatrix }) )\r\n    }\r\n\r\n    public updateSoftShadow(lightSizeUV: number, blending: number) {\r\n        this._lightSizeUV = lightSizeUV;\r\n        this._blending = blending;\r\n        for(let m in this._materialCache) {\r\n            if(this._materialCache[m].material.userData.shader) {\r\n                this._materialCache[m].material.userData.shader.uniforms.lightSizeUV.value = lightSizeUV;\r\n                this._materialCache[m].material.userData.shader.uniforms.blending.value = blending;\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (7)\r\n\r\n    // #region Private Methods (1)\r\n\r\n    private createTexture(map: IMapData): THREE.Texture {\r\n        const texture = new THREE.Texture(map.image);\r\n        texture.format = THREE.RGBAFormat;\r\n        texture.minFilter = (() => {\r\n            switch (map.minFilter) {\r\n                case TEXTURE_FILTERING.NEAREST:\r\n                    return THREE.NearestFilter;\r\n                case TEXTURE_FILTERING.NEAREST_MIPMAP_NEAREST:\r\n                    return THREE.NearestMipMapNearestFilter;\r\n                case TEXTURE_FILTERING.LINEAR_MIPMAP_NEAREST:\r\n                    return THREE.LinearMipMapNearestFilter;\r\n                case TEXTURE_FILTERING.NEAREST_MIPMAP_LINEAR:\r\n                    return THREE.NearestMipMapLinearFilter;\r\n                case TEXTURE_FILTERING.LINEAR:\r\n                    return THREE.LinearFilter\r\n                case TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR:\r\n                default:\r\n                    return THREE.LinearMipMapLinearFilter;\r\n            }\r\n        })();\r\n        texture.magFilter = (() => {\r\n            switch (map.magFilter) {\r\n                case TEXTURE_FILTERING.NEAREST:\r\n                    return THREE.NearestFilter;\r\n                case TEXTURE_FILTERING.LINEAR:\r\n                default:\r\n                    return THREE.LinearFilter\r\n            }\r\n        })();\r\n        texture.wrapS = (() => {\r\n            switch (map.wrapS) {\r\n                case TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                    return THREE.ClampToEdgeWrapping;\r\n                case TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                    return THREE.MirroredRepeatWrapping;\r\n                case TEXTURE_WRAPPING.REPEAT:\r\n                default:\r\n                    return THREE.RepeatWrapping\r\n            }\r\n        })();\r\n        texture.wrapT = (() => {\r\n            switch (map.wrapT) {\r\n                case TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                    return THREE.ClampToEdgeWrapping;\r\n                case TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                    return THREE.MirroredRepeatWrapping;\r\n                case TEXTURE_WRAPPING.REPEAT:\r\n                default:\r\n                    return THREE.RepeatWrapping\r\n            }\r\n        })();\r\n\r\n        texture.center = new THREE.Vector2(map.center[0], map.center[1]);\r\n        texture.offset = new THREE.Vector2(map.offset[0], map.offset[1]);\r\n        texture.repeat = new THREE.Vector2(map.repeat[0], map.repeat[1]);\r\n        texture.rotation = map.rotation;\r\n\r\n        texture.flipY = map.flipY;\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n\r\n    public get maxMapCount(): number {\r\n        return this._maxMapCount;\r\n    }\r\n    \r\n    public set maxMapCount(value: number) {\r\n        this._maxMapCount = value;\r\n    }\r\n\r\n    public get textureEncoding(): THREE.TextureEncoding {\r\n        return this._textureEncoding;\r\n    }\r\n    \r\n    public set textureEncoding(value: THREE.TextureEncoding) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n\r\n    // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"2a74bf7f8f313ac95075d2635dc22af1","cacheData":{"env":{}}}