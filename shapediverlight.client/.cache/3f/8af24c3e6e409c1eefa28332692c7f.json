{"id":"node_modules/@shapediver/viewer.utils.mime-type/dist/index.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.utils.mime-type\\dist\\index.js.map","includedInParent":true,"mtime":1706542084363},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.utils.mime-type\\src\\index.ts","includedInParent":true,"mtime":1706542084741},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.utils.mime-type\\package.json","includedInParent":true,"mtime":1706542083868}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.extendMimeTypes = exports.mapMimeTypeToFileEndings = exports.guessMimeTypeFromFilename = exports.extensionToMimeTypeMapping = void 0;\r\nexports.extensionToMimeTypeMapping = {\r\n    svg: ['image/svg+xml'],\r\n    svgz: ['image/svg+xml'],\r\n    jpg: ['image/jpeg'],\r\n    jpeg: ['image/jpeg'],\r\n    png: ['image/png'],\r\n    gif: ['image/gif'],\r\n    bmp: ['image/bmp'],\r\n    tif: ['image/tif'],\r\n    tiff: ['image/tiff'],\r\n    gltf: ['gltf+json', 'model/gltf-binary'],\r\n    glb: ['application/octet-stream', 'model/gltf-binary'],\r\n    bin: ['application/octet-stream', 'application/gltf-buffer'],\r\n    '3dm': ['model/vnd.3dm', 'application/3dm', 'x-world/x-3dmf'],\r\n    '3ds': ['application/x-3ds', 'image/x-3ds', 'application/3ds'],\r\n    fbx: ['application/fbx'],\r\n    dxf: ['application/dxf', 'application/x-autocad', 'application/x-dxf', 'drawing/x-dxf', 'image/vnd.dxf', 'image/x-autocad', 'image/x-dxf', 'zz-application/zz-winassoc-dxf'],\r\n    dwg: ['application/dwg'],\r\n    pdf: ['application/pdf'],\r\n    '3mf': ['model/3mf'],\r\n    stl: ['model/stl', 'application/sla'],\r\n    amf: ['application/amf'],\r\n    ai: ['application/ai'],\r\n    dgn: ['application/dgn'],\r\n    ply: ['application/ply'],\r\n    ps: ['application/postscript'],\r\n    eps: ['application/postscript'],\r\n    skp: ['application/skp'],\r\n    slc: ['application/slc'],\r\n    sldprt: ['application/sldprt'],\r\n    sldasm: ['application/sldasm'],\r\n    stp: ['application/step'],\r\n    step: ['application/step'],\r\n    vda: ['application/vda'],\r\n    gdf: ['application/gdf'],\r\n    vrml: ['model/vrml', 'model/x3d-vrml'],\r\n    wrl: ['model/vrml', 'model/x3d-vrml'],\r\n    vi: ['model/vrml', 'model/x3d-vrml'],\r\n    igs: ['model/iges', 'application/iges'],\r\n    iges: ['model/iges', 'application/iges'],\r\n    obj: ['model/obj', 'application/wavefront-obj'],\r\n    off: ['application/off'],\r\n    txt: ['text/plain'],\r\n    mtl: ['text/plain'],\r\n    g: ['text/plain'],\r\n    gcode: ['text/plain'],\r\n    glsl: ['text/plain'],\r\n    csv: ['text/csv', 'application/vnd.ms-excel'],\r\n    xls: ['application/vnd.ms-excel'],\r\n    xlsx: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\r\n    xml: ['application/xml', 'text/xml'],\r\n    json: ['application/json'],\r\n    ifc: ['application/x-step'],\r\n    ifcxml: ['application/xml'],\r\n    ifczip: ['application/zip'],\r\n    sdtf: ['model/vnd.sdtf'],\r\n    sddtf: ['model/vnd.sdtf'],\r\n    hdr: ['image/vnd.radiance']\r\n};\r\n/**\r\n * Try to guess mime types from a file name\r\n * @param {string} filename\r\n * @return {string[]} guessed mime type, empty array in case none could be guessed\r\n */\r\nconst guessMimeTypeFromFilename = (filename) => {\r\n    const parts = filename.split('.');\r\n    if (!(parts.length > 0))\r\n        return [];\r\n    const extension = parts[parts.length - 1];\r\n    const supportedExtensions = Object.keys(exports.extensionToMimeTypeMapping);\r\n    if (!supportedExtensions.includes(extension))\r\n        return [];\r\n    return exports.extensionToMimeTypeMapping[extension];\r\n};\r\nexports.guessMimeTypeFromFilename = guessMimeTypeFromFilename;\r\n/**\r\n * Returns the corresponding file endings for each mime type.\r\n * @param {string[]} mimeTypes\r\n * @return {string[]}\r\n */\r\nconst mapMimeTypeToFileEndings = (mimeTypes) => {\r\n    const fileEndings = [];\r\n    for (let i = 0; i < mimeTypes.length; i++) {\r\n        const fileEnding = Object.keys(exports.extensionToMimeTypeMapping).find(key => exports.extensionToMimeTypeMapping[key].includes(mimeTypes[i]));\r\n        if (fileEnding)\r\n            fileEndings.push('.' + fileEnding);\r\n    }\r\n    return fileEndings;\r\n};\r\nexports.mapMimeTypeToFileEndings = mapMimeTypeToFileEndings;\r\n/**\r\n * Returns an extended array of mime types.\r\n * The provided mime types are are mapped to file endings and the corresponding mime types are added.\r\n * The types are filtered to only contain unique values.\r\n *\r\n * @param {string[]} mimeTypes\r\n * @return {string[]}\r\n */\r\nconst extendMimeTypes = (mimeTypes) => {\r\n    let types = mimeTypes;\r\n    // get all endings that are possible for this type\r\n    const endings = (0, exports.mapMimeTypeToFileEndings)(types);\r\n    // get all mimeTypes that are possible for these endings\r\n    endings.forEach((e) => types = types.concat((0, exports.guessMimeTypeFromFilename)(e)));\r\n    types = types.filter(function (item, pos) {\r\n        return types.indexOf(item) == pos;\r\n    });\r\n    return types;\r\n};\r\nexports.extendMimeTypes = extendMimeTypes;\r\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export const extensionToMimeTypeMapping: {\r\n    [key: string]: string[]\r\n} = {\r\n    svg: ['image/svg+xml'],\r\n    svgz: ['image/svg+xml'],\r\n    jpg: ['image/jpeg'],\r\n    jpeg: ['image/jpeg'],\r\n    png: ['image/png'],\r\n    gif: ['image/gif'],\r\n    bmp: ['image/bmp'],\r\n    tif: ['image/tif'],\r\n    tiff: ['image/tiff'],\r\n    gltf: ['gltf+json', 'model/gltf-binary'],\r\n    glb: ['application/octet-stream', 'model/gltf-binary'],\r\n    bin: ['application/octet-stream', 'application/gltf-buffer'],\r\n    '3dm': ['model/vnd.3dm', 'application/3dm', 'x-world/x-3dmf'],\r\n    '3ds': ['application/x-3ds', 'image/x-3ds', 'application/3ds'],\r\n    fbx: ['application/fbx'],\r\n    dxf: ['application/dxf', 'application/x-autocad', 'application/x-dxf', 'drawing/x-dxf', 'image/vnd.dxf', 'image/x-autocad', 'image/x-dxf', 'zz-application/zz-winassoc-dxf'],\r\n    dwg: ['application/dwg'],\r\n    pdf: ['application/pdf'],\r\n    '3mf': ['model/3mf'],\r\n    stl: ['model/stl', 'application/sla'],\r\n    amf: ['application/amf'],\r\n    ai: ['application/ai'],\r\n    dgn: ['application/dgn'],\r\n    ply: ['application/ply'],\r\n    ps: ['application/postscript'],\r\n    eps: ['application/postscript'],\r\n    skp: ['application/skp'],\r\n    slc: ['application/slc'],\r\n    sldprt: ['application/sldprt'],\r\n    sldasm: ['application/sldasm'],\r\n    stp: ['application/step'],\r\n    step: ['application/step'],\r\n    vda: ['application/vda'],\r\n    gdf: ['application/gdf'],\r\n    vrml: ['model/vrml', 'model/x3d-vrml'],\r\n    wrl: ['model/vrml', 'model/x3d-vrml'],\r\n    vi: ['model/vrml', 'model/x3d-vrml'],\r\n    igs: ['model/iges', 'application/iges'],\r\n    iges: ['model/iges', 'application/iges'],\r\n    obj: ['model/obj', 'application/wavefront-obj'],\r\n    off: ['application/off'],\r\n    txt: ['text/plain'],\r\n    mtl: ['text/plain'],\r\n    g: ['text/plain'],\r\n    gcode: ['text/plain'],\r\n    glsl: ['text/plain'],\r\n    csv: ['text/csv', 'application/vnd.ms-excel'],\r\n    xls: ['application/vnd.ms-excel'],\r\n    xlsx: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\r\n    xml: ['application/xml', 'text/xml'],\r\n    json: ['application/json'],\r\n    ifc: ['application/x-step'],\r\n    ifcxml: ['application/xml'],\r\n    ifczip: ['application/zip'],\r\n    sdtf: ['model/vnd.sdtf'],\r\n    sddtf: ['model/vnd.sdtf'],\r\n    hdr: ['image/vnd.radiance']\r\n};\r\n\r\n/**\r\n * Try to guess mime types from a file name\r\n * @param {string} filename\r\n * @return {string[]} guessed mime type, empty array in case none could be guessed\r\n */\r\nexport const guessMimeTypeFromFilename = (filename: string): string[] => {\r\n    const parts = filename.split('.');\r\n\r\n    if (!(parts.length > 0)) return [];\r\n\r\n    const extension = parts[parts.length - 1];\r\n    const supportedExtensions = Object.keys(extensionToMimeTypeMapping);\r\n\r\n    if (!supportedExtensions.includes(extension)) return [];\r\n\r\n    return extensionToMimeTypeMapping[(extension as keyof typeof extensionToMimeTypeMapping)];\r\n}\r\n\r\n/**\r\n * Returns the corresponding file endings for each mime type.\r\n * @param {string[]} mimeTypes\r\n * @return {string[]}\r\n */\r\nexport const mapMimeTypeToFileEndings = (mimeTypes: string[]): string[] => {\r\n    const fileEndings = [];\r\n    for (let i = 0; i < mimeTypes.length; i++) {\r\n        const fileEnding = Object.keys(extensionToMimeTypeMapping).find(key => extensionToMimeTypeMapping[key].includes(mimeTypes[i]));\r\n        if (fileEnding) fileEndings.push('.' + fileEnding)\r\n    }\r\n    return fileEndings;\r\n}\r\n\r\n\r\n/**\r\n * Returns an extended array of mime types.\r\n * The provided mime types are are mapped to file endings and the corresponding mime types are added.\r\n * The types are filtered to only contain unique values.\r\n * \r\n * @param {string[]} mimeTypes\r\n * @return {string[]}\r\n */\r\nexport const extendMimeTypes = (mimeTypes: string[]): string[] => {\r\n    let types = mimeTypes;\r\n    // get all endings that are possible for this type\r\n    const endings = mapMimeTypeToFileEndings(types);\r\n    // get all mimeTypes that are possible for these endings\r\n    endings.forEach((e: string) => types = types.concat(guessMimeTypeFromFilename(e)));\r\n\r\n    types = types.filter(function (item, pos) {\r\n        return types.indexOf(item) == pos;\r\n    })\r\n    return types;\r\n}"]}},"error":null,"hash":"44cf10d5d168f666fbf7be7d4415027d","cacheData":{"env":{}}}