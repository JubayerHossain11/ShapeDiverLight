{"id":"node_modules/@shapediver/viewer.session-engine.session-engine/dist/implementation/SessionTreeNode.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionTreeNode.js.map","includedInParent":true,"mtime":1706542086539},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\src\\implementation\\SessionTreeNode.ts","includedInParent":true,"mtime":1706542086905},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\package.json","includedInParent":true,"mtime":1706542085742},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":10,"column":42,"index":688},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionTreeNode.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _SessionTreeNode_sessionNode;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SessionTreeNode = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nclass SessionTreeNode extends viewer_shared_node_tree_1.TreeNode {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Special scene graph node for session data. Only to be created internally.\r\n     *\r\n     * @param name the name of the node\r\n     * @param parent the parent of this node\r\n     * @param data the array of data\r\n     * @param transformation the array of transformations\r\n     */\r\n    constructor(name, parent, data, transformations) {\r\n        super(name, parent, data, transformations);\r\n        // #region Properties (1)\r\n        _SessionTreeNode_sessionNode.set(this, true);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (1)\r\n    get sessionNode() {\r\n        return __classPrivateFieldGet(this, _SessionTreeNode_sessionNode, \"f\");\r\n    }\r\n}\r\nexports.SessionTreeNode = SessionTreeNode;\r\n_SessionTreeNode_sessionNode = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"SessionTreeNode.js","sourceRoot":"","sources":["../../src/implementation/SessionTreeNode.ts"],"names":[],"mappings":";;;;;;;;;AACA,iFAAyG;AAGzG,MAAa,eAAgB,SAAQ,kCAAQ;IAK3C,4BAA4B;IAE5B,2BAA2B;IAE3B;;;;;;;OAOG;IACH,YACE,IAAa,EACb,MAAkB,EAClB,IAAsB,EACtB,eAAmC;QAEnC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QAtB7C,yBAAyB;QAEzB,uCAAiC,IAAI,EAAC;IAqBtC,CAAC;IAED,8BAA8B;IAE9B,+BAA+B;IAE/B,IAAW,WAAW;QACpB,OAAO,uBAAA,IAAI,oCAAa,CAAC;IAC3B,CAAC;CAIF;AApCD,0CAoCC","sourcesContent":["import { mat4 } from 'gl-matrix'\r\nimport { ITransformation, ITreeNode, ITreeNodeData, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { ISessionTreeNode } from '../interfaces/ISessionTreeNode';\r\n\r\nexport class SessionTreeNode extends TreeNode implements ISessionTreeNode {\r\n  // #region Properties (1)\r\n\r\n  readonly #sessionNode: boolean = true;\r\n\r\n  // #endregion Properties (1)\r\n\r\n  // #region Constructors (1)\r\n\r\n  /**\r\n   * Special scene graph node for session data. Only to be created internally.\r\n   * \r\n   * @param name the name of the node \r\n   * @param parent the parent of this node\r\n   * @param data the array of data \r\n   * @param transformation the array of transformations\r\n   */\r\n  constructor(\r\n    name?: string,\r\n    parent?: ITreeNode,\r\n    data?: ITreeNodeData[],\r\n    transformations?: ITransformation[]\r\n  ) {\r\n    super(name, parent, data, transformations);\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (1)\r\n\r\n  public get sessionNode(): boolean {\r\n    return this.#sessionNode;\r\n  }\r\n\r\n  // #endregion Public Accessors (1)\r\n\r\n}"]}},"error":null,"hash":"18911196c6e713912e21c17d49325812","cacheData":{"env":{}}}