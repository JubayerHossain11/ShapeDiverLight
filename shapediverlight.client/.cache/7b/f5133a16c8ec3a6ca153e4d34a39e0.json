{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/interpolation/interpolationMethods/CameraMultipleInterpolation.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraMultipleInterpolation.js.map","includedInParent":true,"mtime":1706542086602},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\interpolation\\interpolationMethods\\CameraMultipleInterpolation.ts","includedInParent":true,"mtime":1706542087099},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":154},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraMultipleInterpolation.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraMultipleInterpolation = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass CameraMultipleInterpolation {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(_camera, _cameraControls, _path, _interpolationFunction) {\r\n        this._camera = _camera;\r\n        this._cameraControls = _cameraControls;\r\n        this._path = _path;\r\n        this._interpolationFunction = _interpolationFunction;\r\n        // #region Properties (1)\r\n        this.end = {\r\n            position: { x: [], y: [], z: [] },\r\n            target: { x: [], y: [], z: [] }\r\n        };\r\n        for (let i = 0; i < this._path.length; i++) {\r\n            this.end.position.x.push(this._path[i].position[0]);\r\n            this.end.position.y.push(this._path[i].position[1]);\r\n            this.end.position.z.push(this._path[i].position[2]);\r\n            this.end.target.x.push(this._path[i].target[0]);\r\n            this.end.target.y.push(this._path[i].target[1]);\r\n            this.end.target.z.push(this._path[i].target[2]);\r\n        }\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    onComplete(value) {\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._path[this._path.length - 1].position[0], this._path[this._path.length - 1].position[1], this._path[this._path.length - 1].position[2]), this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._path[this._path.length - 1].target[0], this._path[this._path.length - 1].target[1], this._path[this._path.length - 1].target[2]), this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n    onStop(value) {\r\n    }\r\n    onUpdate(value) {\r\n        let p = gl_matrix_1.vec3.fromValues(this._interpolationFunction(this.end.position.x, value.delta), this._interpolationFunction(this.end.position.y, value.delta), this._interpolationFunction(this.end.position.z, value.delta));\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let t = gl_matrix_1.vec3.fromValues(this._interpolationFunction(this.end.target.x, value.delta), this._interpolationFunction(this.end.target.y, value.delta), this._interpolationFunction(this.end.target.z, value.delta));\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n}\r\nexports.CameraMultipleInterpolation = CameraMultipleInterpolation;\r\n"},"sourceMaps":{"js":{"version":3,"file":"CameraMultipleInterpolation.js","sourceRoot":"","sources":["../../../../src/implementation/interpolation/interpolationMethods/CameraMultipleInterpolation.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix'\r\n\r\nimport { ICamera } from '../../../interfaces/camera/ICamera'\r\nimport { ICameraControlsUsage } from '../../../interfaces/controls/ICameraControlsUsage'\r\nimport { ICameraInterpolation } from '../../../interfaces/interpolation/ICameraInterpolation'\r\n\r\nexport class CameraMultipleInterpolation implements ICameraInterpolation {\r\n    // #region Properties (1)\r\n\r\n    public end: {\r\n        position: { x: number[], y: number[], z: number[] },\r\n        target: { x: number[], y: number[], z: number[] }\r\n    } = {\r\n        position: { x: [], y: [], z: [] },\r\n        target: { x: [], y: [], z: [] }\r\n    };\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        private readonly _camera: ICamera, \r\n        private readonly _cameraControls: ICameraControlsUsage, \r\n        private readonly _path: { position: vec3, target: vec3 }[],\r\n        private readonly _interpolationFunction: Function)\r\n    {\r\n        for(let i = 0; i < this._path.length; i++) {\r\n            this.end.position.x.push(this._path[i].position[0]);\r\n            this.end.position.y.push(this._path[i].position[1]);\r\n            this.end.position.z.push(this._path[i].position[2]);\r\n            this.end.target.x.push(this._path[i].target[0]);\r\n            this.end.target.y.push(this._path[i].target[1]);\r\n            this.end.target.z.push(this._path[i].target[2]);\r\n        }\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (3)\r\n\r\n    public onComplete(value: { delta: number }): void {\r\n        let positionOffset = vec3.subtract(vec3.create(), vec3.fromValues(this._path[this._path.length-1].position[0], this._path[this._path.length-1].position[1], this._path[this._path.length-1].position[2]), this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let targetOffset = vec3.subtract(vec3.create(), vec3.fromValues(this._path[this._path.length-1].target[0], this._path[this._path.length-1].target[1], this._path[this._path.length-1].target[2]), this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n\r\n    public onStop(value: { delta: number }): void {\r\n    }\r\n\r\n    public onUpdate(value: { delta: number }): void {\r\n        let p: vec3 = vec3.fromValues(this._interpolationFunction(this.end.position.x, value.delta), this._interpolationFunction(this.end.position.y, value.delta), this._interpolationFunction(this.end.position.z, value.delta));\r\n        let positionOffset = vec3.subtract(vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n\r\n        let t: vec3 = vec3.fromValues(this._interpolationFunction(this.end.target.x, value.delta), this._interpolationFunction(this.end.target.y, value.delta), this._interpolationFunction(this.end.target.z, value.delta));\r\n        let targetOffset = vec3.subtract(vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n\r\n    // #endregion Public Methods (3)\r\n}"]}},"error":null,"hash":"dd021646fc1f2f9a681a30df589e2c5e","cacheData":{"env":{}}}