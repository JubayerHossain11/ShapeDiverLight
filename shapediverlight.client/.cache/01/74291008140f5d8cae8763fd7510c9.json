{"id":"node_modules/@shapediver/viewer.shared.types/dist/implementation/sdtf/SDTFOverviewData.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\sdtf\\SDTFOverviewData.js.map","includedInParent":true,"mtime":1706527152407},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\src\\implementation\\sdtf\\SDTFOverviewData.ts","includedInParent":true,"mtime":1706527153575},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\package.json","includedInParent":true,"mtime":1706527150980},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":16,"column":42,"index":1280},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\sdtf\\SDTFOverviewData.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/sdk.sdtf-primitives","loc":{"line":17,"column":38,"index":1359},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\sdtf\\SDTFOverviewData.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _SDTFOverviewData_overview;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SDTFOverviewData = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst sdk_sdtf_primitives_1 = require(\"@shapediver/sdk.sdtf-primitives\");\r\nclass SDTFOverviewData extends viewer_shared_node_tree_1.AbstractTreeNodeData {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(overview, id, version) {\r\n        super(id, version);\r\n        // #region Properties (1)\r\n        _SDTFOverviewData_overview.set(this, {});\r\n        __classPrivateFieldSet(this, _SDTFOverviewData_overview, overview, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (1)\r\n    get overview() {\r\n        return __classPrivateFieldGet(this, _SDTFOverviewData_overview, \"f\");\r\n    }\r\n    // #endregion Public Accessors (1)\r\n    // #region Public Methods (1)\r\n    /**\r\n     * Clones the scene graph data.\r\n     */\r\n    clone() {\r\n        return new SDTFOverviewData(__classPrivateFieldGet(this, _SDTFOverviewData_overview, \"f\"), this.id, this.version);\r\n    }\r\n    merge(data) {\r\n        var _a;\r\n        for (let overviewKey in data.overview) {\r\n            for (let i = 0; i < data.overview[overviewKey].length; i++) {\r\n                const dataToCopy = data.overview[overviewKey][i];\r\n                const existingEntries = this.overview[overviewKey] ? this.overview[overviewKey].filter(o => o.typeHint === dataToCopy.typeHint) : [];\r\n                if (this.overview[overviewKey] && existingEntries.length > 0) {\r\n                    const entry = existingEntries[0];\r\n                    entry.count++;\r\n                    if (sdk_sdtf_primitives_1.SdtfPrimitiveTypeGuard.isStringType(dataToCopy.typeHint)) {\r\n                        entry.values = (_a = entry.values) === null || _a === void 0 ? void 0 : _a.concat(dataToCopy.values.filter((item) => entry.values.indexOf(item) < 0));\r\n                    }\r\n                    if (sdk_sdtf_primitives_1.SdtfPrimitiveTypeGuard.isNumberType(dataToCopy.typeHint)) {\r\n                        entry.min = Math.min(dataToCopy.min, entry.min);\r\n                        entry.max = Math.max(dataToCopy.max, entry.max);\r\n                    }\r\n                }\r\n                else if (this.overview[overviewKey]) {\r\n                    this.overview[overviewKey].push({\r\n                        typeHint: dataToCopy.typeHint,\r\n                        count: dataToCopy.count,\r\n                        values: dataToCopy.values,\r\n                        min: dataToCopy.min,\r\n                        max: dataToCopy.max,\r\n                    });\r\n                }\r\n                else {\r\n                    this.overview[overviewKey] = [{\r\n                            typeHint: dataToCopy.typeHint,\r\n                            count: dataToCopy.count,\r\n                            values: dataToCopy.values,\r\n                            min: dataToCopy.min,\r\n                            max: dataToCopy.max,\r\n                        }];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.SDTFOverviewData = SDTFOverviewData;\r\n_SDTFOverviewData_overview = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"SDTFOverviewData.js","sourceRoot":"","sources":["../../../src/implementation/sdtf/SDTFOverviewData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,iFAAyF;AAEzF,yEAAwE;AAExE,MAAa,gBAAiB,SAAQ,8CAAoB;IAKtD,4BAA4B;IAE5B,2BAA2B;IAE3B,YACI,QAAuB,EACvB,EAAW,EACX,OAAgB;QAEhB,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAbvB,yBAAyB;QAEzB,qCAA2B,EAAE,EAAC;QAY1B,uBAAA,IAAI,8BAAa,QAAQ,MAAA,CAAC;IAC9B,CAAC;IAED,8BAA8B;IAE9B,+BAA+B;IAE/B,IAAW,QAAQ;QACf,OAAO,uBAAA,IAAI,kCAAU,CAAC;IAC1B,CAAC;IAED,kCAAkC;IAElC,6BAA6B;IAE7B;;OAEG;IACI,KAAK;QACR,OAAO,IAAI,gBAAgB,CAAC,uBAAA,IAAI,kCAAU,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACvE,CAAC;IAEM,KAAK,CAAC,IAAuB;;QAChC,KAAK,IAAI,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBACtD,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrI,IAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzD,MAAM,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;oBACjC,KAAK,CAAC,KAAK,EAAE,CAAC;oBACd,IAAI,4CAAsB,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;wBAC1D,KAAK,CAAC,MAAM,GAAG,MAAA,KAAK,CAAC,MAAM,0CAAE,MAAM,CAAC,UAAU,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,MAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;qBAC5G;oBACD,IAAI,4CAAsB,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;wBAC9D,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAI,EAAE,KAAK,CAAC,GAAI,CAAC,CAAC;wBAClD,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAI,EAAE,KAAK,CAAC,GAAI,CAAC,CAAC;qBACjD;iBAEJ;qBAAM,IAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;oBAClC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;wBAC5B,QAAQ,EAAE,UAAU,CAAC,QAAQ;wBAC7B,KAAK,EAAE,UAAU,CAAC,KAAK;wBACvB,MAAM,EAAE,UAAU,CAAC,MAAM;wBACzB,GAAG,EAAE,UAAU,CAAC,GAAG;wBACnB,GAAG,EAAE,UAAU,CAAC,GAAG;qBACtB,CAAC,CAAA;iBACL;qBAAM;oBACH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC;4BAC1B,QAAQ,EAAE,UAAU,CAAC,QAAQ;4BAC7B,KAAK,EAAE,UAAU,CAAC,KAAK;4BACvB,MAAM,EAAE,UAAU,CAAC,MAAM;4BACzB,GAAG,EAAE,UAAU,CAAC,GAAG;4BACnB,GAAG,EAAE,UAAU,CAAC,GAAG;yBACtB,CAAC,CAAA;iBACL;aACJ;SACJ;IACL,CAAC;CAGJ;AA3ED,4CA2EC","sourcesContent":["import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree'\r\nimport { ISDTFOverview, ISDTFOverviewData } from '../../interfaces/sdtf/ISDTFOverviewData';\r\nimport { SdtfPrimitiveTypeGuard } from '@shapediver/sdk.sdtf-primitives'\r\n\r\nexport class SDTFOverviewData extends AbstractTreeNodeData implements ISDTFOverviewData {\r\n    // #region Properties (1)\r\n\r\n    #overview: ISDTFOverview = {};\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        overview: ISDTFOverview,\r\n        id?: string,\r\n        version?: string\r\n    ) {\r\n        super(id, version);\r\n        this.#overview = overview;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (1)\r\n\r\n    public get overview(): ISDTFOverview {\r\n        return this.#overview;\r\n    }\r\n\r\n    // #endregion Public Accessors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    /**\r\n     * Clones the scene graph data.\r\n     */\r\n    public clone(): ISDTFOverviewData {\r\n        return new SDTFOverviewData(this.#overview, this.id, this.version);\r\n    }\r\n\r\n    public merge(data: ISDTFOverviewData) {\r\n        for (let overviewKey in data.overview) {\r\n            for(let i = 0; i < data.overview[overviewKey].length; i++){\r\n                const dataToCopy = data.overview[overviewKey][i];\r\n                const existingEntries = this.overview[overviewKey] ? this.overview[overviewKey].filter(o => o.typeHint === dataToCopy.typeHint) : [];\r\n                if(this.overview[overviewKey] && existingEntries.length > 0) {\r\n                    const entry = existingEntries[0];\r\n                    entry.count++;\r\n                    if (SdtfPrimitiveTypeGuard.isStringType(dataToCopy.typeHint)) {\r\n                        entry.values = entry.values?.concat(dataToCopy.values!.filter((item) => entry.values!.indexOf(item) < 0))\r\n                    }\r\n                    if (SdtfPrimitiveTypeGuard.isNumberType(dataToCopy.typeHint)) {\r\n                    entry.min = Math.min(dataToCopy.min!, entry.min!);\r\n                    entry.max = Math.max(dataToCopy.max!, entry.max!);\r\n                    }\r\n\r\n                } else if(this.overview[overviewKey]) {\r\n                    this.overview[overviewKey].push({\r\n                        typeHint: dataToCopy.typeHint,\r\n                        count: dataToCopy.count,\r\n                        values: dataToCopy.values,\r\n                        min: dataToCopy.min,\r\n                        max: dataToCopy.max,\r\n                    })\r\n                } else {\r\n                    this.overview[overviewKey] = [{\r\n                        typeHint: dataToCopy.typeHint,\r\n                        count: dataToCopy.count,\r\n                        values: dataToCopy.values,\r\n                        min: dataToCopy.min,\r\n                        max: dataToCopy.max,\r\n                    }]\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}"]}},"error":null,"hash":"d7513acdc0cd1b195e98bcbfbaa86331","cacheData":{"env":{}}}