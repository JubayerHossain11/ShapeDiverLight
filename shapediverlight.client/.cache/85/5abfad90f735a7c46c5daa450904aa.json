{"id":"node_modules/@shapediver/sdk.sdtf-primitives/dist/SdtfPrimitiveTypeValidator.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeValidator.js.map","includedInParent":true,"mtime":1706527148593},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\package.json","includedInParent":true,"mtime":1706527147999},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":4,"column":32,"index":154},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeValidator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"},{"name":"decimal.js","loc":{"line":5,"column":29,"index":213},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeValidator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\decimal.js\\decimal.js"},{"name":"./SdtfPrimitiveTypeGuard","loc":{"line":6,"column":41,"index":269},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeValidator.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeGuard.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfPrimitiveTypeValidator = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nconst decimal_js_1 = require(\"decimal.js\");\nconst SdtfPrimitiveTypeGuard_1 = require(\"./SdtfPrimitiveTypeGuard\");\nconst UUIDv4_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst SINGLE_MAX = new decimal_js_1.Decimal(3.40282347E+38);\nconst SINGLE_MIN = new decimal_js_1.Decimal(-3.40282347E+38);\n/** Validates values that are of a type hint supported by this integration. */\nclass SdtfPrimitiveTypeValidator {\n    /**\n     * Validates the given component of the given type.\n     * @throws {@link SdtfError} when the given type is not supported.\n     */\n    validateComponent(typeHint, value, accessor) {\n        switch (typeHint) {\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.BOOLEAN:\n                return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isBoolean(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.CHAR:\n                return SdtfPrimitiveTypeValidator.validateCharType(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.COLOR:\n                return SdtfPrimitiveTypeValidator.validateColorType(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DATA:\n                return !!accessor && value === undefined;\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DECIMAL:\n                return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isNumber(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DOUBLE:\n                return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isNumber(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.GUID:\n                return SdtfPrimitiveTypeValidator.validateGuidType(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.IMAGE:\n                return !!accessor && value === undefined;\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT8:\n                return SdtfPrimitiveTypeValidator.validateInt8Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT16:\n                return SdtfPrimitiveTypeValidator.validateInt16Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT32:\n                return SdtfPrimitiveTypeValidator.validateInt32Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT64:\n                return SdtfPrimitiveTypeValidator.validateInt64Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.JSON:\n                return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isJson(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.SINGLE:\n                return SdtfPrimitiveTypeValidator.validateSingleType(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.STRING:\n                return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isString(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT8:\n                return SdtfPrimitiveTypeValidator.validateUint8Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT16:\n                return SdtfPrimitiveTypeValidator.validateUint16Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT32:\n                return SdtfPrimitiveTypeValidator.validateUint32Type(value);\n            case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT64:\n                return SdtfPrimitiveTypeValidator.validateUint64Type(value);\n            default:\n                (0, sdk_sdtf_core_1.sdAssertUnreachable)(typeHint);\n        }\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.CHAR` type, otherwise `false`. */\n    static validateCharType(value) {\n        return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isString(value) && value.length === 1;\n    }\n    /**\n     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.COLOR` type.\n     *\n     * NOTE:\n     * The validator excepts both color types, regular (4 parts) and legacy (3 parts). However, a\n     * legacy color is later on mapped to a regular color structure.\n     */\n    static validateColorType(value) {\n        // Validate color array\n        if ((0, sdk_sdtf_core_1.isNumberArray)(value) && value.length >= 3 && value.length <= 4)\n            return true;\n        // Legacy colors are represented by a string\n        if (typeof value !== \"string\")\n            return false;\n        const parts = value.split(\",\");\n        return (parts.length === 3 || parts.length === 4) && parts.every(p => (0, sdk_sdtf_core_1.isNumeric)(p));\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.GUID` type, otherwise `false`. */\n    static validateGuidType(value) {\n        return SdtfPrimitiveTypeGuard_1.SdtfPrimitiveTypeGuard.isString(value) && UUIDv4_REGEX.test(value);\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT8` type, otherwise `false`. */\n    static validateInt8Type(value) {\n        return (0, sdk_sdtf_core_1.isInt)(value) && value >= -128 && value <= 127;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT16` type, otherwise `false`. */\n    static validateInt16Type(value) {\n        return (0, sdk_sdtf_core_1.isInt)(value) && value >= -32768 && value <= 32767;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT32` type, otherwise `false`. */\n    static validateInt32Type(value) {\n        return (0, sdk_sdtf_core_1.isInt)(value) && value >= -2147483648 && value <= 2147483647;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.INT64` type, otherwise `false`. */\n    static validateInt64Type(value) {\n        return (0, sdk_sdtf_core_1.isInt)(value) && value >= -9223372036854775808 && value <= 9223372036854775807;\n    }\n    /**\n     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.SINGLE` type, otherwise `false`.\n     *\n     * NOTE:\n     * The validation does only a rough check if the precision does not exceed 9 digits.\n     * However, this might still lead to a loss in precision due to the nature of single-precision floating points.\n     */\n    static validateSingleType(value) {\n        if (!(0, sdk_sdtf_core_1.isNumber)(value))\n            return false;\n        const decimal = new decimal_js_1.Decimal(value);\n        return decimal.precision() <= 9 &&\n            decimal.comparedTo(SINGLE_MIN) >= 0 &&\n            decimal.comparedTo(SINGLE_MAX) <= 0;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT8` type, otherwise `false`. */\n    static validateUint8Type(value) {\n        return (0, sdk_sdtf_core_1.isUint)(value) && value <= 255;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT16` type, otherwise `false`. */\n    static validateUint16Type(value) {\n        return (0, sdk_sdtf_core_1.isUint)(value) && value <= 65535;\n    }\n    /** Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT32` type, otherwise `false`. */\n    static validateUint32Type(value) {\n        return (0, sdk_sdtf_core_1.isUint)(value) && value <= 4294967295;\n    }\n    /**\n     * Returns `true` when the given value is a valid `SdtfPrimitiveTypeHintName.UINT64` type, otherwise `false`.\n     *\n     * WARNING:\n     * Max safe integer in JavaScript is `9007199254740991`, while uint64 limit is `18446744073709551615`.\n     * Thus, numbers bigger than safe integer are automatically mapped to `Number.Infinity`.\n     */\n    static validateUint64Type(value) {\n        return (0, sdk_sdtf_core_1.isUint)(value);\n    }\n}\nexports.SdtfPrimitiveTypeValidator = SdtfPrimitiveTypeValidator;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfPrimitiveTypeValidator.js","sourceRoot":"","sources":["../src/SdtfPrimitiveTypeValidator.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"a35a9d7bf05bc27acde79e73eae28bb5","cacheData":{"env":{}}}