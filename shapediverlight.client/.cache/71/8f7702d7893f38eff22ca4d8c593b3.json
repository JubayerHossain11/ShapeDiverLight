{"id":"node_modules/@shapediver/sdk.sdtf-v1/dist/writer/SdtfWriteableComponentPostProcessor.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentPostProcessor.js.map","includedInParent":true,"mtime":1706527150644},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\package.json","includedInParent":true,"mtime":1706527149378},{"name":"./components/SdtfWriteableAsset","loc":{"line":4,"column":37,"index":168},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentPostProcessor.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\components\\SdtfWriteableAsset.js"},{"name":"./components/SdtfWriteableBuffer","loc":{"line":5,"column":38,"index":242},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentPostProcessor.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\components\\SdtfWriteableBuffer.js"},{"name":"./ISdtfWriteableComponentList","loc":{"line":6,"column":46,"index":325},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentPostProcessor.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\ISdtfWriteableComponentList.js"},{"name":"./SdtfWriteableComponentFactory","loc":{"line":7,"column":48,"index":407},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentPostProcessor.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-v1\\dist\\writer\\SdtfWriteableComponentFactory.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfWriteableComponentPostProcessor = void 0;\nconst SdtfWriteableAsset_1 = require(\"./components/SdtfWriteableAsset\");\nconst SdtfWriteableBuffer_1 = require(\"./components/SdtfWriteableBuffer\");\nconst ISdtfWriteableComponentList_1 = require(\"./ISdtfWriteableComponentList\");\nconst SdtfWriteableComponentFactory_1 = require(\"./SdtfWriteableComponentFactory\");\nclass SdtfWriteableComponentPostProcessor {\n    constructor(integrations) {\n        this.integrations = integrations;\n        this.factory = new SdtfWriteableComponentFactory_1.SdtfWriteableComponentFactory();\n    }\n    optimize(asset) {\n        // The optimization step will most likely change the given writeable objects.\n        // Without cloning, this function would consume the given asset and might make it's inner structure invalid.\n        const clonedAsset = SdtfWriteableAsset_1.SdtfWriteableAsset.clone(asset);\n        let componentList = (0, ISdtfWriteableComponentList_1.writeableComponentListFromAsset)(clonedAsset);\n        // Apply integration writers on data components\n        this.processDataComponents(componentList.attributes.flatMap(a => Object.values(a.entries)));\n        this.processDataComponents(componentList.items);\n        // Apply integration post-processor on data components\n        this.postProcessDataComponents([\n            ...componentList.attributes.flatMap(a => Object.values(a.entries)),\n            ...componentList.items,\n        ]);\n        // `processDataComponents` might create new components.\n        // Thus, we generate the component list again to include those new components as well.\n        componentList = (0, ISdtfWriteableComponentList_1.writeableComponentListFromAsset)(clonedAsset);\n        this.complementTypeHints(componentList);\n        this.removeDuplicatedTypeHints(componentList);\n        this.resolveBuffers(componentList);\n        return componentList;\n    }\n    /**\n     * Tries to find a suitable registered integration for each given component and runs the integration's writer for\n     * each individual component.\n     * @private\n     */\n    processDataComponents(components) {\n        components.forEach(component => {\n            // Get the first integration that is supporting the given type hint\n            const integration = this.integrations.find(i => { var _a, _b; return i.isTypeHintSupported((_b = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : \"\"); });\n            // Stop when no integration was found for this type hint\n            if (!integration)\n                return;\n            // Post-process single component\n            integration.getWriter(this.factory).writeComponent(component);\n        });\n    }\n    /**\n     * Tries to find a suitable registered integration for all given components and runs the integration's\n     * post-processor for all supported component (grouped).\n     * @private\n     */\n    postProcessDataComponents(components) {\n        this.integrations.forEach(integration => {\n            // Find all components that are supported by this integration\n            const supportedComponents = components.filter(component => { var _a, _b; return integration.isTypeHintSupported((_b = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : \"\"); });\n            // Stop when no components were found for this integration\n            if (supportedComponents.length === 0)\n                return;\n            // Post-process collective component\n            integration.getWriter(this.factory).postProcessComponents(supportedComponents);\n        });\n    }\n    /**\n     * Bottom-up approach to complement a missing type hint in node and chunk components.\n     * When all data items of a node are of a similar type hint, the respective type hint will be added to the node.\n     * When all nodes of a chunk are of a similar type hint, the respective type hint will be added to the chunk.\n     * @private\n     */\n    complementTypeHints(componentList) {\n        // Helper function to complement\n        const complement = (base, list) => {\n            var _a, _b;\n            // Stop if the base has already a type hint with a name assigned\n            if (((_a = base.typeHint) === null || _a === void 0 ? void 0 : _a.name) !== undefined)\n                return;\n            // Stop if the list is empty\n            if (list.length === 0)\n                return;\n            let typeHintName = (_b = list[0].typeHint) === null || _b === void 0 ? void 0 : _b.name;\n            // Stop if the type hint is undefined\n            if (typeHintName === undefined)\n                return;\n            // Set type hint and update component list.\n            if (list.every(i => { var _a; return ((_a = i.typeHint) === null || _a === void 0 ? void 0 : _a.name) === typeHintName; })) {\n                base.typeHint = this.factory.createTypeHint(typeHintName);\n                componentList.typeHints.push(base.typeHint);\n            }\n        };\n        // Check every node whether their respective data items are of similar a type hint\n        componentList.nodes.forEach(node => complement(node, node.items));\n        // Check every chunk whether their respective nodes are of similar a type hint\n        componentList.chunks.forEach(chunk => complement(chunk, chunk.nodes));\n    }\n    /**\n     * Generates a list of unique type hints for all components in the list and resets the component references accordingly.\n     * @private\n     */\n    removeDuplicatedTypeHints(componentList) {\n        const uniqueTypeHints = [];\n        // Find all different type hint names\n        componentList.typeHints.forEach(typeHint => {\n            if (!uniqueTypeHints.find(this.areTypeHintsSimilar.bind(this, typeHint)))\n                uniqueTypeHints.push(typeHint);\n        });\n        // Replace the type hint of all components with the unique ones\n        const replaceTypeHints = (component) => {\n            // Stop if no type hint or type hint already in unique-list\n            if (!component.typeHint ||\n                uniqueTypeHints.find((typeHint) => typeHint.componentId === component.typeHint.componentId))\n                return;\n            // We know that there is a unique type hint for this component, so just search for it\n            component.typeHint = uniqueTypeHints.find((typeHint) => this.areTypeHintsSimilar(typeHint, component.typeHint));\n        };\n        componentList.attributes.forEach(a => Object.values(a.entries).forEach(e => replaceTypeHints(e)));\n        componentList.chunks.forEach(c => replaceTypeHints(c));\n        componentList.items.forEach(i => replaceTypeHints(i));\n        componentList.nodes.forEach(n => replaceTypeHints(n));\n        // Update type hints in component list\n        componentList.typeHints = Object.values(uniqueTypeHints);\n    }\n    /**\n     * Helper function to compare the two given type hints.\n     * Returns true, if both type hints have the same `name` property and share the same `additionalProperties`.\n     * However, the order of additional properties is not considered.\n     * @private\n     */\n    areTypeHintsSimilar(t1, t2) {\n        var _a, _b;\n        const nAdditionalPropertiesT1 = Object.entries((_a = t1.additionalProperties) !== null && _a !== void 0 ? _a : {}), nAdditionalPropertiesT2 = Object.entries((_b = t2.additionalProperties) !== null && _b !== void 0 ? _b : {});\n        if (t1.name !== t2.name || nAdditionalPropertiesT1.length !== nAdditionalPropertiesT2.length)\n            return false;\n        for (let i = 0; i < nAdditionalPropertiesT1.length; i++) {\n            const [key, value] = nAdditionalPropertiesT1[i];\n            if (t2.additionalProperties[key] !== value)\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Merges all individual buffers by their URI.\n     * @private\n     */\n    resolveBuffers(componentList) {\n        // List that sorts buffers/bufferViews by the buffer uri\n        const bufferViewsPerUri = {};\n        // Add buffer view to list\n        componentList.bufferViews.forEach(bufferView => {\n            var _a;\n            // We are not interested in buffer views that are not linked to a buffer\n            if (!bufferView.buffer)\n                return;\n            const uri = (_a = bufferView.buffer.uri) !== null && _a !== void 0 ? _a : \"\";\n            if (!bufferViewsPerUri[uri])\n                bufferViewsPerUri[uri] = [];\n            bufferViewsPerUri[uri].push(bufferView);\n        });\n        // We want to create a new buffer per uri that contains all buffer data of our list\n        const mergedBuffers = [];\n        Object.entries(bufferViewsPerUri).forEach(([uri, bufferViews]) => {\n            const [mergedBuffer, offsets] = this.mergeBuffers(uri, bufferViews.map(bv => bv.buffer));\n            // Update buffer information in buffer view\n            bufferViews.forEach((bufferView, i) => {\n                var _a;\n                bufferView.byteOffset = offsets[i];\n                bufferView.byteLength = (_a = bufferView.buffer.data.byteLength) !== null && _a !== void 0 ? _a : 0;\n                bufferView.buffer = mergedBuffer;\n            });\n            mergedBuffers.push(mergedBuffer);\n        });\n        // Update buffers in component list\n        componentList.buffers = mergedBuffers;\n    }\n    /**\n     * Creates a new writeable buffer that holds the data of all given buffers.\n     * It returns the newly created buffer and a list of `byte offsets` corresponding to the given buffer.\n     * This allows to track down the individual buffers in the merged one.\n     * @private\n     * @returns - [ merged buffer, byte offset for each buffer ]\n     */\n    mergeBuffers(uri, buffers) {\n        const merged = new SdtfWriteableBuffer_1.SdtfWriteableBuffer();\n        merged.uri = uri;\n        // merged.additionalProperties = { ...buffers.map(b => b.additionalProperties ?? {}) } // Merge their additional properties\n        merged.additionalProperties = {};\n        // Merge additional properties\n        Object.assign(merged.additionalProperties, ...buffers.map(b => b.additionalProperties));\n        // Merge buffer data\n        const [mergedData, offsetsPerBuffer] = this.mergeBufferData(buffers);\n        merged.byteLength = mergedData.byteLength;\n        merged.data = mergedData;\n        return [merged, offsetsPerBuffer];\n    }\n    /**\n     * Creates a new writeable buffer that holds the data of all given buffers (hard copy!).\n     * It returns the newly created buffer and each buffer's `byte offset`.\n     * @private\n     * @returns - [ merged buffer, byte offset for each buffer ]\n     */\n    mergeBufferData(buffers) {\n        var _a, _b;\n        /*\n         * According to the sdTF v1 specification, when concatenating two buffers, the size of the first buffer must be\n         * of a multiple of 4. This helper function rounds the given byte size up meet that criteria.\n         */\n        const roundToNextMultipleOfFour = (value) => {\n            const diff = value % 4;\n            return (diff === 0) ? value : value + 4 - diff;\n        };\n        // The first buffer start at the beginning\n        let offsets = [0], lastBufferLength = (_b = (_a = buffers[0].data) === null || _a === void 0 ? void 0 : _a.byteLength) !== null && _b !== void 0 ? _b : 0;\n        // Calculate the offsets of each buffer\n        if (buffers.length > 0) {\n            // All buffers, except for the last one, must have a size that is a multiple of four\n            lastBufferLength = roundToNextMultipleOfFour(lastBufferLength);\n            for (let i = 1; i < buffers.length; i++) {\n                let bufferLength = 0;\n                const data = buffers[i].data;\n                if (data) {\n                    // All buffers, except for the last one, must have a size that is a multiple of four\n                    if (i === buffers.length - 1)\n                        bufferLength = data.byteLength;\n                    else\n                        bufferLength = roundToNextMultipleOfFour(data.byteLength);\n                }\n                offsets.push(offsets[i - 1] + lastBufferLength);\n                lastBufferLength = bufferLength;\n            }\n        }\n        // Create a new buffer and add the data of all the given buffers, according to the calculated offsets\n        const merged = new Uint8Array(offsets[offsets.length - 1] + lastBufferLength);\n        // Add content data to new buffer\n        buffers.forEach((buffer, i) => {\n            const data = (buffer.data) ? new Uint8Array(buffer.data) : new Uint8Array(0);\n            merged.set(data, offsets[i]);\n        });\n        return [merged, offsets];\n    }\n}\nexports.SdtfWriteableComponentPostProcessor = SdtfWriteableComponentPostProcessor;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfWriteableComponentPostProcessor.js","sourceRoot":"","sources":["../../src/writer/SdtfWriteableComponentPostProcessor.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"c058066d4f04a08ad3833dbe8b854ae6","cacheData":{"env":{}}}