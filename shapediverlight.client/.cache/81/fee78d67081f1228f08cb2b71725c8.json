{"id":"node_modules/@shapediver/viewer.rendering-engine.light-engine/dist/implementation/LightScene.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js.map","includedInParent":true,"mtime":1706527152780},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\src\\implementation\\LightScene.ts","includedInParent":true,"mtime":1706527153339},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\package.json","includedInParent":true,"mtime":1706527152450},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":4,"column":42,"index":151},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"./types/AmbientLight","loc":{"line":5,"column":31,"index":223},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\AmbientLight.js"},{"name":"./types/DirectionalLight","loc":{"line":6,"column":35,"index":284},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\DirectionalLight.js"},{"name":"./types/HemisphereLight","loc":{"line":7,"column":34,"index":348},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\HemisphereLight.js"},{"name":"./types/PointLight","loc":{"line":8,"column":29,"index":406},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\PointLight.js"},{"name":"./types/SpotLight","loc":{"line":9,"column":28,"index":458},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\LightScene.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.light-engine\\dist\\implementation\\types\\SpotLight.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LightScene = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst AmbientLight_1 = require(\"./types/AmbientLight\");\r\nconst DirectionalLight_1 = require(\"./types/DirectionalLight\");\r\nconst HemisphereLight_1 = require(\"./types/HemisphereLight\");\r\nconst PointLight_1 = require(\"./types/PointLight\");\r\nconst SpotLight_1 = require(\"./types/SpotLight\");\r\nclass LightScene {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine, properties) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._lights = {};\r\n        this._id = properties.id;\r\n        this._name = properties.name;\r\n        this._node = new viewer_shared_node_tree_1.TreeNode(properties.name || properties.id);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (5)\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get lights() {\r\n        return this._lights;\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n    get node() {\r\n        return this._node;\r\n    }\r\n    get update() {\r\n        return this._update;\r\n    }\r\n    set update(value) {\r\n        this._update = value;\r\n    }\r\n    // #endregion Public Accessors (5)\r\n    // #region Public Methods (8)\r\n    addAmbientLight(properties) {\r\n        const light = new AmbientLight_1.AmbientLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n    addDirectionalLight(properties) {\r\n        const light = new DirectionalLight_1.DirectionalLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n    addHemisphereLight(properties) {\r\n        const light = new HemisphereLight_1.HemisphereLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n    addLight(light) {\r\n        const node = new viewer_shared_node_tree_1.TreeNode(light.id);\r\n        light.parentNode = node;\r\n        node.data.push(light);\r\n        this._node.addChild(node);\r\n        this._lights[light.id] = light;\r\n        this._node.updateVersion();\r\n        if (this._update)\r\n            this._update();\r\n    }\r\n    addPointLight(properties) {\r\n        const light = new PointLight_1.PointLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n    addSpotLight(properties) {\r\n        const light = new SpotLight_1.SpotLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n    removeLight(id) {\r\n        if (!this._lights[id])\r\n            return false;\r\n        for (let i = 0; i < this._node.children.length; i++) {\r\n            const node = this._node.children[i];\r\n            if (node && node.name === id) {\r\n                this._node.removeChild(node);\r\n                break;\r\n            }\r\n        }\r\n        delete this._lights[id];\r\n        this._node.updateVersion();\r\n        if (this._update)\r\n            this._update();\r\n        return true;\r\n    }\r\n}\r\nexports.LightScene = LightScene;\r\n"},"sourceMaps":{"js":{"version":3,"file":"LightScene.js","sourceRoot":"","sources":["../../src/implementation/LightScene.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRenderingEngine } from '@shapediver/viewer.rendering-engine.rendering-engine';\r\nimport { ITreeNode, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { vec3 } from 'gl-matrix';\r\nimport { Color } from '@shapediver/viewer.shared.types';\r\n\r\nimport { ILight } from '../interface/ILight'\r\nimport { ILightScene } from '../interface/ILightScene'\r\nimport { AbstractLight } from './AbstractLight'\r\nimport { AmbientLight } from './types/AmbientLight';\r\nimport { DirectionalLight } from './types/DirectionalLight';\r\nimport { HemisphereLight } from './types/HemisphereLight';\r\nimport { PointLight } from './types/PointLight';\r\nimport { SpotLight } from './types/SpotLight';\r\n\r\nexport class LightScene implements ILightScene {\r\n    // #region Properties (5)\r\n\r\n    private readonly _id: string;\r\n    private readonly _lights: { [key: string]: ILight; } = {};\r\n    private readonly _node: ITreeNode;\r\n\r\n    private _name: string | undefined;\r\n    private _update?: () => void;\r\n\r\n    // #endregion Properties (5)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: IRenderingEngine, properties: {id: string, name?: string}) {\r\n        this._id = properties.id;\r\n        this._name = properties.name;\r\n        this._node = new TreeNode(properties.name || properties.id);\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (5)\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get lights(): { [key: string]: AbstractLight; } {\r\n        return <{ [key: string]: AbstractLight; }>this._lights\r\n    }\r\n\r\n    public get name(): string | undefined {\r\n        return this._name;\r\n    }\r\n\r\n    public set name(value: string | undefined) {\r\n        this._name = value;\r\n    }\r\n\r\n    public get node(): ITreeNode {\r\n        return this._node;\r\n    }\r\n    \r\n    public get update(): (() => void) | undefined {\r\n        return this._update;\r\n    }\r\n\r\n    public set update(value: (() => void) | undefined) {\r\n        this._update = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (5)\r\n\r\n    // #region Public Methods (8)\r\n\r\n    public addAmbientLight(properties: {color?: Color, intensity?: number, name?: string}): AmbientLight {\r\n        const light = new AmbientLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n\r\n    public addDirectionalLight(properties: {color?: Color, intensity?: number, direction?: vec3, castShadow?: boolean, shadowMapResolution?: number, shadowMapBias?: number, name?: string}): DirectionalLight {\r\n        const light = new DirectionalLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n\r\n    public addHemisphereLight(properties: {color?: Color, intensity?: number, groundColor?: Color, name?: string}): HemisphereLight {\r\n        const light = new HemisphereLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n\r\n    public addLight(light: AbstractLight): void {\r\n        const node = new TreeNode(light.id);\r\n        light.parentNode = node;\r\n        node.data.push(light);\r\n        this._node.addChild(node)\r\n        this._lights[light.id] = light;\r\n        \r\n        this._node.updateVersion();\r\n        if(this._update) this._update();\r\n    }\r\n\r\n    public addPointLight(properties: {color?: Color, intensity?: number, position?: vec3, distance?: number, decay?: number, name?: string}): PointLight {\r\n        const light = new PointLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n\r\n    public addSpotLight(properties: {color?: Color, intensity?: number, position?: vec3, target?: vec3, distance?: number, decay?: number, angle?: number, penumbra?: number, name?: string}): SpotLight {\r\n        const light = new SpotLight(properties);\r\n        this.addLight(light);\r\n        return light;\r\n    }\r\n\r\n    public removeLight(id: string): boolean {\r\n        if (!this._lights[id]) return false;\r\n\r\n        for(let i = 0; i < this._node.children.length; i++) {\r\n            const node = this._node.children[i];\r\n            if(node && node.name === id) {\r\n                this._node.removeChild(node);\r\n                break;\r\n            }\r\n        }\r\n\r\n        delete this._lights[id];\r\n        this._node.updateVersion();\r\n        if(this._update) this._update();\r\n        return true;\r\n    }\r\n\r\n    // #endregion Public Methods (8)\r\n}"]}},"error":null,"hash":"c574d85e8083d540a729044950d245f5","cacheData":{"env":{}}}