{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/materials/SpecularGlossinessMaterial.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\SpecularGlossinessMaterial.js.map","includedInParent":true,"mtime":1706527153794},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\materials\\SpecularGlossinessMaterial.ts","includedInParent":true,"mtime":1706527154435},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":24,"column":24,"index":1074},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\SpecularGlossinessMaterial.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SpecularGlossinessMaterial = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst three_1 = require(\"three\");\r\nclass SpecularGlossinessMaterial extends three_1.MeshStandardMaterial {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(params) {\r\n        super();\r\n        this.isGLTFSpecularGlossinessMaterial = true;\r\n        //various chunks that need replacing\r\n        const specularMapParsFragmentChunk = [\r\n            '#ifdef USE_SPECULARMAP',\r\n            '\tuniform sampler2D specularMap;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const glossinessMapParsFragmentChunk = [\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tuniform sampler2D glossinessMap;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const specularMapFragmentChunk = [\r\n            'vec3 specularFactor = specular;',\r\n            '#ifdef USE_SPECULARMAP',\r\n            '\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n            '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tspecularFactor *= texelSpecular.rgb;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const glossinessMapFragmentChunk = [\r\n            'float glossinessFactor = glossiness;',\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n            '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tglossinessFactor *= texelGlossiness.a;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const lightPhysicalFragmentChunk = [\r\n            'PhysicalMaterial material;',\r\n            'material.diffuseColor = diffuseColor.rgb * ( 1. - max( specularFactor.r, max( specularFactor.g, specularFactor.b ) ) );',\r\n            'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\r\n            'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\r\n            'material.roughness = max( 1.0 - glossinessFactor, 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.',\r\n            'material.roughness += geometryRoughness;',\r\n            'material.roughness = min( material.roughness, 1.0 );',\r\n            'material.specularColor = specularFactor;',\r\n        ].join('\\n');\r\n        const uniforms = {\r\n            specular: { value: new THREE.Color().setHex(0xffffff) },\r\n            glossiness: { value: 1 },\r\n            specularMap: { value: null },\r\n            glossinessMap: { value: null }\r\n        };\r\n        this._extraUniforms = uniforms;\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.fragmentShader = shader.fragmentShader\r\n                .replace('uniform float roughness;', 'uniform vec3 specular;')\r\n                .replace('uniform float metalness;', 'uniform float glossiness;')\r\n                .replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk)\r\n                .replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk)\r\n                .replace('#include <roughnessmap_fragment>', specularMapFragmentChunk)\r\n                .replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk)\r\n                .replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\r\n        };\r\n        Object.defineProperties(this, {\r\n            specular: {\r\n                get: function () {\r\n                    return uniforms.specular.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specular.value = v;\r\n                }\r\n            },\r\n            specularMap: {\r\n                get: function () {\r\n                    return uniforms.specularMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specularMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_SPECULARMAP = ''; // USE_UV is set by the renderer for specular maps\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_SPECULARMAP;\r\n                    }\r\n                }\r\n            },\r\n            glossiness: {\r\n                get: function () {\r\n                    return uniforms.glossiness.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossiness.value = v;\r\n                }\r\n            },\r\n            glossinessMap: {\r\n                get: function () {\r\n                    return uniforms.glossinessMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossinessMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_GLOSSINESSMAP = '';\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_GLOSSINESSMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        delete this.metalness;\r\n        delete this.roughness;\r\n        delete this.metalnessMap;\r\n        delete this.roughnessMap;\r\n        this.setValues(params);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    copy(source) {\r\n        super.copy(source);\r\n        this.specularMap = source.specularMap;\r\n        this.specular.copy(source.specular);\r\n        this.glossinessMap = source.glossinessMap;\r\n        this.glossiness = source.glossiness;\r\n        delete this.metalness;\r\n        delete this.roughness;\r\n        delete this.metalnessMap;\r\n        delete this.roughnessMap;\r\n        return this;\r\n    }\r\n}\r\nexports.SpecularGlossinessMaterial = SpecularGlossinessMaterial;\r\n"},"sourceMaps":{"js":{"version":3,"file":"SpecularGlossinessMaterial.js","sourceRoot":"","sources":["../../src/materials/SpecularGlossinessMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\r\nimport { MeshStandardMaterial, MeshStandardMaterialParameters } from 'three';\r\n\r\nexport interface SpecularGlossinessMaterialParameters extends MeshStandardMaterialParameters {\r\n    // #region Properties (4)\r\n\r\n    glossiness?: number | undefined;\r\n    glossinessMap?: THREE.Texture | null | undefined;\r\n    specular?: THREE.ColorRepresentation | undefined;\r\n    specularMap?: THREE.Texture | null | undefined;\r\n\r\n    // #endregion Properties (4)\r\n}\r\n\r\nexport class SpecularGlossinessMaterial extends MeshStandardMaterial {\r\n    // #region Properties (1)\r\n\r\n    public isGLTFSpecularGlossinessMaterial: boolean;\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(params: SpecularGlossinessMaterialParameters) {\r\n        super();\r\n\r\n        this.isGLTFSpecularGlossinessMaterial = true;\r\n\r\n        //various chunks that need replacing\r\n        const specularMapParsFragmentChunk = [\r\n            '#ifdef USE_SPECULARMAP',\r\n            '\tuniform sampler2D specularMap;',\r\n            '#endif'\r\n        ].join('\\n');\r\n\r\n        const glossinessMapParsFragmentChunk = [\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tuniform sampler2D glossinessMap;',\r\n            '#endif'\r\n        ].join('\\n');\r\n\r\n        const specularMapFragmentChunk = [\r\n            'vec3 specularFactor = specular;',\r\n            '#ifdef USE_SPECULARMAP',\r\n            '\tvec4 texelSpecular = texture2D( specularMap, vUv );',\r\n            '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tspecularFactor *= texelSpecular.rgb;',\r\n            '#endif'\r\n        ].join('\\n');\r\n\r\n        const glossinessMapFragmentChunk = [\r\n            'float glossinessFactor = glossiness;',\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n            '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tglossinessFactor *= texelGlossiness.a;',\r\n            '#endif'\r\n        ].join('\\n');\r\n\r\n        const lightPhysicalFragmentChunk = [\r\n            'PhysicalMaterial material;',\r\n            'material.diffuseColor = diffuseColor.rgb * ( 1. - max( specularFactor.r, max( specularFactor.g, specularFactor.b ) ) );',\r\n            'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\r\n            'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\r\n            'material.roughness = max( 1.0 - glossinessFactor, 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.',\r\n            'material.roughness += geometryRoughness;',\r\n            'material.roughness = min( material.roughness, 1.0 );',\r\n            'material.specularColor = specularFactor;',\r\n        ].join('\\n');\r\n\r\n        const uniforms: { [key: string]: { value: any } } = {\r\n            specular: { value: new THREE.Color().setHex(0xffffff) },\r\n            glossiness: { value: 1 },\r\n            specularMap: { value: null },\r\n            glossinessMap: { value: null }\r\n        };\r\n\r\n        (<any>this)._extraUniforms = uniforms;\r\n\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n\r\n            shader.fragmentShader = shader.fragmentShader\r\n                .replace('uniform float roughness;', 'uniform vec3 specular;')\r\n                .replace('uniform float metalness;', 'uniform float glossiness;')\r\n                .replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk)\r\n                .replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk)\r\n                .replace('#include <roughnessmap_fragment>', specularMapFragmentChunk)\r\n                .replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk)\r\n                .replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\r\n\r\n        };\r\n\r\n        Object.defineProperties(this, {\r\n            specular: {\r\n                get: function () {\r\n                    return uniforms.specular.value;\r\n\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specular.value = v;\r\n                }\r\n            },\r\n\r\n            specularMap: {\r\n                get: function () {\r\n                    return uniforms.specularMap.value;\r\n\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specularMap.value = v;\r\n\r\n                    if (v) {\r\n                        this.defines.USE_SPECULARMAP = ''; // USE_UV is set by the renderer for specular maps\r\n\r\n                    } else {\r\n                        delete this.defines.USE_SPECULARMAP;\r\n                    }\r\n                }\r\n            },\r\n\r\n            glossiness: {\r\n                get: function () {\r\n                    return uniforms.glossiness.value;\r\n\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossiness.value = v;\r\n                }\r\n            },\r\n\r\n            glossinessMap: {\r\n                get: function () {\r\n                    return uniforms.glossinessMap.value;\r\n\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossinessMap.value = v;\r\n\r\n                    if (v) {\r\n                        this.defines.USE_GLOSSINESSMAP = '';\r\n                        this.defines.USE_UV = '';\r\n\r\n                    } else {\r\n                        delete this.defines.USE_GLOSSINESSMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        delete (<any>this).metalness;\r\n        delete (<any>this).roughness;\r\n        delete (<any>this).metalnessMap;\r\n        delete (<any>this).roughnessMap;\r\n\r\n        this.setValues(params);\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    public copy(source: SpecularGlossinessMaterial) {\r\n        super.copy(source);\r\n\r\n        (<any>this).specularMap = (<any>source).specularMap;\r\n        (<any>this).specular.copy((<any>source).specular);\r\n        (<any>this).glossinessMap = (<any>source).glossinessMap;\r\n        (<any>this).glossiness = (<any>source).glossiness;\r\n        delete (<any>this).metalness;\r\n        delete (<any>this).roughness;\r\n        delete (<any>this).metalnessMap;\r\n        delete (<any>this).roughnessMap;\r\n        return this;\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}\r\n"]}},"error":null,"hash":"7a4ef211adda6576830b7c91915eaeb0","cacheData":{"env":{}}}