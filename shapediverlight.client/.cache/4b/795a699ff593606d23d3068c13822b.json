{"id":"node_modules/@shapediver/sdk.sdtf-primitives/dist/SdtfPrimitiveTypeReader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeReader.js.map","includedInParent":true,"mtime":1706527148534},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\package.json","includedInParent":true,"mtime":1706527147999},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":13,"column":32,"index":832},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeReader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"},{"name":"./SdtfPrimitiveTypeValidator","loc":{"line":14,"column":45,"index":907},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeReader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.sdtf-primitives\\dist\\SdtfPrimitiveTypeValidator.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfPrimitiveTypeReader = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nconst SdtfPrimitiveTypeValidator_1 = require(\"./SdtfPrimitiveTypeValidator\");\nclass SdtfPrimitiveTypeReader {\n    constructor() {\n        this.validator = new SdtfPrimitiveTypeValidator_1.SdtfPrimitiveTypeValidator();\n    }\n    readComponent(component) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const typeHint = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name;\n            // Make sure that the component consists of valid data\n            if (!this.validator.validateComponent(typeHint, component.value, component.accessor)) {\n                throw new sdk_sdtf_core_1.SdtfError(`Cannot read value of type '${typeHint}': Invalid component.`);\n            }\n            // Map the component data and return the result\n            switch (typeHint) {\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.BOOLEAN:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.CHAR:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DECIMAL:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DOUBLE:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.GUID:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT8:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT16:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT32:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.INT64:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.JSON:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.SINGLE:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.STRING:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT8:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT16:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT32:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.UINT64:\n                    return component.value; // Nothing to map here\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.COLOR:\n                    return this.mapColor(component.value);\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.DATA:\n                case sdk_sdtf_core_1.SdtfPrimitiveTypeHintName.IMAGE:\n                    return this.mapGenericData(yield ((_b = component.accessor) === null || _b === void 0 ? void 0 : _b.getContent()));\n                default:\n                    (0, sdk_sdtf_core_1.sdAssertUnreachable)(typeHint);\n            }\n        });\n    }\n    /**\n     * The internal representation of Color is either an array or a string (legacy).\n     * Its external representation is a number-array.\n     * @private\n     */\n    mapColor(content) {\n        let parts;\n        if (Array.isArray(content)) {\n            // Handle regular color\n            parts = content;\n        }\n        else {\n            // Handle legacy color: Map sdTF color string to array\n            parts = content.split(\",\").map(p => Number(p));\n        }\n        let res = [...parts];\n        // Default alpha content is `1`\n        if (res.length === 3)\n            res = [...parts, 1];\n        return res;\n    }\n    /**\n     * Data content is stored in a binary buffer.\n     * Its external representation is its data.\n     * @private\n     * @throws {@link SdtfError} when content is not a {@link ISdtfBufferValue}.\n     */\n    mapGenericData(content) {\n        return content === null || content === void 0 ? void 0 : content.data;\n    }\n}\nexports.SdtfPrimitiveTypeReader = SdtfPrimitiveTypeReader;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfPrimitiveTypeReader.js","sourceRoot":"","sources":["../src/SdtfPrimitiveTypeReader.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6DAOkC;AAClC,6EAAyE;AAEzE,MAAa,uBAAuB;IAApC;QAEqB,cAAS,GAAG,IAAI,uDAA0B,EAAE,CAAA;IAyEjE,CAAC;IAvES,aAAa,CAAE,SAAwC;;;YACzD,MAAM,QAAQ,GAAG,MAAA,SAAS,CAAC,QAAQ,0CAAE,IAAiC,CAAA;YAEtE,sDAAsD;YACtD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;gBAClF,MAAM,IAAI,yBAAS,CAAC,8BAA+B,QAAS,uBAAuB,CAAC,CAAA;aACvF;YAED,+CAA+C;YAC/C,QAAQ,QAAQ,EAAE;gBACd,KAAK,yCAAyB,CAAC,OAAO,CAAC;gBACvC,KAAK,yCAAyB,CAAC,IAAI,CAAC;gBACpC,KAAK,yCAAyB,CAAC,OAAO,CAAC;gBACvC,KAAK,yCAAyB,CAAC,MAAM,CAAC;gBACtC,KAAK,yCAAyB,CAAC,IAAI,CAAC;gBACpC,KAAK,yCAAyB,CAAC,IAAI,CAAC;gBACpC,KAAK,yCAAyB,CAAC,KAAK,CAAC;gBACrC,KAAK,yCAAyB,CAAC,KAAK,CAAC;gBACrC,KAAK,yCAAyB,CAAC,KAAK,CAAC;gBACrC,KAAK,yCAAyB,CAAC,IAAI,CAAC;gBACpC,KAAK,yCAAyB,CAAC,MAAM,CAAC;gBACtC,KAAK,yCAAyB,CAAC,MAAM,CAAC;gBACtC,KAAK,yCAAyB,CAAC,KAAK,CAAC;gBACrC,KAAK,yCAAyB,CAAC,MAAM,CAAC;gBACtC,KAAK,yCAAyB,CAAC,MAAM,CAAC;gBACtC,KAAK,yCAAyB,CAAC,MAAM;oBACjC,OAAO,SAAS,CAAC,KAAK,CAAA,CAAE,sBAAsB;gBAClD,KAAK,yCAAyB,CAAC,KAAK;oBAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;gBACzC,KAAK,yCAAyB,CAAC,IAAI,CAAC;gBACpC,KAAK,yCAAyB,CAAC,KAAK;oBAChC,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAA,MAAA,SAAS,CAAC,QAAQ,0CAAE,UAAU,EAAE,CAAA,CAAC,CAAA;gBACtE;oBACI,IAAA,mCAAmB,EAAC,QAAQ,CAAC,CAAA;aACpC;;KACJ;IAED;;;;OAIG;IACH,QAAQ,CAAE,OAAgB;QACtB,IAAI,KAAe,CAAA;QAEnB,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxB,uBAAuB;YACvB,KAAK,GAAG,OAAO,CAAA;SAClB;aAAM;YACH,sDAAsD;YACtD,KAAK,GAAI,OAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;SAC7D;QAED,IAAI,GAAG,GAAG,CAAE,GAAG,KAAK,CAAE,CAAA;QAEtB,+BAA+B;QAC/B,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,GAAG,GAAG,CAAE,GAAG,KAAK,EAAE,CAAC,CAAE,CAAA;QAE3C,OAAO,GAAG,CAAA;IACd,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAE,OAA0B;QACtC,OAAO,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA;IACxB,CAAC;CAEJ;AA3ED,0DA2EC","sourcesContent":[null]}},"error":null,"hash":"5d7c6ad6254e4f77d4fcf1df87b46dab","cacheData":{"env":{}}}