{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/interpolation/interpolationMethods/CameraSphericalInterpolation.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraSphericalInterpolation.js.map","includedInParent":true,"mtime":1706542086641},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\interpolation\\interpolationMethods\\CameraSphericalInterpolation.ts","includedInParent":true,"mtime":1706542087120},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":155},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraSphericalInterpolation.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraSphericalInterpolation = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass CameraSphericalInterpolation {\r\n    // #endregion Properties (6)\r\n    // #region Constructors (1)\r\n    constructor(_camera, _cameraControls, _from, _to) {\r\n        this._camera = _camera;\r\n        this._cameraControls = _cameraControls;\r\n        this._from = _from;\r\n        this._to = _to;\r\n        this._radius_from = gl_matrix_1.vec3.distance(this._from.position, this._from.target);\r\n        this._direction_from = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), this._from.position, this._from.target));\r\n        this._radius_to = gl_matrix_1.vec3.distance(this._to.position, this._to.target);\r\n        this._direction_to = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), this._to.position, this._to.target));\r\n        this._axis = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.cross(gl_matrix_1.vec3.create(), this._direction_to, this._direction_from));\r\n        this._c_angle = -Math.acos(Math.min(1, Math.max(-1, gl_matrix_1.vec3.dot(this._direction_to, this._direction_from))));\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    onComplete(value) {\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._to.position[0], this._to.position[1], this._to.position[2]), this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._to.target[0], this._to.target[1], this._to.target[2]), this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n    onStop(value) {\r\n    }\r\n    onUpdate(value) {\r\n        let t = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._from.target, gl_matrix_1.vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._to.target, gl_matrix_1.vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n        let angle = this._c_angle * value.delta;\r\n        let dir = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.transformQuat(gl_matrix_1.vec3.create(), this._direction_from, gl_matrix_1.quat.setAxisAngle(gl_matrix_1.quat.create(), this._axis, angle)));\r\n        let scalar = (this._radius_from * (1 - value.delta) + this._radius_to * value.delta);\r\n        let p = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), t, gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), dir, gl_matrix_1.vec3.fromValues(scalar, scalar, scalar)));\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n    }\r\n}\r\nexports.CameraSphericalInterpolation = CameraSphericalInterpolation;\r\n"},"sourceMaps":{"js":{"version":3,"file":"CameraSphericalInterpolation.js","sourceRoot":"","sources":["../../../../src/implementation/interpolation/interpolationMethods/CameraSphericalInterpolation.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, quat, vec3 } from 'gl-matrix'\r\n\r\nimport { ICamera } from '../../../interfaces/camera/ICamera'\r\nimport { ICameraControlsUsage } from '../../../interfaces/controls/ICameraControlsUsage'\r\nimport { ICameraInterpolation } from '../../../interfaces/interpolation/ICameraInterpolation'\r\n\r\nexport class CameraSphericalInterpolation implements ICameraInterpolation {\r\n    // #region Properties (6)\r\n\r\n    private _axis: vec3;\r\n    private _c_angle: number;\r\n    private _direction_from: vec3;\r\n    private _direction_to: vec3;\r\n    private _radius_from: number;\r\n    private _radius_to: number;\r\n\r\n    // #endregion Properties (6)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        private readonly _camera: ICamera,\r\n        private readonly _cameraControls: ICameraControlsUsage,\r\n        private readonly _from: { position: vec3, target: vec3 },\r\n        private readonly _to: { position: vec3, target: vec3 })\r\n    {\r\n        this._radius_from = vec3.distance(this._from.position, this._from.target);\r\n        this._direction_from = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), this._from.position, this._from.target));\r\n        \r\n        this._radius_to = vec3.distance(this._to.position, this._to.target);\r\n        this._direction_to = vec3.normalize(vec3.create(), vec3.subtract(vec3.create(), this._to.position, this._to.target));\r\n\r\n        this._axis = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), this._direction_to, this._direction_from));\r\n        this._c_angle = -Math.acos(Math.min(1, Math.max(-1, vec3.dot(this._direction_to, this._direction_from))));\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n        \r\n    // #region Public Methods (3)\r\n\r\n    public onComplete(value: { delta: number }): void {\r\n        let positionOffset = vec3.subtract(vec3.create(), vec3.fromValues(this._to.position[0], this._to.position[1], this._to.position[2]), this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        \r\n        let targetOffset = vec3.subtract(vec3.create(), vec3.fromValues(this._to.target[0], this._to.target[1], this._to.target[2]), this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n\r\n    public onStop(value: { delta: number }): void {\r\n    }\r\n\r\n    public onUpdate(value: { delta: number }): void {\r\n        let t: vec3 = vec3.add(vec3.create(), vec3.multiply(vec3.create(), this._from.target, vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), vec3.multiply(vec3.create(), this._to.target, vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let targetOffset = vec3.subtract(vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n\r\n        let angle = this._c_angle * value.delta;\r\n        let dir = vec3.normalize(vec3.create(), vec3.transformQuat(vec3.create(), this._direction_from, quat.setAxisAngle(quat.create(), this._axis, angle)));\r\n\r\n        let scalar = (this._radius_from * (1 - value.delta) + this._radius_to * value.delta);\r\n        let p: vec3 = vec3.add(vec3.create(), t, vec3.multiply(vec3.create(), dir, vec3.fromValues(scalar, scalar, scalar)));\r\n        let positionOffset = vec3.subtract(vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n    }\r\n\r\n    // #endregion Public Methods (3)\r\n}"]}},"error":null,"hash":"925689bb66bdb1f0626246c745261079","cacheData":{"env":{}}}