{"id":"node_modules/@shapediver/viewer.session-engine.session-engine/dist/implementation/dto/FileParameter.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\FileParameter.js.map","includedInParent":true,"mtime":1706542085928},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\src\\implementation\\dto\\FileParameter.ts","includedInParent":true,"mtime":1706542086586},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\package.json","includedInParent":true,"mtime":1706542085742},{"name":"@shapediver/viewer.shared.services","loc":{"line":44,"column":41,"index":2899},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\FileParameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"./Parameter","loc":{"line":45,"column":28,"index":2967},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\FileParameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js"},{"name":"@shapediver/viewer.utils.mime-type","loc":{"line":46,"column":43,"index":3027},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\FileParameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.utils.mime-type\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _FileParameter_logger, _FileParameter_sessionEngine, _FileParameter_uuidGenerator;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FileParameter = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst Parameter_1 = require(\"./Parameter\");\r\nconst MimeTypeUtils = __importStar(require(\"@shapediver/viewer.utils.mime-type\"));\r\nclass FileParameter extends Parameter_1.Parameter {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor(paramDef, sessionEngine) {\r\n        super(paramDef, sessionEngine);\r\n        // #region Properties (5)\r\n        _FileParameter_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _FileParameter_sessionEngine.set(this, void 0);\r\n        _FileParameter_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);\r\n        __classPrivateFieldSet(this, _FileParameter_sessionEngine, sessionEngine, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    upload() {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.value === undefined)\r\n                return this.defval;\r\n            if (typeof this.value === 'string' && ((this.value.length === 36 && __classPrivateFieldGet(this, _FileParameter_uuidGenerator, \"f\").validate(this.value)) || this.value === \"\"))\r\n                return this.value;\r\n            const data = new File([\r\n                typeof this.value === 'string' ?\r\n                    new Blob([this.value], { type: 'text/plain' }) :\r\n                    this.value\r\n            ], 'upload', { type: this.value.type });\r\n            let types = [data.type];\r\n            // get all endings that are possible for this type\r\n            const endings = MimeTypeUtils.mapMimeTypeToFileEndings(types);\r\n            // get all mimeTypes that are possible for these endings\r\n            endings.forEach((e) => types = types.concat(MimeTypeUtils.guessMimeTypeFromFilename(e)));\r\n            let type;\r\n            // check if one of the mime types is allowed\r\n            let allowedType = false;\r\n            for (let i = 0; i < types.length; i++) {\r\n                if ((_a = this.format) === null || _a === void 0 ? void 0 : _a.includes(types[i])) {\r\n                    allowedType = true;\r\n                    type = types[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!allowedType)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, type of data (${data.type}) is not a valid type. Has to be ${this.format}.`);\r\n            __classPrivateFieldGet(this, _FileParameter_logger, \"f\").debug(`Parameter(${this.id}).upload: Uploading FileParameter.`);\r\n            return yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, \"f\").uploadFile(this.id, data, type);\r\n        });\r\n    }\r\n}\r\nexports.FileParameter = FileParameter;\r\n_FileParameter_logger = new WeakMap(), _FileParameter_sessionEngine = new WeakMap(), _FileParameter_uuidGenerator = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"FileParameter.js","sourceRoot":"","sources":["../../../src/implementation/dto/FileParameter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+EAAyG;AAEzG,2CAAwC;AACxC,kFAAmE;AAGnE,MAAa,aAAc,SAAQ,qBAA+B;IAO9D,4BAA4B;IAE5B,2BAA2B;IAE3B,YAAY,QAAqC,EAAE,aAA4B;QAC3E,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAXnC,yBAAyB;QAEzB,gCAA2B,+BAAM,CAAC,QAAQ,EAAC;QAC3C,+CAAuC;QACvC,uCAAyC,sCAAa,CAAC,QAAQ,EAAC;QAQ5D,uBAAA,IAAI,gCAAkB,aAAa,MAAA,CAAC;IACxC,CAAC;IAED,8BAA8B;IAE9B,6BAA6B;IAEhB,MAAM;;;YACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;gBAAE,OAAO,IAAI,CAAC,MAAM,CAAC;YACjD,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,EAAE,IAAI,uBAAA,IAAI,oCAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC;gBAAE,OAAO,IAAI,CAAC,KAAK,CAAC;YAEvJ,MAAM,IAAI,GAAG,IAAI,IAAI,CACjB;gBACI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;oBAC5B,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;oBAChD,IAAI,CAAC,KAAK;aACjB,EACD,QAAQ,EACR,EAAE,IAAI,EAAgB,IAAI,CAAC,KAAM,CAAC,IAAI,EAAE,CAC3C,CAAC;YAEF,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,kDAAkD;YAClD,MAAM,OAAO,GAAG,aAAa,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;YAC9D,wDAAwD;YACxD,OAAO,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjG,IAAI,IAAY,CAAC;YACjB,4CAA4C;YAC5C,IAAI,WAAW,GAAG,KAAK,CAAC;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,MAAA,IAAI,CAAC,MAAM,0CAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;oBACjC,WAAW,GAAG,IAAI,CAAC;oBACnB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAChB,MAAM;iBACT;aACJ;YAED,IAAI,CAAC,WAAW;gBACZ,MAAM,IAAI,qDAA4B,CAAC,aAAa,IAAI,CAAC,EAAE,0DAA0D,IAAI,CAAC,IAAI,oCAAoC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAEtL,uBAAA,IAAI,6BAAQ,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,EAAE,oCAAoC,CAAC,CAAC;YAE7E,OAAO,MAAM,uBAAA,IAAI,oCAAe,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,IAAK,CAAC,CAAA;;KACpE;CAGJ;AA5DD,sCA4DC","sourcesContent":["import { ShapeDiverResponseParameter } from \"@shapediver/sdk.geometry-api-sdk-v2\";\r\nimport { Logger, ShapeDiverViewerSessionError, UuidGenerator } from \"@shapediver/viewer.shared.services\";\r\nimport { IFileParameter } from \"../../interfaces/dto/IFileParameter\";\r\nimport { Parameter } from \"./Parameter\";\r\nimport * as MimeTypeUtils from \"@shapediver/viewer.utils.mime-type\"\r\nimport { SessionEngine } from \"../SessionEngine\";\r\n\r\nexport class FileParameter extends Parameter<File | Blob | string> implements IFileParameter {\r\n    // #region Properties (5)\r\n\r\n    readonly #logger: Logger = Logger.instance;\r\n    readonly #sessionEngine: SessionEngine;\r\n    readonly #uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n    // #endregion Properties (5)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(paramDef: ShapeDiverResponseParameter, sessionEngine: SessionEngine) {\r\n        super(paramDef, sessionEngine);\r\n        this.#sessionEngine = sessionEngine;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    public async upload() {\r\n        if (this.value === undefined) return this.defval;\r\n        if (typeof this.value === 'string' && ((this.value.length === 36 && this.#uuidGenerator.validate(this.value)) || this.value === \"\")) return this.value;\r\n\r\n        const data = new File(\r\n            [\r\n                typeof this.value === 'string' ?\r\n                    new Blob([this.value], { type: 'text/plain' }) :\r\n                    this.value\r\n            ],\r\n            'upload',\r\n            { type: (<Blob | File>this.value).type }\r\n        );\r\n\r\n        let types = [data.type];\r\n        // get all endings that are possible for this type\r\n        const endings = MimeTypeUtils.mapMimeTypeToFileEndings(types);\r\n        // get all mimeTypes that are possible for these endings\r\n        endings.forEach((e: string) => types = types.concat(MimeTypeUtils.guessMimeTypeFromFilename(e)));\r\n\r\n        let type: string;\r\n        // check if one of the mime types is allowed\r\n        let allowedType = false;\r\n        for (let i = 0; i < types.length; i++) {\r\n            if (this.format?.includes(types[i])) {\r\n                allowedType = true;\r\n                type = types[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!allowedType) \r\n            throw new ShapeDiverViewerSessionError(`Parameter(${this.id}).upload: Error uploading FileParameter, type of data (${data.type}) is not a valid type. Has to be ${this.format}.`);\r\n\r\n        this.#logger.debug(`Parameter(${this.id}).upload: Uploading FileParameter.`);\r\n\r\n        return await this.#sessionEngine.uploadFile(this.id, data, type!)\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}"]}},"error":null,"hash":"de2e0ba1cc1a333d21a8e79cfdcf479e","cacheData":{"env":{}}}