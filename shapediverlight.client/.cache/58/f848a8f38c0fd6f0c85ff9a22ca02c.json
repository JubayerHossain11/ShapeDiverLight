{"id":"node_modules/@shapediver/viewer.session-engine.session-engine/dist/implementation/dto/Parameter.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js.map","includedInParent":true,"mtime":1706542086430},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\src\\implementation\\dto\\Parameter.ts","includedInParent":true,"mtime":1706542086845},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\package.json","includedInParent":true,"mtime":1706542085742},{"name":"@shapediver/viewer.shared.services","loc":{"line":35,"column":41,"index":2650},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"../../interfaces/ISessionEngine","loc":{"line":36,"column":33,"index":2723},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\interfaces\\ISessionEngine.js"},{"name":"@shapediver/viewer.utils.mime-type","loc":{"line":37,"column":43,"index":2803},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.utils.mime-type\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _Parameter_choices, _Parameter_converter, _Parameter_decimalplaces, _Parameter_defaultValue, _Parameter_defval, _Parameter_expression, _Parameter_format, _Parameter_group, _Parameter_id, _Parameter_inputValidator, _Parameter_logger, _Parameter_max, _Parameter_min, _Parameter_name, _Parameter_sessionEngine, _Parameter_structure, _Parameter_type, _Parameter_visualization, _Parameter_displayname, _Parameter_hidden, _Parameter_lastValidatedValue, _Parameter_order, _Parameter_sessionValue, _Parameter_tooltip, _Parameter_value;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Parameter = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst ISessionEngine_1 = require(\"../../interfaces/ISessionEngine\");\r\nconst MimeTypeUtils = __importStar(require(\"@shapediver/viewer.utils.mime-type\"));\r\nclass Parameter {\r\n    // #endregion Properties (24)\r\n    // #region Constructors (1)\r\n    constructor(paramDef, sessionEngine) {\r\n        // #region Properties (24)\r\n        _Parameter_choices.set(this, void 0);\r\n        _Parameter_converter.set(this, viewer_shared_services_1.Converter.instance);\r\n        _Parameter_decimalplaces.set(this, void 0);\r\n        _Parameter_defaultValue.set(this, void 0);\r\n        _Parameter_defval.set(this, void 0);\r\n        _Parameter_expression.set(this, void 0);\r\n        _Parameter_format.set(this, void 0);\r\n        _Parameter_group.set(this, void 0);\r\n        _Parameter_id.set(this, void 0);\r\n        _Parameter_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);\r\n        _Parameter_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _Parameter_max.set(this, void 0);\r\n        _Parameter_min.set(this, void 0);\r\n        _Parameter_name.set(this, void 0);\r\n        _Parameter_sessionEngine.set(this, void 0);\r\n        _Parameter_structure.set(this, void 0);\r\n        _Parameter_type.set(this, void 0);\r\n        _Parameter_visualization.set(this, void 0);\r\n        _Parameter_displayname.set(this, void 0);\r\n        _Parameter_hidden.set(this, false);\r\n        _Parameter_lastValidatedValue.set(this, void 0);\r\n        _Parameter_order.set(this, void 0);\r\n        _Parameter_sessionValue.set(this, void 0);\r\n        _Parameter_tooltip.set(this, void 0);\r\n        _Parameter_value.set(this, void 0);\r\n        __classPrivateFieldSet(this, _Parameter_sessionEngine, sessionEngine, \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_id, paramDef.id, \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_defval, paramDef.defval, \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_name, paramDef.name, \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_type, paramDef.type, \"f\");\r\n        if (paramDef.choices !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_choices, paramDef.choices, \"f\");\r\n        if (paramDef.decimalplaces !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_decimalplaces, +paramDef.decimalplaces, \"f\");\r\n        if (paramDef.expression !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_expression, paramDef.expression, \"f\");\r\n        if (paramDef.format !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_format, MimeTypeUtils.extendMimeTypes(paramDef.format), \"f\");\r\n        if (paramDef.min !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_min, +paramDef.min, \"f\");\r\n        if (paramDef.max !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_max, +paramDef.max, \"f\");\r\n        if (paramDef.visualization !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_visualization, paramDef.visualization, \"f\");\r\n        if (paramDef.structure !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_structure, paramDef.structure, \"f\");\r\n        if (paramDef.group !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_group, paramDef.group, \"f\");\r\n        if (paramDef.tooltip !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_tooltip, paramDef.tooltip, \"f\");\r\n        if (paramDef.displayname !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_displayname, paramDef.displayname, \"f\");\r\n        if (paramDef.order !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_order, paramDef.order, \"f\");\r\n        if (paramDef.hidden !== undefined)\r\n            __classPrivateFieldSet(this, _Parameter_hidden, paramDef.hidden, \"f\");\r\n        if (__classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.BOOL) {\r\n            __classPrivateFieldSet(this, _Parameter_defaultValue, (__classPrivateFieldGet(this, _Parameter_defval, \"f\") === 'true'), \"f\");\r\n        }\r\n        else if (__classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.EVEN || __classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.FLOAT || __classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.INT || __classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.ODD) {\r\n            __classPrivateFieldSet(this, _Parameter_defaultValue, +__classPrivateFieldGet(this, _Parameter_defval, \"f\"), \"f\");\r\n        }\r\n        else {\r\n            __classPrivateFieldSet(this, _Parameter_defaultValue, __classPrivateFieldGet(this, _Parameter_defval, \"f\"), \"f\");\r\n        }\r\n        if (__classPrivateFieldGet(this, _Parameter_type, \"f\") === ISessionEngine_1.PARAMETER_TYPE.COLOR) {\r\n            this.convertColor = (color) => {\r\n                return __classPrivateFieldGet(this, _Parameter_converter, \"f\").toHexColor(color);\r\n            };\r\n        }\r\n        __classPrivateFieldSet(this, _Parameter_value, __classPrivateFieldGet(this, _Parameter_defaultValue, \"f\"), \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_sessionValue, __classPrivateFieldGet(this, _Parameter_value, \"f\"), \"f\");\r\n        __classPrivateFieldSet(this, _Parameter_lastValidatedValue, __classPrivateFieldGet(this, _Parameter_value, \"f\"), \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (26)\r\n    get choices() {\r\n        return __classPrivateFieldGet(this, _Parameter_choices, \"f\");\r\n    }\r\n    get decimalplaces() {\r\n        return __classPrivateFieldGet(this, _Parameter_decimalplaces, \"f\");\r\n    }\r\n    get defval() {\r\n        return __classPrivateFieldGet(this, _Parameter_defval, \"f\");\r\n    }\r\n    get displayname() {\r\n        return __classPrivateFieldGet(this, _Parameter_displayname, \"f\");\r\n    }\r\n    set displayname(value) {\r\n        __classPrivateFieldSet(this, _Parameter_displayname, value, \"f\");\r\n    }\r\n    get expression() {\r\n        return __classPrivateFieldGet(this, _Parameter_expression, \"f\");\r\n    }\r\n    get format() {\r\n        return __classPrivateFieldGet(this, _Parameter_format, \"f\");\r\n    }\r\n    get group() {\r\n        return __classPrivateFieldGet(this, _Parameter_group, \"f\");\r\n    }\r\n    get hidden() {\r\n        return __classPrivateFieldGet(this, _Parameter_hidden, \"f\");\r\n    }\r\n    set hidden(value) {\r\n        __classPrivateFieldSet(this, _Parameter_hidden, value, \"f\");\r\n    }\r\n    get id() {\r\n        return __classPrivateFieldGet(this, _Parameter_id, \"f\");\r\n    }\r\n    get lastValidatedValue() {\r\n        return __classPrivateFieldGet(this, _Parameter_lastValidatedValue, \"f\");\r\n    }\r\n    get max() {\r\n        return __classPrivateFieldGet(this, _Parameter_max, \"f\");\r\n    }\r\n    get min() {\r\n        return __classPrivateFieldGet(this, _Parameter_min, \"f\");\r\n    }\r\n    get name() {\r\n        return __classPrivateFieldGet(this, _Parameter_name, \"f\");\r\n    }\r\n    get order() {\r\n        return __classPrivateFieldGet(this, _Parameter_order, \"f\");\r\n    }\r\n    set order(value) {\r\n        __classPrivateFieldSet(this, _Parameter_order, value, \"f\");\r\n    }\r\n    get sessionValue() {\r\n        return __classPrivateFieldGet(this, _Parameter_sessionValue, \"f\");\r\n    }\r\n    set sessionValue(value) {\r\n        __classPrivateFieldSet(this, _Parameter_sessionValue, value, \"f\");\r\n    }\r\n    get structure() {\r\n        return __classPrivateFieldGet(this, _Parameter_structure, \"f\");\r\n    }\r\n    get tooltip() {\r\n        return __classPrivateFieldGet(this, _Parameter_tooltip, \"f\");\r\n    }\r\n    set tooltip(value) {\r\n        __classPrivateFieldSet(this, _Parameter_tooltip, value, \"f\");\r\n    }\r\n    get type() {\r\n        return __classPrivateFieldGet(this, _Parameter_type, \"f\");\r\n    }\r\n    get value() {\r\n        return __classPrivateFieldGet(this, _Parameter_value, \"f\");\r\n    }\r\n    set value(value) {\r\n        __classPrivateFieldSet(this, _Parameter_value, value, \"f\");\r\n        if (__classPrivateFieldGet(this, _Parameter_sessionEngine, \"f\").customizeOnParameterChange)\r\n            __classPrivateFieldGet(this, _Parameter_sessionEngine, \"f\").customize();\r\n    }\r\n    get visualization() {\r\n        return __classPrivateFieldGet(this, _Parameter_visualization, \"f\");\r\n    }\r\n    // #endregion Public Accessors (26)\r\n    // #region Public Methods (4)\r\n    isValid(value) {\r\n        switch (true) {\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.BOOL:\r\n                if (typeof value === 'string') {\r\n                    if (!(value === 'true' || value === 'false'))\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is a string that is neither true or false.`);\r\n                }\r\n                else {\r\n                    __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, value, 'boolean');\r\n                }\r\n                break;\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.COLOR:\r\n                __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, value, 'color');\r\n                break;\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.FILE:\r\n                __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, value, 'file');\r\n                break;\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN || this.type === ISessionEngine_1.PARAMETER_TYPE.FLOAT || this.type === ISessionEngine_1.PARAMETER_TYPE.INT || this.type === ISessionEngine_1.PARAMETER_TYPE.ODD:\r\n                let temp = value;\r\n                if (typeof value === 'string')\r\n                    temp = +value;\r\n                __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, temp, 'number');\r\n                if (this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN) {\r\n                    if (temp % 2 !== 0)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is not even.`);\r\n                }\r\n                else if (this.type === ISessionEngine_1.PARAMETER_TYPE.ODD) {\r\n                    if (temp % 2 === 0)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is not odd.`);\r\n                }\r\n                else if (this.type === ISessionEngine_1.PARAMETER_TYPE.INT) {\r\n                    if (!Number.isInteger(temp))\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is not an integer.`);\r\n                }\r\n                if (this.min || this.min === 0)\r\n                    if (temp < this.min)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is smaller than the minimum ${this.min}.`);\r\n                if (this.max || this.max === 0)\r\n                    if (temp > this.max)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} is larger than the maximum ${this.max}.`);\r\n                if (this.decimalplaces || this.decimalplaces === 0) {\r\n                    const numStr = temp + '';\r\n                    let decimalplaces = 0;\r\n                    if (numStr.includes('.'))\r\n                        decimalplaces = numStr.split('.')[1].length;\r\n                    if (this.decimalplaces < decimalplaces)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${value} has not the correct number of decimalplaces (${this.decimalplaces}).`);\r\n                }\r\n                break;\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.STRINGLIST:\r\n                __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, value, 'string');\r\n                const choicesChecker = (v) => {\r\n                    // has to be a single value that is\r\n                    // 1. convertible to number\r\n                    // 2. between 0 and choices.length -1\r\n                    const temp = +v;\r\n                    __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, temp, 'number');\r\n                    if (temp < 0 || temp > this.choices.length - 1)\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${v} is not within the range of the defined number choices.`);\r\n                };\r\n                if (this.visualization === ISessionEngine_1.PARAMETER_VISUALIZATION.CHECKLIST) {\r\n                    // comma separated numbers\r\n                    if (value.includes(',')) {\r\n                        const values = value.split(',');\r\n                        for (let i = 0; i < values.length; i++) {\r\n                            if (values.filter(item => item === values[i]).length !== 1)\r\n                                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid: The value ${values[i]} exists multiple times, but should only exist once.`);\r\n                            choicesChecker(values[i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // to number\r\n                        let temp = value;\r\n                        if (typeof value === 'string')\r\n                            temp = +value;\r\n                        __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, temp, 'number');\r\n                        choicesChecker(value);\r\n                    }\r\n                }\r\n                else {\r\n                    // to number\r\n                    let temp = value;\r\n                    if (typeof value === 'string')\r\n                        temp = +value;\r\n                    __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, temp, 'number');\r\n                    choicesChecker(value);\r\n                }\r\n                break;\r\n            default:\r\n                __classPrivateFieldGet(this, _Parameter_inputValidator, \"f\").validateAndError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).isValid`, value, 'string');\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n    resetToDefaultValue() {\r\n        __classPrivateFieldSet(this, _Parameter_value, __classPrivateFieldGet(this, _Parameter_defaultValue, \"f\"), \"f\");\r\n    }\r\n    resetToSessionValue() {\r\n        __classPrivateFieldSet(this, _Parameter_value, this.sessionValue, \"f\");\r\n    }\r\n    stringify() {\r\n        switch (true) {\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.BOOL:\r\n                return typeof this.value === 'string' ? this.value : this.value + '';\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.COLOR:\r\n                return __classPrivateFieldGet(this, _Parameter_converter, \"f\").toHex8Color(this.value);\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.FILE:\r\n                if (typeof this.value !== 'string')\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Parameter(${__classPrivateFieldGet(this, _Parameter_id, \"f\")}).stringify: Error in stringify. Cannot stringify FileParameter that has not been uploaded yet.`);\r\n                return this.value;\r\n            case this.type === ISessionEngine_1.PARAMETER_TYPE.EVEN || this.type === ISessionEngine_1.PARAMETER_TYPE.FLOAT || this.type === ISessionEngine_1.PARAMETER_TYPE.INT || this.type === ISessionEngine_1.PARAMETER_TYPE.ODD:\r\n                if (typeof this.value === 'string') {\r\n                    // cast to number and round to decimalplaces if they exist\r\n                    if (this.decimalplaces || this.decimalplaces === 0) {\r\n                        const number = +this.value;\r\n                        return number.toFixed(__classPrivateFieldGet(this, _Parameter_decimalplaces, \"f\"));\r\n                    }\r\n                    else {\r\n                        return this.value;\r\n                    }\r\n                }\r\n                else {\r\n                    // round to decimalplaces if they exist\r\n                    if (this.decimalplaces || this.decimalplaces === 0) {\r\n                        return this.value.toFixed(__classPrivateFieldGet(this, _Parameter_decimalplaces, \"f\"));\r\n                    }\r\n                    else {\r\n                        return this.value + '';\r\n                    }\r\n                }\r\n            default:\r\n                return this.value;\r\n        }\r\n    }\r\n}\r\nexports.Parameter = Parameter;\r\n_Parameter_choices = new WeakMap(), _Parameter_converter = new WeakMap(), _Parameter_decimalplaces = new WeakMap(), _Parameter_defaultValue = new WeakMap(), _Parameter_defval = new WeakMap(), _Parameter_expression = new WeakMap(), _Parameter_format = new WeakMap(), _Parameter_group = new WeakMap(), _Parameter_id = new WeakMap(), _Parameter_inputValidator = new WeakMap(), _Parameter_logger = new WeakMap(), _Parameter_max = new WeakMap(), _Parameter_min = new WeakMap(), _Parameter_name = new WeakMap(), _Parameter_sessionEngine = new WeakMap(), _Parameter_structure = new WeakMap(), _Parameter_type = new WeakMap(), _Parameter_visualization = new WeakMap(), _Parameter_displayname = new WeakMap(), _Parameter_hidden = new WeakMap(), _Parameter_lastValidatedValue = new WeakMap(), _Parameter_order = new WeakMap(), _Parameter_sessionValue = new WeakMap(), _Parameter_tooltip = new WeakMap(), _Parameter_value = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"Parameter.js","sourceRoot":"","sources":["../../../src/implementation/dto/Parameter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ShapeDiverResponseParameterStructure, ShapeDiverResponseParameterGroup, ShapeDiverResponseParameter } from \"@shapediver/api.geometry-api-dto-v2\";\r\nimport { Converter, InputValidator, Logger, ShapeDiverViewerSessionError } from \"@shapediver/viewer.shared.services\";\r\nimport { IParameter } from \"../../interfaces/dto/IParameter\";\r\nimport { ISessionEngine, PARAMETER_TYPE, PARAMETER_VISUALIZATION } from \"../../interfaces/ISessionEngine\";\r\nimport * as MimeTypeUtils from \"@shapediver/viewer.utils.mime-type\"\r\nimport { SessionEngine } from \"../SessionEngine\";\r\n\r\nexport class Parameter<T> implements IParameter<T> {\r\n    // #region Properties (24)\r\n\r\n    readonly #choices?: string[];\r\n    readonly #converter: Converter = Converter.instance;\r\n    readonly #decimalplaces?: number;\r\n    readonly #defaultValue: T | string;\r\n    readonly #defval: string;\r\n    readonly #expression?: string;\r\n    readonly #format?: string[];\r\n    readonly #group?: ShapeDiverResponseParameterGroup;\r\n    readonly #id: string;\r\n    readonly #inputValidator: InputValidator = InputValidator.instance;\r\n    readonly #logger: Logger = Logger.instance;\r\n    readonly #max?: number;\r\n    readonly #min?: number;\r\n    readonly #name: string;\r\n    readonly #sessionEngine: SessionEngine;\r\n    readonly #structure?: ShapeDiverResponseParameterStructure;\r\n    readonly #type: PARAMETER_TYPE;\r\n    readonly #visualization?: PARAMETER_VISUALIZATION;\r\n\r\n    #displayname?: string;\r\n    #hidden: boolean = false;\r\n    #lastValidatedValue: T | string;\r\n    #order?: number;\r\n    #sessionValue: T | string;\r\n    #tooltip?: string;\r\n    #value: T | string;\r\n\r\n    // #endregion Properties (24)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(paramDef: ShapeDiverResponseParameter, sessionEngine: SessionEngine) {\r\n        this.#sessionEngine = sessionEngine;\r\n\r\n        this.#id = paramDef.id;\r\n        this.#defval = paramDef.defval;\r\n        this.#name = paramDef.name;\r\n        this.#type = <PARAMETER_TYPE>paramDef.type;\r\n        if (paramDef.choices !== undefined) this.#choices = paramDef.choices;\r\n        if (paramDef.decimalplaces !== undefined) this.#decimalplaces = +paramDef.decimalplaces;\r\n        if (paramDef.expression !== undefined) this.#expression = paramDef.expression;\r\n\r\n        if (paramDef.format !== undefined)\r\n            this.#format = MimeTypeUtils.extendMimeTypes(paramDef.format);\r\n\r\n        if (paramDef.min !== undefined) this.#min = +paramDef.min;\r\n        if (paramDef.max !== undefined) this.#max = +paramDef.max;\r\n        if (paramDef.visualization !== undefined) this.#visualization = <PARAMETER_VISUALIZATION>paramDef.visualization;\r\n        if (paramDef.structure !== undefined) this.#structure = paramDef.structure;\r\n        if (paramDef.group !== undefined) this.#group = paramDef.group;\r\n        if (paramDef.tooltip !== undefined) this.#tooltip = paramDef.tooltip;\r\n\r\n        if (paramDef.displayname !== undefined) this.#displayname = paramDef.displayname;\r\n        if (paramDef.order !== undefined) this.#order = paramDef.order;\r\n        if (paramDef.hidden !== undefined) this.#hidden = paramDef.hidden;\r\n\r\n        if (this.#type === PARAMETER_TYPE.BOOL) {\r\n            this.#defaultValue = <T><unknown>(this.#defval === 'true');\r\n        } else if (this.#type === PARAMETER_TYPE.EVEN || this.#type === PARAMETER_TYPE.FLOAT || this.#type === PARAMETER_TYPE.INT || this.#type === PARAMETER_TYPE.ODD) {\r\n            this.#defaultValue = <T><unknown>+this.#defval;\r\n        } else {\r\n            this.#defaultValue = this.#defval;\r\n        }\r\n\r\n        if (this.#type === PARAMETER_TYPE.COLOR) {\r\n            (<any>this).convertColor = (color: any): string => {\r\n                return this.#converter.toHexColor(color);\r\n            }\r\n        }\r\n\r\n        this.#value = this.#defaultValue;\r\n        this.#sessionValue = this.#value;\r\n        this.#lastValidatedValue = this.#value;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (26)\r\n\r\n    public get choices(): string[] | undefined {\r\n        return this.#choices;\r\n    }\r\n\r\n    public get decimalplaces(): number | undefined {\r\n        return this.#decimalplaces;\r\n    }\r\n\r\n    public get defval(): string {\r\n        return this.#defval;\r\n    }\r\n\r\n    public get displayname(): string | undefined {\r\n        return this.#displayname;\r\n    }\r\n\r\n    public set displayname(value: string | undefined) {\r\n        this.#displayname = value;\r\n    }\r\n\r\n    public get expression(): string | undefined {\r\n        return this.#expression;\r\n    }\r\n\r\n    public get format(): string[] | undefined {\r\n        return this.#format;\r\n    }\r\n\r\n    public get group(): ShapeDiverResponseParameterGroup | undefined {\r\n        return this.#group;\r\n    }\r\n\r\n    public get hidden(): boolean {\r\n        return this.#hidden;\r\n    }\r\n\r\n    public set hidden(value: boolean) {\r\n        this.#hidden = value;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.#id;\r\n    }\r\n\r\n    public get lastValidatedValue(): T | string {\r\n        return this.#lastValidatedValue;\r\n    }\r\n\r\n    public get max(): number | undefined {\r\n        return this.#max;\r\n    }\r\n\r\n    public get min(): number | undefined {\r\n        return this.#min;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.#name;\r\n    }\r\n\r\n    public get order(): number | undefined {\r\n        return this.#order;\r\n    }\r\n\r\n    public set order(value: number | undefined) {\r\n        this.#order = value;\r\n    }\r\n\r\n    public get sessionValue(): T | string {\r\n        return this.#sessionValue;\r\n    }\r\n\r\n    public set sessionValue(value: T | string) {\r\n        this.#sessionValue = value;\r\n    }\r\n\r\n    public get structure(): ShapeDiverResponseParameterStructure | undefined {\r\n        return this.#structure;\r\n    }\r\n\r\n    public get tooltip(): string | undefined {\r\n        return this.#tooltip;\r\n    }\r\n\r\n    public set tooltip(value: string | undefined) {\r\n        this.#tooltip = value;\r\n    }\r\n\r\n    public get type(): PARAMETER_TYPE {\r\n        return this.#type;\r\n    }\r\n\r\n    public get value(): T | string {\r\n        return this.#value;\r\n    }\r\n\r\n    public set value(value: T | string) {\r\n        this.#value = value;\r\n        if(this.#sessionEngine.customizeOnParameterChange) this.#sessionEngine.customize();\r\n    }\r\n\r\n    public get visualization(): PARAMETER_VISUALIZATION | undefined {\r\n        return this.#visualization;\r\n    }\r\n\r\n    // #endregion Public Accessors (26)\r\n\r\n    // #region Public Methods (4)\r\n\r\n    public isValid(value: any): boolean {\r\n        switch (true) {\r\n            case this.type === PARAMETER_TYPE.BOOL:\r\n                if (typeof value === 'string') {\r\n                    if (!(value === 'true' || value === 'false')) \r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is a string that is neither true or false.`);\r\n                } else {\r\n                    this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, value, 'boolean');\r\n                }\r\n                break;\r\n            case this.type === PARAMETER_TYPE.COLOR:\r\n                this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, value, 'color');\r\n                break;\r\n            case this.type === PARAMETER_TYPE.FILE:\r\n                this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, value, 'file');\r\n                break;\r\n            case this.type === PARAMETER_TYPE.EVEN || this.type === PARAMETER_TYPE.FLOAT || this.type === PARAMETER_TYPE.INT || this.type === PARAMETER_TYPE.ODD:\r\n                let temp: number = value;\r\n                if (typeof value === 'string')\r\n                    temp = +value;\r\n                this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, temp, 'number');\r\n                if (this.type === PARAMETER_TYPE.EVEN) {\r\n                    if (temp % 2 !== 0) \r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is not even.`);\r\n                } else if (this.type === PARAMETER_TYPE.ODD) {\r\n                    if (temp % 2 === 0) \r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is not odd.`);\r\n                } else if (this.type === PARAMETER_TYPE.INT) {\r\n                    if (!Number.isInteger(temp))\r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is not an integer.`);\r\n                }\r\n                if (this.min || this.min === 0)\r\n                    if (temp < this.min)\r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is smaller than the minimum ${this.min}.`);\r\n\r\n                if (this.max || this.max === 0)\r\n                    if (temp > this.max)\r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} is larger than the maximum ${this.max}.`);\r\n\r\n                if (this.decimalplaces || this.decimalplaces === 0) {\r\n                    const numStr = temp + '';\r\n                    let decimalplaces = 0;\r\n                    if (numStr.includes('.'))\r\n                        decimalplaces = numStr.split('.')[1].length;\r\n                    if (this.decimalplaces < decimalplaces)\r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${value} has not the correct number of decimalplaces (${this.decimalplaces}).`);\r\n                }\r\n\r\n                break;\r\n            case this.type === PARAMETER_TYPE.STRINGLIST:\r\n                this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, value, 'string');\r\n                const choicesChecker = (v: string) => {\r\n                    // has to be a single value that is\r\n                    // 1. convertible to number\r\n                    // 2. between 0 and choices.length -1\r\n                    const temp = +v;\r\n                    this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, temp, 'number');\r\n                    if (temp < 0 || temp > this.choices!.length - 1)\r\n                        throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${v} is not within the range of the defined number choices.`);\r\n                }\r\n\r\n                if (this.visualization === PARAMETER_VISUALIZATION.CHECKLIST) {\r\n                    // comma separated numbers\r\n                    if (value.includes(',')) {\r\n                        const values: string[] = value.split(',');\r\n                        for (let i = 0; i < values.length; i++) {\r\n                            if (values.filter(item => item === values[i]).length !== 1)\r\n                                throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).isValid: The value ${values[i]} exists multiple times, but should only exist once.`);\r\n                            choicesChecker(values[i]);\r\n                        }\r\n                    } else {\r\n                        // to number\r\n                        let temp: number = value;\r\n                        if (typeof value === 'string')\r\n                            temp = +value;\r\n                        this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, temp, 'number');\r\n                        choicesChecker(value);\r\n                    }\r\n                } else {\r\n                    // to number\r\n                    let temp: number = value;\r\n                    if (typeof value === 'string')\r\n                        temp = +value;\r\n                    this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, temp, 'number');\r\n                    choicesChecker(value);\r\n                }\r\n                break;\r\n            default:\r\n                this.#inputValidator.validateAndError(`Parameter(${this.#id}).isValid`, value, 'string');\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public resetToDefaultValue() {\r\n        this.#value = this.#defaultValue;\r\n    }\r\n\r\n    public resetToSessionValue() {\r\n        this.#value = this.sessionValue;\r\n    }\r\n\r\n    public stringify(): string {\r\n        switch (true) {\r\n            case this.type === PARAMETER_TYPE.BOOL:\r\n                return typeof this.value === 'string' ? this.value : (<boolean><unknown>this.value) + '';\r\n            case this.type === PARAMETER_TYPE.COLOR:\r\n                return this.#converter.toHex8Color(this.value);\r\n            case this.type === PARAMETER_TYPE.FILE:\r\n                if (typeof this.value !== 'string')\r\n                    throw new ShapeDiverViewerSessionError(`Parameter(${this.#id}).stringify: Error in stringify. Cannot stringify FileParameter that has not been uploaded yet.`);\r\n                return <string>this.value;\r\n            case this.type === PARAMETER_TYPE.EVEN || this.type === PARAMETER_TYPE.FLOAT || this.type === PARAMETER_TYPE.INT || this.type === PARAMETER_TYPE.ODD:\r\n                if(typeof this.value === 'string') {\r\n                    // cast to number and round to decimalplaces if they exist\r\n                    if (this.decimalplaces || this.decimalplaces === 0) {\r\n                        const number = +this.value;\r\n                        return number.toFixed(this.#decimalplaces);\r\n                    } else {\r\n                        return this.value;\r\n                    }\r\n                } else {\r\n                    // round to decimalplaces if they exist\r\n                    if (this.decimalplaces || this.decimalplaces === 0) {\r\n                        return (<number><unknown>this.value).toFixed(this.#decimalplaces);\r\n                    } else {\r\n                        return (<number><unknown>this.value) + '';\r\n                    }\r\n                }\r\n            default:\r\n                return <string>this.value;\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (4)\r\n}"]}},"error":null,"hash":"772847fe505d40ac70d2ccd3f234f9b2","cacheData":{"env":{}}}