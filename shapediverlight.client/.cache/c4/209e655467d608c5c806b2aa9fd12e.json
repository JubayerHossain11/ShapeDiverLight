{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/loaders/GeometryLoader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js.map","includedInParent":true,"mtime":1706542086834},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\loaders\\GeometryLoader.ts","includedInParent":true,"mtime":1706542087351},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"three","loc":{"line":23,"column":35,"index":1026},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":24,"column":38,"index":1076},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":25,"column":41,"index":1154},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":26,"column":59,"index":1253},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"../materials/GemMaterial","loc":{"line":27,"column":30,"index":1341},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\GemMaterial.js"},{"name":"gl-matrix","loc":{"line":28,"column":28,"index":1399},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"../objects/SDData","loc":{"line":29,"column":25,"index":1439},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\GeometryLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\objects\\SDData.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GeometryLoader = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst GemMaterial_1 = require(\"../materials/GemMaterial\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nclass GeometryLoader {\r\n    // #endregion Properties (3)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (3)\r\n        this._primitiveCache = {};\r\n        this._geometryCache = {};\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._gemSphericalMapsCache = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (5)\r\n    emptyGeometryCache() {\r\n        this._geometryCache = {};\r\n        this._primitiveCache = {};\r\n    }\r\n    init() { }\r\n    /**\r\n     * Create a geometry object with the provided geometry data.\r\n     *\r\n     * @param geometry the geometry data\r\n     * @returns the geometry object\r\n     */\r\n    load(geometry, parent, newChild, skeleton) {\r\n        const threeGeometry = (() => {\r\n            if (!this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version]) {\r\n                return this.loadPrimitive(geometry.primitive);\r\n            }\r\n            else {\r\n                this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].counter++;\r\n                return this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].threeGeometry;\r\n            }\r\n        })();\r\n        let incomingMaterialData;\r\n        if (geometry.effectMaterials.length > 0) {\r\n            incomingMaterialData = geometry.effectMaterials[geometry.effectMaterials.length - 1].material;\r\n        }\r\n        else if (this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES) {\r\n            incomingMaterialData = geometry.attributeMaterial;\r\n        }\r\n        else {\r\n            incomingMaterialData = geometry.material;\r\n        }\r\n        const materialSettings = {\r\n            mode: geometry.mode,\r\n            useVertexTangents: threeGeometry.attributes.tangent !== undefined,\r\n            useVertexColors: threeGeometry.attributes.color !== undefined && this._renderingEngine.type !== viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES,\r\n            useFlatShading: threeGeometry.attributes.normal === undefined,\r\n            useMorphTargets: Object.keys(threeGeometry.morphAttributes).length > 0,\r\n            useMorphNormals: Object.keys(threeGeometry.morphAttributes).length > 0 && threeGeometry.morphAttributes.normal !== undefined\r\n        };\r\n        if (incomingMaterialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n            const gemMaterialData = incomingMaterialData;\r\n            if (!threeGeometry.boundingSphere)\r\n                threeGeometry.computeBoundingSphere();\r\n            let sphericalNormalMap = this.createCubeNormalMap(geometry, threeGeometry);\r\n            let center = threeGeometry.boundingSphere.center, radius = threeGeometry.boundingSphere.radius;\r\n            gemMaterialData.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;\r\n            gemMaterialData.center = gl_matrix_1.vec3.fromValues(center.x, center.y, center.z);\r\n            gemMaterialData.radius = radius;\r\n            gemMaterialData.sphericalNormalMap = sphericalNormalMap;\r\n        }\r\n        while (parent.children.length !== 0)\r\n            parent.remove(parent.children[0]);\r\n        const material = this._renderingEngine.materialLoader.load(incomingMaterialData || geometry, materialSettings);\r\n        let obj;\r\n        if (this._geometryCache[geometry.id + '_' + geometry.version] && !skeleton) {\r\n            obj = this._geometryCache[geometry.id + '_' + geometry.version].obj;\r\n            // case 1: in case the geometry data was cloned and this is a different object\r\n            // case 2: it is a new child\r\n            if (newChild === false && obj.parent !== parent || newChild === true) {\r\n                obj = obj.cloneObject();\r\n                parent.add(obj);\r\n            }\r\n            obj.traverse(o => {\r\n                if (o instanceof THREE.Points ||\r\n                    o instanceof THREE.LineSegments ||\r\n                    o instanceof THREE.LineLoop ||\r\n                    o instanceof THREE.Line ||\r\n                    o instanceof THREE.Mesh)\r\n                    o.material = material;\r\n            });\r\n        }\r\n        else {\r\n            obj = new SDData_1.SDData(geometry.id, geometry.version);\r\n            this.createMesh(obj, geometry, threeGeometry, material, materialSettings, skeleton);\r\n            this._geometryCache[geometry.id + '_' + geometry.version] = { obj };\r\n            parent.add(obj);\r\n        }\r\n        obj.children.forEach(m => m.castShadow = true);\r\n        if (material instanceof GemMaterial_1.GemMaterial) {\r\n            obj.children.forEach(m => m.receiveShadow = false);\r\n        }\r\n        else {\r\n            obj.children.forEach(m => m.receiveShadow = true);\r\n        }\r\n        return geometry.boundingBox.clone();\r\n    }\r\n    loadPrimitive(primitive) {\r\n        let geometry = new THREE.BufferGeometry();\r\n        if (primitive.indices)\r\n            geometry.setIndex(new THREE.BufferAttribute(primitive.indices.array, primitive.indices.itemSize));\r\n        for (let attributeId in primitive.attributes) {\r\n            const buffer = this.loadAttribute(primitive.attributes[attributeId], attributeId);\r\n            const attributeName = this.getAttributeName(attributeId);\r\n            if (attributeId === 'NORMAL')\r\n                if (this.checkNormals(primitive, attributeId, buffer, geometry))\r\n                    continue;\r\n            geometry.setAttribute(attributeName, buffer);\r\n            const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n            if (morphAttributeData.length > 0) {\r\n                geometry.morphTargetsRelative = true;\r\n                const buffers = [];\r\n                for (let i = 0; i < morphAttributeData.length; i++)\r\n                    buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                geometry.morphAttributes[attributeName] = buffers;\r\n            }\r\n            // we copy the uv coordinates into the second set of uv coordinates if there are none\r\n            // this allows for the usage of AO and light maps that share this coordinate set\r\n            const attributeIdUV2 = 'TEXCOORD_1', attributeNameUV2 = 'uv2';\r\n            if (attributeName === 'uv' && !primitive.attributes[attributeIdUV2]) {\r\n                geometry.setAttribute(attributeNameUV2, buffer);\r\n                const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n                if (morphAttributeData.length > 0) {\r\n                    geometry.morphTargetsRelative = true;\r\n                    const buffers = [];\r\n                    for (let i = 0; i < morphAttributeData.length; i++)\r\n                        buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                    geometry.morphAttributes[attributeNameUV2] = buffers;\r\n                }\r\n            }\r\n        }\r\n        primitive.threeJsObject[this._renderingEngine.id] = geometry;\r\n        return geometry;\r\n    }\r\n    removeFromGeometryCache(id) {\r\n        if (this._geometryCache[id])\r\n            delete this._geometryCache[id];\r\n    }\r\n    removeFromPrimitiveCache(id) {\r\n        if (this._primitiveCache[id]) {\r\n            if (this._primitiveCache[id].counter === 1) {\r\n                for (const key in this._primitiveCache[id].threeGeometry.attributes)\r\n                    this._primitiveCache[id].threeGeometry.deleteAttribute(key);\r\n                this._primitiveCache[id].threeGeometry.setIndex(null);\r\n                this._primitiveCache[id].threeGeometry.dispose();\r\n                delete this._primitiveCache[id];\r\n            }\r\n            else {\r\n                this._primitiveCache[id].counter--;\r\n            }\r\n        }\r\n    }\r\n    // #endregion Public Methods (5)\r\n    // #region Private Methods (5)\r\n    checkNormals(primitive, attributeId, buffer, geometry) {\r\n        let blnNormalsOk = false;\r\n        for (let index = 0; index < 10; ++index) {\r\n            if (Math.abs(buffer.array[index * 3]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (Math.abs(buffer.array[index * 3 + 1]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (Math.abs(buffer.array[index * 3 + 2]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blnNormalsOk) {\r\n            geometry.computeVertexNormals();\r\n            const computedNormalAttribute = geometry.getAttribute('normal');\r\n            // store the computed normals in the attribute data\r\n            primitive.attributes[attributeId] = new viewer_shared_types_1.AttributeData(new Float32Array(computedNormalAttribute.array), computedNormalAttribute.itemSize, 0, 0, 3, computedNormalAttribute.normalized, computedNormalAttribute.array.length / 3);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    convertToTriangleMode(geometry, drawMode) {\r\n        let index = geometry.getIndex();\r\n        // generate index if not present\r\n        if (index === null) {\r\n            const indices = [];\r\n            const position = geometry.getAttribute('position');\r\n            if (position !== undefined) {\r\n                for (let i = 0; i < position.count; i++)\r\n                    indices.push(i);\r\n                geometry.setIndex(indices);\r\n                index = geometry.getIndex();\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Undefined position attribute. Processing not possible.`);\r\n            }\r\n        }\r\n        if (index === null)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Undefined index. Processing not possible.`);\r\n        const numberOfTriangles = index.count - 2;\r\n        const newIndices = [];\r\n        if (drawMode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            for (let i = 1; i <= numberOfTriangles; i++) {\r\n                newIndices.push(index.getX(0));\r\n                newIndices.push(index.getX(i));\r\n                newIndices.push(index.getX(i + 1));\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < numberOfTriangles; i++) {\r\n                if (i % 2 === 0) {\r\n                    newIndices.push(index.getX(i));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i + 2));\r\n                }\r\n                else {\r\n                    newIndices.push(index.getX(i + 2));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i));\r\n                }\r\n            }\r\n        }\r\n        if ((newIndices.length / 3) !== numberOfTriangles)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Unable to generate correct amount of triangle.`);\r\n        geometry.setIndex(newIndices);\r\n    }\r\n    createCubeNormalMap(geometryData, geometry, resolution = 1024) {\r\n        if (this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version])\r\n            return this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version];\r\n        if (!this._gemScene) {\r\n            this._gemScene = new THREE.Scene();\r\n            this._gemCubeCameraRenderTarget = new THREE.WebGLCubeRenderTarget(resolution, { format: THREE.RGBAFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });\r\n            this._gemCubeCameraRenderTarget.texture.generateMipmaps = false;\r\n            this._gemCubeCameraRenderTarget.texture.minFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.magFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.format = THREE.RGBAFormat;\r\n            this._gemCubeCamera = new THREE.CubeCamera(0.001, 10000, this._gemCubeCameraRenderTarget);\r\n            this._gemScene.add(this._gemCubeCamera);\r\n        }\r\n        if (!this._gemNormalMaterial) {\r\n            let _normalShader = {\r\n                defines: {},\r\n                uniforms: THREE.UniformsUtils.merge([\r\n                    THREE.UniformsLib.common\r\n                ]),\r\n                vertexShader: `\r\n                varying vec3 vNormal;\r\n\r\n                void main() {\r\n                  vNormal = normal;\r\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n                }\r\n                `,\r\n                fragmentShader: `\r\n                varying highp vec3 vNormal;\r\n\r\n                float decodeFloat(float f) {\r\n                    float r = mod(f, 1.0/255.0);\r\n                    return /*r > 0.5/256.0 ? f + (1.0/256.0) - r : */f - r;\r\n                }\r\n                \r\n                vec3 decodeVec3(vec3 v) {\r\n                    return vec3(decodeFloat(v.x), decodeFloat(v.y), decodeFloat(v.z));\r\n                }\r\n                \r\n                float signEncoding(vec3 v) {\r\n                    float code = 1.0;\r\n                     if(v.x < 0.0 && v.y < 0.0 && v.z < 0.0) {\r\n                        code = 0.0;\r\n                    } else if (v.x < 0.0 && v.y < 0.0) {\r\n                        code = 2.0/256.0;\r\n                    } else if (v.x < 0.0 && v.z < 0.0) {\r\n                        code = 4.0/256.0;\r\n                    } else if (v.y < 0.0 && v.z < 0.0) {\r\n                        code = 6.0/256.0;\r\n                    } else if (v.x < 0.0) {\r\n                        code = 8.0/256.0;\r\n                    } else if (v.y < 0.0) {\r\n                        code = 10.0/256.0;\r\n                    } else if (v.z < 0.0) {\r\n                        code = 12.0/256.0;\r\n                    }\r\n                    return code;\r\n                }\r\n                \r\n                void main() {\r\n                    vec3 n = normalize(vNormal);\r\n                    gl_FragColor = vec4(decodeVec3(abs(n)), signEncoding(n));\r\n                }\r\n                `\r\n            };\r\n            this._gemNormalMaterial = new THREE.ShaderMaterial({\r\n                uniforms: THREE.UniformsUtils.clone(_normalShader.uniforms),\r\n                defines: _normalShader.defines,\r\n                vertexShader: _normalShader.vertexShader,\r\n                fragmentShader: _normalShader.fragmentShader\r\n            });\r\n            this._gemNormalMaterial.blending = THREE.NoBlending;\r\n            this._gemNormalMaterial.side = THREE.DoubleSide;\r\n            this._gemScene.overrideMaterial = this._gemNormalMaterial;\r\n        }\r\n        let mesh = new THREE.Mesh(geometry.clone(), this._gemNormalMaterial);\r\n        mesh.geometry.center();\r\n        this._gemScene.add(mesh);\r\n        this._gemCubeCamera.update(this._renderingEngine.renderer, this._gemScene);\r\n        this._gemScene.remove(mesh);\r\n        mesh.geometry.dispose();\r\n        mesh.material.dispose();\r\n        this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version] = this._gemCubeCamera.renderTarget.texture;\r\n        return this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version];\r\n    }\r\n    createMesh(obj, geometry, threeGeometry, material, materialSettings, skeleton) {\r\n        if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.POINTS) {\r\n            const points = new THREE.Points(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = points;\r\n            obj.add(points);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINES) {\r\n            const lineSegments = new THREE.LineSegments(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = lineSegments;\r\n            obj.add(lineSegments);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINE_LOOP) {\r\n            const lineLoop = new THREE.LineLoop(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = lineLoop;\r\n            obj.add(lineLoop);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINE_STRIP) {\r\n            const line = new THREE.Line(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = line;\r\n            obj.add(line);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLES || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            let bufferGeometry = threeGeometry;\r\n            if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN)\r\n                this.convertToTriangleMode(bufferGeometry, geometry.mode);\r\n            if (skeleton) {\r\n                const skinnedMesh = new THREE.SkinnedMesh(bufferGeometry, material);\r\n                geometry.threeJsObject[this._renderingEngine.id] = skinnedMesh;\r\n                skinnedMesh.bind(skeleton, skinnedMesh.matrixWorld);\r\n                if (bufferGeometry.attributes.skinWeight.normalized)\r\n                    skinnedMesh.normalizeSkinWeights();\r\n                obj.add(skinnedMesh);\r\n            }\r\n            else {\r\n                const mesh = new THREE.Mesh(bufferGeometry, material);\r\n                geometry.threeJsObject[this._renderingEngine.id] = mesh;\r\n                obj.add(mesh);\r\n            }\r\n        }\r\n        else {\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.load: Unrecognized primitive mode ${geometry.mode}.`);\r\n        }\r\n        obj.traverse(m => {\r\n            if (m instanceof THREE.Mesh && m.userData.transparencyPlaceholder !== true) {\r\n                m.geometry.boundingBox = new THREE.Box3(new THREE.Vector3(geometry.boundingBox.min[0], geometry.boundingBox.min[1], geometry.boundingBox.min[2]), new THREE.Vector3(geometry.boundingBox.max[0], geometry.boundingBox.max[1], geometry.boundingBox.max[2]));\r\n                m.geometry.boundingSphere = new THREE.Sphere(new THREE.Vector3(geometry.boundingBox.boundingSphere.center[0], geometry.boundingBox.boundingSphere.center[1], geometry.boundingBox.boundingSphere.center[2]), geometry.boundingBox.boundingSphere.radius);\r\n                m.geometry.userData = {\r\n                    SDid: geometry.id,\r\n                    SDversion: geometry.version,\r\n                    primitiveSDid: geometry.primitive.id,\r\n                    primitiveSDversion: geometry.primitive.version\r\n                };\r\n                m.renderOrder = geometry.renderOrder;\r\n                m.morphTargetInfluences = geometry.morphWeights;\r\n            }\r\n        });\r\n        this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version] = { threeGeometry, materialSettings, counter: 1 };\r\n    }\r\n    getAttributeName(attributeId) {\r\n        switch (attributeId) {\r\n            case 'POSITION':\r\n                return 'position';\r\n            case 'NORMAL':\r\n                return 'normal';\r\n            case 'TEXCOORD_0':\r\n            case 'TEXCOORD0':\r\n            case 'TEXCOORD':\r\n            case 'UV':\r\n                return 'uv';\r\n            case 'TEXCOORD_1':\r\n                return 'uv2';\r\n            case 'COLOR_0':\r\n            case 'COLOR0':\r\n            case 'COLOR':\r\n                return 'color';\r\n            case 'WEIGHT':\r\n            case 'WEIGHTS_0':\r\n                return 'skinWeight';\r\n            case 'JOINT':\r\n            case 'JOINTS_0':\r\n                return 'skinIndex';\r\n            case 'TANGENT':\r\n                return 'tangent';\r\n            default:\r\n                this._logger.warn(`GeometryLoader.loadPrimitive: Unrecognized attribute id ${attributeId}.`);\r\n        }\r\n        return '';\r\n    }\r\n    loadAttribute(bufferAttribute, attributeId) {\r\n        let buffer;\r\n        if (bufferAttribute.byteStride && bufferAttribute.byteStride !== bufferAttribute.itemBytes) {\r\n            // Integer parameters to IB/IBA are in array elements, not bytes.\r\n            const ib = new THREE.InterleavedBuffer(bufferAttribute.array, bufferAttribute.byteStride / bufferAttribute.elementBytes);\r\n            buffer = new THREE.InterleavedBufferAttribute(ib, bufferAttribute.itemSize, (bufferAttribute.byteOffset % bufferAttribute.byteStride) / bufferAttribute.elementBytes, bufferAttribute.normalized);\r\n        }\r\n        else {\r\n            buffer = new THREE.BufferAttribute(bufferAttribute.array, bufferAttribute.itemSize, (attributeId === 'COLOR_0' || attributeId === 'COLOR0' || attributeId === 'COLOR') ? true : bufferAttribute.normalized);\r\n        }\r\n        if (bufferAttribute.sparse) {\r\n            if (bufferAttribute.array !== null) {\r\n                // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\r\n                buffer = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\r\n            }\r\n            for (let i = 0, il = bufferAttribute.sparseIndices.length; i < il; i++) {\r\n                const index = bufferAttribute.sparseIndices[i];\r\n                buffer.setX(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize]);\r\n                if (bufferAttribute.itemSize >= 2)\r\n                    buffer.setY(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 1]);\r\n                if (bufferAttribute.itemSize >= 3)\r\n                    buffer.setZ(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 2]);\r\n                if (bufferAttribute.itemSize >= 4)\r\n                    buffer.setW(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 3]);\r\n                if (bufferAttribute.itemSize >= 5)\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.loadPrimitive: Unsupported itemSize in sparse BufferAttribute.`);\r\n            }\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\nexports.GeometryLoader = GeometryLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GeometryLoader.js","sourceRoot":"","sources":["../../src/loaders/GeometryLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport {\r\n    AttributeData,\r\n    GeometryData,\r\n    MATERIAL_SIDE,\r\n    IMaterialAbstractData,\r\n    PRIMITIVE_MODE,\r\n    IPrimitiveData,\r\n    IAttributeData,\r\n    MaterialGemData,\r\n    MaterialStandardData,\r\n} from '@shapediver/viewer.shared.types'\r\nimport { IBox } from '@shapediver/viewer.shared.math'\r\nimport { Logger, ShapeDiverViewerDataProcessingError } from '@shapediver/viewer.shared.services'\r\nimport { RENDERER_TYPE } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\n\r\nimport { RenderingEngine } from '../RenderingEngine'\r\nimport { ILoader } from '../interfaces/ILoader'\r\nimport { SpecularGlossinessMaterial } from '../materials/SpecularGlossinessMaterial'\r\nimport { MaterialSettings } from './MaterialLoader'\r\nimport { GemMaterial } from '../materials/GemMaterial'\r\nimport { mat4, mat3, vec3 } from 'gl-matrix'\r\nimport { SDData } from '../objects/SDData'\r\nimport { SDObject } from '../objects/SDObject'\r\n\r\nexport class GeometryLoader implements ILoader {\r\n    // #region Properties (3)\r\n\r\n    private _primitiveCache: {\r\n        [key: string]: {\r\n            counter: number,\r\n            threeGeometry: THREE.BufferGeometry,\r\n            materialSettings: {\r\n                mode: PRIMITIVE_MODE,\r\n                useVertexTangents: boolean,\r\n                useVertexColors: boolean,\r\n                useFlatShading: boolean,\r\n                useMorphTargets: boolean,\r\n                useMorphNormals: boolean\r\n            }\r\n        }\r\n    } = {};\r\n    private _geometryCache: {\r\n        [key: string]: {\r\n            obj: SDData\r\n        }\r\n    } = {};\r\n    private _logger: Logger = Logger.instance;\r\n    private _gemSphericalMapsCache: {\r\n        [key: string]: THREE.CubeTexture\r\n    } = {};\r\n    private _gemNormalMaterial?: THREE.ShaderMaterial;\r\n    private _gemCubeCameraRenderTarget?: THREE.WebGLCubeRenderTarget;\r\n    private _gemScene?: THREE.Scene;\r\n    private _gemCubeCamera?: THREE.CubeCamera\r\n\r\n    // #endregion Properties (3)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (5)\r\n\r\n    public emptyGeometryCache() {\r\n        this._geometryCache = {};\r\n        this._primitiveCache = {};\r\n    }\r\n\r\n    public init(): void { }\r\n\r\n    /**\r\n     * Create a geometry object with the provided geometry data.\r\n     * \r\n     * @param geometry the geometry data\r\n     * @returns the geometry object\r\n     */\r\n    public load(geometry: GeometryData, parent: SDData, newChild: boolean, skeleton?: THREE.Skeleton): IBox {\r\n        const threeGeometry = (() => {\r\n            if(!this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version]) {\r\n                return this.loadPrimitive(geometry.primitive);\r\n            } else {\r\n                this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].counter++;\r\n                return this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].threeGeometry;\r\n            }\r\n        })();\r\n\r\n        let incomingMaterialData: IMaterialAbstractData | null;\r\n        if (geometry.effectMaterials.length > 0) {\r\n            incomingMaterialData = geometry.effectMaterials[geometry.effectMaterials.length - 1].material\r\n        } else if (this._renderingEngine.type === RENDERER_TYPE.ATTRIBUTES) {\r\n            incomingMaterialData = geometry.attributeMaterial;\r\n        } else {\r\n            incomingMaterialData = geometry.material;\r\n        }\r\n\r\n        const materialSettings = {\r\n            mode: geometry.mode,\r\n            useVertexTangents: threeGeometry.attributes.tangent !== undefined,\r\n            useVertexColors: threeGeometry.attributes.color !== undefined && this._renderingEngine.type !== RENDERER_TYPE.ATTRIBUTES,\r\n            useFlatShading: threeGeometry.attributes.normal === undefined,\r\n            useMorphTargets: Object.keys(threeGeometry.morphAttributes).length > 0,\r\n            useMorphNormals: Object.keys(threeGeometry.morphAttributes).length > 0 && threeGeometry.morphAttributes.normal !== undefined\r\n        }\r\n\r\n        if (incomingMaterialData instanceof MaterialGemData) {\r\n            const gemMaterialData = <MaterialGemData>incomingMaterialData;\r\n            if (!threeGeometry.boundingSphere) threeGeometry.computeBoundingSphere();\r\n\r\n            let sphericalNormalMap = this.createCubeNormalMap(geometry, threeGeometry);\r\n\r\n            let center = threeGeometry.boundingSphere!.center,\r\n                radius = threeGeometry.boundingSphere!.radius;\r\n\r\n            gemMaterialData.side = MATERIAL_SIDE.FRONT;\r\n\r\n            gemMaterialData.center = vec3.fromValues(center.x, center.y, center.z);\r\n            gemMaterialData.radius = radius;\r\n            (<any>gemMaterialData.sphericalNormalMap) = sphericalNormalMap;\r\n        }\r\n\r\n        while(parent.children.length !== 0)\r\n            parent.remove(parent.children[0]);\r\n\r\n        const material = this._renderingEngine.materialLoader.load(incomingMaterialData || geometry, materialSettings);\r\n        let obj: SDData;\r\n        if (this._geometryCache[geometry.id + '_' + geometry.version] && !skeleton) {\r\n            obj = this._geometryCache[geometry.id + '_' + geometry.version].obj;\r\n\r\n            // case 1: in case the geometry data was cloned and this is a different object\r\n            // case 2: it is a new child\r\n            if(newChild === false && obj.parent !== parent || newChild === true) {\r\n                obj = obj.cloneObject() as SDData;\r\n                parent.add(obj);\r\n            }\r\n\r\n            obj.traverse(o => {\r\n                if (\r\n                    o instanceof THREE.Points ||\r\n                    o instanceof THREE.LineSegments ||\r\n                    o instanceof THREE.LineLoop ||\r\n                    o instanceof THREE.Line ||\r\n                    o instanceof THREE.Mesh)\r\n                    o.material = material;\r\n            })\r\n        } else {\r\n            obj = new SDData(geometry.id, geometry.version);\r\n            this.createMesh(obj, geometry, threeGeometry, material, materialSettings, skeleton);\r\n            this._geometryCache[geometry.id + '_' + geometry.version] = { obj };\r\n            parent.add(obj);\r\n        }\r\n\r\n        obj.children.forEach(m => m.castShadow = true);\r\n        if (material instanceof GemMaterial) {\r\n            obj.children.forEach(m => m.receiveShadow = false);\r\n        } else {\r\n            obj.children.forEach(m => m.receiveShadow = true);\r\n        }\r\n\r\n        return geometry.boundingBox.clone();\r\n    }\r\n\r\n    public loadPrimitive(primitive: IPrimitiveData): THREE.BufferGeometry {\r\n        let geometry = new THREE.BufferGeometry();\r\n        if (primitive.indices)\r\n            geometry.setIndex(new THREE.BufferAttribute(primitive.indices!.array, primitive.indices!.itemSize));\r\n\r\n        for (let attributeId in primitive.attributes) {\r\n            const buffer = this.loadAttribute(primitive.attributes[attributeId], attributeId);\r\n            const attributeName = this.getAttributeName(attributeId);\r\n\r\n            if (attributeId === 'NORMAL')\r\n                if (this.checkNormals(primitive, attributeId, buffer, geometry))\r\n                    continue;\r\n\r\n            geometry.setAttribute(attributeName, buffer)\r\n\r\n            const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n            if (morphAttributeData.length > 0) {\r\n                geometry.morphTargetsRelative = true;\r\n                const buffers: (THREE.BufferAttribute | THREE.InterleavedBufferAttribute)[] = [];\r\n                for (let i = 0; i < morphAttributeData.length; i++)\r\n                    buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                geometry.morphAttributes[attributeName] = buffers;\r\n\r\n            }\r\n\r\n            // we copy the uv coordinates into the second set of uv coordinates if there are none\r\n            // this allows for the usage of AO and light maps that share this coordinate set\r\n            const attributeIdUV2 = 'TEXCOORD_1', attributeNameUV2 = 'uv2';\r\n            if (attributeName === 'uv' && !primitive.attributes[attributeIdUV2]) {\r\n                geometry.setAttribute(attributeNameUV2, buffer)\r\n\r\n                const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n                if (morphAttributeData.length > 0) {\r\n                    geometry.morphTargetsRelative = true;\r\n                    const buffers: (THREE.BufferAttribute | THREE.InterleavedBufferAttribute)[] = [];\r\n                    for (let i = 0; i < morphAttributeData.length; i++)\r\n                        buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                    geometry.morphAttributes[attributeNameUV2] = buffers;\r\n                }\r\n            }\r\n        }\r\n        primitive.threeJsObject[this._renderingEngine.id] = geometry;\r\n        return geometry;\r\n    }\r\n\r\n    public removeFromGeometryCache(id: string) {\r\n        if (this._geometryCache[id])\r\n            delete this._geometryCache[id];\r\n    }\r\n\r\n    public removeFromPrimitiveCache(id: string) {\r\n        if (this._primitiveCache[id]) {\r\n            if(this._primitiveCache[id].counter === 1) {\r\n                for (const key in this._primitiveCache[id].threeGeometry.attributes)\r\n                    this._primitiveCache[id].threeGeometry.deleteAttribute(key);\r\n                this._primitiveCache[id].threeGeometry.setIndex(null);\r\n                this._primitiveCache[id].threeGeometry.dispose();\r\n\r\n                delete this._primitiveCache[id];\r\n            } else {\r\n                this._primitiveCache[id].counter--;\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (5)\r\n\r\n    // #region Private Methods (5)\r\n\r\n    private checkNormals(primitive: IPrimitiveData, attributeId: string, buffer: THREE.InterleavedBufferAttribute | THREE.BufferAttribute, geometry: THREE.BufferGeometry): boolean {\r\n        let blnNormalsOk = false;\r\n        for (let index = 0; index < 10; ++index) {\r\n            if (Math.abs(buffer.array[index * 3]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (\r\n                Math.abs(buffer.array[index * 3 + 1]) > 0.001\r\n            ) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (\r\n                Math.abs(buffer.array[index * 3 + 2]) > 0.001\r\n            ) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blnNormalsOk) {\r\n            geometry.computeVertexNormals();\r\n            const computedNormalAttribute = <THREE.BufferAttribute>geometry.getAttribute('normal');\r\n\r\n            // store the computed normals in the attribute data\r\n            primitive.attributes[attributeId] = new AttributeData(\r\n                new Float32Array(computedNormalAttribute.array),\r\n                computedNormalAttribute.itemSize,\r\n                0,\r\n                0,\r\n                3,\r\n                computedNormalAttribute.normalized,\r\n                computedNormalAttribute.array.length / 3);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private convertToTriangleMode(geometry: THREE.BufferGeometry, drawMode: PRIMITIVE_MODE) {\r\n        let index = geometry.getIndex();\r\n        // generate index if not present\r\n        if (index === null) {\r\n            const indices = [];\r\n            const position = geometry.getAttribute('position');\r\n            if (position !== undefined) {\r\n                for (let i = 0; i < position.count; i++)\r\n                    indices.push(i);\r\n                geometry.setIndex(indices);\r\n                index = geometry.getIndex();\r\n            } else {\r\n                throw new ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Undefined position attribute. Processing not possible.`);\r\n            }\r\n        }\r\n\r\n        if (index === null)\r\n            throw new ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Undefined index. Processing not possible.`);\r\n\r\n        const numberOfTriangles = index.count - 2;\r\n        const newIndices = [];\r\n        if (drawMode === PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            for (let i = 1; i <= numberOfTriangles; i++) {\r\n                newIndices.push(index.getX(0));\r\n                newIndices.push(index.getX(i));\r\n                newIndices.push(index.getX(i + 1));\r\n            }\r\n        } else {\r\n            for (let i = 0; i < numberOfTriangles; i++) {\r\n                if (i % 2 === 0) {\r\n                    newIndices.push(index.getX(i));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i + 2));\r\n                } else {\r\n                    newIndices.push(index.getX(i + 2));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((newIndices.length / 3) !== numberOfTriangles)\r\n            throw new ShapeDiverViewerDataProcessingError(`GeometryLoader.convertToTriangleMode: Unable to generate correct amount of triangle.`);\r\n\r\n        geometry.setIndex(newIndices);\r\n    }\r\n\r\n    private createCubeNormalMap(geometryData: GeometryData, geometry: THREE.BufferGeometry, resolution = 1024) {\r\n        if (this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version])\r\n            return this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version];\r\n\r\n        if (!this._gemScene) {\r\n            this._gemScene = new THREE.Scene();\r\n            this._gemCubeCameraRenderTarget = new THREE.WebGLCubeRenderTarget(resolution, { format: THREE.RGBAFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter })\r\n            this._gemCubeCameraRenderTarget.texture.generateMipmaps = false;\r\n            this._gemCubeCameraRenderTarget.texture.minFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.magFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.format = THREE.RGBAFormat;\r\n            this._gemCubeCamera = new THREE.CubeCamera(0.001, 10000, this._gemCubeCameraRenderTarget);\r\n            this._gemScene.add(this._gemCubeCamera);\r\n        }\r\n\r\n        if (!this._gemNormalMaterial) {\r\n            let _normalShader = {\r\n                defines: {},\r\n                uniforms: THREE.UniformsUtils.merge([\r\n                    THREE.UniformsLib.common]),\r\n                vertexShader: `\r\n                varying vec3 vNormal;\r\n\r\n                void main() {\r\n                  vNormal = normal;\r\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n                }\r\n                `,\r\n                fragmentShader: `\r\n                varying highp vec3 vNormal;\r\n\r\n                float decodeFloat(float f) {\r\n                    float r = mod(f, 1.0/255.0);\r\n                    return /*r > 0.5/256.0 ? f + (1.0/256.0) - r : */f - r;\r\n                }\r\n                \r\n                vec3 decodeVec3(vec3 v) {\r\n                    return vec3(decodeFloat(v.x), decodeFloat(v.y), decodeFloat(v.z));\r\n                }\r\n                \r\n                float signEncoding(vec3 v) {\r\n                    float code = 1.0;\r\n                     if(v.x < 0.0 && v.y < 0.0 && v.z < 0.0) {\r\n                        code = 0.0;\r\n                    } else if (v.x < 0.0 && v.y < 0.0) {\r\n                        code = 2.0/256.0;\r\n                    } else if (v.x < 0.0 && v.z < 0.0) {\r\n                        code = 4.0/256.0;\r\n                    } else if (v.y < 0.0 && v.z < 0.0) {\r\n                        code = 6.0/256.0;\r\n                    } else if (v.x < 0.0) {\r\n                        code = 8.0/256.0;\r\n                    } else if (v.y < 0.0) {\r\n                        code = 10.0/256.0;\r\n                    } else if (v.z < 0.0) {\r\n                        code = 12.0/256.0;\r\n                    }\r\n                    return code;\r\n                }\r\n                \r\n                void main() {\r\n                    vec3 n = normalize(vNormal);\r\n                    gl_FragColor = vec4(decodeVec3(abs(n)), signEncoding(n));\r\n                }\r\n                `\r\n            };\r\n\r\n            this._gemNormalMaterial = new THREE.ShaderMaterial({\r\n                uniforms: THREE.UniformsUtils.clone(_normalShader.uniforms),\r\n                defines: _normalShader.defines,\r\n                vertexShader: _normalShader.vertexShader,\r\n                fragmentShader: _normalShader.fragmentShader\r\n            });\r\n\r\n            this._gemNormalMaterial.blending = THREE.NoBlending;\r\n            this._gemNormalMaterial.side = THREE.DoubleSide;\r\n            this._gemScene.overrideMaterial = this._gemNormalMaterial;\r\n        }\r\n\r\n        let mesh = new THREE.Mesh(geometry.clone(), this._gemNormalMaterial);\r\n        mesh.geometry.center();\r\n        this._gemScene.add(mesh);\r\n\r\n        this._gemCubeCamera!.update(this._renderingEngine.renderer, this._gemScene);\r\n        this._gemScene.remove(mesh);\r\n        mesh.geometry.dispose();\r\n        mesh.material.dispose();\r\n\r\n        this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version] = this._gemCubeCamera!.renderTarget.texture;\r\n        return this._gemSphericalMapsCache[geometryData.id + '_' + geometryData.version];\r\n    }\r\n\r\n    private createMesh(obj: SDData, geometry: GeometryData, threeGeometry: THREE.BufferGeometry, material: THREE.Material, materialSettings: MaterialSettings, skeleton?: THREE.Skeleton) {\r\n        if (geometry.mode === PRIMITIVE_MODE.POINTS) {\r\n            const points = new THREE.Points(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = points;\r\n            obj.add(points);\r\n        } else if (geometry.mode === PRIMITIVE_MODE.LINES) {\r\n            const lineSegments = new THREE.LineSegments(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = lineSegments;\r\n            obj.add(lineSegments);\r\n        } else if (geometry.mode === PRIMITIVE_MODE.LINE_LOOP) {\r\n            const lineLoop = new THREE.LineLoop(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = lineLoop;\r\n            obj.add(lineLoop);\r\n        } else if (geometry.mode === PRIMITIVE_MODE.LINE_STRIP) {\r\n            const line = new THREE.Line(threeGeometry, material);\r\n            geometry.threeJsObject[this._renderingEngine.id] = line;\r\n            obj.add(line);\r\n        } else if (geometry.mode === PRIMITIVE_MODE.TRIANGLES || geometry.mode === PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            let bufferGeometry = threeGeometry;\r\n            if (geometry.mode === PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === PRIMITIVE_MODE.TRIANGLE_FAN)\r\n                this.convertToTriangleMode(bufferGeometry, geometry.mode);\r\n\r\n            if (skeleton) {\r\n                const skinnedMesh = new THREE.SkinnedMesh(bufferGeometry, material);\r\n                geometry.threeJsObject[this._renderingEngine.id] = skinnedMesh;\r\n                skinnedMesh.bind(skeleton, skinnedMesh.matrixWorld);\r\n\r\n                if ((<THREE.BufferAttribute>bufferGeometry.attributes.skinWeight).normalized)\r\n                    skinnedMesh.normalizeSkinWeights();\r\n\r\n                obj.add(skinnedMesh);\r\n            } else {\r\n                const mesh = new THREE.Mesh(bufferGeometry, material);\r\n                geometry.threeJsObject[this._renderingEngine.id] = mesh;\r\n                obj.add(mesh);\r\n            }\r\n        } else {\r\n            throw new ShapeDiverViewerDataProcessingError(`GeometryLoader.load: Unrecognized primitive mode ${geometry.mode}.`);\r\n        }\r\n\r\n        obj.traverse(m => {\r\n            if (m instanceof THREE.Mesh && m.userData.transparencyPlaceholder !== true) {\r\n                (<THREE.Mesh>m).geometry.boundingBox = new THREE.Box3(new THREE.Vector3(geometry.boundingBox.min[0], geometry.boundingBox.min[1], geometry.boundingBox.min[2]), new THREE.Vector3(geometry.boundingBox.max[0], geometry.boundingBox.max[1], geometry.boundingBox.max[2]));\r\n                (<THREE.Mesh>m).geometry.boundingSphere = new THREE.Sphere(new THREE.Vector3(geometry.boundingBox.boundingSphere.center[0], geometry.boundingBox.boundingSphere.center[1], geometry.boundingBox.boundingSphere.center[2]), geometry.boundingBox.boundingSphere.radius);\r\n                (<THREE.Mesh>m).geometry.userData = {\r\n                    SDid: geometry.id,\r\n                    SDversion: geometry.version,\r\n                    primitiveSDid: geometry.primitive.id,\r\n                    primitiveSDversion: geometry.primitive.version\r\n                };\r\n                m.renderOrder = geometry.renderOrder;\r\n                (<THREE.Mesh>m).morphTargetInfluences = geometry.morphWeights;\r\n            }\r\n        });\r\n\r\n        this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version] = { threeGeometry, materialSettings, counter: 1 };\r\n    }\r\n\r\n    private getAttributeName(attributeId: string): string {\r\n        switch (attributeId) {\r\n            case 'POSITION':\r\n                return 'position';\r\n            case 'NORMAL':\r\n                return 'normal';\r\n            case 'TEXCOORD_0':\r\n            case 'TEXCOORD0':\r\n            case 'TEXCOORD':\r\n            case 'UV':\r\n                return 'uv';\r\n            case 'TEXCOORD_1':\r\n                return 'uv2';\r\n            case 'COLOR_0':\r\n            case 'COLOR0':\r\n            case 'COLOR':\r\n                return 'color';\r\n            case 'WEIGHT':\r\n            case 'WEIGHTS_0':\r\n                return 'skinWeight';\r\n            case 'JOINT':\r\n            case 'JOINTS_0':\r\n                return 'skinIndex';\r\n            case 'TANGENT':\r\n                return 'tangent';\r\n            default:\r\n                this._logger.warn(`GeometryLoader.loadPrimitive: Unrecognized attribute id ${attributeId}.`);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private loadAttribute(bufferAttribute: IAttributeData, attributeId: string) {\r\n        let buffer: THREE.InterleavedBufferAttribute | THREE.BufferAttribute;\r\n\r\n        if (bufferAttribute.byteStride && bufferAttribute.byteStride !== bufferAttribute.itemBytes) {\r\n            // Integer parameters to IB/IBA are in array elements, not bytes.\r\n            const ib = new THREE.InterleavedBuffer(bufferAttribute.array, bufferAttribute.byteStride / bufferAttribute.elementBytes);\r\n            buffer = new THREE.InterleavedBufferAttribute(ib, bufferAttribute.itemSize, (bufferAttribute.byteOffset % bufferAttribute.byteStride) / bufferAttribute.elementBytes, bufferAttribute.normalized);\r\n        } else {\r\n            buffer = new THREE.BufferAttribute(bufferAttribute.array, bufferAttribute.itemSize, (attributeId === 'COLOR_0' || attributeId === 'COLOR0' || attributeId === 'COLOR') ? true : bufferAttribute.normalized);\r\n        }\r\n\r\n        if (bufferAttribute.sparse) {\r\n            if (bufferAttribute.array !== null) {\r\n                // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\r\n                buffer = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\r\n            }\r\n\r\n            for (let i = 0, il = bufferAttribute.sparseIndices!.length; i < il; i++) {\r\n                const index = bufferAttribute.sparseIndices![i];\r\n                buffer.setX(index, bufferAttribute.sparseValues![i * bufferAttribute.itemSize]);\r\n                if (bufferAttribute.itemSize >= 2) buffer.setY(index, bufferAttribute.sparseValues![i * bufferAttribute.itemSize + 1]);\r\n                if (bufferAttribute.itemSize >= 3) buffer.setZ(index, bufferAttribute.sparseValues![i * bufferAttribute.itemSize + 2]);\r\n                if (bufferAttribute.itemSize >= 4) buffer.setW(index, bufferAttribute.sparseValues![i * bufferAttribute.itemSize + 3]);\r\n                if (bufferAttribute.itemSize >= 5) throw new ShapeDiverViewerDataProcessingError(`GeometryLoader.loadPrimitive: Unsupported itemSize in sparse BufferAttribute.`);\r\n            }\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    // #endregion Private Methods (5)\r\n}"]}},"error":null,"hash":"82c07ad87a74f0a1fe0b7110ba6b35df","cacheData":{"env":{}}}