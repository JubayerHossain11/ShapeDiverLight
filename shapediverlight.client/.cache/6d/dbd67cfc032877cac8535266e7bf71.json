{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/three/postprocessing/EffectComposer.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\EffectComposer.js.map","includedInParent":true,"mtime":1706527153175},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\three\\postprocessing\\EffectComposer.js","includedInParent":true,"mtime":1706527152225},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":4,"column":24,"index":177},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\EffectComposer.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"../shaders/CopyShader.js","loc":{"line":5,"column":32,"index":220},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\EffectComposer.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\CopyShader.js"},{"name":"./ShaderPass.js","loc":{"line":6,"column":32,"index":282},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\EffectComposer.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\ShaderPass.js"},{"name":"./MaskPass.js","loc":{"line":8,"column":30,"index":382},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\EffectComposer.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\MaskPass.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FullScreenQuad = exports.Pass = exports.EffectComposer = void 0;\r\nconst three_1 = require(\"three\");\r\nconst CopyShader_js_1 = require(\"../shaders/CopyShader.js\");\r\nconst ShaderPass_js_1 = require(\"./ShaderPass.js\");\r\nconst MaskPass_js_1 = require(\"./MaskPass.js\");\r\nconst MaskPass_js_2 = require(\"./MaskPass.js\");\r\nclass EffectComposer {\r\n    constructor(renderer, renderTarget) {\r\n        this.renderer = renderer;\r\n        if (renderTarget === undefined) {\r\n            const parameters = {\r\n                minFilter: three_1.LinearFilter,\r\n                magFilter: three_1.LinearFilter,\r\n                format: three_1.RGBAFormat\r\n            };\r\n            const size = renderer.getSize(new three_1.Vector2());\r\n            this._pixelRatio = renderer.getPixelRatio();\r\n            this._width = size.width;\r\n            this._height = size.height;\r\n            renderTarget = new three_1.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\r\n            renderTarget.texture.name = 'EffectComposer.rt1';\r\n        }\r\n        else {\r\n            this._pixelRatio = 1;\r\n            this._width = renderTarget.width;\r\n            this._height = renderTarget.height;\r\n        }\r\n        this.renderTarget1 = renderTarget;\r\n        this.renderTarget2 = renderTarget.clone();\r\n        this.renderTarget2.texture.name = 'EffectComposer.rt2';\r\n        this.writeBuffer = this.renderTarget1;\r\n        this.readBuffer = this.renderTarget2;\r\n        this.renderToScreen = true;\r\n        this.passes = [];\r\n        // dependencies\r\n        if (CopyShader_js_1.CopyShader === undefined) {\r\n            console.error('THREE.EffectComposer relies on CopyShader');\r\n        }\r\n        if (ShaderPass_js_1.ShaderPass === undefined) {\r\n            console.error('THREE.EffectComposer relies on ShaderPass');\r\n        }\r\n        this.copyPass = new ShaderPass_js_1.ShaderPass(CopyShader_js_1.CopyShader);\r\n        this.clock = new three_1.Clock();\r\n    }\r\n    swapBuffers() {\r\n        const tmp = this.readBuffer;\r\n        this.readBuffer = this.writeBuffer;\r\n        this.writeBuffer = tmp;\r\n    }\r\n    addPass(pass) {\r\n        this.passes.push(pass);\r\n        pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\r\n    }\r\n    insertPass(pass, index) {\r\n        this.passes.splice(index, 0, pass);\r\n        pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\r\n    }\r\n    removePass(pass) {\r\n        const index = this.passes.indexOf(pass);\r\n        if (index !== -1) {\r\n            this.passes.splice(index, 1);\r\n        }\r\n    }\r\n    isLastEnabledPass(passIndex) {\r\n        for (let i = passIndex + 1; i < this.passes.length; i++) {\r\n            if (this.passes[i].enabled) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    render(deltaTime) {\r\n        // deltaTime value is in seconds\r\n        if (deltaTime === undefined) {\r\n            deltaTime = this.clock.getDelta();\r\n        }\r\n        const currentRenderTarget = this.renderer.getRenderTarget();\r\n        let maskActive = false;\r\n        for (let i = 0, il = this.passes.length; i < il; i++) {\r\n            const pass = this.passes[i];\r\n            if (pass.enabled === false)\r\n                continue;\r\n            pass.renderToScreen = (this.renderToScreen && this.isLastEnabledPass(i));\r\n            pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\r\n            if (pass.needsSwap) {\r\n                if (maskActive) {\r\n                    const context = this.renderer.getContext();\r\n                    const stencil = this.renderer.state.buffers.stencil;\r\n                    //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n                    stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\r\n                    this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\r\n                    //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n                    stencil.setFunc(context.EQUAL, 1, 0xffffffff);\r\n                }\r\n                this.swapBuffers();\r\n            }\r\n            if (MaskPass_js_1.MaskPass !== undefined) {\r\n                if (pass instanceof MaskPass_js_1.MaskPass) {\r\n                    maskActive = true;\r\n                }\r\n                else if (pass instanceof MaskPass_js_2.ClearMaskPass) {\r\n                    maskActive = false;\r\n                }\r\n            }\r\n        }\r\n        this.renderer.setRenderTarget(currentRenderTarget);\r\n    }\r\n    reset(renderTarget) {\r\n        if (renderTarget === undefined) {\r\n            const size = this.renderer.getSize(new three_1.Vector2());\r\n            this._pixelRatio = this.renderer.getPixelRatio();\r\n            this._width = size.width;\r\n            this._height = size.height;\r\n            renderTarget = this.renderTarget1.clone();\r\n            renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\r\n        }\r\n        this.renderTarget1.dispose();\r\n        this.renderTarget2.dispose();\r\n        this.renderTarget1 = renderTarget;\r\n        this.renderTarget2 = renderTarget.clone();\r\n        this.writeBuffer = this.renderTarget1;\r\n        this.readBuffer = this.renderTarget2;\r\n    }\r\n    setSize(width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n        const effectiveWidth = this._width * this._pixelRatio;\r\n        const effectiveHeight = this._height * this._pixelRatio;\r\n        this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\r\n        this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\r\n        for (let i = 0; i < this.passes.length; i++) {\r\n            this.passes[i].setSize(effectiveWidth, effectiveHeight);\r\n        }\r\n    }\r\n    setPixelRatio(pixelRatio) {\r\n        this._pixelRatio = pixelRatio;\r\n        this.setSize(this._width, this._height);\r\n    }\r\n}\r\nexports.EffectComposer = EffectComposer;\r\nclass Pass {\r\n    constructor() {\r\n        // if set to true, the pass is processed by the composer\r\n        this.enabled = true;\r\n        // if set to true, the pass indicates to swap read and write buffer after rendering\r\n        this.needsSwap = true;\r\n        // if set to true, the pass clears its buffer before rendering\r\n        this.clear = false;\r\n        // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\r\n        this.renderToScreen = false;\r\n    }\r\n    setSize( /* width, height */) { }\r\n    render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */) {\r\n        console.error('THREE.Pass: .render() must be implemented in derived pass.');\r\n    }\r\n}\r\nexports.Pass = Pass;\r\n// Helper for passes that need to fill the viewport with a single quad.\r\nconst _camera = new three_1.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n// https://github.com/mrdoob/three.js/pull/21358\r\nconst _geometry = new three_1.BufferGeometry();\r\n_geometry.setAttribute('position', new three_1.Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\r\n_geometry.setAttribute('uv', new three_1.Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\r\nclass FullScreenQuad {\r\n    constructor(material) {\r\n        this._mesh = new three_1.Mesh(_geometry, material);\r\n    }\r\n    dispose() {\r\n        this._mesh.geometry.dispose();\r\n    }\r\n    render(renderer) {\r\n        renderer.render(this._mesh, _camera);\r\n    }\r\n    get material() {\r\n        return this._mesh.material;\r\n    }\r\n    set material(value) {\r\n        this._mesh.material = value;\r\n    }\r\n}\r\nexports.FullScreenQuad = FullScreenQuad;\r\n"},"sourceMaps":{"js":{"version":3,"file":"EffectComposer.js","sourceRoot":"","sources":["../../../src/three/postprocessing/EffectComposer.js"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tClock,\r\n\tFloat32BufferAttribute,\r\n\tLinearFilter,\r\n\tMesh,\r\n\tOrthographicCamera,\r\n\tRGBAFormat,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { ShaderPass } from './ShaderPass.js';\r\nimport { MaskPass } from './MaskPass.js';\r\nimport { ClearMaskPass } from './MaskPass.js';\r\n\r\nclass EffectComposer {\r\n\r\n\tconstructor( renderer, renderTarget ) {\r\n\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst parameters = {\r\n\t\t\t\tminFilter: LinearFilter,\r\n\t\t\t\tmagFilter: LinearFilter,\r\n\t\t\t\tformat: RGBAFormat\r\n\t\t\t};\r\n\r\n\t\t\tconst size = renderer.getSize( new Vector2() );\r\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\r\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._pixelRatio = 1;\r\n\t\t\tthis._width = renderTarget.width;\r\n\t\t\tthis._height = renderTarget.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t\tthis.renderToScreen = true;\r\n\r\n\t\tthis.passes = [];\r\n\r\n\t\t// dependencies\r\n\r\n\t\tif ( CopyShader === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ShaderPass === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.copyPass = new ShaderPass( CopyShader );\r\n\r\n\t\tthis.clock = new Clock();\r\n\r\n\t}\r\n\r\n\tswapBuffers() {\r\n\r\n\t\tconst tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t}\r\n\r\n\taddPass( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\tinsertPass( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\tremovePass( pass ) {\r\n\r\n\t\tconst index = this.passes.indexOf( pass );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tthis.passes.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tisLastEnabledPass( passIndex ) {\r\n\r\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tif ( this.passes[ i ].enabled ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\trender( deltaTime ) {\r\n\r\n\t\t// deltaTime value is in seconds\r\n\r\n\t\tif ( deltaTime === undefined ) {\r\n\r\n\t\t\tdeltaTime = this.clock.getDelta();\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\r\n\r\n\t\tlet maskActive = false;\r\n\r\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst pass = this.passes[ i ];\r\n\r\n\t\t\tif ( pass.enabled === false ) continue;\r\n\r\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tconst context = this.renderer.getContext();\r\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( MaskPass !== undefined ) {\r\n\r\n\t\t\t\tif ( pass instanceof MaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\treset( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\r\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\r\n\r\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\r\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass Pass {\r\n\r\n\tconstructor() {\r\n\r\n\t\t// if set to true, the pass is processed by the composer\r\n\t\tthis.enabled = true;\r\n\r\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t// if set to true, the pass clears its buffer before rendering\r\n\t\tthis.clear = false;\r\n\r\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t}\r\n\r\n\tsetSize( /* width, height */ ) {}\r\n\r\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nconst _geometry = new BufferGeometry();\r\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\r\n\r\nclass FullScreenQuad {\r\n\r\n\tconstructor( material ) {\r\n\r\n\t\tthis._mesh = new Mesh( _geometry, material );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._mesh.geometry.dispose();\r\n\r\n\t}\r\n\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this._mesh, _camera );\r\n\r\n\t}\r\n\r\n\tget material() {\r\n\r\n\t\treturn this._mesh.material;\r\n\r\n\t}\r\n\r\n\tset material( value ) {\r\n\r\n\t\tthis._mesh.material = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EffectComposer, Pass, FullScreenQuad };\r\n"]}},"error":null,"hash":"a2019a3d78a76699d5e05f3bb68485bb","cacheData":{"env":{}}}