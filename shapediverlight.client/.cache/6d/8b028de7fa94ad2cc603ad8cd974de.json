{"id":"node_modules/@shapediver/sdk.sdtf-geometry/dist/SdtfGeometryTypeReader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeReader.js.map","includedInParent":true,"mtime":1706542085188},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\package.json","includedInParent":true,"mtime":1706542084377},{"name":"@shapediver/sdk.sdtf-core","loc":{"line":13,"column":32,"index":831},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeReader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-core\\dist\\index.js"},{"name":"./SdtfGeometryTypeValidator","loc":{"line":14,"column":44,"index":905},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeReader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.sdtf-geometry\\dist\\SdtfGeometryTypeValidator.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SdtfGeometryTypeReader = void 0;\nconst sdk_sdtf_core_1 = require(\"@shapediver/sdk.sdtf-core\");\nconst SdtfGeometryTypeValidator_1 = require(\"./SdtfGeometryTypeValidator\");\nclass SdtfGeometryTypeReader {\n    constructor() {\n        this.validator = new SdtfGeometryTypeValidator_1.SdtfGeometryTypeValidator();\n    }\n    readComponent(component) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const typeHint = (_a = component.typeHint) === null || _a === void 0 ? void 0 : _a.name;\n            // Make sure that the component consists of valid data\n            if (!this.validator.validateComponent(typeHint, component.value, component.accessor)) {\n                throw new sdk_sdtf_core_1.SdtfError(`Cannot read value of type '${typeHint}': Invalid component.`);\n            }\n            // All values of a geometry type are stored inside the JSON content.\n            switch (typeHint) {\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ARC:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOUNDING_BOX:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_BOX:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CIRCLE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_COMPLEX:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CONE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_CYLINDER:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_ELLIPSE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_INTERVAL2:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_LINE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_MATRIX:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_PLANE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT2D:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT3D:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POINT4D:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_POLYLINE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RAY:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_RECTANGLE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_SPHERE:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TORUS:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_TRANSFORM_LIST:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR2D:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR3D:\n                case sdk_sdtf_core_1.SdtfGeometryTypeHintName.GEOMETRY_VECTOR4D:\n                    return component.value;\n                default:\n                    (0, sdk_sdtf_core_1.sdAssertUnreachable)(typeHint);\n            }\n        });\n    }\n}\nexports.SdtfGeometryTypeReader = SdtfGeometryTypeReader;\n"},"sourceMaps":{"js":{"version":3,"file":"SdtfGeometryTypeReader.js","sourceRoot":"","sources":["../src/SdtfGeometryTypeReader.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6DAMkC;AAClC,2EAAuE;AAEvE,MAAa,sBAAsB;IAAnC;QAEqB,cAAS,GAAG,IAAI,qDAAyB,EAAE,CAAA;IA8ChE,CAAC;IA5CS,aAAa,CAAE,SAAwC;;;YACzD,MAAM,QAAQ,GAAG,MAAA,SAAS,CAAC,QAAQ,0CAAE,IAAgC,CAAA;YAErE,sDAAsD;YACtD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;gBAClF,MAAM,IAAI,yBAAS,CAAC,8BAA+B,QAAS,uBAAuB,CAAC,CAAA;aACvF;YAED,oEAAoE;YACpE,QAAQ,QAAQ,EAAE;gBACd,KAAK,wCAAwB,CAAC,YAAY,CAAC;gBAC3C,KAAK,wCAAwB,CAAC,qBAAqB,CAAC;gBACpD,KAAK,wCAAwB,CAAC,YAAY,CAAC;gBAC3C,KAAK,wCAAwB,CAAC,eAAe,CAAC;gBAC9C,KAAK,wCAAwB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,wCAAwB,CAAC,aAAa,CAAC;gBAC5C,KAAK,wCAAwB,CAAC,iBAAiB,CAAC;gBAChD,KAAK,wCAAwB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,wCAAwB,CAAC,iBAAiB,CAAC;gBAChD,KAAK,wCAAwB,CAAC,kBAAkB,CAAC;gBACjD,KAAK,wCAAwB,CAAC,aAAa,CAAC;gBAC5C,KAAK,wCAAwB,CAAC,eAAe,CAAC;gBAC9C,KAAK,wCAAwB,CAAC,cAAc,CAAC;gBAC7C,KAAK,wCAAwB,CAAC,cAAc,CAAC;gBAC7C,KAAK,wCAAwB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,wCAAwB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,wCAAwB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,wCAAwB,CAAC,iBAAiB,CAAC;gBAChD,KAAK,wCAAwB,CAAC,YAAY,CAAC;gBAC3C,KAAK,wCAAwB,CAAC,kBAAkB,CAAC;gBACjD,KAAK,wCAAwB,CAAC,eAAe,CAAC;gBAC9C,KAAK,wCAAwB,CAAC,cAAc,CAAC;gBAC7C,KAAK,wCAAwB,CAAC,kBAAkB,CAAC;gBACjD,KAAK,wCAAwB,CAAC,uBAAuB,CAAC;gBACtD,KAAK,wCAAwB,CAAC,eAAe,CAAC;gBAC9C,KAAK,wCAAwB,CAAC,iBAAiB,CAAC;gBAChD,KAAK,wCAAwB,CAAC,iBAAiB,CAAC;gBAChD,KAAK,wCAAwB,CAAC,iBAAiB;oBAC3C,OAAO,SAAS,CAAC,KAAK,CAAA;gBAC1B;oBACI,IAAA,mCAAmB,EAAC,QAAQ,CAAC,CAAA;aACpC;;KACJ;CAEJ;AAhDD,wDAgDC","sourcesContent":[null]}},"error":null,"hash":"b76f089d84f288aa15a575e9d6a34b45","cacheData":{"env":{}}}