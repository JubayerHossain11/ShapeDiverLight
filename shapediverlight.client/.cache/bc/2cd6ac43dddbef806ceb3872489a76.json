{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/managers/RenderingManager.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js.map","includedInParent":true,"mtime":1706527153624},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\managers\\RenderingManager.ts","includedInParent":true,"mtime":1706527154250},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"stats.js","loc":{"line":23,"column":35,"index":1028},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\stats.js\\build\\stats.min.js"},{"name":"three","loc":{"line":24,"column":35,"index":1078},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.rendering-engine.camera-engine","loc":{"line":25,"column":56,"index":1146},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":26,"column":41,"index":1242},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":27,"column":28,"index":1310},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":28,"column":59,"index":1384},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":29,"column":42,"index":1484},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.animation-frame-engine","loc":{"line":30,"column":65,"index":1590},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.animation-frame-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.animation-engine","loc":{"line":31,"column":59,"index":1713},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\managers\\RenderingManager.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.animation-engine\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderingManager = void 0;\r\nconst Stats = __importStar(require(\"stats.js\"));\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_rendering_engine_animation_frame_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-frame-engine\");\r\nconst viewer_rendering_engine_animation_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-engine\");\r\nclass RenderingManager {\r\n    // #endregion Properties (20)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (20)\r\n        this._animationEngine = viewer_rendering_engine_animation_engine_1.AnimationEngine.instance;\r\n        this._animationFrameEngine = viewer_rendering_engine_animation_frame_engine_1.AnimationFrameEngine.instance;\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._systemInfo = viewer_shared_services_1.SystemInfo.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._activeRendering = true;\r\n        this._cameraChanged = false;\r\n        this._continuousRendering = false;\r\n        this._continuousShadowMapUpdate = false;\r\n        this._height = 0;\r\n        this._lastCameraMatrix = gl_matrix_1.mat4.create();\r\n        this._lastSize = {\r\n            adjustedWidth: 0,\r\n            adjustedHeight: 0,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        this._maxTextureUnits = 0;\r\n        this._minimalRendering = false;\r\n        this._noWebGL = false;\r\n        this._runningAnimation = false;\r\n        this._sizeChanged = false;\r\n        this._usingSwiftShader = false;\r\n        this._width = 0;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (6)\r\n    get continuousRendering() {\r\n        return this._continuousRendering;\r\n    }\r\n    set continuousRendering(value) {\r\n        this._continuousRendering = value;\r\n    }\r\n    get continuousShadowMapUpdate() {\r\n        return this._continuousShadowMapUpdate;\r\n    }\r\n    set continuousShadowMapUpdate(value) {\r\n        this._continuousShadowMapUpdate = value;\r\n    }\r\n    get minimalRendering() {\r\n        return this._minimalRendering;\r\n    }\r\n    get usingSwiftShader() {\r\n        return this._usingSwiftShader;\r\n    }\r\n    // #endregion Public Accessors (6)\r\n    // #region Public Methods (9)\r\n    addLogo(canvas, branding) {\r\n        var _a, _b;\r\n        const logoDivElement = document.createElement('div');\r\n        logoDivElement.style.backgroundColor = branding.backgroundColor;\r\n        logoDivElement.style.position = 'relative';\r\n        logoDivElement.style.height = '100%';\r\n        logoDivElement.style.width = '100%';\r\n        (_a = canvas.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(logoDivElement, (_b = canvas.parentElement) === null || _b === void 0 ? void 0 : _b.firstChild);\r\n        if (branding.logo) {\r\n            const img = new Image();\r\n            img.style.position = 'absolute';\r\n            img.style.top = '50%';\r\n            img.style.left = '50%';\r\n            img.style.transform = 'translateX(-50%) translateY(-50%)';\r\n            img.src = branding.logo;\r\n            logoDivElement.appendChild(img);\r\n        }\r\n        return logoDivElement;\r\n    }\r\n    addSpinner(canvas, branding) {\r\n        var _a, _b;\r\n        const spinnerDivElement = document.createElement('div');\r\n        spinnerDivElement.style.position = 'absolute';\r\n        spinnerDivElement.style.userSelect = 'none';\r\n        spinnerDivElement.style.cursor = 'default';\r\n        spinnerDivElement.style.pointerEvents = 'none';\r\n        if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT) {\r\n            spinnerDivElement.style.right = '10px';\r\n            spinnerDivElement.style.bottom = '10px';\r\n        }\r\n        else if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_LEFT) {\r\n            spinnerDivElement.style.left = '10px';\r\n            spinnerDivElement.style.bottom = '10px';\r\n        }\r\n        else if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.TOP_RIGHT) {\r\n            spinnerDivElement.style.right = '10px';\r\n            spinnerDivElement.style.top = '10px';\r\n        }\r\n        else if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.TOP_LEFT) {\r\n            spinnerDivElement.style.left = '10px';\r\n            spinnerDivElement.style.top = '10px';\r\n        }\r\n        else {\r\n            spinnerDivElement.style.height = '100%';\r\n            spinnerDivElement.style.width = '100%';\r\n        }\r\n        spinnerDivElement.style.visibility = 'hidden';\r\n        (_a = canvas.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(spinnerDivElement, (_b = canvas.parentElement) === null || _b === void 0 ? void 0 : _b.firstChild);\r\n        if (branding.busyModeSpinner) {\r\n            const img = new Image();\r\n            img.src = branding.busyModeSpinner;\r\n            if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.CENTER) {\r\n                img.style.position = 'absolute';\r\n                img.style.top = '50%';\r\n                img.style.left = '50%';\r\n                img.style.transform = 'translateX(-50%) translateY(-50%)';\r\n            }\r\n            else {\r\n                if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT || branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.TOP_RIGHT) {\r\n                    img.style.float = 'right';\r\n                }\r\n                else if (branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_LEFT || branding.spinnerPositioning === viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.TOP_LEFT) {\r\n                    img.style.float = 'left';\r\n                }\r\n                img.style.width = 'calc(100% * 0.75)';\r\n                img.style.height = 'calc(100% * 0.75)';\r\n            }\r\n            spinnerDivElement.appendChild(img);\r\n        }\r\n        return spinnerDivElement;\r\n    }\r\n    createRenderer(canvas) {\r\n        const renderingProperties = {\r\n            alpha: true,\r\n            depth: true,\r\n            antialias: true,\r\n            preserveDrawingBuffer: true,\r\n            stencil: true,\r\n            premultipliedAlpha: true,\r\n            canvas\r\n        };\r\n        const renderer = new THREE.WebGLRenderer(renderingProperties);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        const context = renderer.getContext();\r\n        if (renderer.extensions.has(\"WEBGL_debug_renderer_info\")) {\r\n            const debugInfo = renderer.extensions.get(\"WEBGL_debug_renderer_info\");\r\n            const vendor = context.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\r\n            const rendererInfo = context.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n            if (rendererInfo === \"Google SwiftShader\") {\r\n                this._usingSwiftShader = true;\r\n                this._logger.warn('RenderingLogic.createWebGLContext: The current device is using Google SwiftShader, a CPU-based renderer. To achieve better rendering results, please enable GPU-rendering in your settings.');\r\n            }\r\n        }\r\n        if (!renderer.extensions.has(\"EXT_shader_texture_lod\"))\r\n            this._minimalRendering = true;\r\n        renderer.physicallyCorrectLights = false;\r\n        renderer.outputEncoding = THREE.sRGBEncoding;\r\n        renderer.toneMapping = THREE.NoToneMapping;\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.needsUpdate = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        renderer.shadowMap.autoUpdate = false;\r\n        renderer.localClippingEnabled = true;\r\n        renderer.setSize(canvas.width, canvas.height);\r\n        renderer.setClearColor(new THREE.Color('#ffffff'), 1);\r\n        this._maxTextureUnits = renderer.getContext().getParameter(renderer.getContext().MAX_TEXTURE_IMAGE_UNITS);\r\n        return renderer;\r\n    }\r\n    evaluateTextureUnitCount(value) {\r\n        if (value > this._maxTextureUnits) {\r\n            this._logger.warn(`RenderingManager.evaluateTextureUnitCount: Maximum number of texture units exceeded. Disabling shadows.`);\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = true;\r\n            this._renderingEngine.update('RenderingManager.evaluateTextureUnitCount');\r\n        }\r\n        else {\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = false;\r\n        }\r\n    }\r\n    getScreenshot(type = 'image/png', encoderOptions = 1) {\r\n        return this._renderingEngine.renderer.domElement.toDataURL(type, encoderOptions);\r\n    }\r\n    init() {\r\n        try {\r\n            this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_START, (e) => {\r\n                const viewerEvent = e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.startRendering();\r\n            });\r\n            this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_END, (e) => {\r\n                const viewerEvent = e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.stopRendering();\r\n            });\r\n            window.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.parentElement.onresize = () => { this.render(); };\r\n            const stats1 = new Stats.default();\r\n            stats1.showPanel(0); // Panel 0 = fps\r\n            stats1.dom.style.cssText = 'position:absolute;top:0px;left:0px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats1.dom);\r\n            const stats2 = new Stats.default();\r\n            stats2.showPanel(1); // Panel 1 = ms\r\n            stats2.dom.style.cssText = 'position:absolute;top:0px;left:80px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats2.dom);\r\n            const stats3 = new Stats.default();\r\n            stats3.showPanel(2); // Panel 2 = ms\r\n            stats3.dom.style.cssText = 'position:absolute;top:0px;left:160px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats3.dom);\r\n            this._stats = {\r\n                stats: [stats1, stats2, stats3],\r\n                begin: () => {\r\n                    stats1.begin();\r\n                    stats2.begin();\r\n                    stats3.begin();\r\n                },\r\n                end: () => {\r\n                    stats1.end();\r\n                    stats2.end();\r\n                    stats3.end();\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            this._noWebGL = true;\r\n            throw e;\r\n        }\r\n    }\r\n    render() {\r\n        this.startAndStopRendering();\r\n    }\r\n    resize(width, height) {\r\n        this._width = width, this._height = height;\r\n    }\r\n    /**\r\n     * Must only be called once by the RenderingEngine!\r\n     */\r\n    start() {\r\n        this._animationFrameEngine.addAnimationFrameCallback(this.animate.bind(this));\r\n        this.startAndStopRendering();\r\n    }\r\n    updateShadowMap() {\r\n        this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n    }\r\n    // #endregion Public Methods (9)\r\n    // #region Private Methods (10)\r\n    animate(time, deltaTime, runningAnimation) {\r\n        // animation loop - part 1: initial discarding\r\n        if (this._renderingEngine.closed || this._noWebGL)\r\n            return;\r\n        this._renderingEngine.evaluateFlagState();\r\n        // update if needed\r\n        if (this._tree.root.version !== this._renderingEngine.sceneTreeManager.lastRootVersion) {\r\n            this._renderingEngine.sceneTreeManager.updateSceneTree(this._tree.root, this._renderingEngine.lightEngine);\r\n            this.updateShadowMap();\r\n            this._animationEngine.updateAnimationData();\r\n            this.render();\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, { viewportId: this._renderingEngine.id });\r\n        }\r\n        if (runningAnimation !== this._runningAnimation)\r\n            this.render();\r\n        this._runningAnimation = runningAnimation;\r\n        if (this._runningAnimation)\r\n            this._renderingEngine.sceneTreeManager.updateNode(undefined, undefined, { transformationOnly: true });\r\n        if (this._runningAnimation)\r\n            this._renderingEngine.sceneTreeManager.updateMorphWeights();\r\n        // get the current size\r\n        const { width, height, adjustedWidth, adjustedHeight } = this.calculateSize();\r\n        const aspect = width / height;\r\n        this._sizeChanged = this._lastSize.adjustedHeight !== adjustedHeight || this._lastSize.adjustedWidth !== adjustedWidth || this._lastSize.height !== height || this._lastSize.width !== width;\r\n        this._lastSize = { width, height, adjustedWidth, adjustedHeight };\r\n        // animation loop - part 3: update the camera, if there are new movements, they will start / continue the rendering\r\n        this._cameraChanged = this._renderingEngine.cameraEngine.camera ? this._renderingEngine.cameraManager.updateCamera(deltaTime, aspect) : false;\r\n        // animation loop - part 4: evaluating state\r\n        const states = this.evaluateRenderingState();\r\n        // animation loop - part 5: the scene is not even shown\r\n        if (states.showScene === false) {\r\n            // toggle on logo\r\n            this.toggleLogo(true);\r\n            this.toggleBusyMode(false);\r\n            return;\r\n        }\r\n        else {\r\n            this.toggleLogo(false);\r\n        }\r\n        // animation loop - part 6: the scene is shown, but there is no active rendering happening\r\n        if (states.rendering === false)\r\n            return;\r\n        // animation loop - part 7: there is actual rendering happening\r\n        // do the things that have to be done for standard and beauty rendering in the same way\r\n        this._stats.begin();\r\n        this.showStatistics();\r\n        // toggle the blurring\r\n        this.toggleBusyMode(states.busyMode);\r\n        // animation loop - part 8: calculate the current size\r\n        const currentSize = new THREE.Vector2();\r\n        this._renderingEngine.renderer.getSize(currentSize);\r\n        if (!currentSize.equals(new THREE.Vector2(adjustedWidth, adjustedHeight))) {\r\n            this._renderingEngine.renderer.setSize(adjustedWidth, adjustedHeight);\r\n            this._renderingEngine.renderer.domElement.style.width = width + 'px';\r\n            this._renderingEngine.renderer.domElement.style.height = height + 'px';\r\n            this._renderingEngine.materialLoader.assignPointSize(this._renderingEngine.pointSize);\r\n        }\r\n        // animation loop - part 9: adjust the camera (the rendering state would be false if we didn't have a camera)\r\n        const camera = this._renderingEngine.cameraManager.adjustCamera(aspect);\r\n        // animation loop - part 10: adjust the anchor elements\r\n        this._renderingEngine.htmlElementAnchorLoader.adjustPositions(adjustedWidth / width, adjustedHeight / height);\r\n        // animation loop - part 11: adjust some scene settings\r\n        // enable / disable the shadow map\r\n        const enabled = this._renderingEngine.renderer.shadowMap.enabled;\r\n        this._renderingEngine.renderer.shadowMap.enabled = this._renderingEngine.usingSwiftShader || this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES ? false : this._renderingEngine.shadows;\r\n        if (enabled !== this._renderingEngine.renderer.shadowMap.enabled)\r\n            this._renderingEngine.materialLoader.updateMaterials();\r\n        let threeJsLightObject, oldLightVisibility = true;\r\n        // enable / disable lights\r\n        if (this._renderingEngine.lights === false) {\r\n            const ls = this._renderingEngine.lightEngine.lightScene;\r\n            if (ls) {\r\n                threeJsLightObject = ls.node.threeJsObject[this._renderingEngine.id];\r\n                if (threeJsLightObject) {\r\n                    oldLightVisibility = threeJsLightObject.visible;\r\n                    threeJsLightObject.visible = false;\r\n                }\r\n            }\r\n        }\r\n        // update shadowMap if need\r\n        if (states.updateShadowMap && this._renderingEngine.renderer.shadowMap.enabled)\r\n            this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n        // enable / disable the background\r\n        this._renderingEngine.sceneTreeManager.scene.background = this._renderingEngine.environmentMapAsBackground ? this._renderingEngine.environmentMapLoader.environmentMap : null;\r\n        // set the background color / alpha\r\n        this._renderingEngine.renderer.setClearColor(new THREE.Color(this._converter.toThreeJsColorInput(this._renderingEngine.clearColor)), this._renderingEngine.clearAlpha);\r\n        // animation loop - part 12: actual rendering separation\r\n        if (states.beautyRendering === true) {\r\n            this._renderingEngine.beautyRenderingManager.render(deltaTime, camera, width, height);\r\n            // if the duration was long enough, disable the beauty rendering\r\n            if (this._renderingEngine.beautyRenderingManager.beautyRenderingDurationActive >= this._renderingEngine.beautyRenderBlendingDuration) {\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this._renderingEngine.beautyRenderingManager.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            }\r\n            else {\r\n                this._renderingEngine.beautyRenderingManager.beautyRenderingDurationActive += deltaTime;\r\n            }\r\n        }\r\n        else {\r\n            this._renderingEngine.renderer.render(this._renderingEngine.sceneTreeManager.scene, camera);\r\n            // if the beauty rendering was active, disable it\r\n            if (this._renderingEngine.beautyRenderingManager.beautyRenderingActive) {\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this._renderingEngine.beautyRenderingManager.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            }\r\n        }\r\n        // reset the visibility of the threeJs light object\r\n        if (threeJsLightObject)\r\n            threeJsLightObject.visible = oldLightVisibility;\r\n        this._stats.end();\r\n    }\r\n    calculateSize() {\r\n        let width = this._width, height = this._height;\r\n        if (this._renderingEngine.automaticResizing) {\r\n            width = this._renderingEngine.canvas.parentNode.clientWidth;\r\n            height = this._renderingEngine.canvas.parentNode.clientHeight;\r\n        }\r\n        const aspect = width / height;\r\n        let adjustedWidth = width, adjustedHeight = height;\r\n        if (width > this._renderingEngine.maximumRenderingSize.width || height > this._renderingEngine.maximumRenderingSize.height) {\r\n            if ((width - this._renderingEngine.maximumRenderingSize.width) / aspect > (height - this._renderingEngine.maximumRenderingSize.height)) {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.width;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.width / aspect;\r\n            }\r\n            else {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.height * aspect;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.height;\r\n            }\r\n        }\r\n        return {\r\n            width, adjustedWidth,\r\n            height, adjustedHeight\r\n        };\r\n    }\r\n    evaluateRenderingState() {\r\n        // If there is a camera to show the scene and the setting for it is set to true, we show the scene\r\n        let showScene = false;\r\n        if (this._renderingEngine.cameraEngine.camera && this._renderingEngine.show === true)\r\n            showScene = true;\r\n        // If we should render at all\r\n        let rendering = false;\r\n        if (this._activeRendering === true || this._cameraChanged === true || this._sizeChanged === true || this._runningAnimation === true || this._continuousRendering === true)\r\n            rendering = true;\r\n        let updateShadowMap = false;\r\n        if (this._runningAnimation === true || this._continuousShadowMapUpdate === true)\r\n            updateShadowMap = true;\r\n        // special case, autorotation\r\n        if (this._renderingEngine.cameraEngine.camera) {\r\n            const camera = this._renderingEngine.cameraEngine.camera;\r\n            if (camera.type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE) {\r\n                const controls = camera.controls;\r\n                if (controls.enableAutoRotation === true && controls.autoRotationSpeed !== 0)\r\n                    return { showScene, rendering: true, updateShadowMap, busyMode: this._renderingEngine.busy, beautyRendering: false };\r\n            }\r\n        }\r\n        else {\r\n            rendering = false;\r\n        }\r\n        // If the scene should be blurred\r\n        let busyMode = false;\r\n        if (this._renderingEngine.busy)\r\n            busyMode = true;\r\n        // If we should render in beauty mode\r\n        let beautyRendering = false;\r\n        if (this._renderingEngine.beautyRenderingManager.beautyRenderingActive === true && busyMode === false && this._continuousRendering === false &&\r\n            (this._renderingEngine.shadows || ((this._renderingEngine.ambientOcclusion && this._renderingEngine.ambientOcclusionIntensity > 0.0) && !this._systemInfo.isIOS)) &&\r\n            this._renderingEngine.usingSwiftShader === false && this._runningAnimation === false && this._renderingEngine.type !== viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES)\r\n            beautyRendering = true;\r\n        return { showScene, rendering, updateShadowMap, busyMode, beautyRendering };\r\n    }\r\n    showStatistics() {\r\n        if (this._renderingEngine.showStatistics) {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = '';\r\n        }\r\n        else {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = 'none';\r\n        }\r\n    }\r\n    startAndStopRendering() {\r\n        this._activeRendering = true;\r\n        this._renderingEngine.beautyRenderingManager.stopBeautyRenderCountdown();\r\n        this._renderingEngine.beautyRenderingManager.startBeautyRenderCountdown();\r\n    }\r\n    startRendering() {\r\n        this._activeRendering = true;\r\n        this._renderingEngine.beautyRenderingManager.stopBeautyRenderCountdown();\r\n    }\r\n    stopRendering() {\r\n        this._renderingEngine.beautyRenderingManager.startBeautyRenderCountdown();\r\n    }\r\n    toggleBusyMode(toggle) {\r\n        if (this._renderingEngine.branding.busyModeDisplay === viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.BLUR) {\r\n            this._renderingEngine.htmlElementAnchorLoader.toggleBusyMode(toggle);\r\n            if (toggle) {\r\n                if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && navigator.userAgent.toLowerCase().indexOf('android') > -1)\r\n                    return;\r\n                this._renderingEngine.renderer.domElement.style.filter = 'blur(3px)';\r\n            }\r\n            else {\r\n                this._renderingEngine.renderer.domElement.style.filter = '';\r\n            }\r\n        }\r\n        else if (this._renderingEngine.branding.busyModeDisplay === viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER) {\r\n            if (toggle) {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'visible';\r\n            }\r\n            else {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'hidden';\r\n            }\r\n        }\r\n    }\r\n    toggleLogo(toggle) {\r\n        if (this._renderingEngine.logoDivElement)\r\n            this._renderingEngine.logoDivElement.style.display = toggle ? 'inherit' : 'none';\r\n        if (this._renderingEngine.canvas)\r\n            this._renderingEngine.canvas.style.display = !toggle ? 'inherit' : 'none';\r\n    }\r\n}\r\nexports.RenderingManager = RenderingManager;\r\n"},"sourceMaps":{"js":{"version":3,"file":"RenderingManager.js","sourceRoot":"","sources":["../../src/managers/RenderingManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as TWEEN from '@tweenjs/tween.js'\r\nimport * as Stats from 'stats.js'\r\nimport * as THREE from 'three'\r\nimport {\r\n  CAMERA_TYPE,\r\n  PerspectiveCamera,\r\n  PerspectiveCameraControls,\r\n} from '@shapediver/viewer.rendering-engine.camera-engine'\r\nimport {\r\n  Converter,\r\n  EventEngine,\r\n  EVENTTYPE,\r\n  EVENTTYPE_VIEWPORT,\r\n  Logger,\r\n  ShapeDiverViewerWebGLError,\r\n  StateEngine,\r\n  SystemInfo,\r\n} from '@shapediver/viewer.shared.services'\r\nimport { mat4, vec3 } from 'gl-matrix'\r\nimport { ICameraEvent, IViewportEvent } from '@shapediver/viewer.shared.types'\r\nimport { BUSY_MODE_DISPLAY, IManager, RENDERER_TYPE, SPINNER_POSITIONING } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\n\r\nimport { RenderingEngine } from '../RenderingEngine'\r\nimport { SceneTreeManager } from './SceneTreeManager'\r\nimport { ITree, Tree } from '@shapediver/viewer.shared.node-tree'\r\nimport { AnimationFrameEngine } from '@shapediver/viewer.rendering-engine.animation-frame-engine'\r\nimport { AnimationEngine } from '@shapediver/viewer.rendering-engine.animation-engine'\r\n\r\nexport class RenderingManager implements IManager {\r\n    // #region Properties (20)\r\n\r\n    private readonly _animationEngine: AnimationEngine = AnimationEngine.instance;\r\n    private readonly _animationFrameEngine: AnimationFrameEngine = AnimationFrameEngine.instance;\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n    private readonly _systemInfo: SystemInfo = SystemInfo.instance;\r\n    private readonly _tree: ITree = Tree.instance;\r\n\r\n    private _activeRendering: boolean = true;\r\n    private _cameraChanged: boolean = false;\r\n    private _continuousRendering: boolean = false;\r\n    private _continuousShadowMapUpdate: boolean = false;\r\n    private _height: number = 0;\r\n    private _lastCameraMatrix: mat4 = mat4.create();\r\n    private _lastSize: {\r\n        adjustedWidth: number,\r\n        adjustedHeight: number,\r\n        width: number,\r\n        height: number\r\n    } = {\r\n            adjustedWidth: 0,\r\n            adjustedHeight: 0,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    private _maxTextureUnits: number = 0;\r\n    private _minimalRendering: boolean = false;\r\n    private _noWebGL: boolean = false;\r\n    private _runningAnimation: boolean = false;\r\n    private _sizeChanged: boolean = false;\r\n    private _stats: any;\r\n    private _usingSwiftShader: boolean = false;\r\n    private _width: number = 0;\r\n\r\n    // #endregion Properties (20)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (6)\r\n\r\n    public get continuousRendering(): boolean {\r\n        return this._continuousRendering;\r\n    }\r\n\r\n    public set continuousRendering(value: boolean) {\r\n        this._continuousRendering = value;\r\n    }\r\n\r\n    public get continuousShadowMapUpdate(): boolean {\r\n        return this._continuousShadowMapUpdate;\r\n    }\r\n\r\n    public set continuousShadowMapUpdate(value: boolean) {\r\n        this._continuousShadowMapUpdate = value;\r\n    }\r\n\r\n    public get minimalRendering(): boolean {\r\n        return this._minimalRendering;\r\n    }\r\n\r\n    public get usingSwiftShader(): boolean {\r\n        return this._usingSwiftShader;\r\n    }\r\n\r\n    // #endregion Public Accessors (6)\r\n\r\n    // #region Public Methods (9)\r\n\r\n    public addLogo(canvas: HTMLCanvasElement, branding: {\r\n        logo: string | null;\r\n        backgroundColor: string;\r\n        busyModeSpinner: string;\r\n        busyModeDisplay: BUSY_MODE_DISPLAY;\r\n        spinnerPositioning: SPINNER_POSITIONING\r\n      }): HTMLDivElement {\r\n        const logoDivElement = document.createElement('div');\r\n        logoDivElement.style.backgroundColor = branding.backgroundColor;\r\n        logoDivElement.style.position = 'relative';\r\n        logoDivElement.style.height = '100%';\r\n        logoDivElement.style.width = '100%';\r\n        canvas.parentElement?.insertBefore(logoDivElement, canvas.parentElement?.firstChild);\r\n\r\n        if(branding.logo) {\r\n            const img = new Image();\r\n            img.style.position = 'absolute';\r\n            img.style.top = '50%';\r\n            img.style.left = '50%';\r\n            img.style.transform = 'translateX(-50%) translateY(-50%)';\r\n            img.src = branding.logo;\r\n            logoDivElement.appendChild(img)\r\n        }\r\n\r\n        return logoDivElement;\r\n    }\r\n    \r\n\r\n    public addSpinner(canvas: HTMLCanvasElement, branding: {\r\n        logo: string | null;\r\n        backgroundColor: string;\r\n        busyModeSpinner: string;\r\n        busyModeDisplay: BUSY_MODE_DISPLAY;\r\n        spinnerPositioning: SPINNER_POSITIONING\r\n      }): HTMLDivElement {\r\n        const spinnerDivElement = document.createElement('div');\r\n        spinnerDivElement.style.position = 'absolute';\r\n        spinnerDivElement.style.userSelect = 'none';\r\n        spinnerDivElement.style.cursor = 'default';\r\n        spinnerDivElement.style.pointerEvents = 'none';\r\n\r\n        if(branding.spinnerPositioning === SPINNER_POSITIONING.BOTTOM_RIGHT) {\r\n            spinnerDivElement.style.right = '10px';\r\n            spinnerDivElement.style.bottom = '10px';\r\n        } else if(branding.spinnerPositioning === SPINNER_POSITIONING.BOTTOM_LEFT) {\r\n            spinnerDivElement.style.left = '10px';\r\n            spinnerDivElement.style.bottom = '10px';\r\n        } else if(branding.spinnerPositioning === SPINNER_POSITIONING.TOP_RIGHT) {\r\n            spinnerDivElement.style.right = '10px';\r\n            spinnerDivElement.style.top = '10px';\r\n        } else if(branding.spinnerPositioning === SPINNER_POSITIONING.TOP_LEFT) {\r\n            spinnerDivElement.style.left = '10px';\r\n            spinnerDivElement.style.top = '10px';\r\n        } else {\r\n            spinnerDivElement.style.height = '100%';\r\n            spinnerDivElement.style.width = '100%';\r\n        }\r\n\r\n        spinnerDivElement.style.visibility = 'hidden';\r\n        canvas.parentElement?.insertBefore(spinnerDivElement, canvas.parentElement?.firstChild);\r\n\r\n        if(branding.busyModeSpinner) {\r\n            const img = new Image();\r\n            img.src = branding.busyModeSpinner;\r\n\r\n            if(branding.spinnerPositioning === SPINNER_POSITIONING.CENTER) {\r\n                img.style.position = 'absolute';\r\n                img.style.top = '50%';\r\n                img.style.left = '50%';\r\n                img.style.transform = 'translateX(-50%) translateY(-50%)';\r\n            } else {\r\n                if(branding.spinnerPositioning === SPINNER_POSITIONING.BOTTOM_RIGHT || branding.spinnerPositioning === SPINNER_POSITIONING.TOP_RIGHT) {\r\n                    img.style.float = 'right';\r\n                } else if(branding.spinnerPositioning === SPINNER_POSITIONING.BOTTOM_LEFT || branding.spinnerPositioning === SPINNER_POSITIONING.TOP_LEFT) {\r\n                    img.style.float = 'left';\r\n                } \r\n                img.style.width = 'calc(100% * 0.75)';\r\n                img.style.height = 'calc(100% * 0.75)';\r\n            }\r\n            spinnerDivElement.appendChild(img)\r\n        }\r\n\r\n        return spinnerDivElement;\r\n    }\r\n\r\n    public createRenderer(canvas: HTMLCanvasElement): THREE.WebGLRenderer {\r\n        const renderingProperties = {\r\n            alpha: true,\r\n            depth: true,\r\n            antialias: true,\r\n            preserveDrawingBuffer: true,\r\n            stencil: true,\r\n            premultipliedAlpha: true,\r\n            canvas\r\n        };\r\n        const renderer = new THREE.WebGLRenderer(renderingProperties);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n        const context = renderer.getContext();\r\n\r\n        if (renderer.extensions.has(\"WEBGL_debug_renderer_info\")) {\r\n            const debugInfo = renderer.extensions.get(\"WEBGL_debug_renderer_info\");\r\n            const vendor = context.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\r\n            const rendererInfo = context.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n            if (rendererInfo === \"Google SwiftShader\") {\r\n                this._usingSwiftShader = true;\r\n                this._logger.warn('RenderingLogic.createWebGLContext: The current device is using Google SwiftShader, a CPU-based renderer. To achieve better rendering results, please enable GPU-rendering in your settings.');\r\n            }\r\n        }\r\n\r\n        if (!renderer.extensions.has(\"EXT_shader_texture_lod\"))\r\n            this._minimalRendering = true;\r\n\r\n        renderer.physicallyCorrectLights = false;\r\n        renderer.outputEncoding = THREE.sRGBEncoding;\r\n        renderer.toneMapping = THREE.NoToneMapping;\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.needsUpdate = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        renderer.shadowMap.autoUpdate = false;\r\n        renderer.localClippingEnabled = true;\r\n        renderer.setSize(canvas.width, canvas.height);\r\n        renderer.setClearColor(new THREE.Color('#ffffff'), 1);\r\n        this._maxTextureUnits = renderer.getContext().getParameter(renderer.getContext().MAX_TEXTURE_IMAGE_UNITS);\r\n        return renderer\r\n    }\r\n\r\n    public evaluateTextureUnitCount(value: number) {\r\n        if(value > this._maxTextureUnits) {\r\n            this._logger.warn(`RenderingManager.evaluateTextureUnitCount: Maximum number of texture units exceeded. Disabling shadows.`);\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = true;\r\n            this._renderingEngine.update('RenderingManager.evaluateTextureUnitCount');\r\n        } else {\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = false;\r\n        }\r\n    }\r\n\r\n    public getScreenshot(type: string = 'image/png', encoderOptions: number = 1): string {\r\n        return this._renderingEngine.renderer.domElement.toDataURL(type, encoderOptions);\r\n    }\r\n\r\n    public init(): void {\r\n        try {\r\n            this._eventEngine.addListener(EVENTTYPE.CAMERA.CAMERA_START, (e) => {\r\n                const viewerEvent = <ICameraEvent>e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.startRendering();\r\n            })\r\n            this._eventEngine.addListener(EVENTTYPE.CAMERA.CAMERA_END, (e) => {\r\n                const viewerEvent = <ICameraEvent>e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.stopRendering();\r\n            })\r\n\r\n            window.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.parentElement!.onresize = () => { this.render(); };\r\n\r\n            const stats1 = new Stats.default();\r\n            stats1.showPanel(0); // Panel 0 = fps\r\n            stats1.dom.style.cssText = 'position:absolute;top:0px;left:0px;display:none;';\r\n            this._renderingEngine.canvas.parentElement!.appendChild(stats1.dom);\r\n\r\n            const stats2 = new Stats.default();\r\n            stats2.showPanel(1); // Panel 1 = ms\r\n            stats2.dom.style.cssText = 'position:absolute;top:0px;left:80px;display:none;';\r\n            this._renderingEngine.canvas.parentElement!.appendChild(stats2.dom);\r\n\r\n            const stats3 = new Stats.default();\r\n            stats3.showPanel(2); // Panel 2 = ms\r\n            stats3.dom.style.cssText = 'position:absolute;top:0px;left:160px;display:none;';\r\n            this._renderingEngine.canvas.parentElement!.appendChild(stats3.dom);\r\n\r\n            this._stats = {\r\n                stats: [stats1, stats2, stats3],\r\n                begin: () => {\r\n                    stats1.begin();\r\n                    stats2.begin();\r\n                    stats3.begin();\r\n                },\r\n                end: () => {\r\n                    stats1.end();\r\n                    stats2.end();\r\n                    stats3.end();\r\n                }\r\n            };\r\n        } catch (e) {\r\n            this._noWebGL = true;\r\n            throw e\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        this.startAndStopRendering();\r\n    }\r\n\r\n    public resize(width: number, height: number) {\r\n        this._width = width, this._height = height;\r\n    }\r\n\r\n    /**\r\n     * Must only be called once by the RenderingEngine!\r\n     */\r\n    public start() {\r\n        this._animationFrameEngine.addAnimationFrameCallback(this.animate.bind(this))\r\n        this.startAndStopRendering();\r\n    }\r\n\r\n    public updateShadowMap() {\r\n        this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n    }\r\n\r\n    // #endregion Public Methods (9)\r\n\r\n    // #region Private Methods (10)\r\n\r\n    private animate(time: number, deltaTime: number, runningAnimation: boolean): void {\r\n        // animation loop - part 1: initial discarding\r\n        if (this._renderingEngine.closed || this._noWebGL) return;\r\n\r\n        this._renderingEngine.evaluateFlagState();\r\n\r\n        // update if needed\r\n        if(this._tree.root.version !== this._renderingEngine.sceneTreeManager.lastRootVersion) {\r\n            this._renderingEngine.sceneTreeManager.updateSceneTree(this._tree.root, this._renderingEngine.lightEngine);\r\n            this.updateShadowMap();\r\n            this._animationEngine.updateAnimationData();\r\n            this.render();\r\n            this._eventEngine.emitEvent(EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, <IViewportEvent>{ viewportId: this._renderingEngine.id })\r\n        }\r\n\r\n        if(runningAnimation !== this._runningAnimation) this.render();\r\n        this._runningAnimation = runningAnimation;\r\n        if(this._runningAnimation) this._renderingEngine.sceneTreeManager.updateNode(undefined, undefined, { transformationOnly: true });\r\n        if(this._runningAnimation) this._renderingEngine.sceneTreeManager.updateMorphWeights();\r\n\r\n        // get the current size\r\n        const { width, height, adjustedWidth, adjustedHeight } = this.calculateSize();\r\n        const aspect = width / height;\r\n        this._sizeChanged = this._lastSize.adjustedHeight !== adjustedHeight || this._lastSize.adjustedWidth !== adjustedWidth || this._lastSize.height !== height || this._lastSize.width !== width;\r\n        this._lastSize = { width, height, adjustedWidth, adjustedHeight };\r\n\r\n        // animation loop - part 3: update the camera, if there are new movements, they will start / continue the rendering\r\n        this._cameraChanged = this._renderingEngine.cameraEngine.camera ? this._renderingEngine.cameraManager.updateCamera(deltaTime, aspect) : false;\r\n\r\n        // animation loop - part 4: evaluating state\r\n        const states = this.evaluateRenderingState();\r\n\r\n        // animation loop - part 5: the scene is not even shown\r\n        if (states.showScene === false) {\r\n            // toggle on logo\r\n            this.toggleLogo(true);\r\n            this.toggleBusyMode(false);\r\n            return;\r\n        } else {\r\n            this.toggleLogo(false);\r\n        }\r\n\r\n        // animation loop - part 6: the scene is shown, but there is no active rendering happening\r\n        if (states.rendering === false) return;\r\n\r\n        // animation loop - part 7: there is actual rendering happening\r\n        // do the things that have to be done for standard and beauty rendering in the same way\r\n        this._stats.begin();\r\n        this.showStatistics();\r\n\r\n        // toggle the blurring\r\n        this.toggleBusyMode(states.busyMode);\r\n\r\n        // animation loop - part 8: calculate the current size\r\n        const currentSize = new THREE.Vector2();\r\n        this._renderingEngine.renderer.getSize(currentSize);\r\n        if(!currentSize.equals(new THREE.Vector2(adjustedWidth, adjustedHeight))) {\r\n            this._renderingEngine.renderer.setSize(adjustedWidth, adjustedHeight);\r\n            this._renderingEngine.renderer.domElement.style.width = width + 'px';\r\n            this._renderingEngine.renderer.domElement.style.height = height + 'px';\r\n            this._renderingEngine.materialLoader.assignPointSize(this._renderingEngine.pointSize);\r\n        }\r\n\r\n        // animation loop - part 9: adjust the camera (the rendering state would be false if we didn't have a camera)\r\n        const camera = this._renderingEngine.cameraManager.adjustCamera(aspect);\r\n\r\n        // animation loop - part 10: adjust the anchor elements\r\n        this._renderingEngine.htmlElementAnchorLoader.adjustPositions(adjustedWidth / width, adjustedHeight / height);\r\n\r\n        // animation loop - part 11: adjust some scene settings\r\n        // enable / disable the shadow map\r\n        const enabled = this._renderingEngine.renderer.shadowMap.enabled;\r\n        this._renderingEngine.renderer.shadowMap.enabled = this._renderingEngine.usingSwiftShader || this._renderingEngine.type === RENDERER_TYPE.ATTRIBUTES ? false : this._renderingEngine.shadows;\r\n        if (enabled !== this._renderingEngine.renderer.shadowMap.enabled) this._renderingEngine.materialLoader.updateMaterials()\r\n\r\n        let threeJsLightObject, oldLightVisibility = true;\r\n        // enable / disable lights\r\n        if(this._renderingEngine.lights === false) {\r\n            const ls = this._renderingEngine.lightEngine.lightScene;\r\n            if(ls) {\r\n                threeJsLightObject = ls.node.threeJsObject[this._renderingEngine.id];\r\n                if(threeJsLightObject) {\r\n                    oldLightVisibility = threeJsLightObject.visible;\r\n                    threeJsLightObject.visible = false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // update shadowMap if need\r\n        if(states.updateShadowMap && this._renderingEngine.renderer.shadowMap.enabled) this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n\r\n        // enable / disable the background\r\n        this._renderingEngine.sceneTreeManager.scene.background = this._renderingEngine.environmentMapAsBackground ? this._renderingEngine.environmentMapLoader.environmentMap : null;\r\n        // set the background color / alpha\r\n        this._renderingEngine.renderer.setClearColor(new THREE.Color(this._converter.toThreeJsColorInput(this._renderingEngine.clearColor)), this._renderingEngine.clearAlpha);\r\n\r\n        // animation loop - part 12: actual rendering separation\r\n        if (states.beautyRendering === true) {\r\n            this._renderingEngine.beautyRenderingManager.render(deltaTime, camera, width, height);\r\n            // if the duration was long enough, disable the beauty rendering\r\n            if (this._renderingEngine.beautyRenderingManager.beautyRenderingDurationActive >= this._renderingEngine.beautyRenderBlendingDuration) {\r\n                this._eventEngine.emitEvent(EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this._renderingEngine.beautyRenderingManager.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            } else {\r\n                this._renderingEngine.beautyRenderingManager.beautyRenderingDurationActive += deltaTime;\r\n            }\r\n        } else {\r\n            this._renderingEngine.renderer.render((<SceneTreeManager>this._renderingEngine.sceneTreeManager).scene, camera);\r\n\r\n            // if the beauty rendering was active, disable it\r\n            if (this._renderingEngine.beautyRenderingManager.beautyRenderingActive) {\r\n                this._eventEngine.emitEvent(EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this._renderingEngine.beautyRenderingManager.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            }\r\n        }\r\n\r\n        // reset the visibility of the threeJs light object\r\n        if(threeJsLightObject)\r\n            threeJsLightObject.visible = oldLightVisibility;\r\n\r\n        this._stats.end();\r\n    }\r\n\r\n    private calculateSize(): { adjustedWidth: number, adjustedHeight: number, width: number, height: number } {\r\n        let width = this._width, height = this._height;\r\n        if (this._renderingEngine.automaticResizing) {\r\n            width = (<HTMLDivElement>this._renderingEngine.canvas.parentNode).clientWidth;\r\n            height = (<HTMLDivElement>this._renderingEngine.canvas.parentNode).clientHeight;\r\n        }\r\n\r\n        const aspect = width / height;\r\n        let adjustedWidth = width,\r\n            adjustedHeight = height;\r\n\r\n        if (width > this._renderingEngine.maximumRenderingSize.width || height > this._renderingEngine.maximumRenderingSize.height) {\r\n            if ((width - this._renderingEngine.maximumRenderingSize.width) / aspect > (height - this._renderingEngine.maximumRenderingSize.height)) {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.width;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.width / aspect;\r\n            } else {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.height * aspect;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.height;\r\n            }\r\n        }\r\n        return {\r\n            width, adjustedWidth,\r\n            height, adjustedHeight\r\n        }\r\n    }\r\n\r\n    private evaluateRenderingState(): {\r\n        showScene: boolean,\r\n        rendering: boolean,\r\n        busyMode: boolean,\r\n        updateShadowMap: boolean,\r\n        beautyRendering: boolean\r\n    } {\r\n        // If there is a camera to show the scene and the setting for it is set to true, we show the scene\r\n        let showScene = false;\r\n        if (this._renderingEngine.cameraEngine.camera && this._renderingEngine.show === true)\r\n            showScene = true;\r\n\r\n        // If we should render at all\r\n        let rendering = false;\r\n        if (this._activeRendering === true || this._cameraChanged === true || this._sizeChanged === true || this._runningAnimation === true || this._continuousRendering === true)\r\n            rendering = true;\r\n\r\n        let updateShadowMap = false;\r\n        if (this._runningAnimation === true || this._continuousShadowMapUpdate === true)\r\n            updateShadowMap = true;\r\n\r\n        // special case, autorotation\r\n        if (this._renderingEngine.cameraEngine.camera) {\r\n            const camera = this._renderingEngine.cameraEngine.camera!;\r\n            if (camera.type === CAMERA_TYPE.PERSPECTIVE) {\r\n                const controls = <PerspectiveCameraControls>(<PerspectiveCamera>camera).controls;\r\n                if (controls.enableAutoRotation === true && controls.autoRotationSpeed !== 0)\r\n                    return { showScene, rendering: true, updateShadowMap, busyMode: this._renderingEngine.busy, beautyRendering: false };\r\n            }\r\n        } else {\r\n            rendering = false;\r\n        }\r\n\r\n        // If the scene should be blurred\r\n        let busyMode = false;\r\n        if (this._renderingEngine.busy)\r\n            busyMode = true;\r\n\r\n        // If we should render in beauty mode\r\n        let beautyRendering = false;\r\n        if (this._renderingEngine.beautyRenderingManager.beautyRenderingActive === true && busyMode === false && this._continuousRendering === false &&\r\n            (this._renderingEngine.shadows || ((this._renderingEngine.ambientOcclusion && this._renderingEngine.ambientOcclusionIntensity > 0.0) && !this._systemInfo.isIOS)) &&\r\n            this._renderingEngine.usingSwiftShader === false && this._runningAnimation === false && this._renderingEngine.type !== RENDERER_TYPE.ATTRIBUTES)\r\n            beautyRendering = true;\r\n\r\n        return { showScene, rendering, updateShadowMap, busyMode, beautyRendering };\r\n    }\r\n\r\n    private showStatistics() {\r\n        if (this._renderingEngine.showStatistics) {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = ''\r\n        } else {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = 'none'\r\n        }\r\n    }\r\n\r\n    private startAndStopRendering() {\r\n        this._activeRendering = true;\r\n        this._renderingEngine.beautyRenderingManager.stopBeautyRenderCountdown();\r\n        this._renderingEngine.beautyRenderingManager.startBeautyRenderCountdown();\r\n    }\r\n\r\n    private startRendering() {\r\n        this._activeRendering = true;\r\n        this._renderingEngine.beautyRenderingManager.stopBeautyRenderCountdown();\r\n    }\r\n\r\n    private stopRendering() {\r\n        this._renderingEngine.beautyRenderingManager.startBeautyRenderCountdown();\r\n    }\r\n\r\n    private toggleBusyMode(toggle: boolean) {\r\n        if(this._renderingEngine.branding.busyModeDisplay === BUSY_MODE_DISPLAY.BLUR) {\r\n            this._renderingEngine.htmlElementAnchorLoader.toggleBusyMode(toggle);\r\n            if (toggle) {\r\n                if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && navigator.userAgent.toLowerCase().indexOf('android') > -1)\r\n                    return;\r\n                this._renderingEngine.renderer.domElement.style.filter = 'blur(3px)';\r\n            } else {\r\n                this._renderingEngine.renderer.domElement.style.filter = '';\r\n            }\r\n        } else if(this._renderingEngine.branding.busyModeDisplay === BUSY_MODE_DISPLAY.SPINNER) {\r\n            if (toggle) {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'visible';\r\n            } else {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'hidden';\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleLogo(toggle: boolean) {\r\n        if (this._renderingEngine.logoDivElement)\r\n            this._renderingEngine.logoDivElement.style.display = toggle ? 'inherit' : 'none';\r\n        if (this._renderingEngine.canvas)\r\n            this._renderingEngine.canvas.style.display = !toggle ? 'inherit' : 'none';\r\n    }\r\n\r\n    // #endregion Private Methods (10)\r\n}"]}},"error":null,"hash":"c111261e62a62ba6347d4c1408049876","cacheData":{"env":{}}}