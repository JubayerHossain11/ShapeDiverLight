{"id":"node_modules/@shapediver/viewer.shared.math/dist/implementation/Spherical.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\dist\\implementation\\Spherical.js.map","includedInParent":true,"mtime":1706527150284},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\src\\implementation\\Spherical.ts","includedInParent":true,"mtime":1706527150479},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\package.json","includedInParent":true,"mtime":1706527150101},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":136},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\dist\\implementation\\Spherical.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Spherical = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass Spherical {\r\n    constructor(_radius = 1, _phi = 0, _theta = 0) {\r\n        this._radius = _radius;\r\n        this._phi = _phi;\r\n        this._theta = _theta;\r\n    }\r\n    get radius() {\r\n        return this._radius;\r\n    }\r\n    set radius(value) {\r\n        this._radius = value;\r\n    }\r\n    get phi() {\r\n        return this._phi;\r\n    }\r\n    set phi(value) {\r\n        this._phi = value;\r\n    }\r\n    get theta() {\r\n        return this._theta;\r\n    }\r\n    set theta(value) {\r\n        this._theta = value;\r\n    }\r\n    makeSafe() {\r\n        const EPS = 0.000001;\r\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\r\n        return this;\r\n    }\r\n    fromVec3(p) {\r\n        this.radius = Math.sqrt(p[0] * p[0] + p[1] * p[1] + p[2] * p[2]);\r\n        if (this.radius === 0) {\r\n            this.theta = 0;\r\n            this.phi = 0;\r\n        }\r\n        else {\r\n            this.theta = Math.atan2(p[0], p[2]);\r\n            this.phi = Math.acos(Math.max(-1, Math.min(1, p[1] / this.radius)));\r\n        }\r\n        return this;\r\n    }\r\n    toVec3() {\r\n        const sinPhiRadius = Math.sin(this.phi) * this.radius;\r\n        return gl_matrix_1.vec3.fromValues(sinPhiRadius * Math.sin(this.theta), Math.cos(this.phi) * this.radius, sinPhiRadius * Math.cos(this.theta));\r\n    }\r\n}\r\nexports.Spherical = Spherical;\r\n"},"sourceMaps":{"js":{"version":3,"file":"Spherical.js","sourceRoot":"","sources":["../../src/implementation/Spherical.ts"],"names":[],"mappings":";;;AAAA,yCAAgC;AAGhC,MAAa,SAAS;IAClB,YACY,UAAkB,CAAC,EACnB,OAAe,CAAC,EAChB,SAAiB,CAAC;QAFlB,YAAO,GAAP,OAAO,CAAY;QACnB,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAY;IAC1B,CAAC;IAGL,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,MAAM,CAAC,KAAa;QAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAGD,IAAW,GAAG;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,GAAG,CAAC,KAAa;QACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACtB,CAAC;IAGD,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,KAAK,CAAC,KAAa;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,QAAQ;QACX,MAAM,GAAG,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,CAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAC,CAAO;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;SAChB;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACvE;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM;QACT,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,GAAG,CAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QACxD,OAAO,gBAAI,CAAC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAAE,EAAE,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,GAAG,CAAE,GAAG,IAAI,CAAC,MAAM,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC,CAAC;IAC7I,CAAC;CACJ;AAzDD,8BAyDC","sourcesContent":["import { vec3 } from 'gl-matrix'\r\nimport { ISpherical } from '../interfaces/ISpherical';\r\n\r\nexport class Spherical implements ISpherical {\r\n    constructor(\r\n        private _radius: number = 1,\r\n        private _phi: number = 0,\r\n        private _theta: number = 0,\r\n    ) { }\r\n\r\n\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n    }\r\n\r\n\r\n    public get phi(): number {\r\n        return this._phi;\r\n    }\r\n\r\n    public set phi(value: number) {\r\n        this._phi = value;\r\n    }\r\n\r\n\r\n    public get theta(): number {\r\n        return this._theta;\r\n    }\r\n\r\n    public set theta(value: number) {\r\n        this._theta = value;\r\n    }\r\n\r\n    public makeSafe() {\r\n        const EPS = 0.000001;\r\n        this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ));\r\n        return this;\r\n    }\r\n\r\n    public fromVec3(p: vec3): ISpherical {\r\n        this.radius = Math.sqrt(p[0] * p[0] + p[1] * p[1] + p[2] * p[2]);\r\n\r\n        if (this.radius === 0) {\r\n            this.theta = 0;\r\n            this.phi = 0;\r\n        } else {\r\n            this.theta = Math.atan2(p[0], p[2]);\r\n            this.phi = Math.acos(Math.max(-1, Math.min(1, p[1] / this.radius)));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toVec3(): vec3 {\r\n        const sinPhiRadius = Math.sin( this.phi ) * this.radius;\r\n        return vec3.fromValues(sinPhiRadius * Math.sin( this.theta ), Math.cos( this.phi ) * this.radius, sinPhiRadius * Math.cos( this.theta ));\r\n    }\r\n}"]}},"error":null,"hash":"23f2da9993b2c6be03c7b5157aecce1f","cacheData":{"env":{}}}