{"id":"node_modules/@shapediver/viewer.data-engine.material-engine/dist/MaterialEngine.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js.map","includedInParent":true,"mtime":1706527150180},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\src\\MaterialEngine.ts","includedInParent":true,"mtime":1706527150246},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\package.json","includedInParent":true,"mtime":1706527150132},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":13,"column":42,"index":845},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":14,"column":41,"index":927},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":15,"column":38,"index":1005},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":16,"column":28,"index":1070},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"./materialDatabase","loc":{"line":17,"column":35,"index":1120},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\MaterialEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\materialDatabase.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MaterialEngine = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst materialDatabase_1 = require(\"./materialDatabase\");\r\nclass MaterialEngine {\r\n    constructor() {\r\n        // #region Properties (4)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        // #endregion Private Methods (3)\r\n    }\r\n    // #endregion Properties (4)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (9)\r\n    /**\r\n       * Load the material content into a scene graph node.\r\n       *\r\n       * @param content the material content\r\n       * @returns the scene graph node\r\n       */\r\n    loadContent(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const node = new viewer_shared_node_tree_1.TreeNode(content.name || 'material');\r\n            if (!content)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Invalid content was provided to material engine.');\r\n            let material = new viewer_shared_types_1.MaterialStandardData();\r\n            if (content.data) {\r\n                const data = content.data;\r\n                let presetData;\r\n                if (data.materialpreset)\r\n                    presetData = this.loadPresetMaterialDefinition(data.materialpreset);\r\n                if (data.materialType && data.materialType !== 'standard') {\r\n                    // gem material https://shapediver.atlassian.net/browse/SS-2514\r\n                }\r\n                else {\r\n                    if (data.version) {\r\n                        if (data.version === '1.0') {\r\n                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV1(data, presetData));\r\n                        }\r\n                        else if (data.version === '2.0') {\r\n                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV2(data, presetData));\r\n                        }\r\n                        else if (data.version === '3.0') {\r\n                            material = yield this.loadMaterialV3(this.loadMaterialDefinitionV3(data, presetData));\r\n                        }\r\n                        else {\r\n                            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Material data version not supported.');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: No material data was provided to material engine.');\r\n            }\r\n            node.data.push(material);\r\n            return node;\r\n        });\r\n    }\r\n    loadMap(url, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let image;\r\n            if (!id) {\r\n                image = (yield this._converter.responseToImage(yield this._httpClient.loadTexture(url)));\r\n            }\r\n            else {\r\n                image = (yield this._converter.responseToImage(yield this._httpClient.loadTexture('https://viewer.shapediver.com/v2/materials/1024/' + id + '/' + url)));\r\n            }\r\n            return new viewer_shared_types_1.MapData(image);\r\n        });\r\n    }\r\n    loadMapWithProperties(texture) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let image = yield this._converter.responseToImage(yield this._httpClient.loadTexture(texture.href));\r\n            const wrapS = texture.wrapS === 1 ? viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapS === 2 ? viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT : viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT;\r\n            const wrapT = texture.wrapT === 1 ? viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapT === 2 ? viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT : viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT;\r\n            const center = texture.center ? gl_matrix_1.vec2.fromValues(texture.center[0], texture.center[1]) : gl_matrix_1.vec2.fromValues(0, 0);\r\n            const color = texture.color ? gl_matrix_1.vec4.fromValues(texture.color[0] / 255, texture.color[1] / 255, texture.color[2] / 255, texture.color[3] / 255) : gl_matrix_1.vec4.fromValues(1, 1, 1, 1);\r\n            const offset = texture.offset ? gl_matrix_1.vec2.fromValues(texture.offset[0], texture.offset[1]) : gl_matrix_1.vec2.fromValues(0, 0);\r\n            const repeat = texture.repeat ? gl_matrix_1.vec2.fromValues(texture.repeat[0], texture.repeat[1]) : gl_matrix_1.vec2.fromValues(1, 1);\r\n            return new viewer_shared_types_1.MapData(image, wrapS, wrapT, viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR, viewer_shared_types_1.TEXTURE_FILTERING.LINEAR, center, color, offset, repeat, texture.rotation || 0);\r\n        });\r\n    }\r\n    loadMaterialDefinitionV1(data, presetData = {}) {\r\n        // ambient is ignored\r\n        if (data.color) {\r\n            presetData.color = data.color;\r\n        }\r\n        else if (data.diffuse) {\r\n            presetData.color = data.diffuse;\r\n        }\r\n        // emission is ignored\r\n        // specular is ignored\r\n        if (data.shine || data.shine === 0) {\r\n            presetData.metalness = Math.min(1, data.shine);\r\n            presetData.roughness = 1 - (Math.min(1, data.shine));\r\n        }\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency;\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = {\r\n                href: data.bitmaptexture\r\n            };\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = {\r\n                href: data.bumptexture\r\n            };\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = {\r\n                href: data.transparencytexture\r\n            };\r\n        return presetData;\r\n    }\r\n    loadMaterialDefinitionV2(data, presetData = {}) {\r\n        // ambient is ignored\r\n        if (data.color)\r\n            presetData.color = data.color;\r\n        presetData.side = data.side;\r\n        if (data.metalness || data.metalness === 0)\r\n            presetData.metalness = data.metalness;\r\n        if (data.roughness || data.roughness === 0)\r\n            presetData.roughness = data.roughness;\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency;\r\n        if (data.alphaThreshold || data.alphaThreshold === 0)\r\n            presetData.alphaThreshold = data.alphaThreshold;\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = {\r\n                href: data.bitmaptexture\r\n            };\r\n        if (data.metalnesstexture)\r\n            presetData.metalnesstexture = {\r\n                href: data.metalnesstexture\r\n            };\r\n        if (data.roughnesstexture)\r\n            presetData.roughnesstexture = {\r\n                href: data.roughnesstexture\r\n            };\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = {\r\n                href: data.bumptexture\r\n            };\r\n        if (data.normaltexture)\r\n            presetData.normaltexture = {\r\n                href: data.normaltexture\r\n            };\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = {\r\n                href: data.transparencytexture\r\n            };\r\n        return presetData;\r\n    }\r\n    loadMaterialDefinitionV3(data, presetData = {}) {\r\n        // ambient is ignored\r\n        if (data.color)\r\n            presetData.color = data.color;\r\n        presetData.side = data.side;\r\n        if (data.metalness || data.metalness === 0)\r\n            presetData.metalness = data.metalness;\r\n        if (data.roughness || data.roughness === 0)\r\n            presetData.roughness = data.roughness;\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency;\r\n        if (data.alphaThreshold || data.alphaThreshold === 0)\r\n            presetData.alphaThreshold = data.alphaThreshold;\r\n        if (data.bumpAmplitude || data.bumpAmplitude === 0)\r\n            presetData.bumpAmplitude = data.bumpAmplitude;\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = data.bitmaptexture;\r\n        if (data.metalnesstexture)\r\n            presetData.metalnesstexture = data.metalnesstexture;\r\n        if (data.roughnesstexture)\r\n            presetData.roughnesstexture = data.roughnesstexture;\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = data.bumptexture;\r\n        if (data.normaltexture)\r\n            presetData.normaltexture = data.normaltexture;\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = data.transparencytexture;\r\n        // line material https://shapediver.atlassian.net/browse/SS-2272\r\n        return presetData;\r\n    }\r\n    loadMaterialV3(data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const material = new viewer_shared_types_1.MaterialStandardData();\r\n            const promises = [];\r\n            // ambient is ignored\r\n            if (data.color)\r\n                material.color = data.color;\r\n            material.side = data.side === 'front' ? viewer_shared_types_1.MATERIAL_SIDE.FRONT : data.side === 'back' ? viewer_shared_types_1.MATERIAL_SIDE.BACK : viewer_shared_types_1.MATERIAL_SIDE.DOUBLE;\r\n            if (data.metalness || data.metalness === 0)\r\n                material.metalness = data.metalness;\r\n            if (data.roughness || data.roughness === 0)\r\n                material.roughness = data.roughness;\r\n            if (data.hasOwnProperty('transparency'))\r\n                material.opacity = 1 - data.transparency;\r\n            if (data.alphaThreshold || data.alphaThreshold === 0)\r\n                material.alphaCutoff = data.alphaThreshold;\r\n            if (data.bumpAmplitude || data.bumpAmplitude === 0)\r\n                material.bumpScale = data.bumpAmplitude;\r\n            if (data.bitmaptexture) {\r\n                promises.push(this.loadMapWithProperties(data.bitmaptexture).then(map => {\r\n                    if (map)\r\n                        material.map = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            if (data.metalnesstexture) {\r\n                promises.push(this.loadMapWithProperties(data.metalnesstexture).then(map => {\r\n                    if (map)\r\n                        material.metalnessMap = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            if (data.roughnesstexture) {\r\n                promises.push(this.loadMapWithProperties(data.roughnesstexture).then(map => {\r\n                    if (map)\r\n                        material.roughnessMap = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            if (data.bumptexture) {\r\n                promises.push(this.loadMapWithProperties(data.bumptexture).then(map => {\r\n                    if (map)\r\n                        material.bumpMap = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            if (data.normaltexture) {\r\n                promises.push(this.loadMapWithProperties(data.normaltexture).then(map => {\r\n                    if (map)\r\n                        material.normalMap = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            if (data.transparencytexture) {\r\n                promises.push(this.loadMapWithProperties(data.transparencytexture).then(map => {\r\n                    if (map)\r\n                        material.alphaMap = map;\r\n                    return map;\r\n                }));\r\n            }\r\n            // line material https://shapediver.atlassian.net/browse/SS-2272\r\n            yield Promise.all(promises);\r\n            return material;\r\n        });\r\n    }\r\n    loadPresetMaterial(preset) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.loadMaterialV3(this.loadPresetMaterialDefinition(preset));\r\n        });\r\n    }\r\n    loadPresetMaterialDefinition(preset) {\r\n        const definition = {};\r\n        const idStrings = this.getClassAndSpecificId(preset);\r\n        if (materialDatabase_1.materialDatabase[idStrings.class] && materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific]) {\r\n            this.assignSpecificDefinition(idStrings, materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific], definition);\r\n            this.assignGeneralDefinition(idStrings, materialDatabase_1.materialDatabase[idStrings.class].properties, materialDatabase_1.materialDatabase[idStrings.class][idStrings.specific], definition);\r\n        }\r\n        else if (materialDatabase_1.materialDatabase[idStrings.class] && materialDatabase_1.materialDatabase[idStrings.class]['00']) {\r\n            this.assignSpecificDefinition({ class: idStrings.class, specific: '00' }, materialDatabase_1.materialDatabase[idStrings.class]['00'], definition);\r\n            this.assignGeneralDefinition({ class: idStrings.class, specific: '00' }, materialDatabase_1.materialDatabase[idStrings.class].properties, materialDatabase_1.materialDatabase[idStrings.class]['00'], definition);\r\n        }\r\n        else {\r\n            this.assignSpecificDefinition({ class: '00', specific: '00' }, materialDatabase_1.materialDatabase['00']['00'], definition);\r\n            this.assignGeneralDefinition({ class: '00', specific: '00' }, materialDatabase_1.materialDatabase['00'].properties, materialDatabase_1.materialDatabase['00']['00'], definition);\r\n        }\r\n        return definition;\r\n    }\r\n    // #endregion Public Methods (9)\r\n    // #region Private Methods (3)\r\n    assignGeneralDefinition(id, generalDefinition, specificDefinition, definition) {\r\n        const promises = [];\r\n        if (generalDefinition.transparencytexture && !specificDefinition.transparencytexture)\r\n            definition.transparencytexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.transparencytexture\r\n            };\r\n        if (generalDefinition.hasOwnProperty('alphaThreshold') && !specificDefinition.hasOwnProperty('alphaThreshold'))\r\n            definition.alphaThreshold = generalDefinition.alphaThreshold;\r\n        if (generalDefinition.bumptexture && !specificDefinition.bumptexture)\r\n            definition.bumptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bumptexture\r\n            };\r\n        if (generalDefinition.hasOwnProperty('bumpAmplitude') && !specificDefinition.hasOwnProperty('bumpAmplitude'))\r\n            definition.bumpAmplitude = generalDefinition.bumpAmplitude;\r\n        if (generalDefinition.color && !specificDefinition.color)\r\n            definition.color = generalDefinition.color;\r\n        if (generalDefinition.bitmaptexture && !specificDefinition.bitmaptexture)\r\n            definition.bitmaptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bitmaptexture\r\n            };\r\n        if (generalDefinition.hasOwnProperty('metalness') && !specificDefinition.hasOwnProperty('metalness'))\r\n            definition.metalness = generalDefinition.metalness;\r\n        if (generalDefinition.metalnesstexture && !specificDefinition.metalnesstexture)\r\n            definition.metalnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.metalnesstexture\r\n            };\r\n        if (generalDefinition.normaltexture && !specificDefinition.normaltexture)\r\n            definition.normaltexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.normaltexture\r\n            };\r\n        if (generalDefinition.hasOwnProperty('transparency') && !specificDefinition.hasOwnProperty('transparency'))\r\n            definition.transparency = generalDefinition.transparency;\r\n        if (generalDefinition.hasOwnProperty('roughness') && !specificDefinition.hasOwnProperty('roughness'))\r\n            definition.roughness = generalDefinition.roughness;\r\n        if (generalDefinition.roughnesstexture && !specificDefinition.roughnesstexture)\r\n            definition.roughnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.roughnesstexture\r\n            };\r\n        if (generalDefinition.side && !specificDefinition.side)\r\n            definition.side = generalDefinition.side;\r\n    }\r\n    assignSpecificDefinition(id, specificDefinition, definition) {\r\n        if (specificDefinition.transparencytexture)\r\n            definition.transparencytexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.transparencytexture\r\n            };\r\n        if (specificDefinition.hasOwnProperty('alphaThreshold'))\r\n            definition.alphaThreshold = specificDefinition.alphaThreshold;\r\n        if (specificDefinition.bumptexture)\r\n            definition.bumptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bumptexture\r\n            };\r\n        if (specificDefinition.hasOwnProperty('bumpAmplitude'))\r\n            definition.bumpAmplitude = specificDefinition.bumpAmplitude;\r\n        if (specificDefinition.color)\r\n            definition.color = specificDefinition.color;\r\n        if (specificDefinition.bitmaptexture)\r\n            definition.bitmaptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bitmaptexture\r\n            };\r\n        if (specificDefinition.hasOwnProperty('metalness'))\r\n            definition.metalness = specificDefinition.metalness;\r\n        if (specificDefinition.metalnesstexture)\r\n            definition.metalnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.metalnesstexture\r\n            };\r\n        if (specificDefinition.normaltexture)\r\n            definition.normaltexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.normaltexture\r\n            };\r\n        if (specificDefinition.hasOwnProperty('transparency'))\r\n            definition.transparency = specificDefinition.transparency;\r\n        if (specificDefinition.hasOwnProperty('roughness'))\r\n            definition.roughness = specificDefinition.roughness;\r\n        if (specificDefinition.roughnesstexture)\r\n            definition.roughnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.roughnesstexture\r\n            };\r\n        if (specificDefinition.side)\r\n            definition.side = specificDefinition.side;\r\n    }\r\n    getClassAndSpecificId(id) {\r\n        // for a while, we had documented the presets to be 10, 20, 30 and 40 here, we allow for the few cases where this was used to succeed\r\n        if (id < 100 && id % 10 == 0)\r\n            id /= 10;\r\n        // if the id is less than 10, multiply it by 100\r\n        if (id < 10)\r\n            id *= 100;\r\n        const cast = (id) => {\r\n            let idString = String(id);\r\n            return idString.padStart(2, '0').slice(0, 2);\r\n        };\r\n        return {\r\n            class: cast(Math.floor(id / 100)),\r\n            specific: cast(id - (Math.floor(id / 100) * 100))\r\n        };\r\n    }\r\n}\r\nexports.MaterialEngine = MaterialEngine;\r\n"},"sourceMaps":{"js":{"version":3,"file":"MaterialEngine.js","sourceRoot":"","sources":["../src/MaterialEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITreeNode, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { Converter, HttpClient, Logger, ShapeDiverViewerDataProcessingError } from '@shapediver/viewer.shared.services'\r\nimport {\r\n    MapData,\r\n    MATERIAL_SIDE,\r\n    MaterialStandardData,\r\n    TEXTURE_FILTERING,\r\n    TEXTURE_WRAPPING,\r\n} from '@shapediver/viewer.shared.types'\r\nimport { vec2, vec3, vec4 } from 'gl-matrix'\r\n\r\nimport { materialDatabase } from './materialDatabase'\r\nimport { ShapeDiverResponseOutputContent } from '@shapediver/sdk.geometry-api-sdk-v2'\r\nimport { IMaterialContentData, IMaterialContentDataV1, IMaterialContentDataV2, IMaterialContentDataV3, IPresetMaterialDefinition, ITexture } from '@shapediver/viewer.data-engine.shared-types'\r\n\r\nexport class MaterialEngine {\r\n    // #region Properties (4)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n\r\n    private static _instance: MaterialEngine;\r\n\r\n    // #endregion Properties (4)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (9)\r\n\r\n    /**\r\n       * Load the material content into a scene graph node.\r\n       * \r\n       * @param content the material content\r\n       * @returns the scene graph node \r\n       */\r\n    public async loadContent(content: ShapeDiverResponseOutputContent): Promise<ITreeNode> {\r\n        const node = new TreeNode(content.name || 'material');\r\n        if (!content) \r\n            throw new ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Invalid content was provided to material engine.');\r\n\r\n        let material = new MaterialStandardData();\r\n\r\n        if (content.data) {\r\n            const data: IMaterialContentData = content.data;\r\n            let presetData: IMaterialContentDataV3 | undefined;\r\n            if (data.materialpreset)\r\n                presetData = this.loadPresetMaterialDefinition(data.materialpreset);\r\n\r\n            if (data.materialType && data.materialType !== 'standard') {\r\n                // gem material https://shapediver.atlassian.net/browse/SS-2514\r\n            } else {\r\n                if (data.version) {\r\n                    if (data.version === '1.0') {\r\n                        material = await this.loadMaterialV3(this.loadMaterialDefinitionV1(data, presetData));\r\n                    } else if (data.version === '2.0') {\r\n                        material = await this.loadMaterialV3(this.loadMaterialDefinitionV2(data, presetData));\r\n                    } else if (data.version === '3.0') {\r\n                        material = await this.loadMaterialV3(this.loadMaterialDefinitionV3(data, presetData));\r\n                    } else {\r\n                        throw new ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: Material data version not supported.');\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            throw new ShapeDiverViewerDataProcessingError('MaterialEngine.loadContent: No material data was provided to material engine.');\r\n        }\r\n        \r\n        node.data.push(material);\r\n        return node;\r\n    }\r\n\r\n    public async loadMap(url: string, id?: string): Promise<MapData | null> {\r\n        let image: HTMLImageElement;\r\n        if (!id) {\r\n            image = <HTMLImageElement>await this._converter.responseToImage(await this._httpClient.loadTexture(url));\r\n        } else {\r\n            image = <HTMLImageElement>await this._converter.responseToImage(await this._httpClient.loadTexture('https://viewer.shapediver.com/v2/materials/1024/' + id + '/' + url));\r\n        }\r\n        return new MapData(image);\r\n    }\r\n\r\n    public async loadMapWithProperties(texture: ITexture): Promise<MapData | null> {\r\n        let image: HTMLImageElement = <HTMLImageElement>await this._converter.responseToImage(await this._httpClient.loadTexture(texture.href!));\r\n        \r\n        const wrapS = texture.wrapS === 1 ? TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapS === 2 ? TEXTURE_WRAPPING.MIRRORED_REPEAT : TEXTURE_WRAPPING.REPEAT;\r\n        const wrapT = texture.wrapT === 1 ? TEXTURE_WRAPPING.CLAMP_TO_EDGE : texture.wrapT === 2 ? TEXTURE_WRAPPING.MIRRORED_REPEAT : TEXTURE_WRAPPING.REPEAT;\r\n        const center = texture.center ? vec2.fromValues(texture.center[0], texture.center[1]) : vec2.fromValues(0, 0);\r\n        const color = texture.color ? vec4.fromValues(texture.color[0] / 255, texture.color[1] / 255, texture.color[2] / 255, texture.color[3] / 255) : vec4.fromValues(1, 1, 1, 1);\r\n        const offset = texture.offset ? vec2.fromValues(texture.offset[0], texture.offset[1]) : vec2.fromValues(0, 0);\r\n        const repeat = texture.repeat ? vec2.fromValues(texture.repeat[0], texture.repeat[1]) : vec2.fromValues(1, 1);\r\n\r\n        return new MapData(image, wrapS, wrapT, TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR, TEXTURE_FILTERING.LINEAR, center, color, offset, repeat, texture.rotation || 0);\r\n    }\r\n\r\n    public loadMaterialDefinitionV1(data: IMaterialContentDataV1, presetData: IMaterialContentDataV3 = {}): IMaterialContentDataV3 {\r\n        // ambient is ignored\r\n\r\n        if (data.color) {\r\n            presetData.color = data.color;\r\n        } else if (data.diffuse) {\r\n            presetData.color = data.diffuse;\r\n        }\r\n\r\n        // emission is ignored\r\n\r\n        // specular is ignored\r\n\r\n        if (data.shine || data.shine === 0) {\r\n            presetData.metalness = Math.min(1, data.shine);\r\n            presetData.roughness = 1 - (Math.min(1, data.shine));\r\n        }\r\n\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency!;\r\n\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = {\r\n                href: data.bitmaptexture\r\n            }\r\n\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = {\r\n                href: data.bumptexture\r\n            } \r\n\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = {\r\n                href: data.transparencytexture\r\n            }\r\n            \r\n        return presetData;\r\n    }\r\n\r\n    public loadMaterialDefinitionV2(data: IMaterialContentDataV2, presetData: IMaterialContentDataV3 = {}): IMaterialContentDataV3 {\r\n        // ambient is ignored\r\n\r\n        if (data.color)\r\n            presetData.color = data.color;\r\n\r\n        presetData.side = data.side;\r\n\r\n        if (data.metalness || data.metalness === 0)\r\n            presetData.metalness = data.metalness;\r\n\r\n        if (data.roughness || data.roughness === 0)\r\n            presetData.roughness = data.roughness;\r\n\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency!;\r\n\r\n        if (data.alphaThreshold || data.alphaThreshold === 0)\r\n            presetData.alphaThreshold = data.alphaThreshold;\r\n\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = {\r\n                href: data.bitmaptexture\r\n            }\r\n\r\n        if (data.metalnesstexture)\r\n            presetData.metalnesstexture = {\r\n                href: data.metalnesstexture\r\n            }\r\n\r\n        if (data.roughnesstexture)\r\n            presetData.roughnesstexture = {\r\n                href: data.roughnesstexture\r\n            }\r\n\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = {\r\n                href: data.bumptexture\r\n            }\r\n\r\n        if (data.normaltexture)\r\n            presetData.normaltexture = {\r\n                href: data.normaltexture\r\n            }\r\n\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = {\r\n                href: data.transparencytexture\r\n            }\r\n            \r\n        return presetData;\r\n    }\r\n\r\n    public loadMaterialDefinitionV3(data: IMaterialContentDataV3, presetData: IMaterialContentDataV3 = {}): IMaterialContentDataV3 {\r\n        // ambient is ignored\r\n\r\n        if (data.color)\r\n            presetData.color = data.color;\r\n\r\n        presetData.side = data.side;\r\n\r\n        if (data.metalness || data.metalness === 0)\r\n            presetData.metalness = data.metalness;\r\n\r\n        if (data.roughness || data.roughness === 0)\r\n            presetData.roughness = data.roughness;\r\n\r\n        if (data.hasOwnProperty('transparency'))\r\n            presetData.transparency = data.transparency!;\r\n\r\n        if (data.alphaThreshold || data.alphaThreshold === 0)\r\n            presetData.alphaThreshold = data.alphaThreshold;\r\n\r\n        if (data.bumpAmplitude || data.bumpAmplitude === 0)\r\n            presetData.bumpAmplitude = data.bumpAmplitude;\r\n\r\n        if (data.bitmaptexture)\r\n            presetData.bitmaptexture = data.bitmaptexture;\r\n\r\n        if (data.metalnesstexture)\r\n            presetData.metalnesstexture = data.metalnesstexture;\r\n\r\n        if (data.roughnesstexture)\r\n            presetData.roughnesstexture = data.roughnesstexture;\r\n\r\n        if (data.bumptexture)\r\n            presetData.bumptexture = data.bumptexture;\r\n\r\n        if (data.normaltexture)\r\n            presetData.normaltexture = data.normaltexture;\r\n\r\n        if (data.transparencytexture)\r\n            presetData.transparencytexture = data.transparencytexture;\r\n\r\n        // line material https://shapediver.atlassian.net/browse/SS-2272\r\n\r\n        return presetData;\r\n    }\r\n\r\n    public async loadMaterialV3(data: IMaterialContentDataV3): Promise<MaterialStandardData> {\r\n        const material = new MaterialStandardData();\r\n        const promises: Promise<MapData | null>[] = [];\r\n        // ambient is ignored\r\n\r\n        if (data.color)\r\n            material.color = data.color;\r\n\r\n        material.side = data.side === 'front' ? MATERIAL_SIDE.FRONT : data.side === 'back' ? MATERIAL_SIDE.BACK : MATERIAL_SIDE.DOUBLE;\r\n\r\n        if (data.metalness || data.metalness === 0)\r\n            material.metalness = data.metalness;\r\n\r\n        if (data.roughness || data.roughness === 0)\r\n            material.roughness = data.roughness;\r\n\r\n        if (data.hasOwnProperty('transparency'))\r\n            material.opacity = 1 - data.transparency!;\r\n\r\n        if (data.alphaThreshold || data.alphaThreshold === 0)\r\n            material.alphaCutoff = data.alphaThreshold;\r\n\r\n        if (data.bumpAmplitude || data.bumpAmplitude === 0)\r\n            material.bumpScale = data.bumpAmplitude;\r\n\r\n        if (data.bitmaptexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.bitmaptexture).then(map => {\r\n                    if (map) material.map = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        if (data.metalnesstexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.metalnesstexture).then(map => {\r\n                    if (map) material.metalnessMap = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        if (data.roughnesstexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.roughnesstexture).then(map => {\r\n                    if (map) material.roughnessMap = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        if (data.bumptexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.bumptexture).then(map => {\r\n                    if (map) material.bumpMap = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        if (data.normaltexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.normaltexture).then(map => {\r\n                    if (map) material.normalMap = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        if (data.transparencytexture) {\r\n            promises.push(\r\n                this.loadMapWithProperties(data.transparencytexture).then(map => {\r\n                    if (map) material.alphaMap = map;\r\n                    return map;\r\n                })\r\n            )\r\n        }\r\n\r\n        // line material https://shapediver.atlassian.net/browse/SS-2272\r\n        await Promise.all(promises);\r\n\r\n        return material;\r\n    }\r\n\r\n    public async loadPresetMaterial(preset: number): Promise<MaterialStandardData> {\r\n        return this.loadMaterialV3(this.loadPresetMaterialDefinition(preset));\r\n    }\r\n\r\n    public loadPresetMaterialDefinition(preset: number): IMaterialContentDataV3 {\r\n        const definition: IMaterialContentDataV3 = {};\r\n        const idStrings = this.getClassAndSpecificId(preset);\r\n        if (materialDatabase[idStrings.class] && materialDatabase[idStrings.class][idStrings.specific]) {\r\n            this.assignSpecificDefinition(idStrings, materialDatabase[idStrings.class][idStrings.specific], definition);\r\n            this.assignGeneralDefinition(idStrings, materialDatabase[idStrings.class].properties, materialDatabase[idStrings.class][idStrings.specific], definition);\r\n        } else if (materialDatabase[idStrings.class] && materialDatabase[idStrings.class]['00']) {\r\n            this.assignSpecificDefinition({ class: idStrings.class, specific: '00' }, materialDatabase[idStrings.class]['00'], definition);\r\n            this.assignGeneralDefinition({ class: idStrings.class, specific: '00' }, materialDatabase[idStrings.class].properties, materialDatabase[idStrings.class]['00'], definition);\r\n        } else {\r\n            this.assignSpecificDefinition({ class: '00', specific: '00' }, materialDatabase['00']['00'], definition);\r\n            this.assignGeneralDefinition({ class: '00', specific: '00' }, materialDatabase['00'].properties, materialDatabase['00']['00'], definition);\r\n        }\r\n        return definition;\r\n    }\r\n\r\n    // #endregion Public Methods (9)\r\n\r\n    // #region Private Methods (3)\r\n\r\n    private assignGeneralDefinition(id: { class: string, specific: string }, generalDefinition: IPresetMaterialDefinition, specificDefinition: IPresetMaterialDefinition, definition: IMaterialContentDataV3) {\r\n        const promises: Promise<MapData | null>[] = [];\r\n\r\n        if (generalDefinition.transparencytexture && !specificDefinition.transparencytexture)\r\n            definition.transparencytexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.transparencytexture\r\n            }\r\n\r\n        if (generalDefinition.hasOwnProperty('alphaThreshold') && !specificDefinition.hasOwnProperty('alphaThreshold'))\r\n            definition.alphaThreshold = generalDefinition.alphaThreshold;\r\n\r\n        if (generalDefinition.bumptexture && !specificDefinition.bumptexture) \r\n            definition.bumptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bumptexture\r\n            }\r\n        \r\n        if (generalDefinition.hasOwnProperty('bumpAmplitude') && !specificDefinition.hasOwnProperty('bumpAmplitude')) \r\n            definition.bumpAmplitude = generalDefinition.bumpAmplitude!;\r\n\r\n        if (generalDefinition.color && !specificDefinition.color) \r\n            definition.color = generalDefinition.color;\r\n\r\n        if (generalDefinition.bitmaptexture && !specificDefinition.bitmaptexture)\r\n            definition.bitmaptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.bitmaptexture\r\n            }\r\n        \r\n        if (generalDefinition.hasOwnProperty('metalness') && !specificDefinition.hasOwnProperty('metalness')) \r\n            definition.metalness = generalDefinition.metalness!;\r\n        \r\n        if (generalDefinition.metalnesstexture && !specificDefinition.metalnesstexture)\r\n            definition.metalnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.metalnesstexture\r\n            }\r\n       \r\n        if (generalDefinition.normaltexture && !specificDefinition.normaltexture)\r\n            definition.normaltexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.normaltexture\r\n            }\r\n\r\n        if (generalDefinition.hasOwnProperty('transparency') && !specificDefinition.hasOwnProperty('transparency')) \r\n            definition.transparency = generalDefinition.transparency;\r\n            \r\n        if (generalDefinition.hasOwnProperty('roughness') && !specificDefinition.hasOwnProperty('roughness')) \r\n            definition.roughness = generalDefinition.roughness!;\r\n\r\n        if (generalDefinition.roughnesstexture && !specificDefinition.roughnesstexture) \r\n            definition.roughnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + generalDefinition.roughnesstexture\r\n            }\r\n\r\n        if (generalDefinition.side && !specificDefinition.side) \r\n            definition.side = generalDefinition.side;\r\n    }\r\n\r\n    private assignSpecificDefinition(id: { class: string, specific: string }, specificDefinition: IPresetMaterialDefinition, definition: IMaterialContentDataV3) {\r\n        if (specificDefinition.transparencytexture)\r\n            definition.transparencytexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.transparencytexture\r\n            }\r\n\r\n        if (specificDefinition.hasOwnProperty('alphaThreshold'))\r\n            definition.alphaThreshold = specificDefinition.alphaThreshold!;\r\n\r\n        if (specificDefinition.bumptexture)\r\n            definition.bumptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bumptexture\r\n            }\r\n\r\n        if (specificDefinition.hasOwnProperty('bumpAmplitude')) \r\n            definition.bumpAmplitude = specificDefinition.bumpAmplitude!;\r\n\r\n        if (specificDefinition.color) \r\n            definition.color = specificDefinition.color;\r\n\r\n        if (specificDefinition.bitmaptexture)\r\n            definition.bitmaptexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.bitmaptexture\r\n            }\r\n\r\n        if (specificDefinition.hasOwnProperty('metalness'))\r\n            definition.metalness = specificDefinition.metalness!;\r\n\r\n        if (specificDefinition.metalnesstexture)\r\n            definition.metalnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.metalnesstexture\r\n            }\r\n            \r\n        if (specificDefinition.normaltexture)\r\n            definition.normaltexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.normaltexture\r\n            }\r\n\r\n        if (specificDefinition.hasOwnProperty('transparency')) \r\n            definition.transparency = specificDefinition.transparency!;\r\n\r\n        if (specificDefinition.hasOwnProperty('roughness')) \r\n            definition.roughness = specificDefinition.roughness!;\r\n\r\n        if (specificDefinition.roughnesstexture)\r\n            definition.roughnesstexture = {\r\n                href: 'https://viewer.shapediver.com/v2/materials/1024/' + id.class + '/' + id.specific + '/' + specificDefinition.roughnesstexture\r\n            }\r\n\r\n        if (specificDefinition.side) \r\n            definition.side = specificDefinition.side;\r\n    }\r\n\r\n    private getClassAndSpecificId(id: number): { class: string, specific: string } {\r\n        // for a while, we had documented the presets to be 10, 20, 30 and 40 here, we allow for the few cases where this was used to succeed\r\n        if (id < 100 && id % 10 == 0) id /= 10;\r\n\r\n        // if the id is less than 10, multiply it by 100\r\n        if (id < 10) id *= 100;\r\n\r\n        const cast = (id: number): string => {\r\n            let idString = String(id);\r\n            return idString.padStart(2, '0').slice(0, 2);\r\n        };\r\n\r\n        return {\r\n            class: cast(Math.floor(id / 100)),\r\n            specific: cast(id - (Math.floor(id / 100) * 100))\r\n        };\r\n    }\r\n\r\n    // #endregion Private Methods (3)\r\n}"]}},"error":null,"hash":"5390644340ba6e10d3f7919f015949a2","cacheData":{"env":{}}}