{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/loaders/BufferLoader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\BufferLoader.js.map","includedInParent":true,"mtime":1706527153340},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\loaders\\BufferLoader.ts","includedInParent":true,"mtime":1706527153909},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706527153303},{"name":"@shapediver/viewer.shared.services","loc":{"line":13,"column":41,"index":842},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\BufferLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferLoader = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nclass BufferLoader {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_content, _body, _baseUri) {\r\n        this._content = _content;\r\n        this._body = _body;\r\n        this._baseUri = _baseUri;\r\n        // #region Properties (2)\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._loaded = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getBuffer(bufferId) {\r\n        if (!this._content.buffers)\r\n            throw new Error('BufferLoader.getBuffer: Buffers not available.');\r\n        if (!this._content.buffers[bufferId])\r\n            throw new Error('BufferLoader.getBuffer: Buffer not available.');\r\n        if (!this._loaded[bufferId])\r\n            throw new Error('BufferLoader.getBuffer: Buffer not loaded.');\r\n        return this._loaded[bufferId];\r\n    }\r\n    load() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.buffers)\r\n                return;\r\n            let promises = [];\r\n            for (let i = 0; i < this._content.buffers.length; i++) {\r\n                const bufferId = i;\r\n                const buffer = this._content.buffers[bufferId];\r\n                if (buffer.type && buffer.type !== 'arraybuffer') {\r\n                    throw new Error(`BufferLoader.load: ${buffer.type} is not supported.`);\r\n                }\r\n                // If present, GLB container is required to be the first buffer.\r\n                if (buffer.uri === undefined && bufferId === 0) {\r\n                    if (!this._body)\r\n                        throw new Error(`BufferLoader.load: Buffer not available.`);\r\n                    this._loaded[bufferId] = this._body;\r\n                    return;\r\n                }\r\n                const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n                const dataUriRegexResult = buffer.uri.match(dataUriRegex);\r\n                // Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n                if (dataUriRegexResult) {\r\n                    const isBase64 = !!dataUriRegexResult[2];\r\n                    let data = dataUriRegexResult[3];\r\n                    data = decodeURIComponent(data);\r\n                    if (isBase64)\r\n                        data = atob(data);\r\n                    const view = new Uint8Array(data.length);\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        view[i] = data.charCodeAt(i);\r\n                    }\r\n                    this._loaded[bufferId] = view.buffer;\r\n                }\r\n                else {\r\n                    let httpResultPromise = this._httpClient.get(this._baseUri + '/' + buffer.uri, {\r\n                        responseType: 'arraybuffer'\r\n                    }).then(response => { this._loaded[bufferId] = response.data; });\r\n                    promises.push(httpResultPromise);\r\n                }\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n}\r\nexports.BufferLoader = BufferLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"BufferLoader.js","sourceRoot":"","sources":["../../../src/gltfv2/loaders/BufferLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types'\r\nimport { HttpClient } from '@shapediver/viewer.shared.services'\r\n\r\nexport class BufferLoader {\r\n    // #region Properties (2)\r\n\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n\r\n    private _loaded: {\r\n        [key: string]: ArrayBuffer\r\n    } = {};\r\n\r\n    // #endregion Properties (2)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _content: IGLTF_v2, private _body?: ArrayBuffer, private _baseUri?: string) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public getBuffer(bufferId: number): ArrayBuffer {\r\n        if (!this._content.buffers) throw new Error('BufferLoader.getBuffer: Buffers not available.')\r\n        if (!this._content.buffers[bufferId]) throw new Error('BufferLoader.getBuffer: Buffer not available.')\r\n        if (!this._loaded[bufferId]) throw new Error('BufferLoader.getBuffer: Buffer not loaded.')\r\n        return this._loaded[bufferId];\r\n    }\r\n\r\n    public async load(): Promise<void> {\r\n        if (!this._content.buffers) return;\r\n\r\n        let promises: Promise<void>[] = [];\r\n\r\n        for (let i = 0; i < this._content.buffers.length; i++) {\r\n            const bufferId = i;\r\n            const buffer = this._content.buffers[bufferId];\r\n\r\n            if (buffer.type && buffer.type !== 'arraybuffer') {\r\n                throw new Error(`BufferLoader.load: ${buffer.type} is not supported.`);\r\n            }\r\n\r\n            // If present, GLB container is required to be the first buffer.\r\n            if (buffer.uri === undefined && bufferId === 0) {\r\n                if (!this._body) throw new Error(`BufferLoader.load: Buffer not available.`);\r\n                this._loaded[bufferId] = this._body;\r\n                return;\r\n            }\r\n\r\n            const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n            const dataUriRegexResult = buffer.uri!.match(dataUriRegex);\r\n\r\n            // Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n            if (dataUriRegexResult) {\r\n                const isBase64 = !!dataUriRegexResult[2];\r\n                let data = dataUriRegexResult[3];\r\n                data = decodeURIComponent(data);\r\n                if (isBase64) data = atob(data);\r\n\r\n                const view = new Uint8Array(data.length);\r\n                for (let i = 0; i < data.length; i++) {\r\n                    view[i] = data.charCodeAt(i);\r\n                }\r\n                this._loaded[bufferId] = view.buffer;\r\n            } else {\r\n                let httpResultPromise = this._httpClient.get(this._baseUri + '/' + buffer.uri!, {\r\n                    responseType: 'arraybuffer'\r\n                }).then(response => { this._loaded[bufferId] = response.data; });\r\n                promises.push(httpResultPromise)\r\n            }\r\n        }\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n}\r\n"]}},"error":null,"hash":"7cea95ce635f1c1aad88ad42b2f6a2b0","cacheData":{"env":{}}}