{"id":"node_modules/@shapediver/viewer/dist/main.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js.map","includedInParent":true,"mtime":1706542086968},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\src\\main.ts","includedInParent":true,"mtime":1706542087485},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\package.json","includedInParent":true,"mtime":1706542086478},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":13,"column":59,"index":1035},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":14,"column":42,"index":1135},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":17,"column":41,"index":1379},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.main.creation-control-center","loc":{"line":18,"column":54,"index":1473},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\index.js"},{"name":"./implementation/viewport/ViewportApi","loc":{"line":19,"column":30,"index":1556},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js"},{"name":"./implementation/session/SessionApi","loc":{"line":20,"column":29,"index":1628},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\implementation\\session\\SessionApi.js"},{"name":"@shapediver/viewer.shared.build-data","loc":{"line":21,"column":43,"index":1712},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.build-data\\dist\\index.js"},{"name":"@shapediver/viewer.data-engine.geometry-engine","loc":{"line":22,"column":53,"index":1807},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer\\dist\\main.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createViewport = exports.createSession = exports.generalOptions = exports.version = exports.sessions = exports.viewports = exports.sceneTree = exports.removeListener = exports.addListener = void 0;\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_services_2 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_services_3 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_main_creation_control_center_1 = require(\"@shapediver/viewer.main.creation-control-center\");\r\nconst ViewportApi_1 = require(\"./implementation/viewport/ViewportApi\");\r\nconst SessionApi_1 = require(\"./implementation/session/SessionApi\");\r\nconst viewer_shared_build_data_1 = require(\"@shapediver/viewer.shared.build-data\");\r\nconst viewer_data_engine_geometry_engine_1 = require(\"@shapediver/viewer.data-engine.geometry-engine\");\r\nconst creationControlCenter = viewer_main_creation_control_center_1.CreationControlCenter.instance;\r\nconst inputValidator = viewer_shared_services_3.InputValidator.instance;\r\nconst logger = viewer_shared_services_2.Logger.instance;\r\nconst eventEngine = viewer_shared_services_1.EventEngine.instance;\r\nconst geometryEngine = viewer_data_engine_geometry_engine_1.GeometryEngine.instance;\r\nlet createdConsoleMessage = false, consoleBranding = true;\r\nclass GeneralOptions {\r\n    // #region Public Accessors (4)\r\n    get loggingLevel() {\r\n        return logger.loggingLevel;\r\n    }\r\n    set loggingLevel(value) {\r\n        inputValidator.validateAndError('loggingLevel', value, 'enum', true, Object.values(viewer_shared_services_1.LOGGING_LEVEL));\r\n        logger.loggingLevel = value;\r\n        logger.debug(`loggingLevel: LoggingLevel was set to: ${value}`);\r\n    }\r\n    get showMessages() {\r\n        return logger.showMessages;\r\n    }\r\n    set showMessages(value) {\r\n        inputValidator.validateAndError('showMessages', value, 'boolean');\r\n        logger.showMessages = value;\r\n        logger.debug(`showMessages: ShowMessages was set to: ${value}`);\r\n    }\r\n    get parallelGlTFProcessing() {\r\n        return geometryEngine.parallelGlTFProcessing;\r\n    }\r\n    set parallelGlTFProcessing(value) {\r\n        inputValidator.validateAndError('parallelGlTFProcessing', value, 'number');\r\n        geometryEngine.parallelGlTFProcessing = value;\r\n        logger.debug(`parallelGlTFProcessing: ParallelGlTFProcessing was set to: ${value}`);\r\n    }\r\n    get consoleBranding() {\r\n        return consoleBranding;\r\n    }\r\n    set consoleBranding(value) {\r\n        inputValidator.validateAndError('consoleBranding', value, 'boolean');\r\n        consoleBranding = value;\r\n        logger.debug(`consoleBranding: ConsoleBranding was set to: ${value}`);\r\n    }\r\n}\r\n/**\r\n * Adds an event listener.\r\n *\r\n * @param type The type of event.\r\n * @param cb The callback.\r\n * @returns\r\n */\r\nconst addListener = (type, cb) => {\r\n    inputValidator.validateAndError(`addListener`, type, 'string');\r\n    inputValidator.validateAndError(`addListener`, cb, 'function');\r\n    logger.debug(`addListener: Event Listener was registered for ${type}.`);\r\n    return eventEngine.addListener(type, cb);\r\n};\r\nexports.addListener = addListener;\r\n/**\r\n * Removes an event listener.\r\n *\r\n * @param id The id of the listener.\r\n * @returns\r\n */\r\nconst removeListener = (id) => {\r\n    inputValidator.validateAndError(`removeListener`, id, 'string');\r\n    logger.debug(`removeListener: Removing event listener with id ${id}.`);\r\n    return eventEngine.removeListener(id);\r\n};\r\nexports.removeListener = removeListener;\r\n/**\r\n * The scene tree that is used to store the scene.\r\n * The scene tree contains a unique node and child nodes for each session,\r\n * and can also be used to add your own nodes.\r\n */\r\nexports.sceneTree = viewer_shared_node_tree_1.Tree.instance;\r\n/**\r\n * The viewports that are currently being used.\r\n */\r\nexports.viewports = {};\r\n/**\r\n * The sessions that are currently being used.\r\n */\r\nexports.sessions = {};\r\n/**\r\n * The version of the viewer.\r\n */\r\nexports.version = viewer_shared_build_data_1.build_data.build_version.replace('3.', '');\r\n// Whenever a session or viewport is added or removed, this update is called.\r\ncreationControlCenter.update = (sessionEngines, renderingEngines) => {\r\n    for (let s in sessionEngines)\r\n        if (!exports.sessions[s])\r\n            exports.sessions[s] = new SessionApi_1.SessionApi(sessionEngines[s]);\r\n    for (let s in exports.sessions)\r\n        if (!sessionEngines[s])\r\n            delete exports.sessions[s];\r\n    for (let v in renderingEngines)\r\n        if (!exports.viewports[v])\r\n            exports.viewports[v] = new ViewportApi_1.ViewportApi(renderingEngines[v]);\r\n    for (let v in exports.viewports) {\r\n        if (!renderingEngines[v])\r\n            delete exports.viewports[v];\r\n    }\r\n};\r\nconst showConsoleMessage = () => {\r\n    createdConsoleMessage = true;\r\n    if (consoleBranding === true) {\r\n        console.log(`Powered by:\r\n   _____  __                         ____   _                   \r\n  / ___/ / /_   ____ _ ____   ___   / __ \\\\ (_)_   __ ___   _____\r\n  \\\\__ \\\\ / __ \\\\ / __ '// __ \\\\ / _ \\\\ / / / // /| | / // _ \\\\ / ___/\r\n ___/ // / / // /_/ // /_/ //  __// /_/ // / | |/ //  __// /    \r\n/____//_/ /_/ \\\\__,_// .___/ \\\\___//_____//_/  |___/ \\\\___//_/     \r\n                   /_/                                          \r\nShapeDiver Viewer 3, Version ${viewer_shared_build_data_1.build_data.build_version.replace('3.', '')}\r\nVisit us at https://shapediver.com/ and find out more!\r\n`);\r\n    }\r\n    else {\r\n        console.log(`ShapeDiver Viewer 3, Version ${viewer_shared_build_data_1.build_data.build_version.replace('3.', '')}`);\r\n    }\r\n};\r\n/**\r\n * General Viewer options that are used everywhere.\r\n * - loggingLevel: The logging level that is used.\r\n * - showMessages: Option to show/hide messages in the browser console.\r\n */\r\nexports.generalOptions = new GeneralOptions();\r\n/**\r\n * Create and initialize a session with a model hosted on a\r\n * {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend},\r\n * using the provided ticket and modelViewUrl.\r\n * Returns a session api object allowing to control the session.\r\n *\r\n * A JWT can be specified for authorizing the API calls to the Geometry Backend.\r\n * The model's settings on the Geometry Backend might require a JWT to be provided.\r\n *\r\n * By default the outputs of the model for its default parameter values will be loaded.\r\n *\r\n * An optional identifier for the session can be provided. This identifier can be used to retrieve the\r\n * api object from {@link sessions}. In case no identifier is provided, a unique one will be generated.\r\n *\r\n * @param properties.ticket The ticket for direct embedding of the model to create a session for. This identifies the model on the Geometry Backend.\r\n * @param properties.modelViewUrl The modelViewUrl of the {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend} hosting the model.\r\n * @param properties.jwtToken The JWT to use for authorizing the API calls to the Geometry Backend.\r\n * @param properties.id The unique identifier to use for the session.\r\n * @param properties.waitForOutputs Option to wait for the outputs to be loaded, or return immediately after creation of the session. (default: true)\r\n * @param properties.loadOutputs Option to load the outputs, or not load them until the first call of {@link ISessioncustomize}. (default: true)\r\n * @param properties.excludeViewports Option to exclude some viewports from the start. Can be accessed via {@link ISessionexcludeViewports}.\r\n * @param properties.initialParameterValues The initial set of parameter values to use. Map from parameter id to parameter value. The default value will be used for any parameter not specified.\r\n * @returns\r\n */\r\nconst createSession = (properties) => __awaiter(void 0, void 0, void 0, function* () {\r\n    if (createdConsoleMessage === false)\r\n        showConsoleMessage();\r\n    logger.info(`createSession: Creating and initializing session with properties ${JSON.stringify(properties)}.`);\r\n    // input validation\r\n    inputValidator.validateAndError(`createSession`, properties, 'object');\r\n    inputValidator.validateAndError(`createSession`, properties.ticket, 'string');\r\n    inputValidator.validateAndError(`createSession`, properties.modelViewUrl, 'string');\r\n    inputValidator.validateAndError(`createSession`, properties.jwtToken, 'string', false);\r\n    inputValidator.validateAndError(`createSession`, properties.id, 'string', false);\r\n    inputValidator.validateAndError(`createSession`, properties.waitForOutputs, 'boolean', false);\r\n    inputValidator.validateAndError(`createSession`, properties.loadOutputs, 'boolean', false);\r\n    inputValidator.validateAndError(`createSession`, properties.excludeViewports, 'stringArray', false);\r\n    inputValidator.validateAndError(`createSession`, properties.initialParameterValues, 'object', false);\r\n    if (properties.initialParameterValues)\r\n        for (let p in properties.initialParameterValues)\r\n            inputValidator.validateAndError(`createSession`, properties.initialParameterValues[p], 'string');\r\n    if (properties.waitForOutputs === undefined)\r\n        properties.waitForOutputs = true;\r\n    if (properties.loadOutputs === undefined)\r\n        properties.loadOutputs = true;\r\n    const sessionEngine = yield creationControlCenter.createSessionEngine(properties);\r\n    exports.sessions[sessionEngine.id] = new SessionApi_1.SessionApi(sessionEngine);\r\n    return exports.sessions[sessionEngine.id];\r\n});\r\nexports.createSession = createSession;\r\n/**\r\n * Create and initialize a viewport with the provided type and canvas,\r\n * and return a viewport api object allowing to control it.\r\n *\r\n * An optional identifier for the viewport can be provided. This identifier can be used to retrieve the\r\n * viewport object from {@link viewports}. In case no identifier is provided, a unique one will be generated.\r\n *\r\n * By default a new viewport displays the complete scene tree. Viewports can be excluded from\r\n * displaying geometry for specific sessions by using the {@link excludeViewports} property of\r\n * {@link ISessionApi}.\r\n *\r\n * @param properties.visibility The visibility of the viewport.\r\n * @param properties.canvas The canvas that the viewport should use. A canvas element will be created if none is provided.\r\n * @param properties.id The unique identifier to use for the viewport.\r\n * @param properties.branding Optional branding options.\r\n * @param properties.sessionSettingsId Optional identifier of the session to be used for loading / persisting settings of the viewport when the {@link SESSION_SETTINGS_MODE} is set to MANUAL.\r\n * @param properties.sessionSettingsMode Allows to control which session to use for loading / persisting settings of the viewport. (default: {@link SESSION_SETTINGS_MODE.FIRST}).\r\n * @returns\r\n */\r\nconst createViewport = (properties) => __awaiter(void 0, void 0, void 0, function* () {\r\n    if (createdConsoleMessage === false)\r\n        showConsoleMessage();\r\n    inputValidator.validateAndError('createViewport', properties, 'object', false);\r\n    const prop = Object.assign({}, properties);\r\n    inputValidator.validateAndError(`createViewport`, prop.canvas, 'HTMLCanvasElement', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.id, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.sessionSettingsId, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.sessionSettingsMode, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE));\r\n    inputValidator.validateAndError(`createViewport`, prop.visibility, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE));\r\n    inputValidator.validateAndError('createViewport', prop.branding, 'object', false);\r\n    const branding = Object.assign({}, prop.branding);\r\n    if (branding.logo !== null)\r\n        inputValidator.validateAndError(`createViewport`, branding.logo, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.backgroundColor, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.busyModeSpinner, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.busyModeDisplay, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY));\r\n    inputValidator.validateAndError(`createViewport`, branding.spinnerPositioning, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING));\r\n    prop.sessionSettingsMode = prop.sessionSettingsMode !== undefined ? prop.sessionSettingsMode : viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.FIRST;\r\n    if (prop.sessionSettingsMode === viewer_rendering_engine_rendering_engine_1.SESSION_SETTINGS_MODE.MANUAL && !prop.sessionSettingsId)\r\n        throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`createViewport: Input could not be validated. sessionSettingsId has to point to a valid and created session when using SESSION_SETTINGS_MODE.MANUAL`, prop.sessionSettingsId, 'string');\r\n    const renderingEngine = yield creationControlCenter.createRenderingEngineThreeJs(prop);\r\n    exports.viewports[renderingEngine.id] = new ViewportApi_1.ViewportApi(renderingEngine);\r\n    return exports.viewports[renderingEngine.id];\r\n});\r\nexports.createViewport = createViewport;\r\n"},"sourceMaps":{"js":{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { BUSY_MODE_DISPLAY, SESSION_SETTINGS_MODE, SPINNER_POSITIONING, VISIBILITY_MODE } from '@shapediver/viewer.rendering-engine.rendering-engine'\r\nimport { ITree, Tree, TreeNode } from '@shapediver/viewer.shared.node-tree';\r\nimport { ISessionApi } from './interfaces/session/ISessionApi';\r\nimport { IViewportApi } from './interfaces/viewport/IViewportApi';\r\nimport { EventEngine, IEvent, LOGGING_LEVEL, MainEventTypes, SettingsEngine, ShapeDiverViewerValidationError, UuidGenerator } from '@shapediver/viewer.shared.services';\r\nimport { Logger } from '@shapediver/viewer.shared.services';\r\nimport { InputValidator } from '@shapediver/viewer.shared.services';\r\nimport { CreationControlCenter, ICreationControlCenter } from '@shapediver/viewer.main.creation-control-center';\r\nimport { ViewportApi } from './implementation/viewport/ViewportApi';\r\nimport { SessionEngine } from '@shapediver/viewer.session-engine.session-engine';\r\nimport { SessionApi } from './implementation/session/SessionApi';\r\nimport { RenderingEngine as RenderingEngineThreeJs } from '@shapediver/viewer.rendering-engine-threejs.standard';\r\nimport { build_data } from '@shapediver/viewer.shared.build-data';\r\nimport { GeometryEngine } from '@shapediver/viewer.data-engine.geometry-engine';\r\n\r\n\r\nconst creationControlCenter: ICreationControlCenter = CreationControlCenter.instance;\r\nconst inputValidator: InputValidator = InputValidator.instance;\r\nconst logger: Logger = Logger.instance;\r\nconst eventEngine: EventEngine = EventEngine.instance;\r\nconst geometryEngine: GeometryEngine = GeometryEngine.instance;\r\n\r\nlet createdConsoleMessage = false, consoleBranding = true;\r\n\r\nexport interface IGeneralOptions {\r\n    /**\r\n     * The logging level that is used.\r\n     */\r\n    loggingLevel: LOGGING_LEVEL;\r\n\r\n    /**\r\n     * Option to show/hide messages in the browser console.\r\n     */\r\n    showMessages: boolean;\r\n    \r\n    /**\r\n     * The number of glTFs that are downloaded and processed at the same time.\r\n     * Restricting this number might help if too much data is downloaded at the same time.\r\n     * (default: Infinity)\r\n     */\r\n    parallelGlTFProcessing: number;\r\n\r\n    /**\r\n     * When set to false, the branding in the viewer console will be limited to a single line.\r\n     * This will only include the viewer version. (default: true)\r\n     */\r\n    consoleBranding: boolean;\r\n}\r\n\r\nclass GeneralOptions {\r\n    // #region Public Accessors (4)\r\n\r\n    public get loggingLevel(): LOGGING_LEVEL {\r\n        return logger.loggingLevel;\r\n    }\r\n\r\n    public set loggingLevel(value: LOGGING_LEVEL) {\r\n        inputValidator.validateAndError('loggingLevel', value, 'enum', true, Object.values(LOGGING_LEVEL));\r\n        logger.loggingLevel = value;\r\n        logger.debug(`loggingLevel: LoggingLevel was set to: ${value}`);\r\n    }\r\n\r\n    public get showMessages(): boolean {\r\n        return logger.showMessages;\r\n    }\r\n\r\n    public set showMessages(value: boolean) {\r\n        inputValidator.validateAndError('showMessages', value, 'boolean');\r\n        logger.showMessages = value;\r\n        logger.debug(`showMessages: ShowMessages was set to: ${value}`);\r\n    }\r\n    \r\n    public get parallelGlTFProcessing(): number {\r\n        return geometryEngine.parallelGlTFProcessing;\r\n    }\r\n\r\n    public set parallelGlTFProcessing(value: number) {\r\n        inputValidator.validateAndError('parallelGlTFProcessing', value, 'number');\r\n        geometryEngine.parallelGlTFProcessing = value;\r\n        logger.debug(`parallelGlTFProcessing: ParallelGlTFProcessing was set to: ${value}`);\r\n    }\r\n\r\n    public get consoleBranding(): boolean {\r\n        return consoleBranding;\r\n    }\r\n\r\n    public set consoleBranding(value: boolean) {\r\n        inputValidator.validateAndError('consoleBranding', value, 'boolean');\r\n        consoleBranding = value;\r\n        logger.debug(`consoleBranding: ConsoleBranding was set to: ${value}`);\r\n    }\r\n\r\n    // #endregion Public Accessors (4)\r\n}\r\n\r\n/**\r\n * Adds an event listener.\r\n * \r\n * @param type The type of event.\r\n * @param cb The callback.\r\n * @returns \r\n */\r\nexport const addListener = (type: string | MainEventTypes, cb: (event: IEvent) => void): string => {\r\n    inputValidator.validateAndError(`addListener`, type, 'string');\r\n    inputValidator.validateAndError(`addListener`, cb, 'function');\r\n    logger.debug(`addListener: Event Listener was registered for ${type}.`);\r\n    return eventEngine.addListener(type, cb);\r\n};\r\n\r\n/**\r\n * Removes an event listener.\r\n * \r\n * @param id The id of the listener.\r\n * @returns \r\n */\r\nexport const removeListener = (id: string): boolean => {\r\n    inputValidator.validateAndError(`removeListener`, id, 'string');\r\n    logger.debug(`removeListener: Removing event listener with id ${id}.`);\r\n    return eventEngine.removeListener(id);\r\n};\r\n\r\n/**\r\n * The scene tree that is used to store the scene.\r\n * The scene tree contains a unique node and child nodes for each session, \r\n * and can also be used to add your own nodes.\r\n */\r\nexport const sceneTree: ITree = Tree.instance;\r\n\r\n/**\r\n * The viewports that are currently being used.\r\n */\r\nexport const viewports: { [key: string]: IViewportApi; } = {};\r\n\r\n/**\r\n * The sessions that are currently being used.\r\n */\r\nexport const sessions: { [key: string]: ISessionApi; } = {};\r\n\r\n/**\r\n * The version of the viewer.\r\n */\r\nexport const version: string = build_data.build_version.replace('3.', '');\r\n\r\n// Whenever a session or viewport is added or removed, this update is called.\r\ncreationControlCenter.update = (\r\n    sessionEngines: { [key: string]: SessionEngine; },\r\n    renderingEngines: { [key: string]: RenderingEngineThreeJs; }\r\n) => {\r\n    for (let s in sessionEngines)\r\n        if (!sessions[s])\r\n            sessions[s] = new SessionApi(sessionEngines[s]);\r\n\r\n    for (let s in sessions)\r\n        if (!sessionEngines[s])\r\n            delete sessions[s];\r\n\r\n    for (let v in renderingEngines)\r\n        if (!viewports[v])\r\n            viewports[v] = new ViewportApi(renderingEngines[v]);\r\n\r\n    for (let v in viewports) {\r\n        if (!renderingEngines[v])\r\n            delete viewports[v];\r\n    }\r\n}\r\n\r\nconst showConsoleMessage = () => {\r\n    createdConsoleMessage = true;\r\n    if(consoleBranding === true) {\r\n        console.log(`Powered by:\r\n   _____  __                         ____   _                   \r\n  / ___/ / /_   ____ _ ____   ___   / __ \\\\ (_)_   __ ___   _____\r\n  \\\\__ \\\\ / __ \\\\ / __ '// __ \\\\ / _ \\\\ / / / // /| | / // _ \\\\ / ___/\r\n ___/ // / / // /_/ // /_/ //  __// /_/ // / | |/ //  __// /    \r\n/____//_/ /_/ \\\\__,_// .___/ \\\\___//_____//_/  |___/ \\\\___//_/     \r\n                   /_/                                          \r\nShapeDiver Viewer 3, Version ${build_data.build_version.replace('3.', '')}\r\nVisit us at https://shapediver.com/ and find out more!\r\n`);\r\n    } else {\r\n        console.log(`ShapeDiver Viewer 3, Version ${build_data.build_version.replace('3.', '')}`);\r\n    }\r\n}\r\n\r\n/**\r\n * General Viewer options that are used everywhere.\r\n * - loggingLevel: The logging level that is used.\r\n * - showMessages: Option to show/hide messages in the browser console.\r\n */\r\nexport const generalOptions: IGeneralOptions = new GeneralOptions();\r\n\r\n/**\r\n * Create and initialize a session with a model hosted on a \r\n * {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend}, \r\n * using the provided ticket and modelViewUrl. \r\n * Returns a session api object allowing to control the session.\r\n * \r\n * A JWT can be specified for authorizing the API calls to the Geometry Backend. \r\n * The model's settings on the Geometry Backend might require a JWT to be provided.\r\n *\r\n * By default the outputs of the model for its default parameter values will be loaded.\r\n * \r\n * An optional identifier for the session can be provided. This identifier can be used to retrieve the  \r\n * api object from {@link sessions}. In case no identifier is provided, a unique one will be generated.\r\n * \r\n * @param properties.ticket The ticket for direct embedding of the model to create a session for. This identifies the model on the Geometry Backend.\r\n * @param properties.modelViewUrl The modelViewUrl of the {@link https://help.shapediver.com/doc/Geometry-Backend.1863942173.html|ShapeDiver Geometry Backend} hosting the model.\r\n * @param properties.jwtToken The JWT to use for authorizing the API calls to the Geometry Backend.\r\n * @param properties.id The unique identifier to use for the session.\r\n * @param properties.waitForOutputs Option to wait for the outputs to be loaded, or return immediately after creation of the session. (default: true)\r\n * @param properties.loadOutputs Option to load the outputs, or not load them until the first call of {@link ISessioncustomize}. (default: true)\r\n * @param properties.excludeViewports Option to exclude some viewports from the start. Can be accessed via {@link ISessionexcludeViewports}.\r\n * @param properties.initialParameterValues The initial set of parameter values to use. Map from parameter id to parameter value. The default value will be used for any parameter not specified.\r\n * @returns \r\n */\r\nexport const createSession = async (properties: {\r\n    ticket: string,\r\n    modelViewUrl: string,\r\n    jwtToken?: string,\r\n    id?: string,\r\n    waitForOutputs?: boolean,\r\n    loadOutputs?: boolean,\r\n    excludeViewports?: string[],\r\n    initialParameterValues?: { [key: string]: string }\r\n}): Promise<ISessionApi> => {\r\n    if(createdConsoleMessage === false) showConsoleMessage();\r\n\r\n    logger.info(`createSession: Creating and initializing session with properties ${JSON.stringify(properties)}.`);\r\n    // input validation\r\n    inputValidator.validateAndError(`createSession`, properties, 'object');\r\n    inputValidator.validateAndError(`createSession`, properties.ticket, 'string');\r\n    inputValidator.validateAndError(`createSession`, properties.modelViewUrl, 'string');\r\n    inputValidator.validateAndError(`createSession`, properties.jwtToken, 'string', false);\r\n    inputValidator.validateAndError(`createSession`, properties.id, 'string', false);\r\n    inputValidator.validateAndError(`createSession`, properties.waitForOutputs, 'boolean', false);\r\n    inputValidator.validateAndError(`createSession`, properties.loadOutputs, 'boolean', false);\r\n    inputValidator.validateAndError(`createSession`, properties.excludeViewports, 'stringArray', false);\r\n    inputValidator.validateAndError(`createSession`, properties.initialParameterValues, 'object', false);\r\n    if (properties.initialParameterValues)\r\n        for (let p in properties.initialParameterValues)\r\n            inputValidator.validateAndError(`createSession`, properties.initialParameterValues[p], 'string');\r\n\r\n    if (properties.waitForOutputs === undefined) properties.waitForOutputs = true;\r\n    if (properties.loadOutputs === undefined) properties.loadOutputs = true;\r\n\r\n    const sessionEngine = await creationControlCenter.createSessionEngine(properties);\r\n    sessions[sessionEngine.id] = new SessionApi(sessionEngine);\r\n    return sessions[sessionEngine.id];\r\n};\r\n\r\n/**\r\n * Create and initialize a viewport with the provided type and canvas, \r\n * and return a viewport api object allowing to control it.\r\n * \r\n * An optional identifier for the viewport can be provided. This identifier can be used to retrieve the  \r\n * viewport object from {@link viewports}. In case no identifier is provided, a unique one will be generated.\r\n * \r\n * By default a new viewport displays the complete scene tree. Viewports can be excluded from \r\n * displaying geometry for specific sessions by using the {@link excludeViewports} property of\r\n * {@link ISessionApi}.\r\n * \r\n * @param properties.visibility The visibility of the viewport.\r\n * @param properties.canvas The canvas that the viewport should use. A canvas element will be created if none is provided. \r\n * @param properties.id The unique identifier to use for the viewport.\r\n * @param properties.branding Optional branding options.\r\n * @param properties.sessionSettingsId Optional identifier of the session to be used for loading / persisting settings of the viewport when the {@link SESSION_SETTINGS_MODE} is set to MANUAL. \r\n * @param properties.sessionSettingsMode Allows to control which session to use for loading / persisting settings of the viewport. (default: {@link SESSION_SETTINGS_MODE.FIRST}).\r\n * @returns \r\n */\r\nexport const createViewport = async (properties?: {\r\n    canvas?: HTMLCanvasElement,\r\n    id?: string,\r\n    branding?: {\r\n        /** \r\n         * Optional URL to a logo to be displayed while the viewport is hidden. \r\n         * A default logo will be used if none is provided. \r\n         * Supply null to display no logo at all.\r\n         */\r\n        logo?: string | null,\r\n        /** \r\n         * Optional background color to show while the viewport is hidden, can include alpha channel. \r\n         * A default color will be used if none is provided.\r\n         */\r\n        backgroundColor?: string,\r\n        /** \r\n         * Optional URL to a logo to be displayed while the viewport is in busy mode. \r\n         * A default logo will be used if none is provided. \r\n         * The positioning of the spinner can be influenced via {@link SPINNER_POSITIONING}.\r\n         */\r\n        busyModeSpinner?: string,\r\n        /**\r\n         * The mode used to indicate that the viewport is busy. (default: BUSY_MODE_DISPLAY.SPINNER)\r\n         * Whenever the busy mode gets toggled, the events {@link EVENTTYPE_VIEWPORT.BUSY_MODE_ON} and {@link EVENTTYPE_VIEWPORT.BUSY_MODE_OFF} will be emitted.\r\n         */\r\n        busyModeDisplay?: BUSY_MODE_DISPLAY,\r\n        /**\r\n         * Where the spinner that is specified by {@link BUSY_MODE_DISPLAY} is desplayed on the screen. (default: BUSY_MODE_DISPLAY.BOTTOM_RIGHT)\r\n         */\r\n        spinnerPositioning?: SPINNER_POSITIONING\r\n\r\n    },\r\n    sessionSettingsId?: string,\r\n    sessionSettingsMode?: SESSION_SETTINGS_MODE,\r\n    visibility?: VISIBILITY_MODE,\r\n}): Promise<IViewportApi> => {\r\n    if(createdConsoleMessage === false) showConsoleMessage();\r\n\r\n    inputValidator.validateAndError('createViewport', properties, 'object', false);\r\n\r\n    const prop = Object.assign({}, properties);\r\n    inputValidator.validateAndError(`createViewport`, prop.canvas, 'HTMLCanvasElement', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.id, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.sessionSettingsId, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, prop.sessionSettingsMode, 'enum', false, Object.values(SESSION_SETTINGS_MODE));\r\n    inputValidator.validateAndError(`createViewport`, prop.visibility, 'enum', false, Object.values(VISIBILITY_MODE));\r\n\r\n    inputValidator.validateAndError('createViewport', prop.branding, 'object', false);\r\n    const branding = Object.assign({}, prop.branding);\r\n    if (branding.logo !== null) inputValidator.validateAndError(`createViewport`, branding.logo, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.backgroundColor, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.busyModeSpinner, 'string', false);\r\n    inputValidator.validateAndError(`createViewport`, branding.busyModeDisplay, 'enum', false, Object.values(BUSY_MODE_DISPLAY));\r\n    inputValidator.validateAndError(`createViewport`, branding.spinnerPositioning, 'enum', false, Object.values(SPINNER_POSITIONING));\r\n\r\n    prop.sessionSettingsMode = prop.sessionSettingsMode !== undefined ? prop.sessionSettingsMode : SESSION_SETTINGS_MODE.FIRST;\r\n\r\n    if (prop.sessionSettingsMode === SESSION_SETTINGS_MODE.MANUAL && !prop.sessionSettingsId)\r\n        throw new ShapeDiverViewerValidationError(`createViewport: Input could not be validated. sessionSettingsId has to point to a valid and created session when using SESSION_SETTINGS_MODE.MANUAL`, prop.sessionSettingsId, 'string');\r\n\r\n    const renderingEngine = await creationControlCenter.createRenderingEngineThreeJs(prop);\r\n\r\n    viewports[renderingEngine.id] = new ViewportApi(renderingEngine);\r\n    return viewports[renderingEngine.id];\r\n};"]}},"error":null,"hash":"20be85440402db027df758a5acde9a2b","cacheData":{"env":{}}}