{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/loaders/MaterialLoader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js.map","includedInParent":true,"mtime":1706542087211},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\loaders\\MaterialLoader.ts","includedInParent":true,"mtime":1706542087368},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706542086828},{"name":"@shapediver/viewer.shared.services","loc":{"line":13,"column":41,"index":844},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":14,"column":28,"index":912},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":15,"column":38,"index":965},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.data-engine.material-engine","loc":{"line":16,"column":53,"index":1055},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.material-engine\\dist\\index.js"},{"name":"../GLTFLoader","loc":{"line":17,"column":29,"index":1136},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\MaterialLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\GLTFLoader.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MaterialLoader = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_data_engine_material_engine_1 = require(\"@shapediver/viewer.data-engine.material-engine\");\r\nconst GLTFLoader_1 = require(\"../GLTFLoader\");\r\nclass MaterialLoader {\r\n    // #endregion Properties (4)\r\n    // #region Constructors (1)\r\n    constructor(_content, _textureLoader) {\r\n        this._content = _content;\r\n        this._textureLoader = _textureLoader;\r\n        // #region Properties (4)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._materialEngine = viewer_data_engine_material_engine_1.MaterialEngine.instance;\r\n        this._loaded = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getMaterial(materialId) {\r\n        if (!this._content.materials)\r\n            throw new Error('MaterialLoader.getMaterial: Materials not available.');\r\n        if (!this._content.materials[materialId])\r\n            throw new Error('MaterialLoader.getMaterial: Material not available.');\r\n        if (!this._loaded[materialId])\r\n            throw new Error('MaterialLoader.getMaterial: Material not loaded.');\r\n        return this._loaded[materialId];\r\n    }\r\n    load() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._loaded = {};\r\n            if (!this._content.materials)\r\n                return;\r\n            let promises = [];\r\n            for (let i = 0; i < this._content.materials.length; i++) {\r\n                const materialId = i;\r\n                const material = this._content.materials[materialId];\r\n                const materialExtensions = material.extensions || {};\r\n                const materialDataProperties = {};\r\n                if (material.name !== undefined)\r\n                    materialDataProperties.name = material.name;\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET]) {\r\n                    const materialPreset = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET];\r\n                    promises.push(new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                        try {\r\n                            const materialData = yield this._materialEngine.loadPresetMaterial(materialPreset.materialpreset);\r\n                            materialData.name = material.name;\r\n                            materialData.color = materialPreset.color;\r\n                            this._loaded[materialId] = materialData;\r\n                            resolve();\r\n                        }\r\n                        catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    })));\r\n                    continue;\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {\r\n                    const pbrSpecularGlossiness = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS];\r\n                    const specularGlossinessMaterialDataProperties = materialDataProperties;\r\n                    specularGlossinessMaterialDataProperties.color = '#ffffff';\r\n                    specularGlossinessMaterialDataProperties.opacity = 1.0;\r\n                    if (pbrSpecularGlossiness.diffuseFactor !== undefined) {\r\n                        specularGlossinessMaterialDataProperties.color = [pbrSpecularGlossiness.diffuseFactor[0] * 255, pbrSpecularGlossiness.diffuseFactor[1] * 255, pbrSpecularGlossiness.diffuseFactor[2] * 255];\r\n                        specularGlossinessMaterialDataProperties.opacity = pbrSpecularGlossiness.diffuseFactor[3];\r\n                    }\r\n                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\r\n                        const diffuseTextureOptions = pbrSpecularGlossiness.diffuseTexture.extensions && pbrSpecularGlossiness.diffuseTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? pbrSpecularGlossiness.diffuseTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        specularGlossinessMaterialDataProperties.map = this.loadMap(pbrSpecularGlossiness.diffuseTexture.index, diffuseTextureOptions);\r\n                    }\r\n                    specularGlossinessMaterialDataProperties.emissiveness = '#000000';\r\n                    specularGlossinessMaterialDataProperties.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\r\n                    specularGlossinessMaterialDataProperties.specular = '#ffffff';\r\n                    if (pbrSpecularGlossiness.specularFactor !== undefined) {\r\n                        specularGlossinessMaterialDataProperties.specular = [pbrSpecularGlossiness.specularFactor[0] * 255, pbrSpecularGlossiness.specularFactor[1] * 255, pbrSpecularGlossiness.specularFactor[2] * 255];\r\n                    }\r\n                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\r\n                        const specularGlossinessTextureOptions = pbrSpecularGlossiness.specularGlossinessTexture.extensions && pbrSpecularGlossiness.specularGlossinessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? pbrSpecularGlossiness.specularGlossinessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        specularGlossinessMaterialDataProperties.specularGlossinessMap = this.loadMap(pbrSpecularGlossiness.specularGlossinessTexture.index, specularGlossinessTextureOptions);\r\n                    }\r\n                }\r\n                else if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {\r\n                    const unlitMaterialDataProperties = materialDataProperties;\r\n                    unlitMaterialDataProperties.color = '#ffffff';\r\n                    unlitMaterialDataProperties.opacity = 1.0;\r\n                    if (material.pbrMetallicRoughness !== undefined) {\r\n                        if (material.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n                            unlitMaterialDataProperties.color = [material.pbrMetallicRoughness.baseColorFactor[0] * 255, material.pbrMetallicRoughness.baseColorFactor[1] * 255, material.pbrMetallicRoughness.baseColorFactor[2] * 255];\r\n                            unlitMaterialDataProperties.opacity = material.pbrMetallicRoughness.baseColorFactor[3];\r\n                        }\r\n                        if (material.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n                            const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture.extensions && material.pbrMetallicRoughness.baseColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.baseColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                            unlitMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture.index, baseColorTextureOptions);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const standardMaterialDataProperties = materialDataProperties;\r\n                    if (material.pbrMetallicRoughness !== undefined) {\r\n                        standardMaterialDataProperties.color = '#ffffff';\r\n                        if (material.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n                            standardMaterialDataProperties.color = [material.pbrMetallicRoughness.baseColorFactor[0] * 255, material.pbrMetallicRoughness.baseColorFactor[1] * 255, material.pbrMetallicRoughness.baseColorFactor[2] * 255];\r\n                            standardMaterialDataProperties.opacity = material.pbrMetallicRoughness.baseColorFactor[3];\r\n                        }\r\n                        if (material.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n                            const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture.extensions && material.pbrMetallicRoughness.baseColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.baseColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                            standardMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture.index, baseColorTextureOptions);\r\n                        }\r\n                        if (material.pbrMetallicRoughness.metallicFactor !== undefined) {\r\n                            standardMaterialDataProperties.metalness = material.pbrMetallicRoughness.metallicFactor;\r\n                        }\r\n                        if (material.pbrMetallicRoughness.roughnessFactor !== undefined) {\r\n                            standardMaterialDataProperties.roughness = material.pbrMetallicRoughness.roughnessFactor;\r\n                        }\r\n                        if (material.pbrMetallicRoughness.metallicRoughnessTexture !== undefined) {\r\n                            const metallicRoughnessTextureOptions = material.pbrMetallicRoughness.metallicRoughnessTexture.extensions && material.pbrMetallicRoughness.metallicRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.metallicRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                            standardMaterialDataProperties.metalnessRoughnessMap = this.loadMap(material.pbrMetallicRoughness.metallicRoughnessTexture.index, metallicRoughnessTextureOptions);\r\n                        }\r\n                    }\r\n                }\r\n                /**\r\n                 * Loading of the general properties\r\n                 */\r\n                if (material.normalTexture !== undefined) {\r\n                    const normalTextureOptions = material.normalTexture.extensions && material.normalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.normalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    materialDataProperties.normalMap = this.loadMap(material.normalTexture.index, normalTextureOptions);\r\n                    materialDataProperties.normalScale = 1;\r\n                    if (material.normalTexture.scale !== undefined) {\r\n                        materialDataProperties.normalScale = material.normalTexture.scale;\r\n                    }\r\n                }\r\n                if (material.occlusionTexture !== undefined) {\r\n                    const occlusionTextureOptions = material.occlusionTexture.extensions && material.occlusionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.occlusionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    materialDataProperties.aoMap = this.loadMap(material.occlusionTexture.index, occlusionTextureOptions);\r\n                    if (material.occlusionTexture.strength !== undefined) {\r\n                        materialDataProperties.aoMapIntensity = material.occlusionTexture.strength;\r\n                    }\r\n                }\r\n                if (material.emissiveTexture !== undefined) {\r\n                    const emissiveTextureOptions = material.emissiveTexture.extensions && material.emissiveTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.emissiveTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    materialDataProperties.emissiveMap = this.loadMap(material.emissiveTexture.index, emissiveTextureOptions);\r\n                }\r\n                if (material.emissiveFactor !== undefined) {\r\n                    materialDataProperties.emissiveness = [material.emissiveFactor[0] * 255, material.emissiveFactor[1] * 255, material.emissiveFactor[2] * 255];\r\n                }\r\n                if (material.alphaMode !== undefined) {\r\n                    materialDataProperties.alphaMode = material.alphaMode.toLowerCase() === viewer_shared_types_1.MATERIAL_ALPHA.MASK ? viewer_shared_types_1.MATERIAL_ALPHA.MASK : material.alphaMode.toLowerCase() === viewer_shared_types_1.MATERIAL_ALPHA.BLEND ? viewer_shared_types_1.MATERIAL_ALPHA.BLEND : viewer_shared_types_1.MATERIAL_ALPHA.OPAQUE;\r\n                    if (materialDataProperties.alphaMode === viewer_shared_types_1.MATERIAL_ALPHA.MASK) {\r\n                        materialDataProperties.alphaCutoff = material.alphaCutoff !== undefined ? material.alphaCutoff : 0.5;\r\n                    }\r\n                }\r\n                if (material.alphaCutoff !== undefined) {\r\n                    materialDataProperties.alphaCutoff = material.alphaCutoff;\r\n                }\r\n                if (material.doubleSided !== undefined) {\r\n                    materialDataProperties.side = material.doubleSided ? viewer_shared_types_1.MATERIAL_SIDE.DOUBLE : viewer_shared_types_1.MATERIAL_SIDE.FRONT;\r\n                }\r\n                /**\r\n                 * Early exit for specular glossiness and unlit materials\r\n                 */\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {\r\n                    const specularGlossinessMaterialDataProperties = materialDataProperties;\r\n                    const materialData = new viewer_shared_types_1.MaterialSpecularGlossinessData(specularGlossinessMaterialDataProperties);\r\n                    this._loaded[materialId] = materialData;\r\n                    continue;\r\n                }\r\n                else if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {\r\n                    const unlitMaterialDataProperties = materialDataProperties;\r\n                    const materialData = new viewer_shared_types_1.MaterialUnlitData(unlitMaterialDataProperties);\r\n                    this._loaded[materialId] = materialData;\r\n                    continue;\r\n                }\r\n                const standardMaterialDataProperties = materialDataProperties;\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\r\n                    const clearcoatExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\r\n                    if (clearcoatExtension.clearcoatFactor !== undefined) {\r\n                        standardMaterialDataProperties.clearcoat = clearcoatExtension.clearcoatFactor;\r\n                    }\r\n                    if (clearcoatExtension.clearcoatTexture !== undefined) {\r\n                        const clearcoatTextureOptions = clearcoatExtension.clearcoatTexture.extensions && clearcoatExtension.clearcoatTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.clearcoatMap = this.loadMap(clearcoatExtension.clearcoatTexture.index, clearcoatTextureOptions);\r\n                    }\r\n                    if (clearcoatExtension.clearcoatRoughnessFactor !== undefined) {\r\n                        standardMaterialDataProperties.clearcoatRoughness = clearcoatExtension.clearcoatRoughnessFactor;\r\n                    }\r\n                    if (clearcoatExtension.clearcoatRoughnessTexture !== undefined) {\r\n                        const clearcoatRoughnessTextureOptions = clearcoatExtension.clearcoatRoughnessTexture.extensions && clearcoatExtension.clearcoatRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.clearcoatRoughnessMap = this.loadMap(clearcoatExtension.clearcoatRoughnessTexture.index, clearcoatRoughnessTextureOptions);\r\n                    }\r\n                    if (clearcoatExtension.clearcoatNormalTexture !== undefined) {\r\n                        const clearcoatNormalTextureOptions = clearcoatExtension.clearcoatNormalTexture.extensions && clearcoatExtension.clearcoatNormalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatNormalTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.clearcoatNormalMap = this.loadMap(clearcoatExtension.clearcoatNormalTexture.index, clearcoatNormalTextureOptions);\r\n                    }\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_IOR]) {\r\n                    const iorExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_IOR];\r\n                    if (iorExtension.ior !== undefined) {\r\n                        standardMaterialDataProperties.ior = iorExtension.ior;\r\n                    }\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION]) {\r\n                    const transmissionExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION];\r\n                    if (transmissionExtension.transmissionFactor !== undefined) {\r\n                        standardMaterialDataProperties.transmission = transmissionExtension.transmissionFactor;\r\n                    }\r\n                    if (transmissionExtension.transmissionTexture !== undefined) {\r\n                        const transmissionTextureOptions = transmissionExtension.transmissionTexture.extensions && transmissionExtension.transmissionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? transmissionExtension.transmissionTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.transmissionMap = this.loadMap(transmissionExtension.transmissionTexture.index, transmissionTextureOptions);\r\n                    }\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME]) {\r\n                    const volumeExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME];\r\n                    if (volumeExtension.thicknessFactor !== undefined) {\r\n                        standardMaterialDataProperties.thickness = volumeExtension.thicknessFactor;\r\n                    }\r\n                    if (volumeExtension.thicknessTexture !== undefined) {\r\n                        const thicknessTextureOptions = volumeExtension.thicknessTexture.extensions && volumeExtension.thicknessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? volumeExtension.thicknessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.thicknessMap = this.loadMap(volumeExtension.thicknessTexture.index, thicknessTextureOptions);\r\n                    }\r\n                    if (volumeExtension.attenuationDistance !== undefined) {\r\n                        standardMaterialDataProperties.attenuationDistance = volumeExtension.attenuationDistance;\r\n                    }\r\n                    if (volumeExtension.attenuationColor !== undefined) {\r\n                        standardMaterialDataProperties.attenuationColor = [volumeExtension.attenuationColor[0] * 255, volumeExtension.attenuationColor[1] * 255, volumeExtension.attenuationColor[2] * 255];\r\n                    }\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN]) {\r\n                    const sheenExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN];\r\n                    standardMaterialDataProperties.sheen = 1.0;\r\n                    if (sheenExtension.sheenColorFactor !== undefined) {\r\n                        standardMaterialDataProperties.sheenColor = [sheenExtension.sheenColorFactor[0] * 255, sheenExtension.sheenColorFactor[1] * 255, sheenExtension.sheenColorFactor[2] * 255];\r\n                    }\r\n                    if (sheenExtension.sheenRoughnessFactor !== undefined) {\r\n                        standardMaterialDataProperties.sheenRoughness = sheenExtension.sheenRoughnessFactor;\r\n                    }\r\n                    if (sheenExtension.sheenColorTexture !== undefined) {\r\n                        const sheenColorTextureOptions = sheenExtension.sheenColorTexture.extensions && sheenExtension.sheenColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? sheenExtension.sheenColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.sheenColorMap = this.loadMap(sheenExtension.sheenColorTexture.index, sheenColorTextureOptions);\r\n                    }\r\n                    if (sheenExtension.sheenRoughnessTexture !== undefined) {\r\n                        const sheenRoughnessTextureOptions = sheenExtension.sheenRoughnessTexture.extensions && sheenExtension.sheenRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? sheenExtension.sheenRoughnessTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.sheenRoughnessMap = this.loadMap(sheenExtension.sheenRoughnessTexture.index, sheenRoughnessTextureOptions);\r\n                    }\r\n                }\r\n                if (materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR]) {\r\n                    const specularExtension = materialExtensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR];\r\n                    if (specularExtension.specularFactor !== undefined) {\r\n                        standardMaterialDataProperties.specularIntensity = specularExtension.specularFactor;\r\n                    }\r\n                    if (specularExtension.specularColorFactor !== undefined) {\r\n                        standardMaterialDataProperties.specularColor = [specularExtension.specularColorFactor[0] * 255, specularExtension.specularColorFactor[1] * 255, specularExtension.specularColorFactor[2] * 255];\r\n                    }\r\n                    if (specularExtension.specularColorTexture !== undefined) {\r\n                        const specularColorTextureOptions = specularExtension.specularColorTexture.extensions && specularExtension.specularColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? specularExtension.specularColorTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.specularColorMap = this.loadMap(specularExtension.specularColorTexture.index, specularColorTextureOptions);\r\n                    }\r\n                    if (specularExtension.specularTexture !== undefined) {\r\n                        const specularTextureOptions = specularExtension.specularTexture.extensions && specularExtension.specularTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? specularExtension.specularTexture.extensions[GLTFLoader_1.GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.specularIntensityMap = this.loadMap(specularExtension.specularTexture.index, specularTextureOptions);\r\n                    }\r\n                }\r\n                const materialData = new viewer_shared_types_1.MaterialStandardData(standardMaterialDataProperties);\r\n                this._loaded[materialId] = materialData;\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    // #endregion Public Methods (2)\r\n    // #region Private Methods (1)\r\n    loadMap(textureId, properties) {\r\n        if (!this._content.textures)\r\n            throw new Error('Textures not available.');\r\n        const texture = this._content.textures[textureId];\r\n        if (!this._content.images)\r\n            throw new Error('Images not available.');\r\n        const sampler = this._content.samplers && texture.sampler && this._content.samplers[texture.sampler] ? this._content.samplers[texture.sampler] : {};\r\n        const htmlImage = this._textureLoader.getTexture(textureId);\r\n        return new viewer_shared_types_1.MapData(htmlImage, sampler.wrapS, sampler.wrapT, sampler.minFilter, sampler.magFilter, undefined, undefined, properties && properties.offset ? gl_matrix_1.vec2.fromValues(properties.offset[0], properties.offset[1]) : undefined, properties && properties.scale ? gl_matrix_1.vec2.fromValues(properties.scale[0], properties.scale[1]) : undefined, properties && properties.rotation !== undefined ? properties.rotation : 0, false);\r\n        ;\r\n    }\r\n}\r\nexports.MaterialLoader = MaterialLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"MaterialLoader.js","sourceRoot":"","sources":["../../../src/gltfv2/loaders/MaterialLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Converter, HttpClient } from '@shapediver/viewer.shared.services'\r\nimport {\r\n  IGLTF_v2,\r\n  IGLTF_v2_Material,\r\n  IGLTF_v2_Material_KHR_materials_pbrSpecularGlossiness,\r\n  ISHAPEDIVER_materials_preset,\r\n} from '@shapediver/viewer.data-engine.shared-types'\r\nimport { vec2 } from 'gl-matrix'\r\nimport {\r\n  MATERIAL_ALPHA,\r\n  MATERIAL_SIDE,\r\n  MaterialSpecularGlossinessData,\r\n  MaterialStandardData,\r\n  MaterialUnlitData,\r\n  IMaterialAbstractData,\r\n  IMaterialAbstractDataProperties,\r\n  IMaterialSpecularGlossinessDataProperties,\r\n  IMaterialStandardDataProperties,\r\n  IMaterialUnlitDataProperties,\r\n  MapData,\r\n  IMapData,\r\n} from '@shapediver/viewer.shared.types'\r\nimport { MaterialEngine } from '@shapediver/viewer.data-engine.material-engine'\r\n\r\nimport { GLTF_EXTENSIONS } from '../GLTFLoader'\r\nimport { TextureLoader } from './TextureLoader'\r\n\r\nexport class MaterialLoader {\r\n    // #region Properties (4)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _materialEngine: MaterialEngine = MaterialEngine.instance;\r\n\r\n    private _loaded: { [key: string]: IMaterialAbstractData } = {};\r\n\r\n    // #endregion Properties (4)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _content: IGLTF_v2, private readonly _textureLoader: TextureLoader) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public getMaterial(materialId: number): IMaterialAbstractData {\r\n        if (!this._content.materials) throw new Error('MaterialLoader.getMaterial: Materials not available.')\r\n        if (!this._content.materials[materialId]) throw new Error('MaterialLoader.getMaterial: Material not available.')\r\n        if (!this._loaded[materialId]) throw new Error('MaterialLoader.getMaterial: Material not loaded.')\r\n        return this._loaded[materialId];\r\n    }\r\n\r\n    public async load(): Promise<void> {\r\n        this._loaded = {};\r\n        if (!this._content.materials) return;\r\n\r\n        let promises: Promise<void>[] = [];\r\n        for (let i = 0; i < this._content.materials.length; i++) {\r\n            const materialId = i;\r\n            const material: IGLTF_v2_Material = this._content.materials[materialId];\r\n            const materialExtensions = material.extensions || {};\r\n\r\n            const materialDataProperties: IMaterialAbstractDataProperties = {};\r\n            if (material.name !== undefined) materialDataProperties.name = material.name;\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET]) {\r\n                const materialPreset: ISHAPEDIVER_materials_preset = materialExtensions[GLTF_EXTENSIONS.SHAPEDIVER_MATERIALS_PRESET];\r\n                promises.push(\r\n                    new Promise<void>(async (resolve, reject) => {\r\n                        try {\r\n                            const materialData = await this._materialEngine.loadPresetMaterial(materialPreset.materialpreset);\r\n                            materialData.name = material.name;\r\n                            materialData.color = materialPreset.color;\r\n                            this._loaded[materialId] = materialData;\r\n                            resolve();\r\n                        } catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    })\r\n                )\r\n                continue;\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {\r\n                const pbrSpecularGlossiness: IGLTF_v2_Material_KHR_materials_pbrSpecularGlossiness = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS];\r\n                const specularGlossinessMaterialDataProperties: IMaterialSpecularGlossinessDataProperties = materialDataProperties;\r\n\r\n                specularGlossinessMaterialDataProperties.color = '#ffffff';\r\n                specularGlossinessMaterialDataProperties.opacity = 1.0;\r\n\r\n                if (pbrSpecularGlossiness.diffuseFactor !== undefined) {\r\n                    specularGlossinessMaterialDataProperties.color = [pbrSpecularGlossiness.diffuseFactor[0] * 255, pbrSpecularGlossiness.diffuseFactor[1] * 255, pbrSpecularGlossiness.diffuseFactor[2] * 255];\r\n                    specularGlossinessMaterialDataProperties.opacity = pbrSpecularGlossiness.diffuseFactor[3];\r\n                }\r\n\r\n                if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\r\n                    const diffuseTextureOptions = pbrSpecularGlossiness.diffuseTexture.extensions && pbrSpecularGlossiness.diffuseTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? pbrSpecularGlossiness.diffuseTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    specularGlossinessMaterialDataProperties.map = this.loadMap(pbrSpecularGlossiness.diffuseTexture.index, diffuseTextureOptions);\r\n                }\r\n                specularGlossinessMaterialDataProperties.emissiveness = '#000000';\r\n                specularGlossinessMaterialDataProperties.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\r\n                specularGlossinessMaterialDataProperties.specular = '#ffffff';\r\n\r\n                if (pbrSpecularGlossiness.specularFactor !== undefined) {\r\n                    specularGlossinessMaterialDataProperties.specular = [pbrSpecularGlossiness.specularFactor[0] * 255, pbrSpecularGlossiness.specularFactor[1] * 255, pbrSpecularGlossiness.specularFactor[2] * 255];\r\n                }\r\n\r\n                if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\r\n                    const specularGlossinessTextureOptions = pbrSpecularGlossiness.specularGlossinessTexture.extensions && pbrSpecularGlossiness.specularGlossinessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? pbrSpecularGlossiness.specularGlossinessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    specularGlossinessMaterialDataProperties.specularGlossinessMap = this.loadMap(pbrSpecularGlossiness.specularGlossinessTexture.index, specularGlossinessTextureOptions);\r\n                }\r\n            } else if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {\r\n                const unlitMaterialDataProperties: IMaterialUnlitDataProperties = materialDataProperties;\r\n                unlitMaterialDataProperties.color = '#ffffff';\r\n                unlitMaterialDataProperties.opacity = 1.0;\r\n\r\n                if (material.pbrMetallicRoughness !== undefined) {\r\n                    if (material.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n                        unlitMaterialDataProperties.color = [material.pbrMetallicRoughness.baseColorFactor[0] * 255, material.pbrMetallicRoughness.baseColorFactor[1] * 255, material.pbrMetallicRoughness.baseColorFactor[2] * 255];\r\n                        unlitMaterialDataProperties.opacity = material.pbrMetallicRoughness.baseColorFactor[3];\r\n                    }\r\n                    if (material.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n                        const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture.extensions && material.pbrMetallicRoughness.baseColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.baseColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        unlitMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture.index, baseColorTextureOptions);\r\n                    }\r\n                }\r\n            } else {\r\n                const standardMaterialDataProperties: IMaterialStandardDataProperties = materialDataProperties;\r\n                if (material.pbrMetallicRoughness !== undefined) {\r\n                    standardMaterialDataProperties.color = '#ffffff';\r\n                    if (material.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n                        standardMaterialDataProperties.color = [material.pbrMetallicRoughness.baseColorFactor[0] * 255, material.pbrMetallicRoughness.baseColorFactor[1] * 255, material.pbrMetallicRoughness.baseColorFactor[2] * 255];\r\n                        standardMaterialDataProperties.opacity = material.pbrMetallicRoughness.baseColorFactor[3];\r\n                    }\r\n                    if (material.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n                        const baseColorTextureOptions = material.pbrMetallicRoughness.baseColorTexture.extensions && material.pbrMetallicRoughness.baseColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.baseColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.map = this.loadMap(material.pbrMetallicRoughness.baseColorTexture.index, baseColorTextureOptions);\r\n                    }\r\n                    if (material.pbrMetallicRoughness.metallicFactor !== undefined) {\r\n                        standardMaterialDataProperties.metalness = material.pbrMetallicRoughness.metallicFactor;\r\n                    }\r\n                    if (material.pbrMetallicRoughness.roughnessFactor !== undefined) {\r\n                        standardMaterialDataProperties.roughness = material.pbrMetallicRoughness.roughnessFactor;\r\n                    }\r\n                    if (material.pbrMetallicRoughness.metallicRoughnessTexture !== undefined) {\r\n                        const metallicRoughnessTextureOptions = material.pbrMetallicRoughness.metallicRoughnessTexture.extensions && material.pbrMetallicRoughness.metallicRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.pbrMetallicRoughness.metallicRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                        standardMaterialDataProperties.metalnessRoughnessMap = this.loadMap(material.pbrMetallicRoughness.metallicRoughnessTexture.index, metallicRoughnessTextureOptions);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Loading of the general properties\r\n             */\r\n\r\n            if (material.normalTexture !== undefined) {\r\n                const normalTextureOptions = material.normalTexture.extensions && material.normalTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.normalTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                materialDataProperties.normalMap = this.loadMap(material.normalTexture.index, normalTextureOptions);\r\n                materialDataProperties.normalScale = 1;\r\n                if (material.normalTexture.scale !== undefined) {\r\n                    materialDataProperties.normalScale = material.normalTexture.scale;\r\n                }\r\n            }\r\n            if (material.occlusionTexture !== undefined) {\r\n                const occlusionTextureOptions = material.occlusionTexture.extensions && material.occlusionTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.occlusionTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                materialDataProperties.aoMap = this.loadMap(material.occlusionTexture.index, occlusionTextureOptions);\r\n                if (material.occlusionTexture.strength !== undefined) {\r\n                    materialDataProperties.aoMapIntensity = material.occlusionTexture.strength;\r\n                }\r\n            }\r\n            if (material.emissiveTexture !== undefined) {\r\n                const emissiveTextureOptions = material.emissiveTexture.extensions && material.emissiveTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? material.emissiveTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                materialDataProperties.emissiveMap = this.loadMap(material.emissiveTexture.index, emissiveTextureOptions);\r\n            }\r\n\r\n            if (material.emissiveFactor !== undefined) {\r\n                materialDataProperties.emissiveness = [material.emissiveFactor[0] * 255, material.emissiveFactor[1] * 255, material.emissiveFactor[2] * 255];\r\n            }\r\n            if (material.alphaMode !== undefined) {\r\n                materialDataProperties.alphaMode = material.alphaMode.toLowerCase() === MATERIAL_ALPHA.MASK ? MATERIAL_ALPHA.MASK : material.alphaMode.toLowerCase() === MATERIAL_ALPHA.BLEND ? MATERIAL_ALPHA.BLEND : MATERIAL_ALPHA.OPAQUE;\r\n                if (materialDataProperties.alphaMode === MATERIAL_ALPHA.MASK) {\r\n                    materialDataProperties.alphaCutoff = material.alphaCutoff !== undefined ? material.alphaCutoff : 0.5;\r\n                }\r\n            }\r\n            if (material.alphaCutoff !== undefined) {\r\n                materialDataProperties.alphaCutoff = material.alphaCutoff;\r\n            }\r\n            if (material.doubleSided !== undefined) {\r\n                materialDataProperties.side = material.doubleSided ? MATERIAL_SIDE.DOUBLE : MATERIAL_SIDE.FRONT;\r\n            }\r\n\r\n            /**\r\n             * Early exit for specular glossiness and unlit materials\r\n             */\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_PBRSPECULARGLOSSINESS]) {\r\n                const specularGlossinessMaterialDataProperties: IMaterialSpecularGlossinessDataProperties = materialDataProperties;\r\n                const materialData = new MaterialSpecularGlossinessData(specularGlossinessMaterialDataProperties);\r\n                this._loaded[materialId] = materialData;\r\n                continue;\r\n            } else if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_UNLIT]) {\r\n                const unlitMaterialDataProperties: IMaterialUnlitDataProperties = materialDataProperties;\r\n                const materialData = new MaterialUnlitData(unlitMaterialDataProperties);\r\n                this._loaded[materialId] = materialData;\r\n                continue;\r\n            }\r\n\r\n            const standardMaterialDataProperties: IMaterialStandardDataProperties = materialDataProperties;\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\r\n                const clearcoatExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\r\n                if (clearcoatExtension.clearcoatFactor !== undefined) {\r\n                    standardMaterialDataProperties.clearcoat = clearcoatExtension.clearcoatFactor;\r\n                }\r\n\r\n                if (clearcoatExtension.clearcoatTexture !== undefined) {\r\n                    const clearcoatTextureOptions = clearcoatExtension.clearcoatTexture.extensions && clearcoatExtension.clearcoatTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.clearcoatMap = this.loadMap(clearcoatExtension.clearcoatTexture.index, clearcoatTextureOptions);\r\n                }\r\n\r\n                if (clearcoatExtension.clearcoatRoughnessFactor !== undefined) {\r\n                    standardMaterialDataProperties.clearcoatRoughness = clearcoatExtension.clearcoatRoughnessFactor;\r\n                }\r\n\r\n                if (clearcoatExtension.clearcoatRoughnessTexture !== undefined) {\r\n                    const clearcoatRoughnessTextureOptions = clearcoatExtension.clearcoatRoughnessTexture.extensions && clearcoatExtension.clearcoatRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.clearcoatRoughnessMap = this.loadMap(clearcoatExtension.clearcoatRoughnessTexture.index, clearcoatRoughnessTextureOptions);\r\n                }\r\n\r\n                if (clearcoatExtension.clearcoatNormalTexture !== undefined) {\r\n                    const clearcoatNormalTextureOptions = clearcoatExtension.clearcoatNormalTexture.extensions && clearcoatExtension.clearcoatNormalTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? clearcoatExtension.clearcoatNormalTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.clearcoatNormalMap = this.loadMap(clearcoatExtension.clearcoatNormalTexture.index, clearcoatNormalTextureOptions);\r\n                }\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_IOR]) {\r\n                const iorExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_IOR];\r\n                if (iorExtension.ior !== undefined) {\r\n                    standardMaterialDataProperties.ior = iorExtension.ior;\r\n                }\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION]) {\r\n                const transmissionExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_TRANSMISSION];\r\n                if (transmissionExtension.transmissionFactor !== undefined) {\r\n                    standardMaterialDataProperties.transmission = transmissionExtension.transmissionFactor;\r\n                }\r\n\r\n                if (transmissionExtension.transmissionTexture !== undefined) {\r\n                    const transmissionTextureOptions = transmissionExtension.transmissionTexture.extensions && transmissionExtension.transmissionTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? transmissionExtension.transmissionTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.transmissionMap = this.loadMap(transmissionExtension.transmissionTexture.index, transmissionTextureOptions);\r\n                }\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME]) {\r\n                const volumeExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_VOLUME];\r\n                if (volumeExtension.thicknessFactor !== undefined) {\r\n                    standardMaterialDataProperties.thickness = volumeExtension.thicknessFactor;\r\n                }\r\n\r\n                if (volumeExtension.thicknessTexture !== undefined) {\r\n                    const thicknessTextureOptions = volumeExtension.thicknessTexture.extensions && volumeExtension.thicknessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? volumeExtension.thicknessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.thicknessMap = this.loadMap(volumeExtension.thicknessTexture.index, thicknessTextureOptions);\r\n                }\r\n\r\n                if (volumeExtension.attenuationDistance !== undefined) {\r\n                    standardMaterialDataProperties.attenuationDistance = volumeExtension.attenuationDistance;\r\n                }\r\n\r\n                if (volumeExtension.attenuationColor !== undefined) {\r\n                    standardMaterialDataProperties.attenuationColor = [volumeExtension.attenuationColor[0] * 255, volumeExtension.attenuationColor[1] * 255, volumeExtension.attenuationColor[2] * 255];\r\n                }\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN]) {\r\n                const sheenExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_SHEEN];\r\n                standardMaterialDataProperties.sheen = 1.0;\r\n                if (sheenExtension.sheenColorFactor !== undefined) {\r\n                    standardMaterialDataProperties.sheenColor = [sheenExtension.sheenColorFactor[0] * 255, sheenExtension.sheenColorFactor[1] * 255, sheenExtension.sheenColorFactor[2] * 255];\r\n                }\r\n\r\n                if (sheenExtension.sheenRoughnessFactor !== undefined) {\r\n                    standardMaterialDataProperties.sheenRoughness = sheenExtension.sheenRoughnessFactor;\r\n                }\r\n\r\n                if (sheenExtension.sheenColorTexture !== undefined) {\r\n                    const sheenColorTextureOptions = sheenExtension.sheenColorTexture.extensions && sheenExtension.sheenColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? sheenExtension.sheenColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.sheenColorMap = this.loadMap(sheenExtension.sheenColorTexture.index, sheenColorTextureOptions);\r\n                }\r\n\r\n                if (sheenExtension.sheenRoughnessTexture !== undefined) {\r\n                    const sheenRoughnessTextureOptions = sheenExtension.sheenRoughnessTexture.extensions && sheenExtension.sheenRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? sheenExtension.sheenRoughnessTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.sheenRoughnessMap = this.loadMap(sheenExtension.sheenRoughnessTexture.index, sheenRoughnessTextureOptions);\r\n                }\r\n            }\r\n\r\n            if (materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR]) {\r\n                const specularExtension = materialExtensions[GLTF_EXTENSIONS.KHR_MATERIALS_SPECULAR];\r\n\r\n                if (specularExtension.specularFactor !== undefined) {\r\n                    standardMaterialDataProperties.specularIntensity = specularExtension.specularFactor;\r\n                }\r\n\r\n                if (specularExtension.specularColorFactor !== undefined) {\r\n                    standardMaterialDataProperties.specularColor = [specularExtension.specularColorFactor[0] * 255, specularExtension.specularColorFactor[1] * 255, specularExtension.specularColorFactor[2] * 255];\r\n                }\r\n\r\n                if (specularExtension.specularColorTexture !== undefined) {\r\n                    const specularColorTextureOptions = specularExtension.specularColorTexture.extensions && specularExtension.specularColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? specularExtension.specularColorTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.specularColorMap = this.loadMap(specularExtension.specularColorTexture.index, specularColorTextureOptions);\r\n                }\r\n\r\n                if (specularExtension.specularTexture !== undefined) {\r\n                    const specularTextureOptions = specularExtension.specularTexture.extensions && specularExtension.specularTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] ? specularExtension.specularTexture.extensions[GLTF_EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\r\n                    standardMaterialDataProperties.specularIntensityMap = this.loadMap(specularExtension.specularTexture.index, specularTextureOptions);\r\n                }\r\n            }\r\n\r\n            const materialData = new MaterialStandardData(standardMaterialDataProperties);\r\n            this._loaded[materialId] = materialData;\r\n        }\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n\r\n    // #region Private Methods (1)\r\n\r\n    private loadMap(textureId: number, properties?: { offset?: number[], scale?: number[], rotation?: number }): IMapData {\r\n        if (!this._content.textures) throw new Error('Textures not available.')\r\n        const texture = this._content.textures[textureId];\r\n        if (!this._content.images) throw new Error('Images not available.')\r\n        const sampler = this._content.samplers && texture.sampler && this._content.samplers[texture.sampler] ? this._content.samplers[texture.sampler] : {};\r\n        const htmlImage = this._textureLoader.getTexture(textureId);\r\n\r\n        return new MapData(\r\n            htmlImage,\r\n            sampler.wrapS,\r\n            sampler.wrapT,\r\n            sampler.minFilter,\r\n            sampler.magFilter,\r\n            undefined,\r\n            undefined,\r\n            properties && properties.offset ? vec2.fromValues(properties.offset[0], properties.offset[1]) : undefined,\r\n            properties && properties.scale ? vec2.fromValues(properties.scale[0], properties.scale[1]) : undefined,\r\n            properties && properties.rotation !== undefined ? properties.rotation : 0,\r\n            false\r\n        );;\r\n    }\r\n\r\n    // #endregion Private Methods (1)\r\n}"]}},"error":null,"hash":"26429ccd53ec9bbcd803bbcbd6dddf61","cacheData":{"env":{}}}