{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/controls/PerspectiveCameraControls.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js.map","includedInParent":true,"mtime":1706542086889},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\controls\\PerspectiveCameraControls.ts","includedInParent":true,"mtime":1706542087339},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"@shapediver/viewer.shared.services","loc":{"line":4,"column":41,"index":165},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":5,"column":28,"index":233},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"../..","loc":{"line":6,"column":20,"index":268},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"./AbstractCameraControls","loc":{"line":7,"column":41,"index":320},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\AbstractCameraControls.js"},{"name":"./perspective/CameraControlsEventDistribution","loc":{"line":8,"column":50,"index":400},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\perspective\\CameraControlsEventDistribution.js"},{"name":"./perspective/CameraControlsLogic","loc":{"line":9,"column":38,"index":489},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\PerspectiveCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\perspective\\CameraControlsLogic.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PerspectiveCameraControls = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst __1 = require(\"../..\");\r\nconst AbstractCameraControls_1 = require(\"./AbstractCameraControls\");\r\nconst CameraControlsEventDistribution_1 = require(\"./perspective/CameraControlsEventDistribution\");\r\nconst CameraControlsLogic_1 = require(\"./perspective/CameraControlsLogic\");\r\nclass PerspectiveCameraControls extends AbstractCameraControls_1.AbstractCameraControls {\r\n    // #endregion Properties (19)\r\n    // #region Constructors (1)\r\n    constructor(camera, enabled) {\r\n        super(camera, enabled, __1.CAMERA_TYPE.PERSPECTIVE);\r\n        // #region Properties (19)\r\n        this._autoRotationSpeed = 0;\r\n        this._cubePositionRestriction = { min: gl_matrix_1.vec3.fromValues(-Infinity, -Infinity, -Infinity), max: gl_matrix_1.vec3.fromValues(Infinity, Infinity, Infinity) };\r\n        this._cubeTargetRestriction = { min: gl_matrix_1.vec3.fromValues(-Infinity, -Infinity, -Infinity), max: gl_matrix_1.vec3.fromValues(Infinity, Infinity, Infinity) };\r\n        this._damping = 0.1;\r\n        this._enableAutoRotation = false;\r\n        this._enableKeyPan = false;\r\n        this._enablePan = true;\r\n        this._enableRotation = true;\r\n        this._enableZoom = true;\r\n        this._input = { keys: { up: 38, down: 40, left: 37, right: 39 }, mouse: { rotate: 0, zoom: 1, pan: 2 }, touch: { rotate: 1, zoom: 2, pan: 3 }, };\r\n        this._keyPanSpeed = 0.5;\r\n        this._movementSmoothness = 0.5;\r\n        this._panSpeed = 0.5;\r\n        this._rotationRestriction = { minPolarAngle: 0, maxPolarAngle: 180, minAzimuthAngle: -Infinity, maxAzimuthAngle: Infinity };\r\n        this._rotationSpeed = 0.5;\r\n        this._spherePositionRestriction = { center: gl_matrix_1.vec3.create(), radius: Infinity };\r\n        this._sphereTargetRestriction = { center: gl_matrix_1.vec3.create(), radius: Infinity };\r\n        this._zoomRestriction = { minDistance: 0, maxDistance: Infinity };\r\n        this._zoomSpeed = 0.5;\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._cameraLogic = new CameraControlsLogic_1.CameraControlsLogic(this);\r\n        this._cameraControlsEventDistribution = new CameraControlsEventDistribution_1.CameraControlsEventDistribution(this, this._cameraLogic);\r\n    }\r\n    applySettings(settingsEngine) {\r\n        const cameraSetting = settingsEngine.camera.cameras[this.camera.id];\r\n        if (!cameraSetting)\r\n            return;\r\n        this.reset();\r\n        const controlsSettings = cameraSetting.controls;\r\n        this.autoRotationSpeed = controlsSettings.autoRotationSpeed;\r\n        this.damping = controlsSettings.damping;\r\n        this.enableAutoRotation = controlsSettings.enableAutoRotation;\r\n        this.enableKeyPan = controlsSettings.enableKeyPan;\r\n        this.enablePan = controlsSettings.enablePan;\r\n        this.enableRotation = controlsSettings.enableRotation;\r\n        this.enableZoom = controlsSettings.enableZoom;\r\n        this.input = controlsSettings.input;\r\n        this.keyPanSpeed = controlsSettings.keyPanSpeed;\r\n        this.movementSmoothness = controlsSettings.movementSmoothness;\r\n        this.rotationSpeed = controlsSettings.rotationSpeed;\r\n        this.panSpeed = controlsSettings.panSpeed;\r\n        this.zoomSpeed = controlsSettings.zoomSpeed;\r\n        if (controlsSettings.restrictions.position.cube.min.x === null)\r\n            controlsSettings.restrictions.position.cube.min.x = -Infinity;\r\n        if (controlsSettings.restrictions.position.cube.min.y === null)\r\n            controlsSettings.restrictions.position.cube.min.y = -Infinity;\r\n        if (controlsSettings.restrictions.position.cube.min.z === null)\r\n            controlsSettings.restrictions.position.cube.min.z = -Infinity;\r\n        if (controlsSettings.restrictions.position.cube.max.x === null)\r\n            controlsSettings.restrictions.position.cube.max.x = Infinity;\r\n        if (controlsSettings.restrictions.position.cube.max.y === null)\r\n            controlsSettings.restrictions.position.cube.max.y = Infinity;\r\n        if (controlsSettings.restrictions.position.cube.max.z === null)\r\n            controlsSettings.restrictions.position.cube.max.z = Infinity;\r\n        if (controlsSettings.restrictions.position.sphere.radius === null)\r\n            controlsSettings.restrictions.position.sphere.radius = Infinity;\r\n        if (controlsSettings.restrictions.target.cube.min.x === null)\r\n            controlsSettings.restrictions.target.cube.min.x = -Infinity;\r\n        if (controlsSettings.restrictions.target.cube.min.y === null)\r\n            controlsSettings.restrictions.target.cube.min.y = -Infinity;\r\n        if (controlsSettings.restrictions.target.cube.min.z === null)\r\n            controlsSettings.restrictions.target.cube.min.z = -Infinity;\r\n        if (controlsSettings.restrictions.target.cube.max.x === null)\r\n            controlsSettings.restrictions.target.cube.max.x = Infinity;\r\n        if (controlsSettings.restrictions.target.cube.max.y === null)\r\n            controlsSettings.restrictions.target.cube.max.y = Infinity;\r\n        if (controlsSettings.restrictions.target.cube.max.z === null)\r\n            controlsSettings.restrictions.target.cube.max.z = Infinity;\r\n        if (controlsSettings.restrictions.target.sphere.radius === null)\r\n            controlsSettings.restrictions.target.sphere.radius = Infinity;\r\n        if (controlsSettings.restrictions.rotation.minAzimuthAngle === null)\r\n            controlsSettings.restrictions.rotation.minAzimuthAngle = -Infinity;\r\n        if (controlsSettings.restrictions.rotation.maxAzimuthAngle === null)\r\n            controlsSettings.restrictions.rotation.maxAzimuthAngle = Infinity;\r\n        if (controlsSettings.restrictions.zoom.maxDistance === null)\r\n            controlsSettings.restrictions.zoom.maxDistance = Infinity;\r\n        this.cubePositionRestriction = {\r\n            min: this._converter.toVec3(controlsSettings.restrictions.position.cube.min),\r\n            max: this._converter.toVec3(controlsSettings.restrictions.position.cube.max)\r\n        };\r\n        this.spherePositionRestriction = {\r\n            center: this._converter.toVec3(controlsSettings.restrictions.position.sphere.center),\r\n            radius: controlsSettings.restrictions.position.sphere.radius\r\n        };\r\n        this.cubeTargetRestriction = {\r\n            min: this._converter.toVec3(controlsSettings.restrictions.target.cube.min),\r\n            max: this._converter.toVec3(controlsSettings.restrictions.target.cube.max)\r\n        };\r\n        this.sphereTargetRestriction = {\r\n            center: this._converter.toVec3(controlsSettings.restrictions.target.sphere.center),\r\n            radius: controlsSettings.restrictions.target.sphere.radius\r\n        };\r\n        this.rotationRestriction = controlsSettings.restrictions.rotation;\r\n        this.zoomRestriction = controlsSettings.restrictions.zoom;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (38)\r\n    get autoRotationSpeed() {\r\n        return this._autoRotationSpeed;\r\n    }\r\n    set autoRotationSpeed(value) {\r\n        this._autoRotationSpeed = value;\r\n    }\r\n    get cubePositionRestriction() {\r\n        return this._cubePositionRestriction;\r\n    }\r\n    set cubePositionRestriction(value) {\r\n        this._cubePositionRestriction = value;\r\n    }\r\n    get cubeTargetRestriction() {\r\n        return this._cubeTargetRestriction;\r\n    }\r\n    set cubeTargetRestriction(value) {\r\n        this._cubeTargetRestriction = value;\r\n    }\r\n    get damping() {\r\n        return this._damping;\r\n    }\r\n    set damping(value) {\r\n        this._damping = value;\r\n    }\r\n    get enableAutoRotation() {\r\n        return this._enableAutoRotation;\r\n    }\r\n    set enableAutoRotation(value) {\r\n        this._enableAutoRotation = value;\r\n    }\r\n    get enableKeyPan() {\r\n        return this._enableKeyPan;\r\n    }\r\n    set enableKeyPan(value) {\r\n        this._enableKeyPan = value;\r\n    }\r\n    get enablePan() {\r\n        return this._enablePan;\r\n    }\r\n    set enablePan(value) {\r\n        this._enablePan = value;\r\n    }\r\n    get enableRotation() {\r\n        return this._enableRotation;\r\n    }\r\n    set enableRotation(value) {\r\n        this._enableRotation = value;\r\n    }\r\n    get enableZoom() {\r\n        return this._enableZoom;\r\n    }\r\n    set enableZoom(value) {\r\n        this._enableZoom = value;\r\n    }\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value) {\r\n        this._input = value;\r\n    }\r\n    get keyPanSpeed() {\r\n        return this._keyPanSpeed;\r\n    }\r\n    set keyPanSpeed(value) {\r\n        this._keyPanSpeed = value;\r\n    }\r\n    get movementSmoothness() {\r\n        return this._movementSmoothness;\r\n    }\r\n    set movementSmoothness(value) {\r\n        this._movementSmoothness = value;\r\n    }\r\n    get panSpeed() {\r\n        return this._panSpeed;\r\n    }\r\n    set panSpeed(value) {\r\n        this._panSpeed = value;\r\n    }\r\n    get rotationRestriction() {\r\n        return this._rotationRestriction;\r\n    }\r\n    set rotationRestriction(value) {\r\n        this._rotationRestriction = value;\r\n    }\r\n    get rotationSpeed() {\r\n        return this._rotationSpeed;\r\n    }\r\n    set rotationSpeed(value) {\r\n        this._rotationSpeed = value;\r\n    }\r\n    get spherePositionRestriction() {\r\n        return this._spherePositionRestriction;\r\n    }\r\n    set spherePositionRestriction(value) {\r\n        this._spherePositionRestriction = value;\r\n    }\r\n    get sphereTargetRestriction() {\r\n        return this._sphereTargetRestriction;\r\n    }\r\n    set sphereTargetRestriction(value) {\r\n        this._sphereTargetRestriction = value;\r\n    }\r\n    get zoomRestriction() {\r\n        return this._zoomRestriction;\r\n    }\r\n    set zoomRestriction(value) {\r\n        this._zoomRestriction = value;\r\n    }\r\n    get zoomSpeed() {\r\n        return this._zoomSpeed;\r\n    }\r\n    set zoomSpeed(value) {\r\n        this._zoomSpeed = value;\r\n    }\r\n}\r\nexports.PerspectiveCameraControls = PerspectiveCameraControls;\r\n"},"sourceMaps":{"js":{"version":3,"file":"PerspectiveCameraControls.js","sourceRoot":"","sources":["../../../src/implementation/controls/PerspectiveCameraControls.ts"],"names":[],"mappings":"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","sourcesContent":["import { IOrbitControlsSettingsV3 } from '@shapediver/viewer.settings'\r\nimport { SettingsEngine, StateEngine, Converter } from '@shapediver/viewer.shared.services'\r\nimport { vec3 } from 'gl-matrix'\r\n\r\nimport { CAMERA_TYPE, ICamera } from '../..'\r\nimport { IPerspectiveCameraControls } from '../../interfaces/controls/IPerspectiveCameraControls'\r\nimport { AbstractCameraControls } from './AbstractCameraControls'\r\nimport {\r\n  CameraControlsEventDistribution as OrbitCameraControlsEventDistribution,\r\n} from './perspective/CameraControlsEventDistribution'\r\nimport { CameraControlsLogic as OrbitCameraControlsLogic } from './perspective/CameraControlsLogic'\r\n\r\nexport class PerspectiveCameraControls extends AbstractCameraControls implements IPerspectiveCameraControls {\r\n    // #region Properties (19)\r\n\r\n    private _autoRotationSpeed: number = 0;\r\n    private _cubePositionRestriction: { min: vec3, max: vec3 } = { min: vec3.fromValues(-Infinity, -Infinity, -Infinity), max: vec3.fromValues(Infinity, Infinity, Infinity) };\r\n    private _cubeTargetRestriction: { min: vec3, max: vec3 } = { min: vec3.fromValues(-Infinity, -Infinity, -Infinity), max: vec3.fromValues(Infinity, Infinity, Infinity) };\r\n    private _damping: number = 0.1;\r\n    private _enableAutoRotation: boolean = false;\r\n    private _enableKeyPan: boolean = false;\r\n    private _enablePan: boolean = true;\r\n    private _enableRotation: boolean = true;\r\n    private _enableZoom: boolean = true;\r\n    private _input: { keys: { up: number, down: number, left: number, right: number }, mouse: { rotate: number, zoom: number, pan: number }, touch: { rotate: number, zoom: number, pan: number } } = { keys: { up: 38, down: 40, left: 37, right: 39 }, mouse: { rotate: 0, zoom: 1, pan: 2 }, touch: { rotate: 1, zoom: 2, pan: 3 }, };\r\n    private _keyPanSpeed: number = 0.5;\r\n    private _movementSmoothness: number = 0.5;\r\n    private _panSpeed: number = 0.5;\r\n    private _rotationRestriction: { minPolarAngle: number, maxPolarAngle: number, minAzimuthAngle: number, maxAzimuthAngle: number } = { minPolarAngle: 0, maxPolarAngle: 180, minAzimuthAngle: -Infinity, maxAzimuthAngle: Infinity };\r\n    private _rotationSpeed: number = 0.5;\r\n    private _spherePositionRestriction: { center: vec3, radius: number } = { center: vec3.create(), radius: Infinity };\r\n    private _sphereTargetRestriction: { center: vec3, radius: number } = { center: vec3.create(), radius: Infinity };\r\n    private _zoomRestriction: { minDistance: number, maxDistance: number } = { minDistance: 0, maxDistance: Infinity };\r\n    private _zoomSpeed: number = 0.5;\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n\r\n    // #endregion Properties (19)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(camera: ICamera, enabled: boolean) {\r\n        super(camera, enabled, CAMERA_TYPE.PERSPECTIVE);\r\n        this._cameraLogic = new OrbitCameraControlsLogic(this);\r\n        this._cameraControlsEventDistribution = new OrbitCameraControlsEventDistribution(this, <OrbitCameraControlsLogic>this._cameraLogic);\r\n    }\r\n\r\n    public applySettings(settingsEngine: SettingsEngine) {\r\n        const cameraSetting = settingsEngine.camera.cameras[this.camera.id];\r\n        if(!cameraSetting) return;\r\n        this.reset();\r\n        const controlsSettings = <IOrbitControlsSettingsV3>cameraSetting.controls;\r\n        this.autoRotationSpeed = controlsSettings.autoRotationSpeed;\r\n        this.damping = controlsSettings.damping;\r\n        this.enableAutoRotation = controlsSettings.enableAutoRotation;\r\n        this.enableKeyPan = controlsSettings.enableKeyPan;\r\n        this.enablePan = controlsSettings.enablePan;\r\n        this.enableRotation = controlsSettings.enableRotation;\r\n        this.enableZoom = controlsSettings.enableZoom;\r\n        this.input = controlsSettings.input;\r\n        this.keyPanSpeed = controlsSettings.keyPanSpeed;\r\n        this.movementSmoothness = controlsSettings.movementSmoothness;\r\n        this.rotationSpeed = controlsSettings.rotationSpeed;\r\n        this.panSpeed = controlsSettings.panSpeed;\r\n        this.zoomSpeed = controlsSettings.zoomSpeed;\r\n\r\n        if(controlsSettings.restrictions.position.cube.min.x === null) controlsSettings.restrictions.position.cube.min.x = -Infinity;\r\n        if(controlsSettings.restrictions.position.cube.min.y === null) controlsSettings.restrictions.position.cube.min.y = -Infinity;\r\n        if(controlsSettings.restrictions.position.cube.min.z === null) controlsSettings.restrictions.position.cube.min.z = -Infinity;\r\n        if(controlsSettings.restrictions.position.cube.max.x === null) controlsSettings.restrictions.position.cube.max.x = Infinity;\r\n        if(controlsSettings.restrictions.position.cube.max.y === null) controlsSettings.restrictions.position.cube.max.y = Infinity;\r\n        if(controlsSettings.restrictions.position.cube.max.z === null) controlsSettings.restrictions.position.cube.max.z = Infinity;\r\n        if(controlsSettings.restrictions.position.sphere.radius === null) controlsSettings.restrictions.position.sphere.radius = Infinity;\r\n        if(controlsSettings.restrictions.target.cube.min.x === null) controlsSettings.restrictions.target.cube.min.x = -Infinity;\r\n        if(controlsSettings.restrictions.target.cube.min.y === null) controlsSettings.restrictions.target.cube.min.y = -Infinity;\r\n        if(controlsSettings.restrictions.target.cube.min.z === null) controlsSettings.restrictions.target.cube.min.z = -Infinity;\r\n        if(controlsSettings.restrictions.target.cube.max.x === null) controlsSettings.restrictions.target.cube.max.x = Infinity;\r\n        if(controlsSettings.restrictions.target.cube.max.y === null) controlsSettings.restrictions.target.cube.max.y = Infinity;\r\n        if(controlsSettings.restrictions.target.cube.max.z === null) controlsSettings.restrictions.target.cube.max.z = Infinity;\r\n        if(controlsSettings.restrictions.target.sphere.radius === null) controlsSettings.restrictions.target.sphere.radius = Infinity;\r\n        if(controlsSettings.restrictions.rotation.minAzimuthAngle === null) controlsSettings.restrictions.rotation.minAzimuthAngle = -Infinity;\r\n        if(controlsSettings.restrictions.rotation.maxAzimuthAngle === null) controlsSettings.restrictions.rotation.maxAzimuthAngle = Infinity;\r\n        if(controlsSettings.restrictions.zoom.maxDistance === null) controlsSettings.restrictions.zoom.maxDistance = Infinity;\r\n\r\n        this.cubePositionRestriction = { \r\n            min: this._converter.toVec3(controlsSettings.restrictions.position.cube.min),\r\n            max: this._converter.toVec3(controlsSettings.restrictions.position.cube.max)\r\n        };\r\n        this.spherePositionRestriction = { \r\n            center: this._converter.toVec3(controlsSettings.restrictions.position.sphere.center),\r\n            radius: controlsSettings.restrictions.position.sphere.radius\r\n        };\r\n        this.cubeTargetRestriction = { \r\n            min: this._converter.toVec3(controlsSettings.restrictions.target.cube.min),\r\n            max: this._converter.toVec3(controlsSettings.restrictions.target.cube.max)\r\n        };\r\n        this.sphereTargetRestriction = { \r\n            center: this._converter.toVec3(controlsSettings.restrictions.target.sphere.center),\r\n            radius: controlsSettings.restrictions.target.sphere.radius\r\n        };\r\n        this.rotationRestriction = controlsSettings.restrictions.rotation;\r\n        this.zoomRestriction = controlsSettings.restrictions.zoom;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (38)\r\n\r\n    public get autoRotationSpeed(): number {\r\n        return this._autoRotationSpeed;\r\n    }\r\n\r\n    public set autoRotationSpeed(value: number) {\r\n        this._autoRotationSpeed = value;\r\n    }\r\n\r\n    public get cubePositionRestriction(): { min: vec3, max: vec3 } {\r\n        return this._cubePositionRestriction;\r\n    }\r\n\r\n    public set cubePositionRestriction(value: { min: vec3, max: vec3 }) {\r\n        this._cubePositionRestriction = value;\r\n    }\r\n\r\n    public get cubeTargetRestriction(): { min: vec3, max: vec3 } {\r\n        return this._cubeTargetRestriction;\r\n    }\r\n\r\n    public set cubeTargetRestriction(value: { min: vec3, max: vec3 }) {\r\n        this._cubeTargetRestriction = value;\r\n    }\r\n\r\n    public get damping(): number {\r\n        return this._damping;\r\n    }\r\n\r\n    public set damping(value: number) {\r\n        this._damping = value;\r\n    }\r\n\r\n    public get enableAutoRotation(): boolean {\r\n        return this._enableAutoRotation;\r\n    }\r\n\r\n    public set enableAutoRotation(value: boolean) {\r\n        this._enableAutoRotation = value;\r\n    }\r\n\r\n    public get enableKeyPan(): boolean {\r\n        return this._enableKeyPan;\r\n    }\r\n\r\n    public set enableKeyPan(value: boolean) {\r\n        this._enableKeyPan = value;\r\n    }\r\n\r\n    public get enablePan(): boolean {\r\n        return this._enablePan;\r\n    }\r\n\r\n    public set enablePan(value: boolean) {\r\n        this._enablePan = value;\r\n    }\r\n\r\n    public get enableRotation(): boolean {\r\n        return this._enableRotation;\r\n    }\r\n\r\n    public set enableRotation(value: boolean) {\r\n        this._enableRotation = value;\r\n    }\r\n\r\n    public get enableZoom(): boolean {\r\n        return this._enableZoom;\r\n    }\r\n\r\n    public set enableZoom(value: boolean) {\r\n        this._enableZoom = value;\r\n    }\r\n\r\n    public get input(): { keys: { up: number, down: number, left: number, right: number }, mouse: { rotate: number, zoom: number, pan: number }, touch: { rotate: number, zoom: number, pan: number } } {\r\n        return this._input;\r\n    }\r\n\r\n    public set input(value: { keys: { up: number, down: number, left: number, right: number }, mouse: { rotate: number, zoom: number, pan: number }, touch: { rotate: number, zoom: number, pan: number } }) {\r\n        this._input = value;\r\n    }\r\n\r\n    public get keyPanSpeed(): number {\r\n        return this._keyPanSpeed;\r\n    }\r\n\r\n    public set keyPanSpeed(value: number) {\r\n        this._keyPanSpeed = value;\r\n    }\r\n\r\n    public get movementSmoothness(): number {\r\n        return this._movementSmoothness;\r\n    }\r\n\r\n    public set movementSmoothness(value: number) {\r\n        this._movementSmoothness = value;\r\n    }\r\n\r\n    public get panSpeed(): number {\r\n        return this._panSpeed;\r\n    }\r\n\r\n    public set panSpeed(value: number) {\r\n        this._panSpeed = value;\r\n    }\r\n\r\n    public get rotationRestriction(): { minPolarAngle: number, maxPolarAngle: number, minAzimuthAngle: number, maxAzimuthAngle: number } {\r\n        return this._rotationRestriction;\r\n    }\r\n\r\n    public set rotationRestriction(value: { minPolarAngle: number, maxPolarAngle: number, minAzimuthAngle: number, maxAzimuthAngle: number }) {\r\n        this._rotationRestriction = value;\r\n    }\r\n\r\n    public get rotationSpeed(): number {\r\n        return this._rotationSpeed;\r\n    }\r\n\r\n    public set rotationSpeed(value: number) {\r\n        this._rotationSpeed = value;\r\n    }\r\n\r\n    public get spherePositionRestriction(): { center: vec3, radius: number } {\r\n        return this._spherePositionRestriction;\r\n    }\r\n\r\n    public set spherePositionRestriction(value: { center: vec3, radius: number }) {\r\n        this._spherePositionRestriction = value;\r\n    }\r\n\r\n    public get sphereTargetRestriction(): { center: vec3, radius: number } {\r\n        return this._sphereTargetRestriction;\r\n    }\r\n\r\n    public set sphereTargetRestriction(value: { center: vec3, radius: number }) {\r\n        this._sphereTargetRestriction = value;\r\n    }\r\n\r\n    public get zoomRestriction(): { minDistance: number, maxDistance: number } {\r\n        return this._zoomRestriction;\r\n    }\r\n\r\n    public set zoomRestriction(value: { minDistance: number, maxDistance: number }) {\r\n        this._zoomRestriction = value;\r\n    }\r\n\r\n    public get zoomSpeed(): number {\r\n        return this._zoomSpeed;\r\n    }\r\n\r\n    public set zoomSpeed(value: number) {\r\n        this._zoomSpeed = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (38)\r\n}"]}},"error":null,"hash":"b2ed053e92816ee8cf8bcca2f09e4ed3","cacheData":{"env":{}}}