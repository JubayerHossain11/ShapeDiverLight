{"id":"node_modules/@shapediver/viewer.data-engine.tag3d-engine/dist/three/loaders/FontLoader.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\loaders\\FontLoader.js.map","includedInParent":true,"mtime":1706527148906},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\src\\three\\loaders\\FontLoader.js","includedInParent":true,"mtime":1706527148636},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\package.json","includedInParent":true,"mtime":1706527148805},{"name":"three","loc":{"line":4,"column":24,"index":148},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\loaders\\FontLoader.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Font = exports.FontLoader = void 0;\r\nconst three_1 = require(\"three\");\r\nclass FontLoader extends three_1.Loader {\r\n    constructor(manager) {\r\n        super(manager);\r\n    }\r\n    load(url, onLoad, onProgress, onError) {\r\n        const scope = this;\r\n        const loader = new three_1.FileLoader(this.manager);\r\n        loader.setPath(this.path);\r\n        loader.setRequestHeader(this.requestHeader);\r\n        loader.setWithCredentials(scope.withCredentials);\r\n        loader.load(url, function (text) {\r\n            let json;\r\n            try {\r\n                json = JSON.parse(text);\r\n            }\r\n            catch (e) {\r\n                console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\r\n                json = JSON.parse(text.substring(65, text.length - 2));\r\n            }\r\n            const font = scope.parse(json);\r\n            if (onLoad)\r\n                onLoad(font);\r\n        }, onProgress, onError);\r\n    }\r\n    parse(json) {\r\n        return new Font(json);\r\n    }\r\n}\r\nexports.FontLoader = FontLoader;\r\n//\r\nclass Font {\r\n    constructor(data) {\r\n        this.type = 'Font';\r\n        this.data = data;\r\n    }\r\n    generateShapes(text, size = 100) {\r\n        const shapes = [];\r\n        const paths = createPaths(text, size, this.data);\r\n        for (let p = 0, pl = paths.length; p < pl; p++) {\r\n            Array.prototype.push.apply(shapes, paths[p].toShapes());\r\n        }\r\n        return shapes;\r\n    }\r\n}\r\nexports.Font = Font;\r\nfunction createPaths(text, size, data) {\r\n    const chars = Array.from(text);\r\n    const scale = size / data.resolution;\r\n    const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\r\n    const paths = [];\r\n    let offsetX = 0, offsetY = 0;\r\n    for (let i = 0; i < chars.length; i++) {\r\n        const char = chars[i];\r\n        if (char === '\\n') {\r\n            offsetX = 0;\r\n            offsetY -= line_height;\r\n        }\r\n        else {\r\n            const ret = createPath(char, scale, offsetX, offsetY, data);\r\n            offsetX += ret.offsetX;\r\n            paths.push(ret.path);\r\n        }\r\n    }\r\n    return paths;\r\n}\r\nfunction createPath(char, scale, offsetX, offsetY, data) {\r\n    const glyph = data.glyphs[char] || data.glyphs['?'];\r\n    if (!glyph) {\r\n        console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\r\n        return;\r\n    }\r\n    const path = new three_1.ShapePath();\r\n    let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n    if (glyph.o) {\r\n        const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\r\n        for (let i = 0, l = outline.length; i < l;) {\r\n            const action = outline[i++];\r\n            switch (action) {\r\n                case 'm': // moveTo\r\n                    x = outline[i++] * scale + offsetX;\r\n                    y = outline[i++] * scale + offsetY;\r\n                    path.moveTo(x, y);\r\n                    break;\r\n                case 'l': // lineTo\r\n                    x = outline[i++] * scale + offsetX;\r\n                    y = outline[i++] * scale + offsetY;\r\n                    path.lineTo(x, y);\r\n                    break;\r\n                case 'q': // quadraticCurveTo\r\n                    cpx = outline[i++] * scale + offsetX;\r\n                    cpy = outline[i++] * scale + offsetY;\r\n                    cpx1 = outline[i++] * scale + offsetX;\r\n                    cpy1 = outline[i++] * scale + offsetY;\r\n                    path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n                    break;\r\n                case 'b': // bezierCurveTo\r\n                    cpx = outline[i++] * scale + offsetX;\r\n                    cpy = outline[i++] * scale + offsetY;\r\n                    cpx1 = outline[i++] * scale + offsetX;\r\n                    cpy1 = outline[i++] * scale + offsetY;\r\n                    cpx2 = outline[i++] * scale + offsetX;\r\n                    cpy2 = outline[i++] * scale + offsetY;\r\n                    path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return { offsetX: glyph.ha * scale, path: path };\r\n}\r\nFont.prototype.isFont = true;\r\n"},"sourceMaps":{"js":{"version":3,"file":"FontLoader.js","sourceRoot":"","sources":["../../../src/three/loaders/FontLoader.js"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tFileLoader,\r\n\tLoader,\r\n\tShapePath\r\n} from 'three';\r\n\r\nclass FontLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tlet json;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst font = scope.parse( json );\r\n\r\n\t\t\tif ( onLoad ) onLoad( font );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\treturn new Font( json );\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nclass Font {\r\n\r\n\tconstructor( data ) {\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tgenerateShapes( text, size = 100 ) {\r\n\r\n\t\tconst shapes = [];\r\n\t\tconst paths = createPaths( text, size, this.data );\r\n\r\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction createPaths( text, size, data ) {\r\n\r\n\tconst chars = Array.from( text );\r\n\tconst scale = size / data.resolution;\r\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\tconst paths = [];\r\n\r\n\tlet offsetX = 0, offsetY = 0;\r\n\r\n\tfor ( let i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\tconst char = chars[ i ];\r\n\r\n\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\toffsetX = 0;\r\n\t\t\toffsetY -= line_height;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\toffsetX += ret.offsetX;\r\n\t\t\tpaths.push( ret.path );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn paths;\r\n\r\n}\r\n\r\nfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\tif ( ! glyph ) {\r\n\r\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tconst path = new ShapePath();\r\n\r\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\tif ( glyph.o ) {\r\n\r\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\tconst action = outline[ i ++ ];\r\n\r\n\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n}\r\n\r\nFont.prototype.isFont = true;\r\n\r\nexport { FontLoader, Font };\r\n"]}},"error":null,"hash":"00c4c64b4e3f7ff6157ba811fd4fdc18","cacheData":{"env":{}}}