{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/three/postprocessing/MaskPass.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\MaskPass.js.map","includedInParent":true,"mtime":1706542086920},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\three\\postprocessing\\MaskPass.js","includedInParent":true,"mtime":1706542086090},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"./Pass.js","loc":{"line":4,"column":26,"index":157},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\MaskPass.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\Pass.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ClearMaskPass = exports.MaskPass = void 0;\r\nconst Pass_js_1 = require(\"./Pass.js\");\r\nclass MaskPass extends Pass_js_1.Pass {\r\n    constructor(scene, camera) {\r\n        super();\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.clear = true;\r\n        this.needsSwap = false;\r\n        this.inverse = false;\r\n    }\r\n    render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\r\n        const context = renderer.getContext();\r\n        const state = renderer.state;\r\n        // don't update color or depth\r\n        state.buffers.color.setMask(false);\r\n        state.buffers.depth.setMask(false);\r\n        // lock buffers\r\n        state.buffers.color.setLocked(true);\r\n        state.buffers.depth.setLocked(true);\r\n        // set up stencil\r\n        let writeValue, clearValue;\r\n        if (this.inverse) {\r\n            writeValue = 0;\r\n            clearValue = 1;\r\n        }\r\n        else {\r\n            writeValue = 1;\r\n            clearValue = 0;\r\n        }\r\n        state.buffers.stencil.setTest(true);\r\n        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\r\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\r\n        state.buffers.stencil.setClear(clearValue);\r\n        state.buffers.stencil.setLocked(true);\r\n        // draw into the stencil buffer\r\n        renderer.setRenderTarget(readBuffer);\r\n        if (this.clear)\r\n            renderer.clear();\r\n        renderer.render(this.scene, this.camera);\r\n        renderer.setRenderTarget(writeBuffer);\r\n        if (this.clear)\r\n            renderer.clear();\r\n        renderer.render(this.scene, this.camera);\r\n        // unlock color and depth buffer for subsequent rendering\r\n        state.buffers.color.setLocked(false);\r\n        state.buffers.depth.setLocked(false);\r\n        // only render where stencil is set to 1\r\n        state.buffers.stencil.setLocked(false);\r\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\r\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\r\n        state.buffers.stencil.setLocked(true);\r\n    }\r\n}\r\nexports.MaskPass = MaskPass;\r\nclass ClearMaskPass extends Pass_js_1.Pass {\r\n    constructor() {\r\n        super();\r\n        this.needsSwap = false;\r\n    }\r\n    render(renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\r\n        renderer.state.buffers.stencil.setLocked(false);\r\n        renderer.state.buffers.stencil.setTest(false);\r\n    }\r\n}\r\nexports.ClearMaskPass = ClearMaskPass;\r\n"},"sourceMaps":{"js":{"version":3,"file":"MaskPass.js","sourceRoot":"","sources":["../../../src/three/postprocessing/MaskPass.js"],"names":[],"mappings":";;;AAAA,uCAAiC;AAEjC,MAAM,QAAS,SAAQ,cAAI;IAE1B,YAAa,KAAK,EAAE,MAAM;QAEzB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IAEtB,CAAC;IAED,MAAM,CAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,4BAA4B;QAErE,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAE7B,8BAA8B;QAE9B,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAE,KAAK,CAAE,CAAC;QACrC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAE,KAAK,CAAE,CAAC;QAErC,eAAe;QAEf,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC;QACtC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC;QAEtC,iBAAiB;QAEjB,IAAI,UAAU,EAAE,UAAU,CAAC;QAE3B,IAAK,IAAI,CAAC,OAAO,EAAG;YAEnB,UAAU,GAAG,CAAC,CAAC;YACf,UAAU,GAAG,CAAC,CAAC;SAEf;aAAM;YAEN,UAAU,GAAG,CAAC,CAAC;YACf,UAAU,GAAG,CAAC,CAAC;SAEf;QAED,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;QACtC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAE,CAAC;QACjF,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAE,CAAC;QACxE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAE,UAAU,CAAE,CAAC;QAC7C,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC;QAExC,+BAA+B;QAE/B,QAAQ,CAAC,eAAe,CAAE,UAAU,CAAE,CAAC;QACvC,IAAK,IAAI,CAAC,KAAK;YAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnC,QAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAE,CAAC;QAE3C,QAAQ,CAAC,eAAe,CAAE,WAAW,CAAE,CAAC;QACxC,IAAK,IAAI,CAAC,KAAK;YAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnC,QAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAE,CAAC;QAE3C,yDAAyD;QAEzD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;QACvC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;QAEvC,wCAAwC;QAExC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;QACzC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,UAAU,CAAE,CAAC,CAAC,eAAe;QAC9E,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAE,CAAC;QACxE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC;IAEzC,CAAC;CAED;AAqBQ,4BAAQ;AAnBjB,MAAM,aAAc,SAAQ,cAAI;IAE/B;QAEC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAExB,CAAC;IAED,MAAM,CAAE,QAAQ,CAAC,qDAAqD;QAErE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;QAClD,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,KAAK,CAAE,CAAC;IAEjD,CAAC;CAED;AAEkB,sCAAa","sourcesContent":["import { Pass } from './Pass.js';\r\n\r\nclass MaskPass extends Pass {\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.clear = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.inverse = false;\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst context = renderer.getContext();\r\n\t\tconst state = renderer.state;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tstate.buffers.color.setMask( false );\r\n\t\tstate.buffers.depth.setMask( false );\r\n\r\n\t\t// lock buffers\r\n\r\n\t\tstate.buffers.color.setLocked( true );\r\n\t\tstate.buffers.depth.setLocked( true );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tlet writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tstate.buffers.stencil.setTest( true );\r\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tstate.buffers.stencil.setClear( clearValue );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.setRenderTarget( readBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// unlock color and depth buffer for subsequent rendering\r\n\r\n\t\tstate.buffers.color.setLocked( false );\r\n\t\tstate.buffers.depth.setLocked( false );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tstate.buffers.stencil.setLocked( false );\r\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\r\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ClearMaskPass extends Pass {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.needsSwap = false;\r\n\r\n\t}\r\n\r\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\trenderer.state.buffers.stencil.setLocked( false );\r\n\t\trenderer.state.buffers.stencil.setTest( false );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MaskPass, ClearMaskPass };\r\n"]}},"error":null,"hash":"149f0364a4120f6ce30d401e0443fbd7","cacheData":{"env":{}}}