{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/controls/AbstractCameraControls.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\AbstractCameraControls.js.map","includedInParent":true,"mtime":1706542086379},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\controls\\AbstractCameraControls.ts","includedInParent":true,"mtime":1706542086953},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":149},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\AbstractCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":5,"column":41,"index":205},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\AbstractCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"../interpolation/CameraInterpolationManager","loc":{"line":6,"column":45,"index":290},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\controls\\AbstractCameraControls.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\CameraInterpolationManager.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbstractCameraControls = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst CameraInterpolationManager_1 = require(\"../interpolation/CameraInterpolationManager\");\r\nclass AbstractCameraControls {\r\n    // #endregion Properties (11)\r\n    // #region Constructors (1)\r\n    constructor(_camera, _enabled, type) {\r\n        this._camera = _camera;\r\n        this._enabled = _enabled;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._manualInteraction = false;\r\n        this._moving = false;\r\n        this._movingDuration = 0;\r\n        this._nonmanualInteraction = false;\r\n        this._position = gl_matrix_1.vec3.create();\r\n        this._target = gl_matrix_1.vec3.create();\r\n        this._cameraInterpolationManager = new CameraInterpolationManager_1.CameraInterpolationManager(this._camera, this);\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (9)\r\n    assignViewer(viewportId, canvas) {\r\n        this._canvas = canvas;\r\n        this._viewportId = viewportId;\r\n    }\r\n    get cameraControlsEventDistribution() {\r\n        return this._cameraControlsEventDistribution;\r\n    }\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n    set canvas(value) {\r\n        this._canvas = value;\r\n    }\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    set enabled(value) {\r\n        if (!value) {\r\n            this._manualInteraction = false;\r\n            this._manualInteractionTransformations = { position: [], target: [] };\r\n            this._nonmanualInteraction = false;\r\n            this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n            this._cameraControlsEventDistribution.reset();\r\n            this._cameraLogic.reset();\r\n        }\r\n        this._enabled = value;\r\n    }\r\n    get camera() {\r\n        return this._camera;\r\n    }\r\n    set camera(value) {\r\n        this._camera = value;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        this._position = value;\r\n    }\r\n    get target() {\r\n        return this._target;\r\n    }\r\n    set target(value) {\r\n        this._target = value;\r\n    }\r\n    // #endregion Public Accessors (9)\r\n    // #region Public Methods (10)\r\n    animate(path, options) {\r\n        if (options && options.duration === 0) {\r\n            this._position = path[path.length - 1].position;\r\n            this._target = path[path.length - 1].target;\r\n            return new Promise(resolve => resolve(true));\r\n        }\r\n        this._manualInteraction = false;\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        return this._cameraInterpolationManager.interpolate(path, options);\r\n    }\r\n    applyPositionVector(vector, manualInteraction) {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.position.push({ vector });\r\n        }\r\n        else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.position.push({ vector });\r\n        }\r\n    }\r\n    applyTargetVector(vector, manualInteraction) {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.target.push({ vector });\r\n        }\r\n        else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.target.push({ vector });\r\n        }\r\n    }\r\n    applyPositionMatrix(matrix, manualInteraction) {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.position.push({ matrix });\r\n        }\r\n        else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.position.push({ matrix });\r\n        }\r\n    }\r\n    applyTargetMatrix(matrix, manualInteraction) {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.target.push({ matrix });\r\n        }\r\n        else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.target.push({ matrix });\r\n        }\r\n    }\r\n    applyUpMatrix(matrix, manualInteraction) {\r\n        // https://shapediver.atlassian.net/browse/SS-2949\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getPositionWithManualUpdates() {\r\n        let position = gl_matrix_1.vec3.clone(this._position);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if (this._manualInteractionTransformations.position[i].matrix) {\r\n                    position = gl_matrix_1.vec3.transformMat4(position, position, this._manualInteractionTransformations.position[i].matrix);\r\n                }\r\n                else {\r\n                    position = gl_matrix_1.vec3.add(position, position, this._manualInteractionTransformations.position[i].vector);\r\n                }\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n    getTargetWithManualUpdates() {\r\n        let target = gl_matrix_1.vec3.clone(this._target);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if (this._manualInteractionTransformations.target[i].matrix) {\r\n                    target = gl_matrix_1.vec3.transformMat4(target, target, this._manualInteractionTransformations.target[i].matrix);\r\n                }\r\n                else {\r\n                    target = gl_matrix_1.vec3.add(target, target, this._manualInteractionTransformations.target[i].vector);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    getPositionWithUpdates() {\r\n        return this.getPosition();\r\n    }\r\n    getTargetWithUpdates() {\r\n        return this.getTarget();\r\n    }\r\n    isMoving() {\r\n        return this._manualInteraction || this._nonmanualInteraction;\r\n    }\r\n    isWithinRestrictions(position, target) {\r\n        return this._cameraLogic.isWithinRestrictions(position, target);\r\n    }\r\n    reset() {\r\n        this._cameraControlsEventDistribution.reset();\r\n        this._cameraLogic.reset();\r\n    }\r\n    update(time) {\r\n        if (!this._enabled)\r\n            return { position: gl_matrix_1.vec3.clone(this._position), target: gl_matrix_1.vec3.clone(this._target) };\r\n        // reset all values\r\n        if (this._manualInteraction === true && this._cameraInterpolationManager.active())\r\n            this._cameraInterpolationManager.stop();\r\n        let { position, target } = this._cameraLogic.restrict(this.getPosition(), this.getTarget());\r\n        this._position = gl_matrix_1.vec3.clone(position);\r\n        this._target = gl_matrix_1.vec3.clone(target);\r\n        this._manualInteraction = false;\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        this._nonmanualInteraction = this._cameraInterpolationManager.active();\r\n        this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n        this._cameraLogic.update(time, this._nonmanualInteraction);\r\n        const oldMovement = this._moving;\r\n        const cameraDefinition = {\r\n            position: gl_matrix_1.vec3.clone(this._position),\r\n            target: gl_matrix_1.vec3.clone(this._target)\r\n        };\r\n        this._movingDuration += time;\r\n        this._moving = (this._manualInteraction || this._nonmanualInteraction);\r\n        switch (true) {\r\n            case oldMovement !== this._moving && this._moving === true:\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_START, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n                break;\r\n            case oldMovement !== this._moving && this._moving === false:\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_END, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n                break;\r\n            default:\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_MOVE, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n        }\r\n        if (!this._moving)\r\n            this._movingDuration = 0;\r\n        return cameraDefinition;\r\n    }\r\n    // #endregion Public Methods (10)\r\n    // #region Private Methods (2)\r\n    getPosition() {\r\n        let position = gl_matrix_1.vec3.clone(this._position);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if (this._manualInteractionTransformations.position[i].matrix) {\r\n                    position = gl_matrix_1.vec3.transformMat4(position, position, this._manualInteractionTransformations.position[i].matrix);\r\n                }\r\n                else {\r\n                    position = gl_matrix_1.vec3.add(position, position, this._manualInteractionTransformations.position[i].vector);\r\n                }\r\n            }\r\n        }\r\n        else if (this._nonmanualInteraction) {\r\n            for (let i = this._nonmanualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if (this._nonmanualInteractionTransformations.position[i].matrix) {\r\n                    position = gl_matrix_1.vec3.transformMat4(position, position, this._nonmanualInteractionTransformations.position[i].matrix);\r\n                }\r\n                else {\r\n                    position = gl_matrix_1.vec3.add(position, position, this._nonmanualInteractionTransformations.position[i].vector);\r\n                }\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n    getTarget() {\r\n        let target = gl_matrix_1.vec3.clone(this._target);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if (this._manualInteractionTransformations.target[i].matrix) {\r\n                    target = gl_matrix_1.vec3.transformMat4(target, target, this._manualInteractionTransformations.target[i].matrix);\r\n                }\r\n                else {\r\n                    target = gl_matrix_1.vec3.add(target, target, this._manualInteractionTransformations.target[i].vector);\r\n                }\r\n            }\r\n        }\r\n        else if (this._nonmanualInteraction) {\r\n            for (let i = this._nonmanualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if (this._nonmanualInteractionTransformations.target[i].matrix) {\r\n                    target = gl_matrix_1.vec3.transformMat4(target, target, this._nonmanualInteractionTransformations.target[i].matrix);\r\n                }\r\n                else {\r\n                    target = gl_matrix_1.vec3.add(target, target, this._nonmanualInteractionTransformations.target[i].vector);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\r\nexports.AbstractCameraControls = AbstractCameraControls;\r\n"},"sourceMaps":{"js":{"version":3,"file":"AbstractCameraControls.js","sourceRoot":"","sources":["../../../src/implementation/controls/AbstractCameraControls.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix'\r\nimport { EventEngine, EVENTTYPE } from '@shapediver/viewer.shared.services'\r\n\r\nimport { CAMERA_TYPE } from '../../interfaces/ICameraEngine'\r\nimport { ICamera, ICameraOptions } from '../../interfaces/camera/ICamera'\r\nimport { ICameraControlsUsage } from '../../interfaces/controls/ICameraControlsUsage'\r\nimport { CameraInterpolationManager } from '../interpolation/CameraInterpolationManager'\r\nimport { ICameraControlsEventDistribution } from '../../interfaces/controls/ICameraControlsEventDistribution'\r\nimport { ICameraControlsLogic } from '../../interfaces/controls/ICameraControlsLogic'\r\n\r\nexport class AbstractCameraControls implements ICameraControlsUsage {\r\n    // #region Properties (11)\r\n\r\n    private readonly _cameraInterpolationManager: CameraInterpolationManager;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n\r\n    private _canvas?: HTMLCanvasElement;\r\n    private _manualInteraction: boolean = false;\r\n    private _manualInteractionTransformations: {\r\n        position: {\r\n            matrix?: mat4,\r\n            vector?: vec3\r\n        }[],\r\n        target: {\r\n            matrix?: mat4,\r\n            vector?: vec3\r\n        }[],\r\n    };\r\n    private _moving: boolean = false;\r\n    private _movingDuration: number = 0;\r\n    private _nonmanualInteraction: boolean = false;\r\n    private _nonmanualInteractionTransformations: {\r\n        position: {\r\n            matrix?: mat4,\r\n            vector?: vec3\r\n        }[],\r\n        target: {\r\n            matrix?: mat4,\r\n            vector?: vec3\r\n        }[],\r\n    };\r\n    private _position: vec3 = vec3.create();\r\n    private _target: vec3 = vec3.create();\r\n    private _viewportId?: string;\r\n\r\n    protected _cameraControlsEventDistribution!: ICameraControlsEventDistribution;\r\n    protected _cameraLogic!: ICameraControlsLogic;\r\n\r\n    // #endregion Properties (11)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        private _camera: ICamera,\r\n        private _enabled: boolean,\r\n        type: CAMERA_TYPE\r\n    ) {\r\n        this._cameraInterpolationManager = new CameraInterpolationManager(this._camera, this);\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (9)\r\n\r\n    public assignViewer(viewportId: string, canvas: HTMLCanvasElement) {\r\n        this._canvas = canvas;\r\n        this._viewportId = viewportId;\r\n    }\r\n\r\n    public get cameraControlsEventDistribution(): ICameraControlsEventDistribution {\r\n        return this._cameraControlsEventDistribution;\r\n    }\r\n\r\n    public get canvas(): HTMLCanvasElement | undefined {\r\n        return this._canvas;\r\n    }\r\n\r\n    public set canvas(value: HTMLCanvasElement | undefined) {\r\n        this._canvas = value;\r\n    }\r\n\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        if (!value) {\r\n            this._manualInteraction = false;\r\n            this._manualInteractionTransformations = { position: [], target: [] };\r\n            this._nonmanualInteraction = false;\r\n            this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n\r\n            this._cameraControlsEventDistribution.reset();\r\n            this._cameraLogic.reset();\r\n        }\r\n        this._enabled = value;\r\n    }\r\n\r\n    public get camera(): ICamera {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(value: ICamera) {\r\n        this._camera = value;\r\n    }\r\n\r\n    public get position(): vec3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(value: vec3) {\r\n        this._position = value;\r\n    }\r\n\r\n    public get target(): vec3 {\r\n        return this._target;\r\n    }\r\n\r\n    public set target(value: vec3) {\r\n        this._target = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (9)\r\n\r\n    // #region Public Methods (10)\r\n\r\n    public animate(path: { position: vec3, target: vec3 }[], options: ICameraOptions): Promise<boolean> {\r\n        if(options && options.duration === 0) {\r\n            this._position = path[path.length-1].position;\r\n            this._target = path[path.length-1].target;\r\n            return new Promise<boolean>(resolve => resolve(true));\r\n        }\r\n    \r\n        this._manualInteraction = false;\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        return this._cameraInterpolationManager.interpolate(path, options);\r\n    }\r\n\r\n    public applyPositionVector(vector: vec3, manualInteraction?: boolean | undefined): void {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.position.push({vector});\r\n        } else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.position.push({vector});\r\n        }\r\n    }\r\n\r\n    public applyTargetVector(vector: vec3, manualInteraction?: boolean | undefined): void {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.target.push({vector});\r\n        } else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.target.push({vector});\r\n        }\r\n    }\r\n\r\n    public applyPositionMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.position.push({matrix});\r\n        } else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.position.push({matrix});\r\n        }\r\n    }\r\n\r\n    public applyTargetMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void {\r\n        if (this._manualInteraction || manualInteraction) {\r\n            this._manualInteraction = true;\r\n            this._manualInteractionTransformations.target.push({matrix});\r\n        } else {\r\n            this._nonmanualInteraction = true;\r\n            this._nonmanualInteractionTransformations.target.push({matrix});\r\n        }\r\n    }\r\n\r\n    public applyUpMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void {\r\n        // https://shapediver.atlassian.net/browse/SS-2949\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public getPositionWithManualUpdates(): vec3 {\r\n        let position = vec3.clone(this._position);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if(this._manualInteractionTransformations.position[i].matrix) {\r\n                    position = vec3.transformMat4(position, position, this._manualInteractionTransformations.position[i].matrix!);\r\n                } else {\r\n                    position = vec3.add(position, position, this._manualInteractionTransformations.position[i].vector!);\r\n                }\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n\r\n    public getTargetWithManualUpdates(): vec3 {\r\n        let target = vec3.clone(this._target);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if(this._manualInteractionTransformations.target[i].matrix) {\r\n                    target = vec3.transformMat4(target, target, this._manualInteractionTransformations.target[i].matrix!);\r\n                } else {\r\n                    target = vec3.add(target, target, this._manualInteractionTransformations.target[i].vector!);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    public getPositionWithUpdates(): vec3 {\r\n        return this.getPosition();\r\n    }\r\n\r\n    public getTargetWithUpdates(): vec3 {\r\n        return this.getTarget();\r\n    }\r\n\r\n    public isMoving(): boolean {\r\n        return this._manualInteraction || this._nonmanualInteraction;\r\n    }\r\n\r\n    public isWithinRestrictions(position: vec3, target: vec3): boolean {\r\n        return this._cameraLogic.isWithinRestrictions(position, target);\r\n    }\r\n\r\n    public reset(): void {\r\n        this._cameraControlsEventDistribution.reset();\r\n        this._cameraLogic.reset();\r\n    }\r\n\r\n    public update(time: number): { position: vec3, target: vec3 } {\r\n        if (!this._enabled) \r\n            return { position: vec3.clone(this._position), target: vec3.clone(this._target) };\r\n\r\n        // reset all values\r\n        if(this._manualInteraction === true && this._cameraInterpolationManager.active())\r\n            this._cameraInterpolationManager.stop()\r\n\r\n        let { position, target } = this._cameraLogic.restrict(this.getPosition(), this.getTarget());\r\n        this._position = vec3.clone(position);\r\n        this._target = vec3.clone(target);\r\n\r\n        this._manualInteraction = false;\r\n        this._manualInteractionTransformations = { position: [], target: [] };\r\n        this._nonmanualInteraction = this._cameraInterpolationManager.active();\r\n        this._nonmanualInteractionTransformations = { position: [], target: [] };\r\n\r\n        this._cameraLogic.update(time, this._nonmanualInteraction);\r\n\r\n        const oldMovement = this._moving;\r\n        const cameraDefinition = {\r\n            position: vec3.clone(this._position),\r\n            target: vec3.clone(this._target)\r\n        };\r\n\r\n        this._movingDuration += time;\r\n        this._moving = (this._manualInteraction || this._nonmanualInteraction);\r\n\r\n        switch(true) {\r\n            case oldMovement !== this._moving && this._moving === true:\r\n                this._eventEngine.emitEvent(EVENTTYPE.CAMERA.CAMERA_START, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n                break;\r\n            case oldMovement !== this._moving && this._moving === false:\r\n                this._eventEngine.emitEvent(EVENTTYPE.CAMERA.CAMERA_END, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n                break;\r\n            default: \r\n                this._eventEngine.emitEvent(EVENTTYPE.CAMERA.CAMERA_MOVE, { viewportId: this._viewportId, cameraId: this.camera.id });\r\n        }\r\n        \r\n        if (!this._moving) this._movingDuration = 0;\r\n\r\n        return cameraDefinition;\r\n    }\r\n\r\n    // #endregion Public Methods (10)\r\n\r\n    // #region Private Methods (2)\r\n\r\n    private getPosition(): vec3 {\r\n        let position = vec3.clone(this._position);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if(this._manualInteractionTransformations.position[i].matrix) {\r\n                    position = vec3.transformMat4(position, position, this._manualInteractionTransformations.position[i].matrix!);\r\n                } else {\r\n                    position = vec3.add(position, position, this._manualInteractionTransformations.position[i].vector!);\r\n                }\r\n            }\r\n        } else if (this._nonmanualInteraction) {\r\n            for (let i = this._nonmanualInteractionTransformations.position.length - 1; i >= 0; i--) {\r\n                if(this._nonmanualInteractionTransformations.position[i].matrix) {\r\n                    position = vec3.transformMat4(position, position, this._nonmanualInteractionTransformations.position[i].matrix!);\r\n                } else {\r\n                    position = vec3.add(position, position, this._nonmanualInteractionTransformations.position[i].vector!);\r\n                }\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n\r\n    private getTarget(): vec3 {\r\n        let target = vec3.clone(this._target);\r\n        if (this._manualInteraction) {\r\n            for (let i = this._manualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if(this._manualInteractionTransformations.target[i].matrix) {\r\n                    target = vec3.transformMat4(target, target, this._manualInteractionTransformations.target[i].matrix!);\r\n                } else {\r\n                    target = vec3.add(target, target, this._manualInteractionTransformations.target[i].vector!);\r\n                }\r\n            }\r\n        } else if (this._nonmanualInteraction) {\r\n            for (let i = this._nonmanualInteractionTransformations.target.length - 1; i >= 0; i--) {\r\n                if(this._nonmanualInteractionTransformations.target[i].matrix) {\r\n                    target = vec3.transformMat4(target, target, this._nonmanualInteractionTransformations.target[i].matrix!);\r\n                } else {\r\n                    target = vec3.add(target, target, this._nonmanualInteractionTransformations.target[i].vector!);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    // #endregion Private Methods (2)\r\n}"]}},"error":null,"hash":"5965eb9a9adb0918a8cd09b532cc082c","cacheData":{"env":{}}}