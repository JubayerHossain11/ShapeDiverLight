{"id":"node_modules/@shapediver/viewer.data-engine.tag3d-engine/dist/Tag3dEngine.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js.map","includedInParent":true,"mtime":1706527148975},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\src\\Tag3dEngine.ts","includedInParent":true,"mtime":1706527149137},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\package.json","includedInParent":true,"mtime":1706527148805},{"name":"three","loc":{"line":32,"column":35,"index":1713},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":33,"column":42,"index":1767},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":34,"column":41,"index":1849},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":35,"column":38,"index":1927},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"./three/geometries/TextGeometry","loc":{"line":36,"column":31,"index":1995},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\geometries\\TextGeometry.js"},{"name":"./three/loaders/FontLoader","loc":{"line":37,"column":29,"index":2061},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\loaders\\FontLoader.js"},{"name":"./font","loc":{"line":38,"column":23,"index":2116},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\Tag3dEngine.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\font.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tag3dEngine = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst TextGeometry_1 = require(\"./three/geometries/TextGeometry\");\r\nconst FontLoader_1 = require(\"./three/loaders/FontLoader\");\r\nconst font_1 = require(\"./font\");\r\nclass Tag3dEngine {\r\n    constructor() {\r\n        // #region Properties (6)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        // #endregion Public Methods (1)\r\n    }\r\n    // #endregion Properties (6)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (1)\r\n    /**\r\n     * Load the tag3d content into a scene graph node.\r\n     *\r\n     * @param content the tag3d content\r\n     * @returns the scene graph node\r\n     */\r\n    loadContent(content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._font) {\r\n                this._font = new FontLoader_1.Font(font_1.font);\r\n                this._stateEngine.fontLoaded.resolve(true);\r\n            }\r\n            const node = new viewer_shared_node_tree_1.TreeNode('tag3d');\r\n            if (this._stateEngine.fontLoaded.resolved === false)\r\n                yield this._stateEngine.fontLoaded;\r\n            if (!content)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('Tag3dEngine.loadContent: Invalid content was provided to tag3d engine.');\r\n            if (content.data && Array.isArray(content.data)) {\r\n                for (let i = 0; i < content.data.length; i++) {\r\n                    const tag3dInfo = content.data[i];\r\n                    tag3dInfo.size = tag3dInfo.size ? +tag3dInfo.size : 1;\r\n                    tag3dInfo.text = tag3dInfo.text || '';\r\n                    const tagLines = tag3dInfo.text.split(/\\r\\n|\\r|\\n/g);\r\n                    let lineArray = [];\r\n                    for (let lineIndex = 0; lineIndex < tagLines.length; ++lineIndex) {\r\n                        if (tagLines[lineIndex] === '')\r\n                            continue;\r\n                        // create tag mesh object\r\n                        let tag = new TextGeometry_1.TextGeometry(tagLines[lineIndex], { size: tag3dInfo.size, height: tag3dInfo.size / 10, font: this._font });\r\n                        lineArray.push(tag);\r\n                    }\r\n                    // create temporary object\r\n                    let parentObject = new THREE.Object3D();\r\n                    for (let line of lineArray) {\r\n                        parentObject.add(new THREE.Mesh(line, new THREE.MeshPhongMaterial()));\r\n                    }\r\n                    // align lines\r\n                    let bb, extentsX, extentsY, lineHeight = 0;\r\n                    {\r\n                        lineHeight = 0;\r\n                        for (let child of parentObject.children) {\r\n                            bb = new THREE.Box3().setFromObject(child);\r\n                            extentsY = bb.max.y - bb.min.y;\r\n                            lineHeight = Math.max(lineHeight, extentsY);\r\n                        }\r\n                    }\r\n                    lineHeight *= 1.15;\r\n                    lineArray.forEach((line, i) => {\r\n                        line.translate(0, (-i - 1) * lineHeight, 0);\r\n                    });\r\n                    // justification\r\n                    bb = new THREE.Box3().setFromObject(parentObject);\r\n                    extentsX = bb.max.x - bb.min.x;\r\n                    extentsY = bb.max.y - bb.min.y;\r\n                    var tagJustTranslation = new THREE.Vector3(0, 0, 0);\r\n                    switch (tag3dInfo.justification) {\r\n                        case 'TL':\r\n                            break;\r\n                        case 'TC':\r\n                            tagJustTranslation.x = -extentsX * 0.5;\r\n                            break;\r\n                        case 'TR':\r\n                            tagJustTranslation.x = -extentsX;\r\n                            break;\r\n                        case 'ML':\r\n                            tagJustTranslation.y = extentsY * 0.5;\r\n                            break;\r\n                        case 'MC':\r\n                            tagJustTranslation.x = -extentsX * 0.5;\r\n                            tagJustTranslation.y = extentsY * 0.5;\r\n                            break;\r\n                        case 'MR':\r\n                            tagJustTranslation.x = -extentsX;\r\n                            tagJustTranslation.y = extentsY * 0.5;\r\n                            break;\r\n                        case 'BL':\r\n                            tagJustTranslation.y = extentsY;\r\n                            break;\r\n                        case 'BC':\r\n                            tagJustTranslation.x = -extentsX * 0.5;\r\n                            tagJustTranslation.y = extentsY;\r\n                            break;\r\n                        case 'BR':\r\n                            tagJustTranslation.x = -extentsX;\r\n                            tagJustTranslation.y = extentsY;\r\n                            break;\r\n                    }\r\n                    for (let line of lineArray) {\r\n                        line.translate(tagJustTranslation.x, tagJustTranslation.y, tagJustTranslation.z);\r\n                    }\r\n                    // rotation\r\n                    if (tag3dInfo.location.hasOwnProperty('xAxis')) {\r\n                        var rotMatrix = new THREE.Matrix4();\r\n                        rotMatrix.set(tag3dInfo.location.xAxis.X, tag3dInfo.location.yAxis.X, tag3dInfo.location.normal.X, 0, tag3dInfo.location.xAxis.Y, tag3dInfo.location.yAxis.Y, tag3dInfo.location.normal.Y, 0, tag3dInfo.location.xAxis.Z, tag3dInfo.location.yAxis.Z, tag3dInfo.location.normal.Z, 0, 0, 0, 0, 1);\r\n                        for (let line of lineArray) {\r\n                            line.applyMatrix4(rotMatrix);\r\n                            line.translate(tag3dInfo.location.origin.X, tag3dInfo.location.origin.Y, tag3dInfo.location.origin.Z);\r\n                        }\r\n                    }\r\n                    for (let line of lineArray) {\r\n                        const attributes = {};\r\n                        for (let attribute in line.attributes) {\r\n                            let attributeName = attribute.toUpperCase();\r\n                            if (/\\d/.test(attributeName) && !attributeName.includes('_')) {\r\n                                const index = attributeName.search(/\\d/);\r\n                                attributeName = attributeName.substring(0, index) + '_' + attributeName.substring(index, attributeName.length);\r\n                            }\r\n                            else if (attributeName === 'TEXCOORD' || attributeName === 'COLOR' || attributeName === 'JOINTS' || attributeName === 'WEIGHTS') {\r\n                                attributeName += '_0';\r\n                            }\r\n                            else if (attributeName === 'UV') {\r\n                                attributeName = 'TEXCOORD_0';\r\n                            }\r\n                            attributes[attributeName] = new viewer_shared_types_1.AttributeData(line.attributes[attribute].array, line.attributes[attribute].itemSize, 0, 0, 0, false, line.attributes[attribute].array.length / line.attributes[attribute].itemSize);\r\n                        }\r\n                        const child = new viewer_shared_node_tree_1.TreeNode('tag3d_' + line);\r\n                        child.data.push(new viewer_shared_types_1.GeometryData(new viewer_shared_types_1.PrimitiveData(attributes, null), viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLES, new viewer_shared_types_1.MaterialStandardData({ color: tag3dInfo.color, metalness: 0, roughness: 1 })));\r\n                        node.children.push(child);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('Tag3dEngine.loadContent: No tag3d data was provided to tag3d engine.');\r\n            }\r\n            return node;\r\n        });\r\n    }\r\n}\r\nexports.Tag3dEngine = Tag3dEngine;\r\n"},"sourceMaps":{"js":{"version":3,"file":"Tag3dEngine.js","sourceRoot":"","sources":["../src/Tag3dEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport { ITreeNode, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { HttpClient, Logger, Converter, StateEngine, ShapeDiverViewerDataProcessingError } from '@shapediver/viewer.shared.services'\r\nimport { AttributeData, GeometryData, MaterialStandardData, PrimitiveData, PRIMITIVE_MODE } from '@shapediver/viewer.shared.types'\r\nimport { ShapeDiverResponseOutputContent } from '@shapediver/sdk.geometry-api-sdk-v2'\r\nimport { ITag3D } from '@shapediver/viewer.data-engine.shared-types'\r\nimport { TextGeometry } from './three/geometries/TextGeometry'\r\nimport { Font } from './three/loaders/FontLoader';\r\nimport { font } from './font'\r\n\r\nexport class Tag3dEngine {\r\n    // #region Properties (6)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n\r\n    private static _instance: Tag3dEngine;\r\n\r\n    private _font!: Font;\r\n\r\n    // #endregion Properties (6)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    /**\r\n     * Load the tag3d content into a scene graph node.\r\n     * \r\n     * @param content the tag3d content\r\n     * @returns the scene graph node \r\n     */\r\n    public async loadContent(content: ShapeDiverResponseOutputContent): Promise<ITreeNode> {\r\n        if(!this._font) {\r\n            this._font = new Font(font);\r\n            this._stateEngine.fontLoaded.resolve(true);\r\n        }\r\n\r\n        const node = new TreeNode('tag3d');\r\n\r\n        if(this._stateEngine.fontLoaded.resolved === false)\r\n            await this._stateEngine.fontLoaded;\r\n\r\n        if (!content) \r\n            throw new ShapeDiverViewerDataProcessingError('Tag3dEngine.loadContent: Invalid content was provided to tag3d engine.');\r\n\r\n        if (content.data && Array.isArray(content.data)) {\r\n            for (let i = 0; i < content.data.length; i++) {\r\n                const tag3dInfo: ITag3D = content.data[i];\r\n                tag3dInfo.size = tag3dInfo.size ? +tag3dInfo.size : 1;\r\n                tag3dInfo.text = tag3dInfo.text || '';\r\n\r\n                const tagLines = tag3dInfo.text.split(/\\r\\n|\\r|\\n/g);\r\n                let lineArray = [];\r\n\r\n                for (let lineIndex = 0; lineIndex < tagLines.length; ++lineIndex) {\r\n                    if(tagLines[lineIndex] === '') continue;\r\n                    // create tag mesh object\r\n                    let tag = new TextGeometry(tagLines[lineIndex], { size: tag3dInfo.size, height: tag3dInfo.size / 10, font: this._font });\r\n                    lineArray.push(tag);\r\n                }\r\n\r\n                // create temporary object\r\n                let parentObject = new THREE.Object3D();\r\n                for (let line of lineArray) {\r\n                    parentObject.add(new THREE.Mesh(line, new THREE.MeshPhongMaterial()));\r\n                }\r\n\r\n                // align lines\r\n                let bb, extentsX, extentsY, lineHeight = 0;\r\n                {\r\n                    lineHeight = 0;\r\n                    for (let child of parentObject.children) {\r\n                        bb = new THREE.Box3().setFromObject(child);\r\n                        extentsY = bb.max.y - bb.min.y;\r\n                        lineHeight = Math.max(lineHeight, extentsY);\r\n                    }\r\n                }\r\n                lineHeight *= 1.15;\r\n\r\n                lineArray.forEach((line, i) => {\r\n                    line.translate(0, (-i - 1) * lineHeight, 0);\r\n                });\r\n\r\n                // justification\r\n                bb = new THREE.Box3().setFromObject(parentObject);\r\n\r\n                extentsX = bb.max.x - bb.min.x;\r\n                extentsY = bb.max.y - bb.min.y;\r\n                var tagJustTranslation = new THREE.Vector3(0, 0, 0);\r\n\r\n                switch (tag3dInfo.justification) {\r\n                    case 'TL':\r\n                        break;\r\n                    case 'TC':\r\n                        tagJustTranslation.x = -extentsX * 0.5;\r\n                        break;\r\n                    case 'TR':\r\n                        tagJustTranslation.x = -extentsX;\r\n                        break;\r\n                    case 'ML':\r\n                        tagJustTranslation.y = extentsY * 0.5;\r\n                        break;\r\n                    case 'MC':\r\n                        tagJustTranslation.x = -extentsX * 0.5;\r\n                        tagJustTranslation.y = extentsY * 0.5;\r\n                        break;\r\n                    case 'MR':\r\n                        tagJustTranslation.x = -extentsX;\r\n                        tagJustTranslation.y = extentsY * 0.5;\r\n                        break;\r\n                    case 'BL':\r\n                        tagJustTranslation.y = extentsY;\r\n                        break;\r\n                    case 'BC':\r\n                        tagJustTranslation.x = -extentsX * 0.5;\r\n                        tagJustTranslation.y = extentsY;\r\n                        break;\r\n                    case 'BR':\r\n                        tagJustTranslation.x = -extentsX;\r\n                        tagJustTranslation.y = extentsY;\r\n                        break;\r\n                }\r\n\r\n                for (let line of lineArray) {\r\n                    line.translate(tagJustTranslation.x, tagJustTranslation.y, tagJustTranslation.z);\r\n                }\r\n\r\n                // rotation\r\n                if (tag3dInfo.location.hasOwnProperty('xAxis')) {\r\n                    var rotMatrix = new THREE.Matrix4();\r\n                    rotMatrix.set(tag3dInfo.location.xAxis.X, tag3dInfo.location.yAxis.X, tag3dInfo.location.normal.X, 0, tag3dInfo.location.xAxis.Y, tag3dInfo.location.yAxis.Y, tag3dInfo.location.normal.Y, 0, tag3dInfo.location.xAxis.Z, tag3dInfo.location.yAxis.Z, tag3dInfo.location.normal.Z, 0, 0, 0, 0, 1);\r\n                    for (let line of lineArray) {\r\n                        line.applyMatrix4(rotMatrix);\r\n                        line.translate(tag3dInfo.location.origin.X, tag3dInfo.location.origin.Y, tag3dInfo.location.origin.Z);\r\n                    }\r\n                }\r\n\r\n                for (let line of lineArray) {\r\n                    const attributes: {\r\n                        [key: string]: AttributeData\r\n                    } = {};\r\n                    for (let attribute in line.attributes) {\r\n                        let attributeName = attribute.toUpperCase();\r\n                        if(/\\d/.test(attributeName) && !attributeName.includes('_')) {\r\n                            const index = attributeName.search(/\\d/)\r\n                            attributeName = attributeName.substring(0, index) + '_' + attributeName.substring(index, attributeName.length);\r\n                        } else if(attributeName === 'TEXCOORD' || attributeName === 'COLOR' || attributeName === 'JOINTS' || attributeName === 'WEIGHTS') {\r\n                            attributeName += '_0';\r\n                        } else if (attributeName === 'UV') {\r\n                            attributeName = 'TEXCOORD_0';\r\n                        }\r\n                        attributes[attributeName] = new AttributeData(<Float32Array>(<THREE.BufferAttribute>line.attributes[attribute]).array, line.attributes[attribute].itemSize, 0, 0, 0, false, (<Float32Array>(<THREE.BufferAttribute>line.attributes[attribute]).array).length / line.attributes[attribute].itemSize)\r\n                    }\r\n                    const child = new TreeNode('tag3d_'+line)\r\n                    child.data.push(new GeometryData(new PrimitiveData(attributes, null), PRIMITIVE_MODE.TRIANGLES, new MaterialStandardData({color: tag3dInfo.color, metalness: 0, roughness: 1})));\r\n                    node.children.push(child);\r\n                }   \r\n            }\r\n        } else {\r\n            throw new ShapeDiverViewerDataProcessingError('Tag3dEngine.loadContent: No tag3d data was provided to tag3d engine.');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}"]}},"error":null,"hash":"7e6a5600b8111f581e69e4d0ada989ea","cacheData":{"env":{}}}