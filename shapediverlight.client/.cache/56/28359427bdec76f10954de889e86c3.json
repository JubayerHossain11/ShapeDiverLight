{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/materials/GemMaterial.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\GemMaterial.js.map","includedInParent":true,"mtime":1706527153233},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\materials\\GemMaterial.ts","includedInParent":true,"mtime":1706527154057},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":24,"column":24,"index":1059},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\GemMaterial.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"../shaders/gem","loc":{"line":25,"column":22,"index":1092},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\materials\\GemMaterial.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\shaders\\gem.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GemMaterial = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst three_1 = require(\"three\");\r\nconst gem_1 = require(\"../shaders/gem\");\r\nclass GemMaterial extends three_1.MeshPhysicalMaterial {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(params) {\r\n        super();\r\n        this.refractionIndex = 2.4;\r\n        this.impurityMap = null;\r\n        this.impurityScale = 1.0;\r\n        this.colorTransferBegin = new THREE.Color(0xffffff);\r\n        this.colorTransferEnd = new THREE.Color(0xffffff);\r\n        this.center = new THREE.Vector3(0, 0, 0);\r\n        this.tracingDepth = 5;\r\n        this.radius = 1.0;\r\n        this.sphericalNormalMap = null;\r\n        this.gamma = 1.0;\r\n        this.contrast = 1.0;\r\n        this.brightness = 0.0;\r\n        this.dispersion = 0.0;\r\n        this.tracingOpacity = 0.0;\r\n        this.isGemMaterial = true;\r\n        const uniforms = {\r\n            refractionIndex: { value: 2.4 },\r\n            impurityMap: { value: null },\r\n            impurityScale: { value: 1.0 },\r\n            colorTransferBegin: { value: new THREE.Color(0xffffff) },\r\n            colorTransferEnd: { value: new THREE.Color(0xffffff) },\r\n            center: { value: new THREE.Vector3(0, 0, 0) },\r\n            tracingDepth: { value: 5 },\r\n            radius: { value: 1.0 },\r\n            sphericalNormalMap: { value: null },\r\n            gamma: { value: 1.0 },\r\n            contrast: { value: 1.0 },\r\n            brightness: { value: 0.0 },\r\n            dispersion: { value: 0.0 },\r\n            tracingOpacity: { value: 0.0 }\r\n        };\r\n        this._extraUniforms = uniforms;\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.vertexShader = gem_1.vert;\r\n            shader.fragmentShader = gem_1.frag;\r\n        };\r\n        Object.defineProperties(this, {\r\n            tracingDepth: {\r\n                get: function () {\r\n                    return uniforms.tracingDepth.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingDepth.value = v;\r\n                    if (v) {\r\n                        this.defines.TRACING_DEPTH = Math.floor(v);\r\n                    }\r\n                    else {\r\n                        delete this.defines.TRACING_DEPTH;\r\n                    }\r\n                }\r\n            },\r\n            refractionIndex: {\r\n                get: function () {\r\n                    return uniforms.refractionIndex.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.refractionIndex.value = v;\r\n                }\r\n            },\r\n            impurityMap: {\r\n                get: function () {\r\n                    return uniforms.impurityMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_IMPURITYMAP = '';\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_IMPURITYMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            impurityScale: {\r\n                get: function () {\r\n                    return uniforms.impurityScale.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityScale.value = v;\r\n                }\r\n            },\r\n            colorTransferBegin: {\r\n                get: function () {\r\n                    return uniforms.colorTransferBegin.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferBegin.value = v;\r\n                }\r\n            },\r\n            colorTransferEnd: {\r\n                get: function () {\r\n                    return uniforms.colorTransferEnd.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferEnd.value = v;\r\n                }\r\n            },\r\n            center: {\r\n                get: function () {\r\n                    return uniforms.center.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.center.value = v;\r\n                }\r\n            },\r\n            radius: {\r\n                get: function () {\r\n                    return uniforms.radius.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.radius.value = v;\r\n                }\r\n            },\r\n            sphericalNormalMap: {\r\n                get: function () {\r\n                    return uniforms.sphericalNormalMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sphericalNormalMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            gamma: {\r\n                get: function () {\r\n                    return uniforms.gamma.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.gamma.value = v;\r\n                }\r\n            },\r\n            contrast: {\r\n                get: function () {\r\n                    return uniforms.contrast.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.contrast.value = v;\r\n                }\r\n            },\r\n            brightness: {\r\n                get: function () {\r\n                    return uniforms.brightness.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.brightness.value = v;\r\n                }\r\n            },\r\n            dispersion: {\r\n                get: function () {\r\n                    return uniforms.dispersion.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.dispersion.value = v;\r\n                    if (v !== 0) {\r\n                        this.defines.DISPERSION = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.DISPERSION;\r\n                    }\r\n                }\r\n            },\r\n            tracingOpacity: {\r\n                get: function () {\r\n                    return uniforms.tracingOpacity.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingOpacity.value = v;\r\n                }\r\n            }\r\n        });\r\n        this.refractionIndex = params.refractionIndex || 2.4;\r\n        this.impurityMap = params.impurityMap || null;\r\n        this.impurityScale = params.impurityScale || 1;\r\n        this.colorTransferBegin.copy(params.colorTransferBegin || new THREE.Color(0xffffff));\r\n        this.colorTransferEnd.copy(params.colorTransferEnd || new THREE.Color(0xffffff));\r\n        this.center.copy(params.center || new THREE.Vector3(0, 0, 0));\r\n        this.tracingDepth = params.tracingDepth || 5;\r\n        this.radius = params.radius || 1;\r\n        this.sphericalNormalMap = params.sphericalNormalMap || null;\r\n        this.gamma = params.gamma || 1;\r\n        this.contrast = params.contrast || 1;\r\n        this.brightness = params.brightness || 0;\r\n        this.dispersion = params.dispersion || 0;\r\n        this.tracingOpacity = params.tracingOpacity || 0;\r\n        this.setValues(params);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    copy(source) {\r\n        super.copy(source);\r\n        this.refractionIndex = source.refractionIndex;\r\n        this.impurityMap = source.impurityMap;\r\n        this.impurityScale = source.impurityScale;\r\n        this.colorTransferBegin.copy(source.colorTransferBegin);\r\n        this.colorTransferEnd.copy(source.colorTransferEnd);\r\n        this.center.copy(source.center);\r\n        this.tracingDepth = source.tracingDepth;\r\n        this.radius = source.radius;\r\n        this.sphericalNormalMap = source.sphericalNormalMap;\r\n        this.gamma = source.gamma;\r\n        this.contrast = source.contrast;\r\n        this.brightness = source.brightness;\r\n        this.dispersion = source.dispersion;\r\n        this.tracingOpacity = source.tracingOpacity;\r\n        return this;\r\n    }\r\n}\r\nexports.GemMaterial = GemMaterial;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GemMaterial.js","sourceRoot":"","sources":["../../src/materials/GemMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\r\nimport { MeshPhysicalMaterial, MeshPhysicalMaterialParameters } from 'three';\r\nimport { frag, vert } from '../shaders/gem';\r\n\r\nexport interface GemMaterialParameters extends MeshPhysicalMaterialParameters {\r\n    // #region Properties (4)\r\n\r\n    refractionIndex?: number | undefined;\r\n    impurityMap?: THREE.Texture | null | undefined;\r\n    impurityScale?: number | undefined;\r\n    colorTransferBegin?: THREE.Color | undefined;\r\n    colorTransferEnd?: THREE.Color | undefined;\r\n    center?: THREE.Vector3 | undefined;\r\n    radius?: number | undefined;\r\n    sphericalNormalMap?: THREE.CubeTexture | null | undefined;\r\n    gamma?: number | undefined;\r\n    contrast?: number | undefined;\r\n    brightness?: number | undefined;\r\n    dispersion?: number | undefined;\r\n    tracingDepth?: number | undefined;\r\n    tracingOpacity?: number | undefined;\r\n\r\n    // #endregion Properties (4)\r\n}\r\n\r\nexport class GemMaterial extends MeshPhysicalMaterial {\r\n    // #region Properties (1)\r\n\r\n    public isGemMaterial: boolean;\r\n    \r\n    public refractionIndex: number = 2.4;\r\n    public impurityMap: THREE.Texture | null = null;\r\n    public impurityScale: number = 1.0;\r\n    public colorTransferBegin: THREE.Color = new THREE.Color(0xffffff);\r\n    public colorTransferEnd: THREE.Color = new THREE.Color(0xffffff);\r\n    public center: THREE.Vector3 = new THREE.Vector3(0,0,0);\r\n    public tracingDepth: number = 5;\r\n    public radius: number = 1.0;\r\n    public sphericalNormalMap: THREE.CubeTexture | null = null;\r\n    public gamma: number = 1.0;\r\n    public contrast: number = 1.0;\r\n    public brightness: number = 0.0;\r\n    public dispersion: number = 0.0;\r\n    public tracingOpacity: number = 0.0;\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(params: GemMaterialParameters) {\r\n        super();\r\n\r\n        this.isGemMaterial = true;\r\n\r\n        const uniforms: { [key: string]: { value: any } } = {\r\n            refractionIndex: { value: 2.4 },\r\n            impurityMap: { value: null },\r\n            impurityScale: { value: 1.0 },\r\n            colorTransferBegin: { value: new THREE.Color(0xffffff) },\r\n            colorTransferEnd: { value: new THREE.Color(0xffffff) },\r\n            center: { value: new THREE.Vector3(0,0,0) },\r\n            tracingDepth: { value: 5 },\r\n            radius: { value: 1.0 },\r\n            sphericalNormalMap: { value: null },\r\n            gamma: { value: 1.0 },\r\n            contrast: { value: 1.0 },\r\n            brightness: { value: 0.0 },\r\n            dispersion: { value: 0.0 },\r\n            tracingOpacity: { value: 0.0 }\r\n        };\r\n\r\n        (<any>this)._extraUniforms = uniforms;\r\n\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.vertexShader = vert;\r\n            shader.fragmentShader = frag;\r\n        };\r\n\r\n        Object.defineProperties(this, {\r\n            tracingDepth: {\r\n                get: function () {\r\n                    return uniforms.tracingDepth.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingDepth.value = v;\r\n\r\n                    if (v) {\r\n                        this.defines.TRACING_DEPTH = Math.floor(v);\r\n                    } else {\r\n                        delete this.defines.TRACING_DEPTH;\r\n                    }\r\n                }\r\n            },\r\n            refractionIndex: {\r\n                get: function () {\r\n                    return uniforms.refractionIndex.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.refractionIndex.value = v;\r\n                }\r\n            },\r\n            impurityMap: {\r\n                get: function () {\r\n                    return uniforms.impurityMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityMap.value = v;\r\n\r\n                    if (v) {\r\n                        this.defines.USE_IMPURITYMAP = '';\r\n                        this.defines.USE_UV = '';\r\n                    } else {\r\n                        delete this.defines.USE_IMPURITYMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            impurityScale: {\r\n                get: function () {\r\n                    return uniforms.impurityScale.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityScale.value = v;\r\n                }\r\n            },\r\n            colorTransferBegin: {\r\n                get: function () {\r\n                    return uniforms.colorTransferBegin.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferBegin.value = v;\r\n                }\r\n            },\r\n            colorTransferEnd: {\r\n                get: function () {\r\n                    return uniforms.colorTransferEnd.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferEnd.value = v;\r\n                }\r\n            },\r\n            center: {\r\n                get: function () {\r\n                    return uniforms.center.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.center.value = v;\r\n                }\r\n            },\r\n            radius: {\r\n                get: function () {\r\n                    return uniforms.radius.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.radius.value = v;\r\n                }\r\n            },\r\n            sphericalNormalMap: {\r\n                get: function () {\r\n                    return uniforms.sphericalNormalMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sphericalNormalMap.value = v;\r\n\r\n                    if (v) {\r\n                        this.defines.USE_UV = '';\r\n                    } else {\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            gamma: {\r\n                get: function () {\r\n                    return uniforms.gamma.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.gamma.value = v;\r\n                }\r\n            },\r\n            contrast: {\r\n                get: function () {\r\n                    return uniforms.contrast.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.contrast.value = v;\r\n                }\r\n            },\r\n            brightness: {\r\n                get: function () {\r\n                    return uniforms.brightness.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.brightness.value = v;\r\n                }\r\n            },\r\n            dispersion: {\r\n                get: function () {\r\n                    return uniforms.dispersion.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.dispersion.value = v;\r\n                    if (v !== 0) {\r\n                        this.defines.DISPERSION = '';\r\n                    } else {\r\n                        delete this.defines.DISPERSION;\r\n                    }\r\n                }\r\n            },\r\n            tracingOpacity: {\r\n                get: function () {\r\n                    return uniforms.tracingOpacity.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingOpacity.value = v;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.refractionIndex = params.refractionIndex || 2.4;\r\n        this.impurityMap = params.impurityMap || null;\r\n        this.impurityScale = params.impurityScale || 1;\r\n        this.colorTransferBegin.copy(params.colorTransferBegin || new THREE.Color(0xffffff));\r\n        this.colorTransferEnd.copy(params.colorTransferEnd || new THREE.Color(0xffffff));\r\n        this.center.copy(params.center || new THREE.Vector3(0,0,0));\r\n        this.tracingDepth = params.tracingDepth || 5;\r\n        this.radius = params.radius || 1;\r\n        this.sphericalNormalMap = params.sphericalNormalMap || null;\r\n        this.gamma = params.gamma || 1;\r\n        this.contrast = params.contrast || 1;\r\n        this.brightness = params.brightness || 0;\r\n        this.dispersion = params.dispersion || 0;\r\n        this.tracingOpacity = params.tracingOpacity || 0;\r\n\r\n        this.setValues(params);\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    public copy(source: GemMaterial) {\r\n        super.copy(source);\r\n\r\n        this.refractionIndex = (<any>source).refractionIndex;\r\n        this.impurityMap = (<any>source).impurityMap;\r\n        this.impurityScale = (<any>source).impurityScale;\r\n        this.colorTransferBegin.copy((<any>source).colorTransferBegin);\r\n        this.colorTransferEnd.copy((<any>source).colorTransferEnd);\r\n        this.center.copy((<any>source).center);\r\n        this.tracingDepth = (<any>source).tracingDepth;\r\n        this.radius = (<any>source).radius;\r\n        this.sphericalNormalMap = (<any>source).sphericalNormalMap;\r\n        this.gamma = (<any>source).gamma;\r\n        this.contrast = (<any>source).contrast;\r\n        this.brightness = (<any>source).brightness;\r\n        this.dispersion = (<any>source).dispersion;\r\n        this.tracingOpacity = (<any>source).tracingOpacity;\r\n        \r\n        return this;\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}\r\n"]}},"error":null,"hash":"a75727e10597e34cb7ed26dcbc08341b","cacheData":{"env":{}}}