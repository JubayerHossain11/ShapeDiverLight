{"id":"node_modules/@shapediver/viewer.data-engine.gltf-converter/dist/GLTFConverter.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js.map","includedInParent":true,"mtime":1706527152282},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\src\\GLTFConverter.ts","includedInParent":true,"mtime":1706527152346},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\package.json","includedInParent":true,"mtime":1706527152240},{"name":"@shapediver/viewer.shared.build-data","loc":{"line":13,"column":43,"index":871},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.build-data\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":14,"column":42,"index":955},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":15,"column":41,"index":1037},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.data-engine.shared-types","loc":{"line":16,"column":50,"index":1127},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.shared-types\\dist\\index.js"},{"name":"gl-matrix","loc":{"line":17,"column":28,"index":1204},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":18,"column":38,"index":1257},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"@shapediver/viewer.utils.texture-unifier","loc":{"line":19,"column":47,"index":1341},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\GLTFConverter.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.utils.texture-unifier\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GLTFConverter = exports.GLTF_EXTENSIONS = void 0;\r\nconst viewer_shared_build_data_1 = require(\"@shapediver/viewer.shared.build-data\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_data_engine_shared_types_1 = require(\"@shapediver/viewer.data-engine.shared-types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_utils_texture_unifier_1 = require(\"@shapediver/viewer.utils.texture-unifier\");\r\nvar GLTF_EXTENSIONS;\r\n(function (GLTF_EXTENSIONS) {\r\n    GLTF_EXTENSIONS[\"KHR_BINARY_GLTF\"] = \"KHR_binary_glTF\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_PBRSPECULARGLOSSINESS\"] = \"KHR_materials_pbrSpecularGlossiness\";\r\n    GLTF_EXTENSIONS[\"KHR_MATERIALS_UNLIT\"] = \"KHR_materials_unlit\";\r\n})(GLTF_EXTENSIONS = exports.GLTF_EXTENSIONS || (exports.GLTF_EXTENSIONS = {}));\r\nclass GLTFConverter {\r\n    constructor() {\r\n        // #region Properties (15)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._globalTransformationInverse = gl_matrix_1.mat4.fromValues(1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1);\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._progressUpdateLimit = 500;\r\n        this._animations = [];\r\n        this._buffers = [];\r\n        this._byteOffset = 0;\r\n        this._content = {\r\n            asset: {\r\n                copyright: '2023 (c) ShapeDiver',\r\n                generator: 'ShapeDiverViewer@' + viewer_shared_build_data_1.build_data.build_version,\r\n                version: '2.0',\r\n                extensions: {}\r\n            },\r\n        };\r\n        this._convertForAR = false;\r\n        this._eventId = '';\r\n        this._extensionsRequired = [];\r\n        this._extensionsUsed = [];\r\n        this._imageCache = {};\r\n        this._nodes = [];\r\n        this._numberOfNodes = 0;\r\n        this._progressTimer = 0;\r\n        this._promises = [];\r\n        this._materialCache = {};\r\n        this._meshCache = {};\r\n        // #endregion Private Methods (17)\r\n    }\r\n    // #endregion Properties (15)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Methods (1)\r\n    convert(node, convertForAR = false, viewport) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._eventId = this._uuidGenerator.create();\r\n            const eventStart = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 0, status: 'Starting glTF conversion.' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n            this._numberOfNodes = 0;\r\n            node.traverse(() => this._numberOfNodes++);\r\n            this._progressTimer = performance.now();\r\n            this.reset();\r\n            this._convertForAR = convertForAR;\r\n            this._viewport = viewport;\r\n            const originalParent = node.parent;\r\n            const sceneNode = new viewer_shared_node_tree_1.TreeNode('ShapeDiverRootNode');\r\n            sceneNode.addChild(node);\r\n            const sceneDef = {\r\n                name: sceneNode.name,\r\n                nodes: []\r\n            };\r\n            const globalTransformationInverseId = this._uuidGenerator.create();\r\n            node.addTransformation({\r\n                id: globalTransformationInverseId,\r\n                matrix: this._globalTransformationInverse,\r\n            });\r\n            const translationMatrixId = this._uuidGenerator.create();\r\n            if (convertForAR) {\r\n                // add translation matrix to scene tree node\r\n                const center = node.boundingBox.boundingSphere.center;\r\n                let translationMatrix = gl_matrix_1.mat4.fromTranslation(gl_matrix_1.mat4.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(center[0], center[1], center[2]), gl_matrix_1.vec3.fromValues(-1, -1, -1)));\r\n                node.addTransformation({ id: translationMatrixId, matrix: translationMatrix });\r\n            }\r\n            if (this._viewport) {\r\n                if (this._viewport && node.excludeViewports.includes(this._viewport) === false && (node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._viewport)) === false) {\r\n                    const nodeId = yield this.convertNode(node);\r\n                    if (nodeId !== -1)\r\n                        (_a = sceneDef.nodes) === null || _a === void 0 ? void 0 : _a.push(nodeId);\r\n                }\r\n            }\r\n            else {\r\n                const nodeId = yield this.convertNode(node);\r\n                if (nodeId !== -1)\r\n                    (_b = sceneDef.nodes) === null || _b === void 0 ? void 0 : _b.push(nodeId);\r\n            }\r\n            for (let i = 0; i < node.transformations.length; i++)\r\n                if (node.transformations[i].id === globalTransformationInverseId)\r\n                    node.removeTransformation(node.transformations[i]);\r\n            if (convertForAR) {\r\n                // remove translation the matrix\r\n                for (let i = 0; i < node.transformations.length; i++)\r\n                    if (node.transformations[i].id === translationMatrixId)\r\n                        node.removeTransformation(node.transformations[i]);\r\n            }\r\n            this._content.scenes = [];\r\n            this._content.scenes.push(sceneDef);\r\n            this.convertAnimations();\r\n            // Declare extensions.\r\n            if (this._extensionsUsed.length > 0)\r\n                this._content.extensionsUsed = this._extensionsUsed;\r\n            if (this._extensionsRequired.length > 0)\r\n                this._content.extensionsRequired = this._extensionsRequired;\r\n            let promisesLength = 0;\r\n            while (promisesLength !== this._promises.length) {\r\n                promisesLength = this._promises.length;\r\n                yield Promise.all(this._promises);\r\n                yield new Promise(resolve => setTimeout(resolve, 0));\r\n            }\r\n            const eventProgressImagePromises = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 0.75, status: 'GlTF images resolved.' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventProgressImagePromises);\r\n            // Merge buffers.\r\n            const blob = new Blob(this._buffers, { type: 'application/octet-stream' });\r\n            if (originalParent)\r\n                originalParent.addChild(node);\r\n            // Update byte length of the single buffer.\r\n            if (this._content.buffers && this._content.buffers.length > 0)\r\n                this._content.buffers[0].byteLength = blob.size;\r\n            return new Promise((resolve, reject) => {\r\n                // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\r\n                try {\r\n                    const reader = new window.FileReader();\r\n                    reader.readAsArrayBuffer(blob);\r\n                    reader.onloadend = () => {\r\n                        // Binary chunk.\r\n                        const binaryChunk = this.getPaddedArrayBuffer(reader.result);\r\n                        const binaryChunkPrefix = new DataView(new ArrayBuffer(8));\r\n                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\r\n                        binaryChunkPrefix.setUint32(4, 0x004E4942, true);\r\n                        // JSON chunk.\r\n                        const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(this._content)), 0x20);\r\n                        const jsonChunkPrefix = new DataView(new ArrayBuffer(8));\r\n                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\r\n                        jsonChunkPrefix.setUint32(4, 0x4E4F534A, true);\r\n                        // GLB header.\r\n                        const header = new ArrayBuffer(12);\r\n                        const headerView = new DataView(header);\r\n                        headerView.setUint32(0, 0x46546C67, true);\r\n                        headerView.setUint32(4, 2, true);\r\n                        const totalByteLength = 12\r\n                            + jsonChunkPrefix.byteLength + jsonChunk.byteLength\r\n                            + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\r\n                        headerView.setUint32(8, totalByteLength, true);\r\n                        const glbBlob = new Blob([\r\n                            header,\r\n                            jsonChunkPrefix,\r\n                            jsonChunk,\r\n                            binaryChunkPrefix,\r\n                            binaryChunk\r\n                        ], { type: 'application/octet-stream' });\r\n                        const glbReader = new window.FileReader();\r\n                        glbReader.readAsArrayBuffer(glbBlob);\r\n                        glbReader.onloadend = () => {\r\n                            const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 1, status: 'GlTF creation complete.' };\r\n                            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n                            resolve(glbReader.result);\r\n                        };\r\n                        glbReader.onerror = reject;\r\n                    };\r\n                    reader.onerror = reject;\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // #endregion Public Methods (1)\r\n    // #region Private Methods (17)\r\n    convertAccessor(data) {\r\n        if (!this._content.accessors)\r\n            this._content.accessors = [];\r\n        const bufferView = this.convertBufferView(data);\r\n        const minMax = this.getMinMax(data);\r\n        const accessorDef = {\r\n            bufferView: bufferView,\r\n            byteOffset: 0,\r\n            componentType: this.getComponentType(data.array),\r\n            normalized: data.normalized,\r\n            count: +data.count,\r\n            max: minMax.max,\r\n            min: minMax.min,\r\n            type: this.getType(data.itemSize),\r\n            // sparse: { // TODO\r\n            //     count: number,\r\n            //     indices: {\r\n            //         bufferView: number,\r\n            //         byteOffset?: number,\r\n            //         componentType: number,\r\n            //         extensions?: { [id: string]: any },\r\n            //         extras?: any\r\n            //     },\r\n            //     values: {\r\n            //         bufferView: number,\r\n            //         byteOffset?: number,\r\n            //         extensions?: { [id: string]: any },\r\n            //         extras?: any\r\n            //     },\r\n            //     extensions?: { [id: string]: any },\r\n            //     extras?: any\r\n            // },\r\n        };\r\n        this._content.accessors.push(accessorDef);\r\n        return this._content.accessors.length - 1;\r\n    }\r\n    convertAnimations() {\r\n        var _a;\r\n        if (!this._content.animations && this._animations.length > 0)\r\n            this._content.animations = [];\r\n        for (let i = 0; i < this._animations.length; i++) {\r\n            const animation = this._animations[i];\r\n            const animationDef = {\r\n                name: animation.name || 'animation_' + i,\r\n                channels: [],\r\n                samplers: []\r\n            };\r\n            for (let j = 0; j < animation.tracks.length; j++) {\r\n                const track = animation.tracks[j];\r\n                const value = this._nodes.find(a => a.node === track.node);\r\n                if (!value)\r\n                    continue;\r\n                const inputMin = Math.min(...track.times);\r\n                const inputMax = Math.max(...track.times);\r\n                const inputData = new viewer_shared_types_1.AttributeData(new Float32Array(track.times), 1, 4, 0, 4, false, track.times.length, [inputMin], [inputMax]);\r\n                const outputMin = [];\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 0)));\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 1)));\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 2)));\r\n                if (track.path === 'rotation') {\r\n                    outputMin.push(Math.min(...track.values.filter((s, i) => i % 4 === 3)));\r\n                }\r\n                const outputMax = [];\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 0)));\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 1)));\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 2)));\r\n                if (track.path === 'rotation') {\r\n                    outputMax.push(Math.max(...track.values.filter((s, i) => i % 4 === 3)));\r\n                }\r\n                const outputData = new viewer_shared_types_1.AttributeData(new Float32Array(track.values), track.path === 'rotation' ? 4 : 3, //itemSize\r\n                track.path === 'rotation' ? 16 : 12, //itemBytes\r\n                0, 4, false, track.times.length, outputMin, outputMax, track.path === 'rotation' ? 16 : 12);\r\n                const samplerDef = {\r\n                    input: this.convertAccessor(inputData),\r\n                    output: this.convertAccessor(outputData),\r\n                    interpolation: track.interpolation.toUpperCase()\r\n                };\r\n                animationDef.samplers.push(samplerDef);\r\n                const channelDef = {\r\n                    sampler: animationDef.samplers.length - 1,\r\n                    target: {\r\n                        node: value.id,\r\n                        path: track.path\r\n                    }\r\n                };\r\n                animationDef.channels.push(channelDef);\r\n            }\r\n            (_a = this._content.animations) === null || _a === void 0 ? void 0 : _a.push(animationDef);\r\n        }\r\n    }\r\n    convertBuffer(buffer) {\r\n        if (!this._content.buffers)\r\n            this._content.buffers = [];\r\n        if (this._content.buffers.length === 0)\r\n            this._content.buffers = [{ byteLength: 0 }];\r\n        this._buffers.push(buffer);\r\n        return 0;\r\n    }\r\n    convertBufferView(data) {\r\n        if (!this._content.bufferViews)\r\n            this._content.bufferViews = [];\r\n        let componentTypeNumber = this.getComponentType(data.array);\r\n        let componentSize = viewer_data_engine_shared_types_1.ACCESSORCOMPONENTSIZE_V2[componentTypeNumber];\r\n        const byteLength = Math.ceil(data.count * data.itemSize * componentSize / 4) * 4;\r\n        const dataView = new DataView(new ArrayBuffer(byteLength));\r\n        let offset = 0;\r\n        for (let i = 0; i < data.count; i++) {\r\n            for (let a = 0; a < data.itemSize; a++) {\r\n                let value = 0;\r\n                if (data.itemSize > 4) {\r\n                    // no support for interleaved data for itemSize > 4\r\n                    value = data.array[i * data.itemSize + a];\r\n                }\r\n                else {\r\n                    if (a === 0)\r\n                        value = data.array[i * data.itemSize];\r\n                    else if (a === 1)\r\n                        value = data.array[i * data.itemSize + 1];\r\n                    else if (a === 2)\r\n                        value = data.array[i * data.itemSize + 2];\r\n                    else if (a === 3)\r\n                        value = data.array[i * data.itemSize + 3];\r\n                }\r\n                if (data.array instanceof Float32Array) {\r\n                    dataView.setFloat32(offset, value, true);\r\n                }\r\n                else if (data.array instanceof Uint32Array) {\r\n                    dataView.setUint32(offset, value, true);\r\n                }\r\n                else if (data.array instanceof Uint16Array) {\r\n                    dataView.setUint16(offset, value, true);\r\n                }\r\n                else if (data.array instanceof Int16Array) {\r\n                    dataView.setInt16(offset, value, true);\r\n                }\r\n                else if (data.array instanceof Uint8Array) {\r\n                    dataView.setUint8(offset, value);\r\n                }\r\n                else if (data.array instanceof Int8Array) {\r\n                    dataView.setInt8(offset, value);\r\n                }\r\n                offset += componentSize;\r\n            }\r\n        }\r\n        const bufferViewDef = {\r\n            buffer: this.convertBuffer(dataView.buffer),\r\n            byteOffset: this._byteOffset,\r\n            byteLength: byteLength,\r\n            target: data.target\r\n        };\r\n        this._byteOffset += byteLength;\r\n        this._content.bufferViews.push(bufferViewDef);\r\n        return this._content.bufferViews.length - 1;\r\n    }\r\n    convertBufferViewImage(blob) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.bufferViews)\r\n                this._content.bufferViews = [];\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    const reader = new window.FileReader();\r\n                    reader.readAsArrayBuffer(blob);\r\n                    reader.onloadend = () => {\r\n                        const buffer = this.getPaddedArrayBuffer(reader.result);\r\n                        const bufferViewDef = {\r\n                            buffer: this.convertBuffer(buffer),\r\n                            byteOffset: this._byteOffset,\r\n                            byteLength: buffer.byteLength\r\n                        };\r\n                        this._byteOffset += buffer.byteLength;\r\n                        this._content.bufferViews.push(bufferViewDef);\r\n                        resolve(this._content.bufferViews.length - 1);\r\n                    };\r\n                    reader.onerror = reject;\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    convertImage(data) {\r\n        if (!this._content.images)\r\n            this._content.images = [];\r\n        if (this._imageCache[data.image.src])\r\n            return this._imageCache[data.image.src];\r\n        const imageDef = {};\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = data.image.width;\r\n        canvas.height = data.image.height;\r\n        const ctx = canvas.getContext('2d');\r\n        if (data.flipY) {\r\n            ctx.translate(0, canvas.height);\r\n            ctx.scale(1, -1);\r\n        }\r\n        let mimeType = 'image/png';\r\n        if (data.image.src.endsWith('.jpg') || data.image.src.includes('image/jpeg'))\r\n            mimeType = 'image/jpeg';\r\n        imageDef.mimeType = mimeType;\r\n        const DATA_URI_REGEX = /^data:(.*?)(;base64)?,(.*)$/;\r\n        if (DATA_URI_REGEX.test(data.image.src)) {\r\n            const byteString = atob(data.image.src.split(',')[1]);\r\n            const mimeType = data.image.src.split(',')[0].split(':')[1].split(';')[0];\r\n            const ab = new ArrayBuffer(byteString.length);\r\n            const ia = new Uint8Array(ab);\r\n            for (let i = 0; i < byteString.length; i++)\r\n                ia[i] = byteString.charCodeAt(i);\r\n            const blob = new Blob([ab], { type: mimeType });\r\n            this._promises.push(new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    const bufferViewIndex = yield this.convertBufferViewImage(blob);\r\n                    imageDef.bufferView = bufferViewIndex;\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            })));\r\n        }\r\n        else {\r\n            ctx.drawImage(data.image, 0, 0, canvas.width, canvas.height);\r\n            this._promises.push(new Promise((resolve, reject) => {\r\n                try {\r\n                    canvas.toBlob((blob) => __awaiter(this, void 0, void 0, function* () {\r\n                        try {\r\n                            const bufferViewIndex = yield this.convertBufferViewImage(blob);\r\n                            imageDef.bufferView = bufferViewIndex;\r\n                            resolve();\r\n                        }\r\n                        catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    }), mimeType);\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }));\r\n        }\r\n        this._content.images.push(imageDef);\r\n        this._imageCache[data.image.src] = this._content.images.length - 1;\r\n        return this._content.images.length - 1;\r\n    }\r\n    convertMaterial(data, includeMaps = true) {\r\n        if (!this._content.materials)\r\n            this._content.materials = [];\r\n        if (this._materialCache[data.id + '_' + data.version])\r\n            return this._materialCache[data.id + '_' + data.version];\r\n        const materialDef = {\r\n            name: data.id,\r\n            pbrMetallicRoughness: {}\r\n        };\r\n        if (data instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n            if (!this._extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness'))\r\n                this._extensionsUsed.push('KHR_materials_pbrSpecularGlossiness');\r\n            if (!this._extensionsRequired.includes('KHR_materials_pbrSpecularGlossiness'))\r\n                this._extensionsRequired.push('KHR_materials_pbrSpecularGlossiness');\r\n            const ext = {};\r\n            ext.diffuseFactor = this._converter.toColorArray(data.color);\r\n            ext.diffuseFactor[3] = data.opacity;\r\n            if (data.map && includeMaps)\r\n                ext.diffuseTexture = { index: this.convertTexture(data.map) };\r\n            ext.specularFactor = this._converter.toColorArray(data.specular);\r\n            ext.glossinessFactor = data.glossiness;\r\n            if (data.specularGlossinessMap && includeMaps)\r\n                ext.specularGlossinessTexture = { index: this.convertTexture(data.specularGlossinessMap) };\r\n            materialDef.extensions = {\r\n                KHR_materials_pbrSpecularGlossiness: ext\r\n            };\r\n        }\r\n        else if (data instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n            if (!this._extensionsUsed.includes('KHR_materials_unlit'))\r\n                this._extensionsUsed.push('KHR_materials_unlit');\r\n            if (!this._extensionsRequired.includes('KHR_materials_unlit'))\r\n                this._extensionsRequired.push('KHR_materials_unlit');\r\n            materialDef.pbrMetallicRoughness.baseColorFactor = this._converter.toColorArray(data.color);\r\n            materialDef.pbrMetallicRoughness.baseColorFactor[3] = data.opacity;\r\n            if (data.map && includeMaps)\r\n                materialDef.pbrMetallicRoughness.baseColorTexture = { index: this.convertTexture(data.map) };\r\n            materialDef.extensions = {\r\n                KHR_materials_unlit: {}\r\n            };\r\n        }\r\n        else {\r\n            const standardMaterialData = data;\r\n            materialDef.pbrMetallicRoughness.baseColorFactor = this._converter.toColorArray(standardMaterialData.color);\r\n            materialDef.pbrMetallicRoughness.baseColorFactor[3] = standardMaterialData.opacity;\r\n            if (standardMaterialData.map && includeMaps)\r\n                materialDef.pbrMetallicRoughness.baseColorTexture = { index: this.convertTexture(standardMaterialData.map) };\r\n            materialDef.pbrMetallicRoughness.metallicFactor = standardMaterialData.metalnessMap ? 1 : standardMaterialData.metalness;\r\n            materialDef.pbrMetallicRoughness.roughnessFactor = standardMaterialData.roughnessMap ? 1 : standardMaterialData.roughness;\r\n            if (standardMaterialData.metalnessRoughnessMap && includeMaps) {\r\n                materialDef.pbrMetallicRoughness.metallicRoughnessTexture = { index: this.convertTexture(standardMaterialData.metalnessRoughnessMap) };\r\n            }\r\n            else if ((standardMaterialData.metalnessMap || standardMaterialData.roughnessMap) && includeMaps) {\r\n                this._promises.push(new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                    try {\r\n                        const imageData = yield (0, viewer_utils_texture_unifier_1.combineTextures)(undefined, standardMaterialData.roughnessMap ? standardMaterialData.roughnessMap.image : undefined, standardMaterialData.metalnessMap ? standardMaterialData.metalnessMap.image : undefined);\r\n                        const m = (standardMaterialData.roughnessMap || standardMaterialData.metalnessMap);\r\n                        materialDef.pbrMetallicRoughness.metallicRoughnessTexture = { index: this.convertTexture(new viewer_shared_types_1.MapData(imageData, m.wrapS, m.wrapT, m.minFilter, m.magFilter, m.center, m.color, m.offset, m.repeat, m.rotation, m.flipY)) };\r\n                        resolve();\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                    }\r\n                })));\r\n            }\r\n        }\r\n        if (data.normalMap && includeMaps)\r\n            materialDef.normalTexture = { index: this.convertTexture(data.normalMap) };\r\n        if (data.aoMap && includeMaps)\r\n            materialDef.occlusionTexture = { index: this.convertTexture(data.aoMap) };\r\n        if (data.emissiveMap && includeMaps)\r\n            materialDef.emissiveTexture = { index: this.convertTexture(data.emissiveMap) };\r\n        if (data.emissiveness)\r\n            materialDef.emissiveFactor = this._converter.toColorArray(data.emissiveness);\r\n        materialDef.alphaMode = data.alphaMode.toUpperCase();\r\n        if (data.alphaMode === viewer_shared_types_1.MATERIAL_ALPHA.MASK)\r\n            materialDef.alphaCutoff = data.alphaCutoff;\r\n        materialDef.doubleSided = data.side === viewer_shared_types_1.MATERIAL_SIDE.DOUBLE;\r\n        this._content.materials.push(materialDef);\r\n        this._materialCache[data.id + '_' + data.version] = this._content.materials.length - 1;\r\n        return this._materialCache[data.id + '_' + data.version];\r\n    }\r\n    convertMesh(data) {\r\n        var _a;\r\n        if (!this._content.meshes)\r\n            this._content.meshes = [];\r\n        if (this._meshCache[data.id + '_' + data.version])\r\n            return this._meshCache[data.id + '_' + data.version];\r\n        const meshDef = {\r\n            primitives: [],\r\n            name: data.id\r\n        };\r\n        (_a = meshDef.primitives) === null || _a === void 0 ? void 0 : _a.push(this.convertPrimitive(data, data.primitive));\r\n        this._content.meshes.push(meshDef);\r\n        this._meshCache[data.id + '_' + data.version] = this._content.meshes.length - 1;\r\n        return this._meshCache[data.id + '_' + data.version];\r\n    }\r\n    convertNode(node) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.nodes)\r\n                this._content.nodes = [];\r\n            const nodeDef = {\r\n                name: this._convertForAR ? this._uuidGenerator.create() : node.name,\r\n            };\r\n            if (node.transformations.length > 0) {\r\n                let matrix = node.nodeMatrix;\r\n                if (node.nodeMatrix.filter(v => isNaN(v) || v === Infinity || v === -Infinity).length > 0)\r\n                    matrix = gl_matrix_1.mat4.create();\r\n                nodeDef.matrix = [matrix[0], matrix[1], matrix[2], matrix[3],\r\n                    matrix[4], matrix[5], matrix[6], matrix[7],\r\n                    matrix[8], matrix[9], matrix[10], matrix[11],\r\n                    matrix[12], matrix[13], matrix[14], matrix[15]];\r\n            }\r\n            for (let i = 0; i < node.data.length; i++) {\r\n                if (node.data[i] instanceof viewer_shared_types_1.GeometryData) {\r\n                    if (this._convertForAR) {\r\n                        if (node.data[i].mode !== viewer_shared_types_1.PRIMITIVE_MODE.POINTS &&\r\n                            node.data[i].mode !== viewer_shared_types_1.PRIMITIVE_MODE.LINES &&\r\n                            node.data[i].mode !== viewer_shared_types_1.PRIMITIVE_MODE.LINE_LOOP &&\r\n                            node.data[i].mode !== viewer_shared_types_1.PRIMITIVE_MODE.LINE_STRIP)\r\n                            nodeDef.mesh = this.convertMesh(node.data[i]);\r\n                    }\r\n                    else {\r\n                        nodeDef.mesh = this.convertMesh(node.data[i]);\r\n                    }\r\n                }\r\n                if (node.data[i] instanceof viewer_shared_types_1.AnimationData)\r\n                    this._animations.push(node.data[i]);\r\n            }\r\n            if (node.children.length > 0)\r\n                nodeDef.children = [];\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                if (node.children[i].visible === true) {\r\n                    if (this._viewport) {\r\n                        if (node.children[i].excludeViewports.includes(this._viewport))\r\n                            continue;\r\n                        if (node.children[i].restrictViewports.length > 0 && !node.children[i].restrictViewports.includes(this._viewport))\r\n                            continue;\r\n                    }\r\n                    const nodeId = yield this.convertNode(node.children[i]);\r\n                    if (nodeId !== -1)\r\n                        (_a = nodeDef.children) === null || _a === void 0 ? void 0 : _a.push(nodeId);\r\n                }\r\n            }\r\n            // remove children array if it is empty\r\n            if (nodeDef.children !== undefined && nodeDef.children.length === 0)\r\n                nodeDef.children = undefined;\r\n            if (performance.now() - this._progressTimer > this._progressUpdateLimit) {\r\n                this._progressTimer = performance.now();\r\n                const eventProgress = { type: viewer_shared_types_1.TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: (this._content.nodes.length / this._numberOfNodes) / 2, status: `GlTF conversion progress: ${this._content.nodes.length}/${this._numberOfNodes} nodes.` };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventProgress);\r\n                yield new Promise(resolve => setTimeout(resolve, 0));\r\n            }\r\n            // if the node is empty, don't add it\r\n            if (nodeDef.camera === undefined && nodeDef.children === undefined && nodeDef.mesh === undefined && nodeDef.extensions === undefined && nodeDef.extras === undefined && nodeDef.skin === undefined)\r\n                return -1;\r\n            this._content.nodes.push(nodeDef);\r\n            this._nodes.push({\r\n                node,\r\n                id: this._content.nodes.length - 1\r\n            });\r\n            return this._content.nodes.length - 1;\r\n        });\r\n    }\r\n    convertPrimitive(geometryData, data) {\r\n        const primitiveDef = {\r\n            attributes: {},\r\n            mode: geometryData.mode\r\n        };\r\n        for (let a in data.attributes) {\r\n            if (data.attributes[a].array.length > 0) {\r\n                if (a.includes('COLOR')) {\r\n                    if (data.attributes[a].itemSize % 4 === 0) {\r\n                        primitiveDef.attributes[a] = this.convertAccessor(data.attributes[a]);\r\n                    }\r\n                    else if (data.attributes[a].itemSize % 3 === 0) {\r\n                        const oldAttributeData = data.attributes[a];\r\n                        const newArray = new Float32Array((oldAttributeData.array.length / 3) * 4);\r\n                        let counter = 0;\r\n                        for (let i = 0; i < newArray.length; i += 4) {\r\n                            newArray[i] = oldAttributeData.array[counter] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i + 1] = oldAttributeData.array[counter + 1] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i + 2] = oldAttributeData.array[counter + 2] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i + 3] = 1.0;\r\n                            counter += 3;\r\n                        }\r\n                        primitiveDef.attributes[a] = this.convertAccessor(new viewer_shared_types_1.AttributeData(newArray, 4, 4 * 4, oldAttributeData.byteOffset, 4, oldAttributeData.normalized, oldAttributeData.count, oldAttributeData.min, oldAttributeData.max, oldAttributeData.byteStride));\r\n                    }\r\n                }\r\n                else {\r\n                    primitiveDef.attributes[a] = this.convertAccessor(data.attributes[a]);\r\n                }\r\n            }\r\n        }\r\n        if (data.indices)\r\n            primitiveDef.indices = this.convertAccessor(data.indices);\r\n        if (geometryData.material) {\r\n            const k = Object.keys(primitiveDef.attributes).find(k => k.includes('TEXCOORD'));\r\n            primitiveDef.material = this.convertMaterial(geometryData.material, !!k);\r\n        }\r\n        return primitiveDef;\r\n    }\r\n    convertTexture(data) {\r\n        if (!this._content.textures)\r\n            this._content.textures = [];\r\n        const textureDef = {\r\n            source: this.convertImage(data)\r\n        };\r\n        // TODO samplers\r\n        this._content.textures.push(textureDef);\r\n        return this._content.textures.length - 1;\r\n    }\r\n    getComponentType(array) {\r\n        switch (true) {\r\n            case array instanceof Int8Array:\r\n                return 5120;\r\n            case array instanceof Uint8Array:\r\n                return 5121;\r\n            case array instanceof Int16Array:\r\n                return 5122;\r\n            case array instanceof Uint16Array:\r\n                return 5123;\r\n            case array instanceof Uint32Array:\r\n                return 5125;\r\n            default:\r\n                return 5126;\r\n        }\r\n    }\r\n    getMinMax(data) {\r\n        const output = {\r\n            min: new Array(data.itemSize).fill(Number.POSITIVE_INFINITY),\r\n            max: new Array(data.itemSize).fill(Number.NEGATIVE_INFINITY)\r\n        };\r\n        for (let i = 0; i < data.count; i++) {\r\n            for (let a = 0; a < data.itemSize; a++) {\r\n                let value = 0;\r\n                if (data.itemSize > 4) {\r\n                    // no support for interleaved data for itemSize > 4\r\n                    value = data.array[i * data.itemSize + a];\r\n                }\r\n                else {\r\n                    if (a === 0)\r\n                        value = data.array[i * data.itemSize];\r\n                    else if (a === 1)\r\n                        value = data.array[i * data.itemSize + 1];\r\n                    else if (a === 2)\r\n                        value = data.array[i * data.itemSize + 2];\r\n                    else if (a === 3)\r\n                        value = data.array[i * data.itemSize + 3];\r\n                }\r\n                output.min[a] = Math.min(output.min[a], value);\r\n                output.max[a] = Math.max(output.max[a], value);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\r\n        const paddedLength = Math.ceil(arrayBuffer.byteLength / 4) * 4;\r\n        if (paddedLength !== arrayBuffer.byteLength) {\r\n            const array = new Uint8Array(paddedLength);\r\n            array.set(new Uint8Array(arrayBuffer));\r\n            if (paddingByte !== 0) {\r\n                for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\r\n                    array[i] = paddingByte;\r\n                }\r\n            }\r\n            return array.buffer;\r\n        }\r\n        return arrayBuffer;\r\n    }\r\n    getType(itemSize) {\r\n        switch (itemSize) {\r\n            case 1:\r\n                return 'SCALAR';\r\n            case 2:\r\n                return 'VEC2';\r\n            case 3:\r\n                return 'VEC3';\r\n            case 4:\r\n                return 'VEC4';\r\n            case 9:\r\n                return 'MAT3';\r\n            case 18:\r\n                return 'MAT4';\r\n            default:\r\n                return 'VEC3';\r\n        }\r\n    }\r\n    reset() {\r\n        this._animations = [];\r\n        this._buffers = [];\r\n        this._byteOffset = 0;\r\n        this._content = {\r\n            asset: {\r\n                copyright: '2023 (c) ShapeDiver',\r\n                generator: 'ShapeDiverViewer@' + viewer_shared_build_data_1.build_data.build_version,\r\n                version: '2.0',\r\n                extensions: {}\r\n            },\r\n        };\r\n        this._extensionsRequired = [];\r\n        this._extensionsUsed = [];\r\n        this._imageCache = {};\r\n        this._materialCache = {};\r\n        this._meshCache = {};\r\n        this._nodes = [];\r\n        this._promises = [];\r\n        this._convertForAR = false;\r\n        this._viewport = undefined;\r\n    }\r\n    stringToArrayBuffer(text) {\r\n        if (window.TextEncoder !== undefined) {\r\n            return new TextEncoder().encode(text).buffer;\r\n        }\r\n        const array = new Uint8Array(new ArrayBuffer(text.length));\r\n        for (let i = 0, il = text.length; i < il; i++) {\r\n            const value = text.charCodeAt(i);\r\n            // Replacing multi-byte character with space(0x20).\r\n            array[i] = value > 0xFF ? 0x20 : value;\r\n        }\r\n        return array.buffer;\r\n    }\r\n}\r\nexports.GLTFConverter = GLTFConverter;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GLTFConverter.js","sourceRoot":"","sources":["../src/GLTFConverter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mFAAiE;AACjE,iFAAyE;AACzE,+EAAqG;AACrG,iGAgBoD;AACpD,yCAAsC;AACtC,yEAmBwC;AACxC,2FAA0E;AAE1E,IAAY,eAIX;AAJD,WAAY,eAAe;IACvB,sDAAmC,CAAA;IACnC,8FAA2E,CAAA;IAC3E,8DAA2C,CAAA;AAC/C,CAAC,EAJW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAI1B;AAED,MAAa,aAAa;IAA1B;QACI,0BAA0B;QAET,eAAU,GAAc,kCAAS,CAAC,QAAQ,CAAC;QAC3C,iBAAY,GAAgB,oCAAW,CAAC,QAAQ,CAAC;QACjD,iCAA4B,GAAG,gBAAI,CAAC,UAAU,CAC3D,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACC,mBAAc,GAAkB,sCAAa,CAAC,QAAQ,CAAC;QACvD,yBAAoB,GAAG,GAAG,CAAC;QAIpC,gBAAW,GAAqB,EAAE,CAAC;QACnC,aAAQ,GAAkB,EAAE,CAAC;QAC7B,gBAAW,GAAW,CAAC,CAAC;QACxB,aAAQ,GAAa;YACzB,KAAK,EAAE;gBACH,SAAS,EAAE,qBAAqB;gBAChC,SAAS,EAAE,mBAAmB,GAAG,qCAAU,CAAC,aAAa;gBACzD,OAAO,EAAE,KAAK;gBACd,UAAU,EAAE,EAAE;aACjB;SACJ,CAAA;QAEO,kBAAa,GAAG,KAAK,CAAC;QACtB,aAAQ,GAAG,EAAE,CAAC;QACd,wBAAmB,GAAa,EAAE,CAAC;QACnC,oBAAe,GAAa,EAAE,CAAC;QAC/B,gBAAW,GAA8B,EAAE,CAAC;QAC5C,WAAM,GAGR,EAAE,CAAC;QACD,mBAAc,GAAG,CAAC,CAAC;QACnB,mBAAc,GAAG,CAAC,CAAC;QACnB,cAAS,GAAmB,EAAE,CAAC;QAE/B,mBAAc,GAElB,EAAE,CAAC;QACC,eAAU,GAEd,EAAE,CAAC;QAmwBP,kCAAkC;IACtC,CAAC;IAlwBG,6BAA6B;IAE7B,sCAAsC;IAE/B,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,yCAAyC;IAEzC,6BAA6B;IAEhB,OAAO,CAAC,IAAe,EAAE,YAAY,GAAG,KAAK,EAAE,QAAiB;;;YACzE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;YAC7C,MAAM,UAAU,GAAe,EAAE,IAAI,EAAE,+BAAS,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,2BAA2B,EAAE,CAAC;YACtI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,kCAAS,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAEnE,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YAE3C,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAExC,IAAI,CAAC,KAAK,EAAE,CAAC;YAEb,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC;YAEnC,MAAM,SAAS,GAAG,IAAI,kCAAQ,CAAC,oBAAoB,CAAC,CAAC;YACrD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEzB,MAAM,QAAQ,GAAmB;gBAC7B,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,KAAK,EAAE,EAAE;aACZ,CAAC;YAEF,MAAM,6BAA6B,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;YACnE,IAAI,CAAC,iBAAiB,CAAC;gBACnB,EAAE,EAAE,6BAA6B;gBACjC,MAAM,EAAE,IAAI,CAAC,4BAA4B;aAC5C,CAAC,CAAA;YAEF,MAAM,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;YACzD,IAAG,YAAY,EAAE;gBACf,4CAA4C;gBAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC;gBACtD,IAAI,iBAAiB,GAAS,gBAAI,CAAC,eAAe,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,gBAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,gBAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/K,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,mBAAmB,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAA;aAC/E;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,KAAK,EAAE;oBAChL,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAC5C,IAAG,MAAM,KAAK,CAAC,CAAC;wBAAE,MAAA,QAAQ,CAAC,KAAK,0CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBAClD;aACJ;iBAAM;gBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAG,MAAM,KAAK,CAAC,CAAC;oBAAE,MAAA,QAAQ,CAAC,KAAK,0CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aAClD;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE;gBAChD,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,6BAA6B;oBAC5D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3D,IAAI,YAAY,EAAE;gBACd,gCAAgC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE;oBAChD,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,mBAAmB;wBAClD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEpC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,sBAAsB;YACtB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;YACzF,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAErG,IAAI,cAAc,GAAG,CAAC,CAAC;YACvB,OAAO,cAAc,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;gBAC7C,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;aACxD;YAED,MAAM,0BAA0B,GAAe,EAAE,IAAI,EAAE,+BAAS,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,uBAAuB,EAAE,CAAC;YACrJ,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,kCAAS,CAAC,IAAI,CAAC,YAAY,EAAE,0BAA0B,CAAC,CAAC;YAErF,iBAAiB;YACjB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;YAE3E,IAAG,cAAc;gBACb,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAElC,2CAA2C;YAC3C,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;YAE/G,OAAO,IAAI,OAAO,CAAc,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChD,6GAA6G;gBAE7G,IAAI;oBACA,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;oBACvC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAC/B,MAAM,CAAC,SAAS,GAAG,GAAG,EAAE;wBACpB,gBAAgB;wBAChB,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAc,MAAM,CAAC,MAAM,CAAC,CAAC;wBAC1E,MAAM,iBAAiB,GAAG,IAAI,QAAQ,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3D,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC7D,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBAEjD,cAAc;wBACd,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;wBAC3G,MAAM,eAAe,GAAG,IAAI,QAAQ,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;wBACzD,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACzD,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBAE/C,cAAc;wBACd,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;wBACnC,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;wBACxC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC1C,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;wBACjC,MAAM,eAAe,GAAG,EAAE;8BACpB,eAAe,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU;8BACjD,iBAAiB,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;wBAC5D,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;wBAE/C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC;4BACrB,MAAM;4BACN,eAAe;4BACf,SAAS;4BACT,iBAAiB;4BACjB,WAAW;yBACd,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;wBAEzC,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;wBAC1C,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;wBACrC,SAAS,CAAC,SAAS,GAAG,GAAG,EAAE;4BACvB,MAAM,QAAQ,GAAe,EAAE,IAAI,EAAE,+BAAS,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,yBAAyB,EAAE,CAAC;4BAClI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,kCAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;4BAC/D,OAAO,CAAc,SAAS,CAAC,MAAM,CAAC,CAAC;wBAC3C,CAAC,CAAC;wBACF,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;oBAC/B,CAAC,CAAC;oBAEF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;iBAC3B;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,CAAC,CAAC,CAAC;iBACb;YACL,CAAC,CAAC,CAAA;;KACL;IAED,gCAAgC;IAEhC,+BAA+B;IAEvB,eAAe,CAAC,IAAoB;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS;YAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;QAE3D,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEpC,MAAM,WAAW,GAAsB;YACnC,UAAU,EAAE,UAAU;YACtB,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;YAChD,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK;YAClB,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;YACjC,oBAAoB;YACpB,qBAAqB;YACrB,iBAAiB;YACjB,8BAA8B;YAC9B,+BAA+B;YAC/B,iCAAiC;YACjC,8CAA8C;YAC9C,uBAAuB;YACvB,SAAS;YACT,gBAAgB;YAChB,8BAA8B;YAC9B,+BAA+B;YAC/B,8CAA8C;YAC9C,uBAAuB;YACvB,SAAS;YACT,0CAA0C;YAC1C,mBAAmB;YACnB,KAAK;SACR,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9C,CAAC;IAEO,iBAAiB;;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC;YAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,EAAE,CAAC;QAC5F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,YAAY,GAAuB;gBACrC,IAAI,EAAE,SAAS,CAAC,IAAI,IAAI,YAAY,GAAG,CAAC;gBACxC,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,EAAE;aACf,CAAA;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9C,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,KAAK;oBAAE,SAAS;gBAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM,SAAS,GAAG,IAAI,mCAAa,CAC/B,IAAI,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAC7B,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACD,KAAK,EACL,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB,CAAC,QAAQ,CAAC,EACV,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAEhB,MAAM,SAAS,GAAG,EAAE,CAAC;gBACrB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1G,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1G,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE1G,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC3B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3E;gBAED,MAAM,SAAS,GAAG,EAAE,CAAC;gBACrB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1G,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1G,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE1G,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC3B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3E;gBAED,MAAM,UAAU,GAAG,IAAI,mCAAa,CAChC,IAAI,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,EAC9B,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU;gBAC7C,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,WAAW;gBAChD,CAAC,EACD,CAAC,EACD,KAAK,EACL,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB,SAAS,EACT,SAAS,EACT,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;gBAExC,MAAM,UAAU,GAIZ;oBACA,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;oBACtC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;oBACxC,aAAa,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,EAAE;iBACnD,CAAA;gBACD,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEvC,MAAM,UAAU,GAMZ;oBACA,OAAO,EAAE,YAAY,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;oBACzC,MAAM,EAAE;wBACJ,IAAI,EAAE,KAAK,CAAC,EAAE;wBACd,IAAI,EAAE,KAAK,CAAC,IAAI;qBACnB;iBACJ,CAAA;gBACD,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC1C;YACD,MAAA,IAAI,CAAC,QAAQ,CAAC,UAAU,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAA;SAC/C;IACL,CAAC;IAEO,aAAa,CAAC,MAAmB;QACrC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO;YAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC;QACvD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC;YAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,OAAO,CAAC,CAAC;IACb,CAAC;IAEO,iBAAiB,CAAC,IAAoB;QAC1C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW;YAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,EAAE,CAAC;QAC/D,IAAI,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC3D,IAAI,aAAa,GAAG,0DAAwB,CAAwC,mBAAmB,CAAC,CAAC;QAEzG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACjF,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QAC3D,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;oBACnB,mDAAmD;oBACnD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;iBAC7C;qBAAM;oBACH,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC9C,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;iBAC/D;gBAED,IAAI,IAAI,CAAC,KAAK,YAAY,YAAY,EAAE;oBACpC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC5C;qBAAM,IAAI,IAAI,CAAC,KAAK,YAAY,WAAW,EAAE;oBAC1C,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC3C;qBAAM,IAAI,IAAI,CAAC,KAAK,YAAY,WAAW,EAAE;oBAC1C,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC3C;qBAAM,IAAI,IAAI,CAAC,KAAK,YAAY,UAAU,EAAE;oBACzC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC1C;qBAAM,IAAI,IAAI,CAAC,KAAK,YAAY,UAAU,EAAE;oBACzC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBACpC;qBAAM,IAAI,IAAI,CAAC,KAAK,YAAY,SAAS,EAAE;oBACxC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBACnC;gBACD,MAAM,IAAI,aAAa,CAAC;aAC3B;SACJ;QAED,MAAM,aAAa,GAAwB;YACvC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3C,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,IAAI,CAAC,MAAM;SACtB,CAAC;QACF,IAAI,CAAC,WAAW,IAAI,UAAU,CAAC;QAE/B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IAChD,CAAC;IAEa,sBAAsB,CAAC,IAAU;;YAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW;gBAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,EAAE,CAAC;YAC/D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI;oBACA,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;oBACvC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAC/B,MAAM,CAAC,SAAS,GAAG,GAAG,EAAE;wBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAc,MAAM,CAAC,MAAM,CAAC,CAAC;wBACrE,MAAM,aAAa,GAAG;4BAClB,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;4BAClC,UAAU,EAAE,IAAI,CAAC,WAAW;4BAC5B,UAAU,EAAE,MAAM,CAAC,UAAU;yBAChC,CAAC;wBACF,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,UAAU,CAAC;wBACtC,IAAI,CAAC,QAAQ,CAAC,WAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAC/C,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACnD,CAAC,CAAC;oBACF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;iBAC3B;gBAAC,OAAM,CAAC,EAAE;oBACP,MAAM,CAAC,CAAC,CAAC,CAAA;iBACZ;YACL,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEO,YAAY,CAAC,IAAc;QAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM;YAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9E,MAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAElC,MAAM,GAAG,GAA6B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;QAC/D,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAChC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC;SACrB;QAED,IAAI,QAAQ,GAAG,WAAW,CAAC;QAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;YACxE,QAAQ,GAAG,YAAY,CAAC;QAE5B,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAE7B,MAAM,cAAc,GAAG,6BAA6B,CAAC;QACrD,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACzE,MAAM,EAAE,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE;gBACtC,EAAE,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,OAAO,CAAO,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC5D,IAAI;oBACA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAK,CAAC,CAAC;oBACjE,QAAQ,CAAC,UAAU,GAAG,eAAe,CAAC;oBACtC,OAAO,EAAE,CAAC;iBACb;gBAAC,OAAM,CAAC,EAAE;oBACP,MAAM,CAAC,CAAC,CAAC,CAAC;iBACb;YACL,CAAC,CAAA,CAAC,CAAC,CAAC;SACP;aAAM;YACH,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtD,IAAI;oBACA,MAAM,CAAC,MAAM,CAAC,CAAO,IAAI,EAAE,EAAE;wBACzB,IAAI;4BACA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAK,CAAC,CAAC;4BACjE,QAAQ,CAAC,UAAU,GAAG,eAAe,CAAC;4BACtC,OAAO,EAAE,CAAC;yBACb;wBAAC,OAAO,CAAC,EAAE;4BACR,MAAM,CAAC,CAAC,CAAC,CAAC;yBACb;oBACL,CAAC,CAAA,EAAE,QAAQ,CAAC,CAAC;iBAChB;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,CAAC,CAAC,CAAC;iBACb;YACL,CAAC,CAAC,CAAC,CAAC;SACP;QAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3C,CAAC;IAEO,eAAe,CAAC,IAA2B,EAAE,WAAW,GAAG,IAAI;QACnE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS;YAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;QAC3D,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAEhH,MAAM,WAAW,GAAsB;YACnC,IAAI,EAAE,IAAI,CAAC,EAAE;YACb,oBAAoB,EAAE,EAAE;SAC3B,CAAC;QAEF,IAAI,IAAI,YAAY,oDAA8B,EAAE;YAChD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,qCAAqC,CAAC;gBACrE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAA;YACpE,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,qCAAqC,CAAC;gBACzE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAA;YAExE,MAAM,GAAG,GAA0D,EAAE,CAAC;YAEtE,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YACpC,IAAI,IAAI,CAAC,GAAG,IAAI,WAAW;gBAAE,GAAG,CAAC,cAAc,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAA;YAC1F,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjE,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC;YACvC,IAAI,IAAI,CAAC,qBAAqB,IAAI,WAAW;gBACzC,GAAG,CAAC,yBAAyB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC;YAE/F,WAAW,CAAC,UAAU,GAAG;gBACrB,mCAAmC,EAAE,GAAG;aAC3C,CAAA;SACJ;aAAM,IAAI,IAAI,YAAY,uCAAiB,EAAE;YAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,qBAAqB,CAAC;gBACrD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;YACpD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,qBAAqB,CAAC;gBACzD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;YACxD,WAAW,CAAC,oBAAqB,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7F,WAAW,CAAC,oBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YACpE,IAAI,IAAI,CAAC,GAAG,IAAI,WAAW;gBAAE,WAAW,CAAC,oBAAqB,CAAC,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAA;YAE1H,WAAW,CAAC,UAAU,GAAG;gBACrB,mBAAmB,EAAE,EAAE;aAC1B,CAAC;SACL;aAAM;YACH,MAAM,oBAAoB,GAAG,IAA4B,CAAC;YAC1D,WAAW,CAAC,oBAAqB,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC7G,WAAW,CAAC,oBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,OAAO,CAAC;YACpF,IAAI,oBAAoB,CAAC,GAAG,IAAI,WAAW;gBAAE,WAAW,CAAC,oBAAqB,CAAC,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,CAAA;YAC1J,WAAW,CAAC,oBAAqB,CAAC,cAAc,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC;YAC1H,WAAW,CAAC,oBAAqB,CAAC,eAAe,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC;YAC3H,IAAI,oBAAoB,CAAC,qBAAqB,IAAI,WAAW,EAAE;gBAC3D,WAAW,CAAC,oBAAqB,CAAC,wBAAwB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,EAAE,CAAC;aAC3I;iBAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,IAAI,oBAAoB,CAAC,YAAY,CAAC,IAAI,WAAW,EAAE;gBAChG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,OAAO,CAAO,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC5D,IAAI;wBACA,MAAM,SAAS,GAAG,MAAM,IAAA,8CAAe,EACnC,SAAS,EACT,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EACvF,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAC1F,CAAC;wBACF,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,YAAa,IAAI,oBAAoB,CAAC,YAAa,CAAE,CAAC;wBACtF,WAAW,CAAC,oBAAqB,CAAC,wBAAwB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,6BAAO,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA;wBAC3N,OAAO,EAAE,CAAC;qBACb;oBAAC,OAAM,CAAC,EAAE;wBACP,MAAM,CAAC,CAAC,CAAC,CAAC;qBACb;gBACL,CAAC,CAAA,CAAC,CAAC,CAAA;aACN;SACJ;QAED,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW;YAAE,WAAW,CAAC,aAAa,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC9G,IAAI,IAAI,CAAC,KAAK,IAAI,WAAW;YAAE,WAAW,CAAC,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACzG,IAAI,IAAI,CAAC,WAAW,IAAI,WAAW;YAAE,WAAW,CAAC,eAAe,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACpH,IAAI,IAAI,CAAC,YAAY;YAAE,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpG,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,SAAS,KAAK,oCAAc,CAAC,IAAI;YAAE,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACvF,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,KAAK,mCAAa,CAAC,MAAM,CAAC;QAE7D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QACvF,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;IAEO,WAAW,CAAC,IAAmB;;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM;YAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAExG,MAAM,OAAO,GAAkB;YAC3B,UAAU,EAAE,EAAE;YACd,IAAI,EAAE,IAAI,CAAC,EAAE;SAChB,CAAC;QAEF,MAAA,OAAO,CAAC,UAAU,0CAAE,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAA;QAErE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEa,WAAW,CAAC,IAAe;;;YACrC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK;gBAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;YACnD,MAAM,OAAO,GAAkB;gBAC3B,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI;aACtE,CAAC;YAEF,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC7B,IAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC;oBACpF,MAAM,GAAG,gBAAI,CAAC,MAAM,EAAE,CAAC;gBAE3B,OAAO,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;oBAC1C,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;oBAC5C,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;aACnD;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,kCAAY,EAAE;oBACtC,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,IAAmB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,KAAK,oCAAc,CAAC,MAAM;4BAC5C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,KAAK,oCAAc,CAAC,KAAK;4BAC3C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,KAAK,oCAAc,CAAC,SAAS;4BAC/C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,KAAK,oCAAc,CAAC,UAAU;4BAC/D,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;qBAClE;yBAAM;wBACH,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;qBAC9D;iBACJ;gBAED,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,mCAAa;oBACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAgB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;aACzD;YAED,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;YACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,EAAE;oBAClC,IAAG,IAAI,CAAC,SAAS,EAAE;wBACf,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;4BAAE,SAAS;wBACxE,IAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;4BAAE,SAAS;qBAC9H;oBACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,IAAG,MAAM,KAAK,CAAC,CAAC;wBAAE,MAAA,OAAO,CAAC,QAAQ,0CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBACpD;aACJ;YAED,uCAAuC;YACvC,IAAG,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;gBAC9D,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;YAEjC,IAAG,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,EAAE;gBACpE,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACxC,MAAM,aAAa,GAAe,EAAE,IAAI,EAAE,+BAAS,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,6BAA6B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,SAAS,EAAE,CAAC;gBAC1P,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,kCAAS,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;gBACxE,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;aACxD;YAED,qCAAqC;YACrC,IAAG,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS;gBAAE,OAAO,CAAC,CAAC,CAAC;YAE7M,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACb,IAAI;gBACJ,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;aACrC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;KACzC;IAEO,gBAAgB,CAAC,YAA2B,EAAE,IAAoB;QACtE,MAAM,YAAY,GAAuB;YACrC,UAAU,EAAE,EAAE;YACd,IAAI,EAAE,YAAY,CAAC,IAAI;SAC1B,CAAC;QAEF,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;YAC3B,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;oBACrB,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,EAAE;wBACvC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;qBACxE;yBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,EAAE;wBAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC5C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;wBAEvE,IAAI,OAAO,GAAG,CAAC,CAAC;wBAChB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAE,CAAC,EAAE;4BACtC,QAAQ,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACpG,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,OAAO,GAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACxG,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,OAAO,GAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACxG,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,GAAG,CAAC;4BACpB,OAAO,IAAE,CAAC,CAAC;yBACd;wBACD,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,mCAAa,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAC,CAAC,EAAE,gBAAgB,CAAC,UAAU,EAAE,CAAC,EAAE,gBAAgB,CAAC,UAAU,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;qBACxP;iBACJ;qBAAM;oBACH,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;iBACxE;aACJ;SACJ;QAED,IAAI,IAAI,CAAC,OAAO;YACZ,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9D,IAAI,YAAY,CAAC,QAAQ,EAAE;YACvB,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACjF,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5E;QAED,OAAO,YAAY,CAAC;IACxB,CAAC;IAEO,cAAc,CAAC,IAAc;QACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;QACzD,MAAM,UAAU,GAAqB;YACjC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;SAClC,CAAC;QACF,gBAAgB;QAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7C,CAAC;IAEO,gBAAgB,CAAC,KAAqF;QAC1G,QAAQ,IAAI,EAAE;YACV,KAAK,KAAK,YAAY,SAAS;gBAC3B,OAAO,IAAI,CAAC;YAChB,KAAK,KAAK,YAAY,UAAU;gBAC5B,OAAO,IAAI,CAAC;YAChB,KAAK,KAAK,YAAY,UAAU;gBAC5B,OAAO,IAAI,CAAC;YAChB,KAAK,KAAK,YAAY,WAAW;gBAC7B,OAAO,IAAI,CAAC;YAChB,KAAK,KAAK,YAAY,WAAW;gBAC7B,OAAO,IAAI,CAAC;YAChB;gBACI,OAAO,IAAI,CAAC;SACnB;IACL,CAAC;IAEO,SAAS,CAAC,IAAoB;QAClC,MAAM,MAAM,GAAG;YACX,GAAG,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC5D,GAAG,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;SAC/D,CAAC;QAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;oBACnB,mDAAmD;oBACnD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;iBAC7C;qBAAM;oBACH,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC9C,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,KAAK,CAAC;wBAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;iBAC/D;gBACD,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC/C,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;aAClD;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,oBAAoB,CAAC,WAAwB,EAAE,WAAW,GAAG,CAAC;QAClE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAE/D,IAAI,YAAY,KAAK,WAAW,CAAC,UAAU,EAAE;YACzC,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;YAC3C,KAAK,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YAEvC,IAAI,WAAW,KAAK,CAAC,EAAE;gBACnB,KAAK,IAAI,CAAC,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;oBACxD,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;iBAC1B;aACJ;YAED,OAAO,KAAK,CAAC,MAAM,CAAC;SACvB;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;IAEO,OAAO,CAAC,QAAgB;QAC5B,QAAQ,QAAQ,EAAE;YACd,KAAK,CAAC;gBACF,OAAO,QAAQ,CAAC;YACpB,KAAK,CAAC;gBACF,OAAO,MAAM,CAAC;YAClB,KAAK,CAAC;gBACF,OAAO,MAAM,CAAC;YAClB,KAAK,CAAC;gBACF,OAAO,MAAM,CAAC;YAClB,KAAK,CAAC;gBACF,OAAO,MAAM,CAAC;YAClB,KAAK,EAAE;gBACH,OAAO,MAAM,CAAC;YAClB;gBACI,OAAO,MAAM,CAAC;SACrB;IACL,CAAC;IAEO,KAAK;QACT,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG;YACZ,KAAK,EAAE;gBACH,SAAS,EAAE,qBAAqB;gBAChC,SAAS,EAAE,mBAAmB,GAAG,qCAAU,CAAC,aAAa;gBACzD,OAAO,EAAE,KAAK;gBACd,UAAU,EAAE,EAAE;aACjB;SACJ,CAAA;QAED,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEO,mBAAmB,CAAC,IAAY;QACpC,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;SAChD;QAED,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAEjC,mDAAmD;YACnD,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;SAC1C;QAED,OAAO,KAAK,CAAC,MAAM,CAAC;IACxB,CAAC;CAGJ;AAjzBD,sCAizBC","sourcesContent":["import { build_data } from '@shapediver/viewer.shared.build-data'\r\nimport { ITreeNode, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { Converter, EventEngine, EVENTTYPE, UuidGenerator } from '@shapediver/viewer.shared.services'\r\nimport {\r\n    ACCESSORCOMPONENTTYPE_V2 as ACCESSOR_COMPONENTTYPE,\r\n    ACCESSORTYPE_V2 as ACCESSORTYPE,\r\n    IGLTF_v2,\r\n    IGLTF_v2_Scene,\r\n    IGLTF_v2_Node,\r\n    IGLTF_v2_Material,\r\n    IGLTF_v2_Material_KHR_materials_pbrSpecularGlossiness,\r\n    IGLTF_v2_Primitive,\r\n    IGLTF_v2_Mesh,\r\n    IGLTF_v2_Accessor,\r\n    ACCESSORCOMPONENTSIZE_V2,\r\n    IGLTF_v2_BufferView,\r\n    IGLTF_v2_Texture,\r\n    IGLTF_v2_Image,\r\n    IGLTF_v2_Animation,\r\n} from '@shapediver/viewer.data-engine.shared-types'\r\nimport { mat4, vec3 } from 'gl-matrix'\r\nimport {\r\n    AttributeData,\r\n    GeometryData,\r\n    MapData,\r\n    MATERIAL_ALPHA,\r\n    MATERIAL_SIDE,\r\n    MaterialStandardData,\r\n    AnimationData,\r\n    PRIMITIVE_MODE,\r\n    MaterialSpecularGlossinessData,\r\n    MaterialUnlitData,\r\n    IMaterialAbstractData,\r\n    IMapData,\r\n    IPrimitiveData,\r\n    IAttributeData,\r\n    IAnimationData,\r\n    IGeometryData,\r\n    ITaskEvent,\r\n    TASK_TYPE,\r\n} from '@shapediver/viewer.shared.types'\r\nimport { combineTextures } from \"@shapediver/viewer.utils.texture-unifier\"\r\n\r\nexport enum GLTF_EXTENSIONS {\r\n    KHR_BINARY_GLTF = 'KHR_binary_glTF',\r\n    KHR_MATERIALS_PBRSPECULARGLOSSINESS = 'KHR_materials_pbrSpecularGlossiness',\r\n    KHR_MATERIALS_UNLIT = 'KHR_materials_unlit',\r\n}\r\n\r\nexport class GLTFConverter {\r\n    // #region Properties (15)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _globalTransformationInverse = mat4.fromValues(\r\n        1, 0, 0, 0,\r\n        0, 0, -1, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 0, 1);\r\n    private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n    private readonly _progressUpdateLimit = 500;\r\n\r\n    private static _instance: GLTFConverter;\r\n\r\n    private _animations: IAnimationData[] = [];\r\n    private _buffers: ArrayBuffer[] = [];\r\n    private _byteOffset: number = 0;\r\n    private _content: IGLTF_v2 = {\r\n        asset: {\r\n            copyright: '2023 (c) ShapeDiver',\r\n            generator: 'ShapeDiverViewer@' + build_data.build_version,\r\n            version: '2.0',\r\n            extensions: {}\r\n        },\r\n    }\r\n\r\n    private _convertForAR = false;\r\n    private _eventId = '';\r\n    private _extensionsRequired: string[] = [];\r\n    private _extensionsUsed: string[] = [];\r\n    private _imageCache: { [key: string]: number } = {};\r\n    private _nodes: {\r\n        node: ITreeNode,\r\n        id: number\r\n    }[] = [];\r\n    private _numberOfNodes = 0;\r\n    private _progressTimer = 0;\r\n    private _promises: Promise<any>[] = [];\r\n    private _viewport?: string;\r\n    private _materialCache: {\r\n        [key: string]: number\r\n    } = {};\r\n    private _meshCache: {\r\n        [key: string]: number\r\n    } = {};\r\n\r\n    // #endregion Properties (15)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    public async convert(node: ITreeNode, convertForAR = false, viewport?: string): Promise<ArrayBuffer> {\r\n        this._eventId = this._uuidGenerator.create();\r\n        const eventStart: ITaskEvent = { type: TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 0, status: 'Starting glTF conversion.' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n\r\n        this._numberOfNodes = 0;\r\n        node.traverse(() => this._numberOfNodes++);\r\n\r\n        this._progressTimer = performance.now();\r\n\r\n        this.reset();\r\n\r\n        this._convertForAR = convertForAR;\r\n        this._viewport = viewport;\r\n        const originalParent = node.parent;\r\n\r\n        const sceneNode = new TreeNode('ShapeDiverRootNode');\r\n        sceneNode.addChild(node);\r\n\r\n        const sceneDef: IGLTF_v2_Scene = {\r\n            name: sceneNode.name,\r\n            nodes: []\r\n        };\r\n\r\n        const globalTransformationInverseId = this._uuidGenerator.create();\r\n        node.addTransformation({\r\n            id: globalTransformationInverseId,\r\n            matrix: this._globalTransformationInverse,\r\n        })\r\n\r\n        const translationMatrixId = this._uuidGenerator.create();\r\n        if(convertForAR) {\r\n          // add translation matrix to scene tree node\r\n          const center = node.boundingBox.boundingSphere.center;\r\n          let translationMatrix: mat4 = mat4.fromTranslation(mat4.create(), vec3.multiply(vec3.create(), vec3.fromValues(center[0], center[1], center[2]), vec3.fromValues(-1, -1, -1)));\r\n          node.addTransformation({ id: translationMatrixId, matrix: translationMatrix })\r\n        }\r\n\r\n        if (this._viewport) {\r\n            if(this._viewport && node.excludeViewports.includes(this._viewport) === false && (node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._viewport)) === false) {\r\n                const nodeId = await this.convertNode(node);\r\n                if(nodeId !== -1) sceneDef.nodes?.push(nodeId);\r\n            }\r\n        } else {\r\n            const nodeId = await this.convertNode(node);\r\n            if(nodeId !== -1) sceneDef.nodes?.push(nodeId);\r\n        }\r\n\r\n        for (let i = 0; i < node.transformations.length; i++)\r\n            if (node.transformations[i].id === globalTransformationInverseId)\r\n                node.removeTransformation(node.transformations[i]);\r\n\r\n        if (convertForAR) {\r\n            // remove translation the matrix\r\n            for (let i = 0; i < node.transformations.length; i++)\r\n                if (node.transformations[i].id === translationMatrixId)\r\n                    node.removeTransformation(node.transformations[i]);\r\n        }\r\n\r\n        this._content.scenes = [];\r\n        this._content.scenes.push(sceneDef);\r\n\r\n        this.convertAnimations();\r\n\r\n        // Declare extensions.\r\n        if (this._extensionsUsed.length > 0) this._content.extensionsUsed = this._extensionsUsed;\r\n        if (this._extensionsRequired.length > 0) this._content.extensionsRequired = this._extensionsRequired;\r\n\r\n        let promisesLength = 0;\r\n        while (promisesLength !== this._promises.length) {\r\n            promisesLength = this._promises.length;\r\n            await Promise.all(this._promises);\r\n            await new Promise(resolve => setTimeout(resolve, 0));\r\n        }\r\n\r\n        const eventProgressImagePromises: ITaskEvent = { type: TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 0.75, status: 'GlTF images resolved.' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventProgressImagePromises);\r\n\r\n        // Merge buffers.\r\n        const blob = new Blob(this._buffers, { type: 'application/octet-stream' });\r\n        \r\n        if(originalParent)\r\n            originalParent.addChild(node);\r\n\r\n        // Update byte length of the single buffer.\r\n        if (this._content.buffers && this._content.buffers.length > 0) this._content.buffers[0].byteLength = blob.size;\r\n\r\n        return new Promise<ArrayBuffer>((resolve, reject) => {\r\n            // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\r\n\r\n            try {\r\n                const reader = new window.FileReader();\r\n                reader.readAsArrayBuffer(blob);\r\n                reader.onloadend = () => {\r\n                    // Binary chunk.\r\n                    const binaryChunk = this.getPaddedArrayBuffer(<ArrayBuffer>reader.result);\r\n                    const binaryChunkPrefix = new DataView(new ArrayBuffer(8));\r\n                    binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\r\n                    binaryChunkPrefix.setUint32(4, 0x004E4942, true);\r\n    \r\n                    // JSON chunk.\r\n                    const jsonChunk = this.getPaddedArrayBuffer(this.stringToArrayBuffer(JSON.stringify(this._content)), 0x20);\r\n                    const jsonChunkPrefix = new DataView(new ArrayBuffer(8));\r\n                    jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\r\n                    jsonChunkPrefix.setUint32(4, 0x4E4F534A, true);\r\n    \r\n                    // GLB header.\r\n                    const header = new ArrayBuffer(12);\r\n                    const headerView = new DataView(header);\r\n                    headerView.setUint32(0, 0x46546C67, true);\r\n                    headerView.setUint32(4, 2, true);\r\n                    const totalByteLength = 12\r\n                        + jsonChunkPrefix.byteLength + jsonChunk.byteLength\r\n                        + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\r\n                    headerView.setUint32(8, totalByteLength, true);\r\n    \r\n                    const glbBlob = new Blob([\r\n                        header,\r\n                        jsonChunkPrefix,\r\n                        jsonChunk,\r\n                        binaryChunkPrefix,\r\n                        binaryChunk\r\n                    ], { type: 'application/octet-stream' });\r\n    \r\n                    const glbReader = new window.FileReader();\r\n                    glbReader.readAsArrayBuffer(glbBlob);\r\n                    glbReader.onloadend = () => {\r\n                        const eventEnd: ITaskEvent = { type: TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: 1, status: 'GlTF creation complete.' };\r\n                        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n                        resolve(<ArrayBuffer>glbReader.result);\r\n                    };\r\n                    glbReader.onerror = reject;\r\n                };\r\n\r\n                reader.onerror = reject;\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        })\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n\r\n    // #region Private Methods (17)\r\n\r\n    private convertAccessor(data: IAttributeData): number {\r\n        if (!this._content.accessors) this._content.accessors = [];\r\n\r\n        const bufferView = this.convertBufferView(data);\r\n        const minMax = this.getMinMax(data);\r\n\r\n        const accessorDef: IGLTF_v2_Accessor = {\r\n            bufferView: bufferView,\r\n            byteOffset: 0,\r\n            componentType: this.getComponentType(data.array),\r\n            normalized: data.normalized,\r\n            count: +data.count,\r\n            max: minMax.max,\r\n            min: minMax.min,\r\n            type: this.getType(data.itemSize),\r\n            // sparse: { // TODO\r\n            //     count: number,\r\n            //     indices: {\r\n            //         bufferView: number,\r\n            //         byteOffset?: number,\r\n            //         componentType: number,\r\n            //         extensions?: { [id: string]: any },\r\n            //         extras?: any\r\n            //     },\r\n            //     values: {\r\n            //         bufferView: number,\r\n            //         byteOffset?: number,\r\n            //         extensions?: { [id: string]: any },\r\n            //         extras?: any\r\n            //     },\r\n            //     extensions?: { [id: string]: any },\r\n            //     extras?: any\r\n            // },\r\n        };\r\n\r\n        this._content.accessors.push(accessorDef);\r\n        return this._content.accessors.length - 1;\r\n    }\r\n\r\n    private convertAnimations() {\r\n        if (!this._content.animations && this._animations.length > 0) this._content.animations = [];\r\n        for (let i = 0; i < this._animations.length; i++) {\r\n            const animation = this._animations[i];\r\n            const animationDef: IGLTF_v2_Animation = {\r\n                name: animation.name || 'animation_' + i,\r\n                channels: [],\r\n                samplers: []\r\n            }\r\n\r\n            for (let j = 0; j < animation.tracks.length; j++) {\r\n                const track = animation.tracks[j];\r\n                const value = this._nodes.find(a => a.node === track.node);\r\n                if (!value) continue;\r\n\r\n                const inputMin = Math.min(...track.times);\r\n                const inputMax = Math.max(...track.times);\r\n                const inputData = new AttributeData(\r\n                    new Float32Array(track.times),\r\n                    1,\r\n                    4,\r\n                    0,\r\n                    4,\r\n                    false,\r\n                    track.times.length,\r\n                    [inputMin],\r\n                    [inputMax]);\r\n\r\n                const outputMin = [];\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 0)));\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 1)));\r\n                outputMin.push(Math.min(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 2)));\r\n\r\n                if (track.path === 'rotation') {\r\n                    outputMin.push(Math.min(...track.values.filter((s, i) => i % 4 === 3)));\r\n                }\r\n\r\n                const outputMax = [];\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 0)));\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 1)));\r\n                outputMax.push(Math.max(...track.values.filter((s, i) => i % (track.path === 'rotation' ? 4 : 3) === 2)));\r\n\r\n                if (track.path === 'rotation') {\r\n                    outputMax.push(Math.max(...track.values.filter((s, i) => i % 4 === 3)));\r\n                }\r\n\r\n                const outputData = new AttributeData(\r\n                    new Float32Array(track.values),\r\n                    track.path === 'rotation' ? 4 : 3, //itemSize\r\n                    track.path === 'rotation' ? 16 : 12, //itemBytes\r\n                    0,\r\n                    4,\r\n                    false,\r\n                    track.times.length,\r\n                    outputMin,\r\n                    outputMax,\r\n                    track.path === 'rotation' ? 16 : 12)\r\n\r\n                const samplerDef: {\r\n                    input: number,\r\n                    interpolation?: string,\r\n                    output: number,\r\n                } = {\r\n                    input: this.convertAccessor(inputData),\r\n                    output: this.convertAccessor(outputData),\r\n                    interpolation: track.interpolation.toUpperCase()\r\n                }\r\n                animationDef.samplers.push(samplerDef);\r\n\r\n                const channelDef: {\r\n                    sampler: number,\r\n                    target: {\r\n                        node: number,\r\n                        path: string,\r\n                    }\r\n                } = {\r\n                    sampler: animationDef.samplers.length - 1,\r\n                    target: {\r\n                        node: value.id,\r\n                        path: track.path\r\n                    }\r\n                }\r\n                animationDef.channels.push(channelDef);\r\n            }\r\n            this._content.animations?.push(animationDef)\r\n        }\r\n    }\r\n\r\n    private convertBuffer(buffer: ArrayBuffer): number {\r\n        if (!this._content.buffers) this._content.buffers = [];\r\n        if (this._content.buffers.length === 0) this._content.buffers = [{ byteLength: 0 }];\r\n        this._buffers.push(buffer);\r\n        return 0;\r\n    }\r\n\r\n    private convertBufferView(data: IAttributeData): number {\r\n        if (!this._content.bufferViews) this._content.bufferViews = [];\r\n        let componentTypeNumber = this.getComponentType(data.array)\r\n        let componentSize = ACCESSORCOMPONENTSIZE_V2[<keyof typeof ACCESSORCOMPONENTSIZE_V2>componentTypeNumber];\r\n\r\n        const byteLength = Math.ceil(data.count * data.itemSize * componentSize / 4) * 4;\r\n        const dataView = new DataView(new ArrayBuffer(byteLength));\r\n        let offset = 0;\r\n\r\n        for (let i = 0; i < data.count; i++) {\r\n            for (let a = 0; a < data.itemSize; a++) {\r\n                let value = 0;\r\n                if (data.itemSize > 4) {\r\n                    // no support for interleaved data for itemSize > 4\r\n                    value = data.array[i * data.itemSize + a];\r\n                } else {\r\n                    if (a === 0) value = data.array[i * data.itemSize];\r\n                    else if (a === 1) value = data.array[i * data.itemSize + 1];\r\n                    else if (a === 2) value = data.array[i * data.itemSize + 2];\r\n                    else if (a === 3) value = data.array[i * data.itemSize + 3];\r\n                }\r\n\r\n                if (data.array instanceof Float32Array) {\r\n                    dataView.setFloat32(offset, value, true);\r\n                } else if (data.array instanceof Uint32Array) {\r\n                    dataView.setUint32(offset, value, true);\r\n                } else if (data.array instanceof Uint16Array) {\r\n                    dataView.setUint16(offset, value, true);\r\n                } else if (data.array instanceof Int16Array) {\r\n                    dataView.setInt16(offset, value, true);\r\n                } else if (data.array instanceof Uint8Array) {\r\n                    dataView.setUint8(offset, value);\r\n                } else if (data.array instanceof Int8Array) {\r\n                    dataView.setInt8(offset, value);\r\n                }\r\n                offset += componentSize;\r\n            }\r\n        }\r\n\r\n        const bufferViewDef: IGLTF_v2_BufferView = {\r\n            buffer: this.convertBuffer(dataView.buffer),\r\n            byteOffset: this._byteOffset,\r\n            byteLength: byteLength,\r\n            target: data.target\r\n        };\r\n        this._byteOffset += byteLength;\r\n\r\n        this._content.bufferViews.push(bufferViewDef);\r\n        return this._content.bufferViews.length - 1;\r\n    }\r\n\r\n    private async convertBufferViewImage(blob: Blob): Promise<number> {\r\n        if (!this._content.bufferViews) this._content.bufferViews = [];\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const reader = new window.FileReader();\r\n                reader.readAsArrayBuffer(blob);\r\n                reader.onloadend = () => {\r\n                    const buffer = this.getPaddedArrayBuffer(<ArrayBuffer>reader.result);\r\n                    const bufferViewDef = {\r\n                        buffer: this.convertBuffer(buffer),\r\n                        byteOffset: this._byteOffset,\r\n                        byteLength: buffer.byteLength\r\n                    };\r\n                    this._byteOffset += buffer.byteLength;\r\n                    this._content.bufferViews!.push(bufferViewDef);\r\n                    resolve(this._content.bufferViews!.length - 1);\r\n                };\r\n                reader.onerror = reject;\r\n            } catch(e) {\r\n                reject(e)\r\n            }\r\n        });\r\n    }\r\n\r\n    private convertImage(data: IMapData): number {\r\n        if (!this._content.images) this._content.images = [];\r\n        if (this._imageCache[data.image.src]) return this._imageCache[data.image.src];\r\n        const imageDef: IGLTF_v2_Image = {};\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.width = data.image.width;\r\n        canvas.height = data.image.height;\r\n\r\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n        if (data.flipY) {\r\n            ctx.translate(0, canvas.height);\r\n            ctx.scale(1, - 1);\r\n        }\r\n\r\n        let mimeType = 'image/png';\r\n        if (data.image.src.endsWith('.jpg') || data.image.src.includes('image/jpeg'))\r\n            mimeType = 'image/jpeg';\r\n\r\n        imageDef.mimeType = mimeType;\r\n\r\n        const DATA_URI_REGEX = /^data:(.*?)(;base64)?,(.*)$/;\r\n        if (DATA_URI_REGEX.test(data.image.src)) {\r\n            const byteString = atob(data.image.src.split(',')[1]);\r\n            const mimeType = data.image.src.split(',')[0].split(':')[1].split(';')[0]\r\n            const ab = new ArrayBuffer(byteString.length);\r\n            const ia = new Uint8Array(ab);\r\n            for (let i = 0; i < byteString.length; i++)\r\n                ia[i] = byteString.charCodeAt(i);\r\n            const blob = new Blob([ab], { type: mimeType });\r\n            this._promises.push(new Promise<void>(async (resolve, reject) => {\r\n                try {\r\n                    const bufferViewIndex = await this.convertBufferViewImage(blob!);\r\n                    imageDef.bufferView = bufferViewIndex;\r\n                    resolve();\r\n                } catch(e) {\r\n                    reject(e);\r\n                }\r\n            }));\r\n        } else {\r\n            ctx.drawImage(data.image, 0, 0, canvas.width, canvas.height);\r\n            this._promises.push(new Promise<void>((resolve, reject) => {\r\n                try {\r\n                    canvas.toBlob(async (blob) => {\r\n                        try {\r\n                            const bufferViewIndex = await this.convertBufferViewImage(blob!);\r\n                            imageDef.bufferView = bufferViewIndex;\r\n                            resolve();\r\n                        } catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    }, mimeType);\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            }));\r\n        }\r\n\r\n        this._content.images.push(imageDef);\r\n        this._imageCache[data.image.src] = this._content.images.length - 1;\r\n        return this._content.images.length - 1;\r\n    }\r\n\r\n    private convertMaterial(data: IMaterialAbstractData, includeMaps = true): number {\r\n        if (!this._content.materials) this._content.materials = [];\r\n        if (this._materialCache[data.id + '_' + data.version]) return this._materialCache[data.id + '_' + data.version];\r\n        \r\n        const materialDef: IGLTF_v2_Material = {\r\n            name: data.id,\r\n            pbrMetallicRoughness: {}\r\n        };\r\n\r\n        if (data instanceof MaterialSpecularGlossinessData) {\r\n            if (!this._extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness'))\r\n                this._extensionsUsed.push('KHR_materials_pbrSpecularGlossiness')\r\n            if (!this._extensionsRequired.includes('KHR_materials_pbrSpecularGlossiness'))\r\n                this._extensionsRequired.push('KHR_materials_pbrSpecularGlossiness')\r\n\r\n            const ext: IGLTF_v2_Material_KHR_materials_pbrSpecularGlossiness = {};\r\n\r\n            ext.diffuseFactor = this._converter.toColorArray(data.color);\r\n            ext.diffuseFactor[3] = data.opacity;\r\n            if (data.map && includeMaps) ext.diffuseTexture = { index: this.convertTexture(data.map) }\r\n            ext.specularFactor = this._converter.toColorArray(data.specular);\r\n            ext.glossinessFactor = data.glossiness;\r\n            if (data.specularGlossinessMap && includeMaps)\r\n                ext.specularGlossinessTexture = { index: this.convertTexture(data.specularGlossinessMap) };\r\n\r\n            materialDef.extensions = {\r\n                KHR_materials_pbrSpecularGlossiness: ext\r\n            }\r\n        } else if (data instanceof MaterialUnlitData) {\r\n            if (!this._extensionsUsed.includes('KHR_materials_unlit'))\r\n                this._extensionsUsed.push('KHR_materials_unlit')\r\n            if (!this._extensionsRequired.includes('KHR_materials_unlit'))\r\n                this._extensionsRequired.push('KHR_materials_unlit')\r\n            materialDef.pbrMetallicRoughness!.baseColorFactor = this._converter.toColorArray(data.color);\r\n            materialDef.pbrMetallicRoughness!.baseColorFactor[3] = data.opacity;\r\n            if (data.map && includeMaps) materialDef.pbrMetallicRoughness!.baseColorTexture = { index: this.convertTexture(data.map) }\r\n\r\n            materialDef.extensions = {\r\n                KHR_materials_unlit: {}\r\n            };\r\n        } else {\r\n            const standardMaterialData = data as MaterialStandardData;\r\n            materialDef.pbrMetallicRoughness!.baseColorFactor = this._converter.toColorArray(standardMaterialData.color);\r\n            materialDef.pbrMetallicRoughness!.baseColorFactor[3] = standardMaterialData.opacity;\r\n            if (standardMaterialData.map && includeMaps) materialDef.pbrMetallicRoughness!.baseColorTexture = { index: this.convertTexture(standardMaterialData.map) }\r\n            materialDef.pbrMetallicRoughness!.metallicFactor = standardMaterialData.metalnessMap ? 1 : standardMaterialData.metalness;\r\n            materialDef.pbrMetallicRoughness!.roughnessFactor = standardMaterialData.roughnessMap ? 1 : standardMaterialData.roughness;\r\n            if (standardMaterialData.metalnessRoughnessMap && includeMaps) {\r\n                materialDef.pbrMetallicRoughness!.metallicRoughnessTexture = { index: this.convertTexture(standardMaterialData.metalnessRoughnessMap) };\r\n            } else if ((standardMaterialData.metalnessMap || standardMaterialData.roughnessMap) && includeMaps) {\r\n                this._promises.push(new Promise<void>(async (resolve, reject) => {\r\n                    try {\r\n                        const imageData = await combineTextures(\r\n                            undefined, \r\n                            standardMaterialData.roughnessMap ? standardMaterialData.roughnessMap.image : undefined, \r\n                            standardMaterialData.metalnessMap ? standardMaterialData.metalnessMap.image : undefined\r\n                        );\r\n                        const m = (standardMaterialData.roughnessMap! || standardMaterialData.metalnessMap!)!;\r\n                        materialDef.pbrMetallicRoughness!.metallicRoughnessTexture = { index: this.convertTexture(new MapData(imageData, m.wrapS, m.wrapT, m.minFilter, m.magFilter, m.center, m.color, m.offset, m.repeat, m.rotation, m.flipY)) }\r\n                        resolve();\r\n                    } catch(e) {\r\n                        reject(e);\r\n                    }\r\n                }))\r\n            }\r\n        }\r\n\r\n        if (data.normalMap && includeMaps) materialDef.normalTexture = { index: this.convertTexture(data.normalMap) };\r\n        if (data.aoMap && includeMaps) materialDef.occlusionTexture = { index: this.convertTexture(data.aoMap) };\r\n        if (data.emissiveMap && includeMaps) materialDef.emissiveTexture = { index: this.convertTexture(data.emissiveMap) };\r\n        if (data.emissiveness) materialDef.emissiveFactor = this._converter.toColorArray(data.emissiveness);\r\n        materialDef.alphaMode = data.alphaMode.toUpperCase();\r\n        if (data.alphaMode === MATERIAL_ALPHA.MASK) materialDef.alphaCutoff = data.alphaCutoff;\r\n        materialDef.doubleSided = data.side === MATERIAL_SIDE.DOUBLE;\r\n\r\n        this._content.materials.push(materialDef);\r\n\r\n        this._materialCache[data.id + '_' + data.version] = this._content.materials.length - 1;\r\n        return this._materialCache[data.id + '_' + data.version];\r\n    }\r\n\r\n    private convertMesh(data: IGeometryData): number {\r\n        if (!this._content.meshes) this._content.meshes = [];\r\n        if (this._meshCache[data.id + '_' + data.version]) return this._meshCache[data.id + '_' + data.version];\r\n\r\n        const meshDef: IGLTF_v2_Mesh = {\r\n            primitives: [],\r\n            name: data.id\r\n        };\r\n\r\n        meshDef.primitives?.push(this.convertPrimitive(data, data.primitive))\r\n\r\n        this._content.meshes.push(meshDef);\r\n        this._meshCache[data.id + '_' + data.version] = this._content.meshes.length - 1;\r\n        return this._meshCache[data.id + '_' + data.version];\r\n    }\r\n\r\n    private async convertNode(node: ITreeNode): Promise<number> {\r\n        if (!this._content.nodes) this._content.nodes = [];\r\n        const nodeDef: IGLTF_v2_Node = {\r\n            name: this._convertForAR ? this._uuidGenerator.create() : node.name,\r\n        };\r\n\r\n        if (node.transformations.length > 0) {\r\n            let matrix = node.nodeMatrix;\r\n            if(node.nodeMatrix.filter(v => isNaN(v) || v === Infinity || v === -Infinity).length > 0)\r\n                matrix = mat4.create();\r\n\r\n            nodeDef.matrix = [matrix[0], matrix[1], matrix[2], matrix[3],\r\n            matrix[4], matrix[5], matrix[6], matrix[7],\r\n            matrix[8], matrix[9], matrix[10], matrix[11],\r\n            matrix[12], matrix[13], matrix[14], matrix[15]];\r\n        }\r\n\r\n        for (let i = 0; i < node.data.length; i++) {\r\n            if (node.data[i] instanceof GeometryData) {\r\n                if (this._convertForAR) {\r\n                    if ((<GeometryData>node.data[i]).mode !== PRIMITIVE_MODE.POINTS &&\r\n                        (<GeometryData>node.data[i]).mode !== PRIMITIVE_MODE.LINES &&\r\n                        (<GeometryData>node.data[i]).mode !== PRIMITIVE_MODE.LINE_LOOP &&\r\n                        (<GeometryData>node.data[i]).mode !== PRIMITIVE_MODE.LINE_STRIP)\r\n                        nodeDef.mesh = this.convertMesh(<GeometryData>node.data[i])\r\n                } else {\r\n                    nodeDef.mesh = this.convertMesh(<GeometryData>node.data[i])\r\n                }\r\n            }\r\n\r\n            if (node.data[i] instanceof AnimationData)\r\n                this._animations.push(<AnimationData>node.data[i])\r\n        }\r\n\r\n        if (node.children.length > 0) nodeDef.children = [];\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            if(node.children[i].visible === true) {\r\n                if(this._viewport) {\r\n                    if(node.children[i].excludeViewports.includes(this._viewport)) continue;\r\n                    if(node.children[i].restrictViewports.length > 0 && !node.children[i].restrictViewports.includes(this._viewport)) continue;\r\n                }\r\n                const nodeId = await this.convertNode(node.children[i]);\r\n                if(nodeId !== -1) nodeDef.children?.push(nodeId);\r\n            }\r\n        }\r\n\r\n        // remove children array if it is empty\r\n        if(nodeDef.children !== undefined && nodeDef.children.length === 0)\r\n            nodeDef.children = undefined;\r\n\r\n        if(performance.now() - this._progressTimer > this._progressUpdateLimit) {\r\n            this._progressTimer = performance.now();\r\n            const eventProgress: ITaskEvent = { type: TASK_TYPE.GLTF_CREATION, id: this._eventId, progress: (this._content.nodes.length / this._numberOfNodes) / 2, status: `GlTF conversion progress: ${this._content.nodes.length}/${this._numberOfNodes} nodes.` };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventProgress);\r\n            await new Promise(resolve => setTimeout(resolve, 0));\r\n        }\r\n\r\n        // if the node is empty, don't add it\r\n        if(nodeDef.camera === undefined && nodeDef.children === undefined && nodeDef.mesh === undefined && nodeDef.extensions === undefined && nodeDef.extras === undefined && nodeDef.skin === undefined) return -1;\r\n\r\n        this._content.nodes.push(nodeDef);\r\n        this._nodes.push({\r\n            node,\r\n            id: this._content.nodes.length - 1\r\n        });\r\n\r\n        return this._content.nodes.length - 1;\r\n    }\r\n\r\n    private convertPrimitive(geometryData: IGeometryData, data: IPrimitiveData): IGLTF_v2_Primitive {\r\n        const primitiveDef: IGLTF_v2_Primitive = {\r\n            attributes: {},\r\n            mode: geometryData.mode\r\n        };\r\n\r\n        for (let a in data.attributes) {\r\n            if (data.attributes[a].array.length > 0) {\r\n                if (a.includes('COLOR')) {\r\n                    if (data.attributes[a].itemSize % 4 === 0) {\r\n                        primitiveDef.attributes[a] = this.convertAccessor(data.attributes[a])\r\n                    } else if (data.attributes[a].itemSize % 3 === 0) {\r\n                        const oldAttributeData = data.attributes[a];\r\n                        const newArray = new Float32Array((oldAttributeData.array.length/3)*4);\r\n\r\n                        let counter = 0;\r\n                        for(let i = 0; i < newArray.length; i+=4) {\r\n                            newArray[i] = oldAttributeData.array[counter] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i+1] = oldAttributeData.array[counter+1] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i+2] = oldAttributeData.array[counter+2] / (oldAttributeData.elementBytes === 1 ? 255.0 : 1.0);\r\n                            newArray[i+3] = 1.0;\r\n                            counter+=3;\r\n                        }\r\n                        primitiveDef.attributes[a] = this.convertAccessor(new AttributeData(newArray, 4, 4*4, oldAttributeData.byteOffset, 4, oldAttributeData.normalized, oldAttributeData.count, oldAttributeData.min, oldAttributeData.max, oldAttributeData.byteStride));\r\n                    }\r\n                } else {\r\n                    primitiveDef.attributes[a] = this.convertAccessor(data.attributes[a])\r\n                }\r\n            }\r\n        }\r\n\r\n        if (data.indices)\r\n            primitiveDef.indices = this.convertAccessor(data.indices);\r\n\r\n        if (geometryData.material) {\r\n            const k = Object.keys(primitiveDef.attributes).find(k => k.includes('TEXCOORD'));\r\n            primitiveDef.material = this.convertMaterial(geometryData.material, !!k);\r\n        }\r\n\r\n        return primitiveDef;\r\n    }\r\n\r\n    private convertTexture(data: IMapData): number {\r\n        if (!this._content.textures) this._content.textures = [];\r\n        const textureDef: IGLTF_v2_Texture = {\r\n            source: this.convertImage(data)\r\n        };\r\n        // TODO samplers\r\n        this._content.textures.push(textureDef);\r\n        return this._content.textures.length - 1;\r\n    }\r\n\r\n    private getComponentType(array: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array) {\r\n        switch (true) {\r\n            case array instanceof Int8Array:\r\n                return 5120;\r\n            case array instanceof Uint8Array:\r\n                return 5121;\r\n            case array instanceof Int16Array:\r\n                return 5122;\r\n            case array instanceof Uint16Array:\r\n                return 5123;\r\n            case array instanceof Uint32Array:\r\n                return 5125;\r\n            default:\r\n                return 5126;\r\n        }\r\n    }\r\n\r\n    private getMinMax(data: IAttributeData): { min: number[], max: number[] } {\r\n        const output = {\r\n            min: new Array(data.itemSize).fill(Number.POSITIVE_INFINITY),\r\n            max: new Array(data.itemSize).fill(Number.NEGATIVE_INFINITY)\r\n        };\r\n\r\n        for (let i = 0; i < data.count; i++) {\r\n            for (let a = 0; a < data.itemSize; a++) {\r\n                let value = 0;\r\n                if (data.itemSize > 4) {\r\n                    // no support for interleaved data for itemSize > 4\r\n                    value = data.array[i * data.itemSize + a];\r\n                } else {\r\n                    if (a === 0) value = data.array[i * data.itemSize];\r\n                    else if (a === 1) value = data.array[i * data.itemSize + 1];\r\n                    else if (a === 2) value = data.array[i * data.itemSize + 2];\r\n                    else if (a === 3) value = data.array[i * data.itemSize + 3];\r\n                }\r\n                output.min[a] = Math.min(output.min[a], value);\r\n                output.max[a] = Math.max(output.max[a], value);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    private getPaddedArrayBuffer(arrayBuffer: ArrayBuffer, paddingByte = 0) {\r\n        const paddedLength = Math.ceil(arrayBuffer.byteLength / 4) * 4;\r\n\r\n        if (paddedLength !== arrayBuffer.byteLength) {\r\n            const array = new Uint8Array(paddedLength);\r\n            array.set(new Uint8Array(arrayBuffer));\r\n\r\n            if (paddingByte !== 0) {\r\n                for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\r\n                    array[i] = paddingByte;\r\n                }\r\n            }\r\n\r\n            return array.buffer;\r\n        }\r\n\r\n        return arrayBuffer;\r\n    }\r\n\r\n    private getType(itemSize: number) {\r\n        switch (itemSize) {\r\n            case 1:\r\n                return 'SCALAR';\r\n            case 2:\r\n                return 'VEC2';\r\n            case 3:\r\n                return 'VEC3';\r\n            case 4:\r\n                return 'VEC4';\r\n            case 9:\r\n                return 'MAT3';\r\n            case 18:\r\n                return 'MAT4';\r\n            default:\r\n                return 'VEC3';\r\n        }\r\n    }\r\n\r\n    private reset() {\r\n        this._animations = [];\r\n        this._buffers = [];\r\n        this._byteOffset = 0;\r\n        this._content = {\r\n            asset: {\r\n                copyright: '2023 (c) ShapeDiver',\r\n                generator: 'ShapeDiverViewer@' + build_data.build_version,\r\n                version: '2.0',\r\n                extensions: {}\r\n            },\r\n        }\r\n\r\n        this._extensionsRequired = [];\r\n        this._extensionsUsed = [];\r\n        this._imageCache = {};\r\n        this._materialCache = {};\r\n        this._meshCache = {};\r\n        this._nodes = [];\r\n        this._promises = [];\r\n\r\n        this._convertForAR = false;\r\n        this._viewport = undefined;\r\n    }\r\n\r\n    private stringToArrayBuffer(text: string) {\r\n        if (window.TextEncoder !== undefined) {\r\n            return new TextEncoder().encode(text).buffer;\r\n        }\r\n\r\n        const array = new Uint8Array(new ArrayBuffer(text.length));\r\n\r\n        for (let i = 0, il = text.length; i < il; i++) {\r\n            const value = text.charCodeAt(i);\r\n\r\n            // Replacing multi-byte character with space(0x20).\r\n            array[i] = value > 0xFF ? 0x20 : value;\r\n        }\r\n\r\n        return array.buffer;\r\n    }\r\n\r\n    // #endregion Private Methods (17)\r\n}"]}},"error":null,"hash":"e2cc18a28f76377c8aa2229e111f3716","cacheData":{"env":{}}}