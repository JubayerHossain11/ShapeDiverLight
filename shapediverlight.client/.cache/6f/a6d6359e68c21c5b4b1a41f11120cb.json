{"id":"node_modules/@shapediver/viewer.data-engine.geometry-engine/dist/gltfv2/loaders/TextureLoader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\TextureLoader.js.map","includedInParent":true,"mtime":1706542087224},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\src\\gltfv2\\loaders\\TextureLoader.ts","includedInParent":true,"mtime":1706542087381},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\package.json","includedInParent":true,"mtime":1706542086828},{"name":"@shapediver/viewer.shared.services","loc":{"line":13,"column":41,"index":843},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.data-engine.geometry-engine\\dist\\gltfv2\\loaders\\TextureLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextureLoader = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nclass TextureLoader {\r\n    // #endregion Properties (4)\r\n    // #region Constructors (1)\r\n    constructor(_content, _bufferViewLoader, _baseUri) {\r\n        this._content = _content;\r\n        this._bufferViewLoader = _bufferViewLoader;\r\n        this._baseUri = _baseUri;\r\n        // #region Properties (4)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._loaded = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getTexture(textureId) {\r\n        if (!this._content.textures)\r\n            throw new Error('TextureLoader.getTexture: Textures not available.');\r\n        if (!this._content.textures[textureId])\r\n            throw new Error('TextureLoader.getTexture: Texture not available.');\r\n        if (!this._loaded[textureId])\r\n            throw new Error('TextureLoader.getTexture: Texture not loaded.');\r\n        return this._loaded[textureId];\r\n    }\r\n    load() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._content.textures)\r\n                return;\r\n            let promises = [];\r\n            for (let i = 0; i < this._content.textures.length; i++) {\r\n                const textureId = i;\r\n                const texture = this._content.textures[textureId];\r\n                if (!this._content.images)\r\n                    throw new Error('TextureLoader.load: Images not available.');\r\n                const image = this._content.images[texture.source];\r\n                const DATA_URI_REGEX = /^data:(.*?)(;base64)?,(.*)$/;\r\n                const HTTPS_URI_REGEX = /^https:\\/\\//;\r\n                if (image.bufferView !== undefined) {\r\n                    const bufferView = this._bufferViewLoader.getBufferView(image.bufferView);\r\n                    const dataView = new DataView(bufferView);\r\n                    const array = [];\r\n                    for (let i = 0; i < dataView.byteLength; i += 1)\r\n                        array[i] = dataView.getUint8(i);\r\n                    const blob = new Blob([new Uint8Array(array)], { type: image.mimeType });\r\n                    const dataUri = URL.createObjectURL(blob);\r\n                    promises.push(new Promise((resolve, reject) => {\r\n                        this._httpClient.loadTexture(dataUri)\r\n                            .then(response => {\r\n                            this._converter.responseToImage(response).then(img => {\r\n                                this._loaded[textureId] = img;\r\n                                URL.revokeObjectURL(dataUri);\r\n                                resolve();\r\n                            }).catch(e => reject(e));\r\n                        });\r\n                    }));\r\n                }\r\n                else {\r\n                    const url = DATA_URI_REGEX.test(image.uri) || HTTPS_URI_REGEX.test(image.uri) ? image.uri : `${this._baseUri}/${image.uri}`;\r\n                    promises.push(new Promise((resolve, reject) => {\r\n                        this._httpClient.loadTexture(url)\r\n                            .then(response => {\r\n                            this._converter.responseToImage(response).then(img => {\r\n                                this._loaded[textureId] = img;\r\n                                resolve();\r\n                            });\r\n                        }).catch(e => reject(e));\r\n                    }));\r\n                }\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n}\r\nexports.TextureLoader = TextureLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"TextureLoader.js","sourceRoot":"","sources":["../../../src/gltfv2/loaders/TextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types'\r\nimport { Converter, HttpClient } from '@shapediver/viewer.shared.services'\r\n\r\nimport { BufferViewLoader } from './BufferViewLoader'\r\n\r\nexport class TextureLoader {\r\n    // #region Properties (4)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n\r\n    private _loaded: {\r\n        [key: string]: HTMLImageElement\r\n    } = {};\r\n\r\n    // #endregion Properties (4)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _content: IGLTF_v2, private readonly _bufferViewLoader: BufferViewLoader, private _baseUri?: string) { }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public getTexture(textureId: number): HTMLImageElement {\r\n        if (!this._content.textures) throw new Error('TextureLoader.getTexture: Textures not available.')\r\n        if (!this._content.textures[textureId]) throw new Error('TextureLoader.getTexture: Texture not available.')\r\n        if (!this._loaded[textureId]) throw new Error('TextureLoader.getTexture: Texture not loaded.')\r\n        return this._loaded[textureId];\r\n    }\r\n\r\n    public async load(): Promise<void> {\r\n        if (!this._content.textures) return;\r\n\r\n        let promises: Promise<void>[] = [];\r\n        for(let i = 0; i < this._content.textures.length; i++) {\r\n            const textureId = i;\r\n            const texture = this._content.textures[textureId];\r\n            if (!this._content.images) throw new Error('TextureLoader.load: Images not available.')\r\n            const image = this._content.images[texture.source];\r\n    \r\n            const DATA_URI_REGEX = /^data:(.*?)(;base64)?,(.*)$/;\r\n            const HTTPS_URI_REGEX = /^https:\\/\\//;\r\n    \r\n            if (image.bufferView !== undefined) {\r\n                const bufferView = this._bufferViewLoader.getBufferView(image.bufferView);\r\n                const dataView = new DataView(bufferView);\r\n                const array: Array<number> = [];\r\n                for (let i = 0; i < dataView.byteLength; i += 1)\r\n                    array[i] = dataView.getUint8(i);\r\n    \r\n                const blob = new Blob([new Uint8Array(array)], { type: image.mimeType });\r\n                const dataUri = URL.createObjectURL(blob);\r\n    \r\n                promises.push(\r\n                    new Promise<void>((resolve, reject) => {\r\n                        this._httpClient.loadTexture(dataUri)\r\n                            .then(response => {\r\n                                this._converter.responseToImage(response).then(img => {\r\n                                    this._loaded[textureId] = img;\r\n                                    URL.revokeObjectURL(dataUri)\r\n                                    resolve()\r\n                                }).catch(e => reject(e));\r\n                            })\r\n                    })\r\n                );\r\n            } else {\r\n                const url = DATA_URI_REGEX.test(image.uri!) || HTTPS_URI_REGEX.test(image.uri!) ? image.uri : `${this._baseUri}/${image.uri}`;\r\n                promises.push(\r\n                    new Promise<void>((resolve, reject) => {\r\n                        this._httpClient.loadTexture(url!)\r\n                            .then(response => {\r\n                                this._converter.responseToImage(response).then(img => {\r\n                                    this._loaded[textureId] = img;\r\n                                    resolve()\r\n                                });\r\n                            }).catch(e => reject(e));\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n}"]}},"error":null,"hash":"c8b6ebfd79aaddec26e7a5975944f8e6","cacheData":{"env":{}}}