{"id":"node_modules/@shapediver/viewer.data-engine.tag3d-engine/dist/three/geometries/TextGeometry.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\geometries\\TextGeometry.js.map","includedInParent":true,"mtime":1706527148993},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\src\\three\\geometries\\TextGeometry.js","includedInParent":true,"mtime":1706527148793},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\package.json","includedInParent":true,"mtime":1706527148805},{"name":"three","loc":{"line":20,"column":24,"index":652},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.tag3d-engine\\dist\\three\\geometries\\TextGeometry.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n *  bevelOffset: <float> // how far from text outline does bevel start\r\n * }\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextGeometry = void 0;\r\nconst three_1 = require(\"three\");\r\nclass TextGeometry extends three_1.ExtrudeGeometry {\r\n    constructor(text, parameters = {}) {\r\n        const font = parameters.font;\r\n        if (font === undefined) {\r\n            super(); // generate default extrude geometry\r\n        }\r\n        else {\r\n            const shapes = font.generateShapes(text, parameters.size);\r\n            // translate parameters to ExtrudeGeometry API\r\n            parameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n            // defaults\r\n            if (parameters.bevelThickness === undefined)\r\n                parameters.bevelThickness = 10;\r\n            if (parameters.bevelSize === undefined)\r\n                parameters.bevelSize = 8;\r\n            if (parameters.bevelEnabled === undefined)\r\n                parameters.bevelEnabled = false;\r\n            super(shapes, parameters);\r\n        }\r\n        this.type = 'TextGeometry';\r\n    }\r\n}\r\nexports.TextGeometry = TextGeometry;\r\n"},"sourceMaps":{"js":{"version":3,"file":"TextGeometry.js","sourceRoot":"","sources":["../../../src/three/geometries/TextGeometry.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AAEH,iCAEe;AAEf,MAAM,YAAa,SAAQ,uBAAe;IAEzC,YAAa,IAAI,EAAE,UAAU,GAAG,EAAE;QAEjC,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE7B,IAAK,IAAI,KAAK,SAAS,EAAG;YAEzB,KAAK,EAAE,CAAC,CAAC,oCAAoC;SAE7C;aAAM;YAEN,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAE,IAAI,EAAE,UAAU,CAAC,IAAI,CAAE,CAAC;YAE5D,8CAA8C;YAE9C,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;YAE5E,WAAW;YAEX,IAAK,UAAU,CAAC,cAAc,KAAK,SAAS;gBAAG,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;YAC9E,IAAK,UAAU,CAAC,SAAS,KAAK,SAAS;gBAAG,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC;YACnE,IAAK,UAAU,CAAC,YAAY,KAAK,SAAS;gBAAG,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC;YAE7E,KAAK,CAAE,MAAM,EAAE,UAAU,CAAE,CAAC;SAE5B;QAED,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;IAE5B,CAAC;CAED;AAGQ,oCAAY","sourcesContent":["/**\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n *  bevelOffset: <float> // how far from text outline does bevel start\r\n * }\r\n */\r\n\r\nimport {\r\n\tExtrudeGeometry\r\n} from 'three';\r\n\r\nclass TextGeometry extends ExtrudeGeometry {\r\n\r\n\tconstructor( text, parameters = {} ) {\r\n\r\n\t\tconst font = parameters.font;\r\n\r\n\t\tif ( font === undefined ) {\r\n\r\n\t\t\tsuper(); // generate default extrude geometry\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t\t// defaults\r\n\r\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\t\t\tsuper( shapes, parameters );\r\n\r\n\t\t}\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { TextGeometry };\r\n"]}},"error":null,"hash":"df0c3bff88140f914b83b068f1c04b23","cacheData":{"env":{}}}