{"id":"Or2w","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\SAOShader.js.map","includedInParent":true,"mtime":1706476152318},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\three\\shaders\\SAOShader.js","includedInParent":true,"mtime":1706476151507},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706476652643},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706476151754},{"name":"three","loc":{"line":4,"column":24,"index":132},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\SAOShader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.SAOShader=void 0;const t=require(\"three\"),e={defines:{NUM_SAMPLES:8,NORMAL_TEXTURE:0,DIFFUSE_TEXTURE:0,PERSPECTIVE_CAMERA:1},uniforms:{tDepth:{value:null},tDiffuse:{value:null},tNormal:{value:null},size:{value:new t.Vector2(512,512)},cameraNear:{value:1},cameraFar:{value:100},cameraProjectionMatrix:{value:new t.Matrix4},cameraInverseProjectionMatrix:{value:new t.Matrix4},scale:{value:1},intensity:{value:.1},bias:{value:.5},minResolution:{value:0},kernelRadius:{value:100},randomSeed:{value:0}},vertexShader:\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t}\",fragmentShader:\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\t#if DIFFUSE_TEXTURE == 1\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t#endif\\n\\n\\t\\tuniform sampler2D tDepth;\\n\\n\\t\\t#if NORMAL_TEXTURE == 1\\n\\t\\tuniform sampler2D tNormal;\\n\\t\\t#endif\\n\\n\\t\\tuniform float cameraNear;\\n\\t\\tuniform float cameraFar;\\n\\t\\tuniform mat4 cameraProjectionMatrix;\\n\\t\\tuniform mat4 cameraInverseProjectionMatrix;\\n\\n\\t\\tuniform float scale;\\n\\t\\tuniform float intensity;\\n\\t\\tuniform float kernelRadius;\\n\\t\\tuniform vec2 size;\\n\\n\\t\\t// RGBA depth\\n\\n\\t\\t#include <common>\\n\\t\\t#include <packing>\\n\\n\\t\\tvec4 getDefaultColor( const in vec2 screenPosition ) {\\n\\t\\t\\t#if DIFFUSE_TEXTURE == 1\\n\\t\\t\\treturn texture2D( tDiffuse, vUv );\\n\\t\\t\\t#else\\n\\t\\t\\treturn vec4( 1.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\n\\t\\tvec3 getViewPosition(const in vec2 screenPosition, const in float depth, const in float viewZ) {\\n\\t\\t\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\\n\\t\\t\\tvec4 clipPosition = vec4((vec3(screenPosition, depth) - 0.5) * 2.0, 1.0);\\n\\t\\t\\tclipPosition *= clipW; // unprojection\\n\\t\\t\\n\\t\\t\\treturn (cameraInverseProjectionMatrix * clipPosition).xyz;\\n\\t\\t}\\n\\n\\t\\tfloat getViewZ( const in float depth ) {\\n\\t\\t\\t#if PERSPECTIVE_CAMERA == 1\\n\\t\\t\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\\n\\t\\t\\t#else\\n\\t\\t\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t\\t\\n\\t\\tfloat getOcclusion(const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition) {\\n\\t\\t\\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\\n\\t\\t\\tfloat viewDistance = length(viewDelta);\\n\\t\\t\\tfloat scaledScreenDistance = scale * viewDistance;\\n\\t\\t\\treturn max(0.0, (dot(centerViewNormal, viewDelta))/scaledScreenDistance)/(1.0 + pow2(scaledScreenDistance));\\n\\t\\t}\\n\\t\\t\\n\\t\\tfloat getAmbientOcclusion(const in vec3 centerViewPosition) {\\n\\t\\t\\tvec3 centerViewNormal = unpackRGBToNormal(texture2D(tNormal, vUv).xyz);\\n\\t\\t\\n\\t\\t\\tfloat angle = rand(vUv) * PI2;\\n\\t\\t\\tvec2 radius = vec2(kernelRadius * (1.0/float(NUM_SAMPLES)))/size;\\n\\t\\t\\tvec2 radiusStep = radius;\\n\\t\\t\\tfloat occlusionSum = 0.0;\\n\\t\\t\\tfloat weightSum = 0.0;\\n\\t\\t\\tfloat angleStep = PI2 * 3.0/float(NUM_SAMPLES);\\n\\t\\t\\n\\t\\t\\tfor(int i = 0; i < NUM_SAMPLES; i ++) {\\n\\t\\t\\t\\tvec2 sampleUv = vUv + vec2(cos(angle), sin(angle)) * radius;\\n\\t\\t\\t\\tradius += radiusStep;\\n\\t\\t\\t\\tangle += PI2 * 3.0/float(NUM_SAMPLES);\\n\\t\\t\\n\\t\\t\\t\\tfloat sampleDepth = unpackRGBAToDepth(texture2D(tDepth, sampleUv));\\n\\t\\t\\t\\tif(sampleDepth >= (1.0 - EPSILON)) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t\\tfloat sampleViewZ = getViewZ(sampleDepth);\\n\\t\\t\\t\\tvec3 sampleViewPosition = getViewPosition(sampleUv, sampleDepth, sampleViewZ);\\n\\t\\t\\t\\tocclusionSum += getOcclusion(centerViewPosition, centerViewNormal, sampleViewPosition);\\n\\t\\t\\t\\tweightSum += 1.0;\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\tif(weightSum == 0.0) discard;\\n\\t\\t\\n\\t\\t\\treturn occlusionSum * (intensity/weightSum);\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\t\\t\\tfloat centerDepth = unpackRGBAToDepth(texture2D(tDepth, vUv));\\n\\t\\t\\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\\n\\t\\t\\t\\tdiscard;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat centerViewZ = getViewZ( centerDepth );\\n\\t\\t\\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\\n\\t\\t\\tgl_FragColor = vec4(viewPosition, 1);\\n\\n\\t\\t\\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\\n\\n\\t\\t\\tgl_FragColor = getDefaultColor( vUv );\\n\\t\\t\\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\\n\\t\\t}\"};exports.SAOShader=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":101}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":109}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":10,"column":6},"generated":{"line":1,"column":118}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":10,"column":18},"generated":{"line":1,"column":120}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":11,"column":1},"generated":{"line":1,"column":121}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":11,"column":10},"generated":{"line":1,"column":129}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":12,"column":2},"generated":{"line":1,"column":130}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":12,"column":17},"generated":{"line":1,"column":142}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":13,"column":2},"generated":{"line":1,"column":144}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":13,"column":20},"generated":{"line":1,"column":159}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":14,"column":2},"generated":{"line":1,"column":161}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":14,"column":21},"generated":{"line":1,"column":177}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":15,"column":2},"generated":{"line":1,"column":179}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":15,"column":24},"generated":{"line":1,"column":198}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":17,"column":1},"generated":{"line":1,"column":201}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":17,"column":11},"generated":{"line":1,"column":210}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":19,"column":2},"generated":{"line":1,"column":211}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":19,"column":12},"generated":{"line":1,"column":218}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":19,"column":14},"generated":{"line":1,"column":219}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":19,"column":21},"generated":{"line":1,"column":225}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":20,"column":2},"generated":{"line":1,"column":231}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":20,"column":14},"generated":{"line":1,"column":240}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":20,"column":16},"generated":{"line":1,"column":241}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":247}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":253}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":261}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":21,"column":15},"generated":{"line":1,"column":262}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":21,"column":22},"generated":{"line":1,"column":268}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":274}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":10},"generated":{"line":1,"column":279}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":12},"generated":{"line":1,"column":280}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":286}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":23},"generated":{"line":1,"column":290}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":23},"generated":{"line":1,"column":292}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":32},"generated":{"line":1,"column":300}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":22,"column":37},"generated":{"line":1,"column":304}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":310}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":24,"column":16},"generated":{"line":1,"column":321}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":24,"column":18},"generated":{"line":1,"column":322}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":24,"column":25},"generated":{"line":1,"column":328}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":331}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":25,"column":15},"generated":{"line":1,"column":341}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":25,"column":17},"generated":{"line":1,"column":342}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":25,"column":24},"generated":{"line":1,"column":348}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":353}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":28},"generated":{"line":1,"column":376}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":30},"generated":{"line":1,"column":377}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":37},"generated":{"line":1,"column":383}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":41},"generated":{"line":1,"column":387}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":26,"column":41},"generated":{"line":1,"column":389}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":398}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":35},"generated":{"line":1,"column":428}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":37},"generated":{"line":1,"column":429}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":44},"generated":{"line":1,"column":435}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":48},"generated":{"line":1,"column":439}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":27,"column":48},"generated":{"line":1,"column":441}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":29,"column":2},"generated":{"line":1,"column":450}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":29,"column":11},"generated":{"line":1,"column":456}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":29,"column":13},"generated":{"line":1,"column":457}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":29,"column":20},"generated":{"line":1,"column":463}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":30,"column":2},"generated":{"line":1,"column":466}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":30,"column":15},"generated":{"line":1,"column":476}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":30,"column":17},"generated":{"line":1,"column":477}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":30,"column":24},"generated":{"line":1,"column":483}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":31,"column":2},"generated":{"line":1,"column":487}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":492}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":31,"column":12},"generated":{"line":1,"column":493}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":31,"column":19},"generated":{"line":1,"column":499}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":33,"column":2},"generated":{"line":1,"column":503}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":33,"column":19},"generated":{"line":1,"column":517}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":33,"column":21},"generated":{"line":1,"column":518}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":33,"column":28},"generated":{"line":1,"column":524}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":34,"column":2},"generated":{"line":1,"column":527}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":34,"column":18},"generated":{"line":1,"column":540}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":34,"column":20},"generated":{"line":1,"column":541}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":34,"column":27},"generated":{"line":1,"column":547}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":35,"column":2},"generated":{"line":1,"column":552}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":35,"column":16},"generated":{"line":1,"column":563}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":35,"column":18},"generated":{"line":1,"column":564}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":35,"column":25},"generated":{"line":1,"column":570}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":574}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":37,"column":25},"generated":{"line":1,"column":587}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":741}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":46,"column":27},"generated":{"line":1,"column":756}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":155,"column":9},"generated":{"line":1,"column":4281}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":155,"column":9},"generated":{"line":1,"column":4289}},{"source":"../../../src/three/shaders/SAOShader.js","name":null,"original":{"line":155,"column":9},"generated":{"line":1,"column":4299}}],"sources":{"../../../src/three/shaders/SAOShader.js":"import {\r\n\tMatrix4,\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * TODO\r\n */\r\n\r\nconst SAOShader = {\r\n\tdefines: {\r\n\t\t'NUM_SAMPLES': 8,\r\n\t\t'NORMAL_TEXTURE': 0,\r\n\t\t'DIFFUSE_TEXTURE': 0,\r\n\t\t'PERSPECTIVE_CAMERA': 1\r\n\t},\r\n\tuniforms: {\r\n\r\n\t\t'tDepth': { value: null },\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'tNormal': { value: null },\r\n\t\t'size': { value: new Vector2( 512, 512 ) },\r\n\r\n\t\t'cameraNear': { value: 1 },\r\n\t\t'cameraFar': { value: 100 },\r\n\t\t'cameraProjectionMatrix': { value: new Matrix4() },\r\n\t\t'cameraInverseProjectionMatrix': { value: new Matrix4() },\r\n\r\n\t\t'scale': { value: 1.0 },\r\n\t\t'intensity': { value: 0.1 },\r\n\t\t'bias': { value: 0.5 },\r\n\r\n\t\t'minResolution': { value: 0.0 },\r\n\t\t'kernelRadius': { value: 100.0 },\r\n\t\t'randomSeed': { value: 0.0 }\r\n\t},\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#if DIFFUSE_TEXTURE == 1\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\t#endif\r\n\r\n\t\tuniform sampler2D tDepth;\r\n\r\n\t\t#if NORMAL_TEXTURE == 1\r\n\t\tuniform sampler2D tNormal;\r\n\t\t#endif\r\n\r\n\t\tuniform float cameraNear;\r\n\t\tuniform float cameraFar;\r\n\t\tuniform mat4 cameraProjectionMatrix;\r\n\t\tuniform mat4 cameraInverseProjectionMatrix;\r\n\r\n\t\tuniform float scale;\r\n\t\tuniform float intensity;\r\n\t\tuniform float kernelRadius;\r\n\t\tuniform vec2 size;\r\n\r\n\t\t// RGBA depth\r\n\r\n\t\t#include <common>\r\n\t\t#include <packing>\r\n\r\n\t\tvec4 getDefaultColor( const in vec2 screenPosition ) {\r\n\t\t\t#if DIFFUSE_TEXTURE == 1\r\n\t\t\treturn texture2D( tDiffuse, vUv );\r\n\t\t\t#else\r\n\t\t\treturn vec4( 1.0 );\r\n\t\t\t#endif\r\n\t\t}\r\n\r\n\t\tvec3 getViewPosition(const in vec2 screenPosition, const in float depth, const in float viewZ) {\r\n\t\t\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\r\n\t\t\tvec4 clipPosition = vec4((vec3(screenPosition, depth) - 0.5) * 2.0, 1.0);\r\n\t\t\tclipPosition *= clipW; // unprojection\r\n\t\t\r\n\t\t\treturn (cameraInverseProjectionMatrix * clipPosition).xyz;\r\n\t\t}\r\n\r\n\t\tfloat getViewZ( const in float depth ) {\r\n\t\t\t#if PERSPECTIVE_CAMERA == 1\r\n\t\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\r\n\t\t\t#else\r\n\t\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\r\n\t\t\t#endif\r\n\t\t}\r\n\t\t\r\n\t\tfloat getOcclusion(const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition) {\r\n\t\t\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\r\n\t\t\tfloat viewDistance = length(viewDelta);\r\n\t\t\tfloat scaledScreenDistance = scale * viewDistance;\r\n\t\t\treturn max(0.0, (dot(centerViewNormal, viewDelta))/scaledScreenDistance)/(1.0 + pow2(scaledScreenDistance));\r\n\t\t}\r\n\t\t\r\n\t\tfloat getAmbientOcclusion(const in vec3 centerViewPosition) {\r\n\t\t\tvec3 centerViewNormal = unpackRGBToNormal(texture2D(tNormal, vUv).xyz);\r\n\t\t\r\n\t\t\tfloat angle = rand(vUv) * PI2;\r\n\t\t\tvec2 radius = vec2(kernelRadius * (1.0/float(NUM_SAMPLES)))/size;\r\n\t\t\tvec2 radiusStep = radius;\r\n\t\t\tfloat occlusionSum = 0.0;\r\n\t\t\tfloat weightSum = 0.0;\r\n\t\t\tfloat angleStep = PI2 * 3.0/float(NUM_SAMPLES);\r\n\t\t\r\n\t\t\tfor(int i = 0; i < NUM_SAMPLES; i ++) {\r\n\t\t\t\tvec2 sampleUv = vUv + vec2(cos(angle), sin(angle)) * radius;\r\n\t\t\t\tradius += radiusStep;\r\n\t\t\t\tangle += PI2 * 3.0/float(NUM_SAMPLES);\r\n\t\t\r\n\t\t\t\tfloat sampleDepth = unpackRGBAToDepth(texture2D(tDepth, sampleUv));\r\n\t\t\t\tif(sampleDepth >= (1.0 - EPSILON)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tfloat sampleViewZ = getViewZ(sampleDepth);\r\n\t\t\t\tvec3 sampleViewPosition = getViewPosition(sampleUv, sampleDepth, sampleViewZ);\r\n\t\t\t\tocclusionSum += getOcclusion(centerViewPosition, centerViewNormal, sampleViewPosition);\r\n\t\t\t\tweightSum += 1.0;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif(weightSum == 0.0) discard;\r\n\t\t\r\n\t\t\treturn occlusionSum * (intensity/weightSum);\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\t\t\tfloat centerDepth = unpackRGBAToDepth(texture2D(tDepth, vUv));\r\n\t\t\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\r\n\t\t\t\tdiscard;\r\n\t\t\t}\r\n\r\n\t\t\tfloat centerViewZ = getViewZ( centerDepth );\r\n\t\t\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\r\n\t\t\tgl_FragColor = vec4(viewPosition, 1);\r\n\r\n\t\t\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\r\n\r\n\t\t\tgl_FragColor = getDefaultColor( vUv );\r\n\t\t\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { SAOShader };\r\n"},"lineCount":null}},"error":null,"hash":"89d01c87bc88d349a54d04213b3dff59","cacheData":{"env":{}}}