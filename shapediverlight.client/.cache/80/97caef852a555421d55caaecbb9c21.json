{"id":"node_modules/@shapediver/viewer.shared.types/dist/implementation/sdtf/SDTFAttributesData.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\sdtf\\SDTFAttributesData.js.map","includedInParent":true,"mtime":1706542087031},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\src\\implementation\\sdtf\\SDTFAttributesData.ts","includedInParent":true,"mtime":1706542087492},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\package.json","includedInParent":true,"mtime":1706542086386},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":16,"column":42,"index":1403},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\implementation\\sdtf\\SDTFAttributesData.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _SDTFAttributeData_typeHint, _SDTFAttributeData_value, _SDTFAttributeData_resolvedValue, _SDTFAttributesData_attributes;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SDTFAttributesData = exports.SDTFAttributeData = void 0;\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nclass SDTFAttributeData {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(typeHint, value) {\r\n        // #region Properties (2)\r\n        _SDTFAttributeData_typeHint.set(this, void 0);\r\n        _SDTFAttributeData_value.set(this, void 0);\r\n        _SDTFAttributeData_resolvedValue.set(this, void 0);\r\n        __classPrivateFieldSet(this, _SDTFAttributeData_typeHint, typeHint, \"f\");\r\n        __classPrivateFieldSet(this, _SDTFAttributeData_value, value, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (2)\r\n    get typeHint() {\r\n        return __classPrivateFieldGet(this, _SDTFAttributeData_typeHint, \"f\");\r\n    }\r\n    get value() {\r\n        if (__classPrivateFieldGet(this, _SDTFAttributeData_value, \"f\") instanceof Function && !__classPrivateFieldGet(this, _SDTFAttributeData_resolvedValue, \"f\")) {\r\n            __classPrivateFieldSet(this, _SDTFAttributeData_resolvedValue, __classPrivateFieldGet(this, _SDTFAttributeData_value, \"f\").call(this), \"f\");\r\n            return __classPrivateFieldGet(this, _SDTFAttributeData_resolvedValue, \"f\");\r\n        }\r\n        else if (__classPrivateFieldGet(this, _SDTFAttributeData_value, \"f\") instanceof Function) {\r\n            return __classPrivateFieldGet(this, _SDTFAttributeData_resolvedValue, \"f\");\r\n        }\r\n        return __classPrivateFieldGet(this, _SDTFAttributeData_value, \"f\");\r\n    }\r\n}\r\nexports.SDTFAttributeData = SDTFAttributeData;\r\n_SDTFAttributeData_typeHint = new WeakMap(), _SDTFAttributeData_value = new WeakMap(), _SDTFAttributeData_resolvedValue = new WeakMap();\r\n// export class SDTFAttributeAsyncData {\r\n//     // #region Properties (2)\r\n//     readonly #typeHint;\r\n//     readonly #accessor;\r\n//     private _value: Promise<any> | undefined;\r\n//     private readonly _loadAccessor: (accessorID: number) => Promise<any>\r\n//     // #endregion Properties (2)\r\n//     // #region Constructors (1)\r\n//     constructor(\r\n//             typeHint: string,\r\n//             accessor: number,\r\n//         private readonly _loadAccessor: (accessorID: number) => Promise<any>\r\n//     ) {\r\n//         this._typeHint = typeHint;\r\n//         this._accessor = accessor;\r\n//     }\r\n//     public get value(): Promise<any> {\r\n//         if (this.value !== undefined) {\r\n//             return this._value!;\r\n//         } else {\r\n//             this._value = this._loadAccessor!(this._accessor!);\r\n//             return this._value;\r\n//         }\r\n//     }\r\n//     public get typeHint(): string {\r\n//         return this._typeHint;\r\n//     }\r\n//     // #endregion Constructors (1)\r\n// }\r\nclass SDTFAttributesData extends viewer_shared_node_tree_1.AbstractTreeNodeData {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(attributes = {}, id, version) {\r\n        super(id, version);\r\n        // #region Properties (1)\r\n        _SDTFAttributesData_attributes.set(this, {});\r\n        __classPrivateFieldSet(this, _SDTFAttributesData_attributes, attributes, \"f\");\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (1)\r\n    get attributes() {\r\n        return __classPrivateFieldGet(this, _SDTFAttributesData_attributes, \"f\");\r\n    }\r\n    // #endregion Public Accessors (1)\r\n    // #region Public Methods (1)\r\n    /**\r\n     * Clones the scene graph data.\r\n     */\r\n    clone() {\r\n        return new SDTFAttributesData(this.attributes, this.id, this.version);\r\n    }\r\n}\r\nexports.SDTFAttributesData = SDTFAttributesData;\r\n_SDTFAttributesData_attributes = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"SDTFAttributesData.js","sourceRoot":"","sources":["../../../src/implementation/sdtf/SDTFAttributesData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,iFAAyF;AAIzF,MAAa,iBAAiB;IAQ1B,4BAA4B;IAE5B,2BAA2B;IAE3B,YACI,QAAmC,EACnC,KAAU;QAbd,yBAAyB;QAEzB,8CAAmB;QACnB,2CAAgB;QAEhB,mDAAoB;QAUhB,uBAAA,IAAI,+BAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,4BAAU,KAAK,MAAA,CAAC;IACxB,CAAC;IAED,8BAA8B;IAE9B,+BAA+B;IAE/B,IAAW,QAAQ;QACf,OAAO,uBAAA,IAAI,mCAAU,CAAC;IAC1B,CAAC;IAED,IAAW,KAAK;QACZ,IAAG,uBAAA,IAAI,gCAAO,YAAY,QAAQ,IAAI,CAAC,uBAAA,IAAI,wCAAe,EAAE;YACxD,uBAAA,IAAI,oCAAkB,uBAAA,IAAI,gCAAO,MAAX,IAAI,CAAS,MAAA,CAAC;YACpC,OAAO,uBAAA,IAAI,wCAAe,CAAC;SAC9B;aAAM,IAAG,uBAAA,IAAI,gCAAO,YAAY,QAAQ,EAAE;YACvC,OAAO,uBAAA,IAAI,wCAAe,CAAC;SAC9B;QAED,OAAO,uBAAA,IAAI,gCAAO,CAAC;IACvB,CAAC;CAGJ;AAxCD,8CAwCC;;AAED,wCAAwC;AACxC,gCAAgC;AAEhC,0BAA0B;AAC1B,0BAA0B;AAC1B,gDAAgD;AAChD,2EAA2E;AAE3E,mCAAmC;AAEnC,kCAAkC;AAElC,mBAAmB;AACnB,gCAAgC;AAChC,gCAAgC;AAChC,+EAA+E;AAC/E,UAAU;AACV,qCAAqC;AACrC,qCAAqC;AACrC,QAAQ;AAER,yCAAyC;AACzC,0CAA0C;AAC1C,mCAAmC;AACnC,mBAAmB;AACnB,kEAAkE;AAClE,kCAAkC;AAClC,YAAY;AACZ,QAAQ;AAER,sCAAsC;AACtC,iCAAiC;AACjC,QAAQ;AAER,qCAAqC;AACrC,IAAI;AAEJ,MAAa,kBAAmB,SAAQ,8CAAoB;IAOxD,4BAA4B;IAE5B,2BAA2B;IAE3B,YACI,aAEI,EAAE,EACN,EAAW,EACX,OAAgB;QAEhB,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAjBvB,yBAAyB;QAEzB,yCAEI,EAAE,EAAC;QAcH,uBAAA,IAAI,kCAAe,UAAU,MAAA,CAAC;IAClC,CAAC;IAED,8BAA8B;IAE9B,+BAA+B;IAE/B,IAAW,UAAU;QAGjB,OAAO,uBAAA,IAAI,sCAAY,CAAC;IAC5B,CAAC;IAED,kCAAkC;IAElC,6BAA6B;IAE7B;;OAEG;IACI,KAAK;QACR,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC;CAGJ;AA5CD,gDA4CC","sourcesContent":["import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree'\r\nimport { ISDTFAttributeData, ISDTFAttributesData } from '../../interfaces/sdtf/ISDTFAttributesData';\r\nimport { SdtfTypeHintName } from '@shapediver/sdk.sdtf-v1'\r\n\r\nexport class SDTFAttributeData implements ISDTFAttributeData {\r\n    // #region Properties (2)\r\n\r\n    readonly #typeHint;\r\n    readonly #value;\r\n\r\n    #resolvedValue: any;\r\n\r\n    // #endregion Properties (2)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        typeHint: SdtfTypeHintName | string,\r\n        value: any\r\n    ) {\r\n        this.#typeHint = typeHint;\r\n        this.#value = value;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (2)\r\n\r\n    public get typeHint(): SdtfTypeHintName | string {\r\n        return this.#typeHint;\r\n    }\r\n\r\n    public get value(): any {\r\n        if(this.#value instanceof Function && !this.#resolvedValue) {\r\n            this.#resolvedValue = this.#value();\r\n            return this.#resolvedValue;\r\n        } else if(this.#value instanceof Function) {\r\n            return this.#resolvedValue;\r\n        }\r\n\r\n        return this.#value;\r\n    }\r\n\r\n    // #endregion Public Accessors (2)\r\n}\r\n\r\n// export class SDTFAttributeAsyncData {\r\n//     // #region Properties (2)\r\n\r\n//     readonly #typeHint;\r\n//     readonly #accessor;\r\n//     private _value: Promise<any> | undefined;\r\n//     private readonly _loadAccessor: (accessorID: number) => Promise<any>\r\n\r\n//     // #endregion Properties (2)\r\n\r\n//     // #region Constructors (1)\r\n\r\n//     constructor(\r\n//             typeHint: string,\r\n//             accessor: number,\r\n//         private readonly _loadAccessor: (accessorID: number) => Promise<any>\r\n//     ) {\r\n//         this._typeHint = typeHint;\r\n//         this._accessor = accessor;\r\n//     }\r\n\r\n//     public get value(): Promise<any> {\r\n//         if (this.value !== undefined) {\r\n//             return this._value!;\r\n//         } else {\r\n//             this._value = this._loadAccessor!(this._accessor!);\r\n//             return this._value;\r\n//         }\r\n//     }\r\n\r\n//     public get typeHint(): string {\r\n//         return this._typeHint;\r\n//     }\r\n\r\n//     // #endregion Constructors (1)\r\n// }\r\n\r\nexport class SDTFAttributesData extends AbstractTreeNodeData implements ISDTFAttributesData {\r\n    // #region Properties (1)\r\n\r\n    readonly #attributes: {\r\n        [key: string]: SDTFAttributeData\r\n    } = {};\r\n\r\n    // #endregion Properties (1)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        attributes: {\r\n            [key: string]: SDTFAttributeData\r\n        } = {},\r\n        id?: string,\r\n        version?: string\r\n    ) {\r\n        super(id, version);\r\n        this.#attributes = attributes;\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (1)\r\n\r\n    public get attributes(): {\r\n        [key: string]: SDTFAttributeData\r\n    } {\r\n        return this.#attributes;\r\n    }\r\n\r\n    // #endregion Public Accessors (1)\r\n\r\n    // #region Public Methods (1)\r\n\r\n    /**\r\n     * Clones the scene graph data.\r\n     */\r\n    public clone(): ISDTFAttributesData {\r\n        return new SDTFAttributesData(this.attributes, this.id, this.version);\r\n    }\r\n\r\n    // #endregion Public Methods (1)\r\n}"]}},"error":null,"hash":"b9e28b37d0111dd9e04865e7b4bc9ec2","cacheData":{"env":{}}}