{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/loaders/EnvironmentMapLoader.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js.map","includedInParent":true,"mtime":1706542086785},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\loaders\\EnvironmentMapLoader.ts","includedInParent":true,"mtime":1706542087306},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706542086641},{"name":"three","loc":{"line":32,"column":35,"index":1842},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\three\\build\\three.module.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":33,"column":41,"index":1895},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"../three/loaders/RGBELoader","loc":{"line":34,"column":29,"index":1964},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\loaders\\RGBELoader.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":35,"column":38,"index":2035},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\loaders\\EnvironmentMapLoader.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EnvironmentMapLoader = exports.ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP_CUBE = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst RGBELoader_1 = require(\"../three/loaders/RGBELoader\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nvar ENVIRONMENT_MAP_CUBE;\r\n(function (ENVIRONMENT_MAP_CUBE) {\r\n    ENVIRONMENT_MAP_CUBE[\"DEFAULT\"] = \"default\";\r\n    ENVIRONMENT_MAP_CUBE[\"DEFAULT_BW\"] = \"default_bw\";\r\n    ENVIRONMENT_MAP_CUBE[\"BLURRED_LIGHTS\"] = \"blurred_lights\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR\"] = \"georgentor\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BLUR\"] = \"georgentor_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BLUE_BLUR\"] = \"georgentor_blue_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BW_BLUR\"] = \"georgentor_bw_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"LEVELSETS\"] = \"levelsets\";\r\n    ENVIRONMENT_MAP_CUBE[\"LYTHWOOD_FIELD\"] = \"lythwood_field\";\r\n    ENVIRONMENT_MAP_CUBE[\"MOUNTAINS\"] = \"mountains\";\r\n    ENVIRONMENT_MAP_CUBE[\"OCEAN\"] = \"ocean\";\r\n    ENVIRONMENT_MAP_CUBE[\"PIAZZA_SAN_MARCO\"] = \"piazza_san_marco\";\r\n    ENVIRONMENT_MAP_CUBE[\"RESIDENTIAL_GARDEN\"] = \"residential_garden\";\r\n    ENVIRONMENT_MAP_CUBE[\"ROOM_ABSTRACT_1\"] = \"room_abstract_1\";\r\n    ENVIRONMENT_MAP_CUBE[\"SKY\"] = \"sky\";\r\n    ENVIRONMENT_MAP_CUBE[\"STORAGE_ROOM\"] = \"storage_room\";\r\n    ENVIRONMENT_MAP_CUBE[\"STORM\"] = \"storm\";\r\n    ENVIRONMENT_MAP_CUBE[\"SUBWAY_ENTRANCE\"] = \"subway_entrance\";\r\n    ENVIRONMENT_MAP_CUBE[\"SUBWAY_ENTRANCE_BW_BLUR\"] = \"subway_entrance_bw_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"WHITE\"] = \"white\";\r\n    ENVIRONMENT_MAP_CUBE[\"YOKOHAMA\"] = \"yokohama\";\r\n})(ENVIRONMENT_MAP_CUBE = exports.ENVIRONMENT_MAP_CUBE || (exports.ENVIRONMENT_MAP_CUBE = {}));\r\nvar ENVIRONMENT_MAP;\r\n(function (ENVIRONMENT_MAP) {\r\n    ENVIRONMENT_MAP[\"ANNIVERSARY_LOUNGE\"] = \"anniversary_lounge\";\r\n    ENVIRONMENT_MAP[\"BALLROOM\"] = \"ballroom\";\r\n    ENVIRONMENT_MAP[\"CANNON_EXTERIOR\"] = \"cannon_exterior\";\r\n    ENVIRONMENT_MAP[\"CAPE_HILL\"] = \"cape_hill\";\r\n    ENVIRONMENT_MAP[\"CHRISTMAS_PHOTO_STUDIO\"] = \"christmas_photo_studio\";\r\n    ENVIRONMENT_MAP[\"CIRCUS_MAXIMUS\"] = \"circus_maximus\";\r\n    ENVIRONMENT_MAP[\"COLORFUL_STUDIO\"] = \"colorful_studio\";\r\n    ENVIRONMENT_MAP[\"COMBINATION_ROOM\"] = \"combination_room\";\r\n    ENVIRONMENT_MAP[\"GREEN_POINT_PARK\"] = \"green_point_park\";\r\n    ENVIRONMENT_MAP[\"HILLTOP_CONSTRUCTION\"] = \"hilltop_construction\";\r\n    ENVIRONMENT_MAP[\"LARGE_CORRIDOR\"] = \"large_corridor\";\r\n    ENVIRONMENT_MAP[\"LYTHWOOD_LOUNGE\"] = \"lythwood_lounge\";\r\n    ENVIRONMENT_MAP[\"NEUTRAL\"] = \"neutral\";\r\n    ENVIRONMENT_MAP[\"OBERER_KUHBERG\"] = \"oberer_kuhberg\";\r\n    ENVIRONMENT_MAP[\"OLD_HALL\"] = \"old_hall\";\r\n    ENVIRONMENT_MAP[\"PAUL_LOBE_HAUS\"] = \"paul_lobe_haus\";\r\n    ENVIRONMENT_MAP[\"PHOTO_STUDIO\"] = \"photo_studio\";\r\n    ENVIRONMENT_MAP[\"PHOTO_STUDIO_BROADWAY_HALL\"] = \"photo_studio_broadway_hall\";\r\n    ENVIRONMENT_MAP[\"SNOWY_FIELD\"] = \"snowy_field\";\r\n    ENVIRONMENT_MAP[\"STUDIO_SMALL\"] = \"studio_small\";\r\n    ENVIRONMENT_MAP[\"SUNFLOWERS\"] = \"sunflowers\";\r\n    ENVIRONMENT_MAP[\"TABLE_MOUNTAIN\"] = \"table_mountain\";\r\n    ENVIRONMENT_MAP[\"VENICE_SUNSET\"] = \"venice_sunset\";\r\n    ENVIRONMENT_MAP[\"WIDE_STREET\"] = \"wide_street\";\r\n})(ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP || (exports.ENVIRONMENT_MAP = {}));\r\nvar ENVIRONMENT_MAP_EMPTY;\r\n(function (ENVIRONMENT_MAP_EMPTY) {\r\n    ENVIRONMENT_MAP_EMPTY[\"NONE\"] = \"none\";\r\n    ENVIRONMENT_MAP_EMPTY[\"NULL\"] = \"null\";\r\n})(ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP_EMPTY || (exports.ENVIRONMENT_MAP_EMPTY = {}));\r\nvar ENVIRONMENT_MAP_TYPE;\r\n(function (ENVIRONMENT_MAP_TYPE) {\r\n    ENVIRONMENT_MAP_TYPE[\"LDR\"] = \"ldr\";\r\n    ENVIRONMENT_MAP_TYPE[\"HDR\"] = \"hdr\";\r\n    ENVIRONMENT_MAP_TYPE[\"NONE\"] = \"none\";\r\n    ENVIRONMENT_MAP_TYPE[\"NULL\"] = \"null\";\r\n})(ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_TYPE || (exports.ENVIRONMENT_MAP_TYPE = {}));\r\nclass EnvironmentMapLoader {\r\n    // #endregion Properties (8)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (8)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._environmentMapFilenames = ['px', 'nx', 'pz', 'nz', 'py', 'ny'];\r\n        this._environmentMapHDR = [];\r\n        this._environmentMapNamesHDR = Object.values(ENVIRONMENT_MAP).filter(value => typeof value === 'string');\r\n        this._environmentMapNamesHDRKhronos = ['cannon_exterior', 'colorful_studio', 'neutral', 'wide_street'];\r\n        this._environmentMapNamesJPG = ['default', 'default_bw', 'blurred_lights', 'georgentor', 'georgentor_blur', 'georgentor_blue_blur', 'georgentor_bw_blur', 'levelsets', 'lythwood_field', 'mountains', 'ocean', 'piazza_san_marco', 'residential_garden', 'room_abstract_1', 'sky', 'storage_room', 'storm', 'subway_entrance', 'subway_entrance_bw_blur', 'white', 'yokohama'];\r\n        this._environmentMaps = {};\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._environmentMapName = 'null';\r\n        this._environmentMapNameInternal = 'null';\r\n        this._isHDRMap = false;\r\n        this._textureEncoding = THREE.sRGBEncoding;\r\n        this._type = ENVIRONMENT_MAP_TYPE.NULL;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (1)\r\n    get environmentMap() {\r\n        return this._environmentMaps[this._environmentMapName];\r\n    }\r\n    get isHDRMap() {\r\n        return this._isHDRMap;\r\n    }\r\n    // #endregion Public Accessors (1)\r\n    // #region Public Methods (2)\r\n    init() {\r\n        this._environmentMaps['null'] = null;\r\n        this._environmentMaps['none'] = null;\r\n        this._pmremGenerator = new THREE.PMREMGenerator(this._renderingEngine.renderer);\r\n        this._pmremGenerator.compileEquirectangularShader();\r\n    }\r\n    notify(eventId, failed = false) {\r\n        let event;\r\n        if (failed) {\r\n            event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: `Loading of EnvironmentMap failed` };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);\r\n        }\r\n        else {\r\n            event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: `Loaded EnvironmentMap` };\r\n            this._stateEngine.renderingEngines[this._renderingEngine.id].environmentMapLoaded.resolve(true);\r\n            this._stateEngine.renderingEngines[this._renderingEngine.id].environmentMapLoaded = new viewer_shared_services_1.StatePromise();\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event);\r\n        }\r\n    }\r\n    loadEnvMap(name, eId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = eId || this._uuidGenerator.create();\r\n            const event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, data: { input: name }, progress: 0, status: `Loading EnvironmentMap` };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);\r\n            const name_original = name;\r\n            if (name === 'none') {\r\n                this._environmentMapNameInternal = name;\r\n                return {\r\n                    name: name,\r\n                    map: this._environmentMaps[name],\r\n                    type: ENVIRONMENT_MAP_TYPE.NONE\r\n                };\r\n            }\r\n            ;\r\n            if (name === 'null') {\r\n                this._environmentMapNameInternal = name;\r\n                return {\r\n                    name: name,\r\n                    map: this._environmentMaps[name],\r\n                    type: ENVIRONMENT_MAP_TYPE.NULL\r\n                };\r\n            }\r\n            ;\r\n            let name_internal, name_caching, url;\r\n            // check if name is a JSON.stringified version of an array of urls\r\n            if (!Array.isArray(name) && (name.startsWith('[\"https') && name.endsWith('\"]')))\r\n                try {\r\n                    name = JSON.parse(name);\r\n                }\r\n                catch (e) {\r\n                    this.notify(eventId, true);\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map.', name);\r\n                }\r\n            // deal with string or array, define names for loading and caching\r\n            if (!Array.isArray(name)) {\r\n                name_internal = name.toLowerCase().replace(/ /g, '_');\r\n                name_caching = name_internal + this._renderingEngine.environmentMapResolution;\r\n            }\r\n            else {\r\n                if (name.length !== 6) {\r\n                    this.notify(eventId, true);\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, exactly 6 files are needed in the array.', name);\r\n                }\r\n                name_internal = JSON.stringify(name, null, 0);\r\n                name_caching = name_internal;\r\n            }\r\n            this._environmentMapNameInternal = name_internal;\r\n            // check if environment map is already cached\r\n            for (let environmentMap in this._environmentMaps)\r\n                if (environmentMap === name_caching) {\r\n                    return {\r\n                        name: environmentMap,\r\n                        map: this._environmentMaps[environmentMap],\r\n                        type: this._environmentMaps[environmentMap] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                    };\r\n                }\r\n            try {\r\n                // define urls for 6 cube images ourselves\r\n                if (!Array.isArray(name)) {\r\n                    url = [];\r\n                    let i;\r\n                    if (this._environmentMapNamesHDR.indexOf(name_internal) >= 0) {\r\n                        let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name_internal + '_1k.hdr';\r\n                        if (this._environmentMapNamesHDRKhronos.indexOf(name_internal) >= 0)\r\n                            url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name_internal + '.hdr';\r\n                        this._environmentMapHDR.push(url_hdr);\r\n                        yield this.loadEnvironmentMap(url_hdr, [], eventId);\r\n                        return {\r\n                            name: url_hdr,\r\n                            map: this._environmentMaps[url_hdr],\r\n                            type: this._environmentMaps[url_hdr] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                        };\r\n                    }\r\n                    else if (this._environmentMapNamesJPG.indexOf(name_internal) >= 0) {\r\n                        // found in list of available environment maps with file type jpg\r\n                        for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                            url.push('https://viewer.shapediver.com/v2/envmaps/' + this._renderingEngine.environmentMapResolution + '/' + name_internal + '/' + this._environmentMapFilenames[i] + '.jpg');\r\n                    }\r\n                    else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n                        if (name.endsWith('.hdr')) {\r\n                            this._environmentMapHDR.push(name);\r\n                            yield this.loadEnvironmentMap(name, [], eventId);\r\n                            return {\r\n                                name: name,\r\n                                map: this._environmentMaps[name],\r\n                                type: this._environmentMaps[name] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                            };\r\n                        }\r\n                        else {\r\n                            if (!name.endsWith('/'))\r\n                                name += '/';\r\n                            for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                                url.push(name + this._environmentMapFilenames[i] + '.jpg');\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.notify(eventId, true);\r\n                        throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, format not supported.', name);\r\n                    }\r\n                }\r\n                else {\r\n                    url = name;\r\n                }\r\n                yield this.loadEnvironmentMap(name_caching, url, eventId);\r\n                return {\r\n                    name: name_caching,\r\n                    map: this._environmentMaps[name_caching],\r\n                    type: this._environmentMaps[name_caching] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.notify(eventId, true);\r\n                throw e;\r\n            }\r\n        });\r\n    }\r\n    load(name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const res = yield this.loadEnvMap(name, eventId);\r\n            this.assignEnvironmentMap(res.name, res.type, eventId);\r\n            return Promise.resolve(true);\r\n        });\r\n    }\r\n    getEnvironmentMapImageUrl(name) {\r\n        if (Array.isArray(name))\r\n            return '';\r\n        if (this._environmentMapNamesHDR.indexOf(name) >= 0) {\r\n            let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name + '_1k.hdr';\r\n            if (this._environmentMapNamesHDRKhronos.indexOf(name) >= 0)\r\n                url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name + '.hdr';\r\n            return url_hdr;\r\n        }\r\n        else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n            if (name.endsWith('.hdr') || name.endsWith('.jpg') || name.endsWith('.png')) {\r\n                return name;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    // #endregion Public Methods (2)\r\n    // #region Private Methods (2)\r\n    assignEnvironmentMap(name, type, eventId) {\r\n        if (name in this._environmentMaps === false)\r\n            return;\r\n        this._type = type;\r\n        this._environmentMapName = name;\r\n        this._renderingEngine.materialLoader.assignEnvironmentMap(this._environmentMaps[name], type);\r\n        this.notify(eventId);\r\n    }\r\n    assignTextureEncoding() {\r\n        var _a;\r\n        for (let e in this._environmentMaps) {\r\n            if (this._environmentMaps[e] && !this._environmentMapHDR.includes(e)) {\r\n                (_a = this._environmentMaps[e]) === null || _a === void 0 ? void 0 : _a.dispose();\r\n                this._environmentMaps[e].encoding = this._textureEncoding;\r\n                this._environmentMaps[e].needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    loadEnvironmentMap(name, url, eventId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    if (name.endsWith('.hdr')) {\r\n                        const response = yield this._httpClient.loadTexture(name);\r\n                        const arrayBufferView = new Uint8Array(response.data);\r\n                        const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                        const blobUrl = URL.createObjectURL(blob);\r\n                        new RGBELoader_1.RGBELoader().load(blobUrl, (texture) => {\r\n                            const map = this._pmremGenerator.fromEquirectangular(texture).texture;\r\n                            this._pmremGenerator.dispose();\r\n                            this._environmentMaps[name] = map;\r\n                            URL.revokeObjectURL(blobUrl);\r\n                            resolve();\r\n                        }, () => { }, (error) => reject(error));\r\n                    }\r\n                    else {\r\n                        const promises = [];\r\n                        url.forEach(u => promises.push(this._httpClient.loadTexture(u)));\r\n                        const responses = yield Promise.all(promises);\r\n                        const urls = responses.map(response => {\r\n                            const arrayBufferView = new Uint8Array(response.data);\r\n                            const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                            return URL.createObjectURL(blob);\r\n                        });\r\n                        new THREE.CubeTextureLoader().load(urls, (map) => {\r\n                            map.encoding = THREE.sRGBEncoding;\r\n                            map.format = THREE.RGBAFormat;\r\n                            map.mapping = THREE.CubeReflectionMapping;\r\n                            this._environmentMaps[name] = map;\r\n                            urls.forEach(u => URL.revokeObjectURL(u));\r\n                            resolve();\r\n                        }, () => { }, (error) => reject(error));\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this.notify(eventId, true);\r\n                    throw e;\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    get textureEncoding() {\r\n        return this._textureEncoding;\r\n    }\r\n    set textureEncoding(value) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n}\r\nexports.EnvironmentMapLoader = EnvironmentMapLoader;\r\n"},"sourceMaps":{"js":{"version":3,"file":"EnvironmentMapLoader.js","sourceRoot":"","sources":["../../src/loaders/EnvironmentMapLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\r\nimport { Logger, EventEngine, EVENTTYPE, StateEngine, StatePromise, ShapeDiverViewerEnvironmentMapError, HttpClient, HttpResponse, Converter, UuidGenerator } from '@shapediver/viewer.shared.services'\r\n\r\nimport { RenderingEngine } from '..'\r\nimport { RGBELoader } from '../three/loaders/RGBELoader';\r\nimport { ILoader } from '../interfaces/ILoader'\r\nimport { ITaskEvent, TASK_TYPE } from '@shapediver/viewer.shared.types'\r\n\r\nexport enum ENVIRONMENT_MAP_CUBE {\r\n    DEFAULT = 'default', \r\n    DEFAULT_BW = 'default_bw', \r\n    BLURRED_LIGHTS = 'blurred_lights', \r\n    GEORGENTOR = 'georgentor', \r\n    GEORGENTOR_BLUR = 'georgentor_blur', \r\n    GEORGENTOR_BLUE_BLUR = 'georgentor_blue_blur', \r\n    GEORGENTOR_BW_BLUR = 'georgentor_bw_blur', \r\n    LEVELSETS = 'levelsets', \r\n    LYTHWOOD_FIELD = 'lythwood_field', \r\n    MOUNTAINS = 'mountains', \r\n    OCEAN = 'ocean', \r\n    PIAZZA_SAN_MARCO = 'piazza_san_marco', \r\n    RESIDENTIAL_GARDEN = 'residential_garden', \r\n    ROOM_ABSTRACT_1 = 'room_abstract_1', \r\n    SKY = 'sky', \r\n    STORAGE_ROOM = 'storage_room', \r\n    STORM = 'storm', \r\n    SUBWAY_ENTRANCE = 'subway_entrance', \r\n    SUBWAY_ENTRANCE_BW_BLUR = 'subway_entrance_bw_blur', \r\n    WHITE = 'white', \r\n    YOKOHAMA = 'yokohama',\r\n}\r\n\r\nexport enum ENVIRONMENT_MAP {\r\n    ANNIVERSARY_LOUNGE = 'anniversary_lounge', \r\n    BALLROOM = 'ballroom', \r\n    CANNON_EXTERIOR = 'cannon_exterior', \r\n    CAPE_HILL = 'cape_hill', \r\n    CHRISTMAS_PHOTO_STUDIO = 'christmas_photo_studio', \r\n    CIRCUS_MAXIMUS = 'circus_maximus', \r\n    COLORFUL_STUDIO = 'colorful_studio', \r\n    COMBINATION_ROOM = 'combination_room', \r\n    GREEN_POINT_PARK = 'green_point_park', \r\n    HILLTOP_CONSTRUCTION = 'hilltop_construction', \r\n    LARGE_CORRIDOR = 'large_corridor', \r\n    LYTHWOOD_LOUNGE = 'lythwood_lounge', \r\n    NEUTRAL = 'neutral', \r\n    OBERER_KUHBERG = 'oberer_kuhberg', \r\n    OLD_HALL = 'old_hall', \r\n    PAUL_LOBE_HAUS = 'paul_lobe_haus', \r\n    PHOTO_STUDIO = 'photo_studio', \r\n    PHOTO_STUDIO_BROADWAY_HALL = 'photo_studio_broadway_hall', \r\n    SNOWY_FIELD = 'snowy_field', \r\n    STUDIO_SMALL = 'studio_small',\r\n    SUNFLOWERS = 'sunflowers',\r\n    TABLE_MOUNTAIN = 'table_mountain',\r\n    VENICE_SUNSET = 'venice_sunset',\r\n    WIDE_STREET = 'wide_street',\r\n}\r\n\r\nexport enum ENVIRONMENT_MAP_EMPTY {\r\n    NONE = 'none',\r\n    NULL = 'null'\r\n}\r\n\r\nexport enum ENVIRONMENT_MAP_TYPE {\r\n    LDR = 'ldr',\r\n    HDR = 'hdr',\r\n    NONE = 'none',\r\n    NULL = 'null'\r\n}\r\n\r\nexport class EnvironmentMapLoader implements ILoader {\r\n    // #region Properties (8)\r\n\r\n    private readonly _converter: Converter = Converter.instance;\r\n    private readonly _environmentMapFilenames = ['px', 'nx', 'pz', 'nz', 'py', 'ny']    \r\n    private readonly _environmentMapHDR: string[] = [];\r\n    private readonly _environmentMapNamesHDR = Object.values(ENVIRONMENT_MAP).filter(value => typeof value === 'string') as string[]\r\n    private readonly _environmentMapNamesHDRKhronos = ['cannon_exterior', 'colorful_studio', 'neutral', 'wide_street'];\r\n    private readonly _environmentMapNamesJPG = ['default', 'default_bw', 'blurred_lights', 'georgentor', 'georgentor_blur', 'georgentor_blue_blur', 'georgentor_bw_blur', 'levelsets', 'lythwood_field', 'mountains', 'ocean', 'piazza_san_marco', 'residential_garden', 'room_abstract_1', 'sky', 'storage_room', 'storm', 'subway_entrance', 'subway_entrance_bw_blur', 'white', 'yokohama'];\r\n    private readonly _environmentMaps: {\r\n        [key: string]: THREE.CubeTexture | THREE.Texture | null\r\n    } = {};\r\n    private readonly _eventEngine: EventEngine = EventEngine.instance;\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n    private readonly _uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n    private _pmremGenerator!: THREE.PMREMGenerator;\r\n\r\n    private _environmentMapName: string = 'null';\r\n    private _environmentMapNameInternal: string = 'null';\r\n    private _isHDRMap: boolean = false;\r\n    private _textureEncoding: THREE.TextureEncoding = THREE.sRGBEncoding;\r\n    private _type: ENVIRONMENT_MAP_TYPE = ENVIRONMENT_MAP_TYPE.NULL;\r\n\r\n    // #endregion Properties (8)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(private readonly _renderingEngine: RenderingEngine) {}\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (1)\r\n\r\n    public get environmentMap(): THREE.CubeTexture | THREE.Texture | null {\r\n        return this._environmentMaps[this._environmentMapName];\r\n    }\r\n\r\n    public get isHDRMap(): boolean {\r\n        return this._isHDRMap;\r\n    }\r\n\r\n    // #endregion Public Accessors (1)\r\n\r\n    // #region Public Methods (2)\r\n\r\n    public init(): void {\r\n        this._environmentMaps['null'] = null;\r\n        this._environmentMaps['none'] = null;\r\n            \r\n        this._pmremGenerator = new THREE.PMREMGenerator(this._renderingEngine.renderer);\r\n        this._pmremGenerator.compileEquirectangularShader();\r\n    }\r\n\r\n    private notify(eventId: string, failed = false) {\r\n\r\n        let event: ITaskEvent;\r\n        if(failed) {\r\n            event = { type: TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: `Loading of EnvironmentMap failed` };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, event);\r\n        } else {\r\n            event = { type: TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: `Loaded EnvironmentMap` };\r\n            this._stateEngine.renderingEngines[this._renderingEngine.id].environmentMapLoaded.resolve(true);\r\n            this._stateEngine.renderingEngines[this._renderingEngine.id].environmentMapLoaded = new StatePromise();\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, event);\r\n        }\r\n    }\r\n\r\n    public async loadEnvMap(name: string | string[], eId?: string): Promise<{\r\n        name: string,\r\n        map: THREE.CubeTexture | THREE.Texture | null,\r\n        type: ENVIRONMENT_MAP_TYPE\r\n    }> {\r\n        const eventId = eId || this._uuidGenerator.create();\r\n        const event: ITaskEvent = { type: TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, data: { input: name }, progress: 0, status: `Loading EnvironmentMap` };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, event);\r\n        \r\n        const name_original = name;\r\n        if (name === 'none') {\r\n            this._environmentMapNameInternal = name;\r\n            return {\r\n                name: name,\r\n                map: this._environmentMaps[name],\r\n                type: ENVIRONMENT_MAP_TYPE.NONE\r\n            };\r\n        };\r\n\r\n        if (name === 'null') {\r\n            this._environmentMapNameInternal = name;\r\n            return {\r\n                name: name,\r\n                map: this._environmentMaps[name],\r\n                type: ENVIRONMENT_MAP_TYPE.NULL\r\n            };\r\n        };\r\n\r\n        let name_internal: string, name_caching: string, url: string[];\r\n\r\n        // check if name is a JSON.stringified version of an array of urls\r\n        if (!Array.isArray(name) && (name.startsWith('[\"https') && name.endsWith('\"]')))\r\n            try { name = JSON.parse(name); } catch (e) {\r\n                this.notify(eventId, true);\r\n                throw new ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map.', name);\r\n            }\r\n\r\n        // deal with string or array, define names for loading and caching\r\n        if (!Array.isArray(name)) {\r\n            name_internal = name.toLowerCase().replace(/ /g, '_');\r\n            name_caching = name_internal + this._renderingEngine.environmentMapResolution;\r\n        } else {\r\n            if (name.length !== 6) {\r\n                this.notify(eventId, true);\r\n                throw new ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, exactly 6 files are needed in the array.', name);\r\n            }\r\n            name_internal = JSON.stringify(name, null, 0);\r\n            name_caching = name_internal;\r\n        }\r\n        this._environmentMapNameInternal = name_internal;\r\n\r\n        // check if environment map is already cached\r\n        for (let environmentMap in this._environmentMaps)\r\n            if (environmentMap === name_caching) {\r\n                return {\r\n                    name: environmentMap,\r\n                    map: this._environmentMaps[environmentMap],\r\n                    type: this._environmentMaps[environmentMap] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                };\r\n            }\r\n\r\n        try {\r\n            // define urls for 6 cube images ourselves\r\n            if (!Array.isArray(name)) {\r\n                url = [];\r\n                let i;\r\n                if(this._environmentMapNamesHDR.indexOf(name_internal) >= 0) {\r\n                    let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name_internal + '_1k.hdr';\r\n                    if(this._environmentMapNamesHDRKhronos.indexOf(name_internal) >= 0)\r\n                        url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name_internal + '.hdr';\r\n\r\n                    this._environmentMapHDR.push(url_hdr)\r\n                    await this.loadEnvironmentMap(url_hdr, [], eventId);\r\n                    return {\r\n                        name: url_hdr,\r\n                        map: this._environmentMaps[url_hdr],\r\n                        type: this._environmentMaps[url_hdr] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                    };\r\n                } else if (this._environmentMapNamesJPG.indexOf(name_internal) >= 0) {\r\n                    // found in list of available environment maps with file type jpg\r\n                    for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                        url.push('https://viewer.shapediver.com/v2/envmaps/' + this._renderingEngine.environmentMapResolution + '/' + name_internal + '/' + this._environmentMapFilenames[i] + '.jpg');\r\n                } else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n                    if (name.endsWith('.hdr')) {\r\n                        this._environmentMapHDR.push(name)\r\n                        await this.loadEnvironmentMap(name, [], eventId);\r\n                        return {\r\n                            name: name,\r\n                            map: this._environmentMaps[name],\r\n                            type: this._environmentMaps[name] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n                        };\r\n                    } else {\r\n                        if (!name.endsWith('/'))\r\n                        name += '/';\r\n\r\n                        for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                            url.push(name + this._environmentMapFilenames[i] + '.jpg');\r\n                    }\r\n                }\r\n                else {\r\n                    this.notify(eventId, true);\r\n                    throw new ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, format not supported.', name);\r\n                }\r\n            } else {\r\n                url = name;\r\n            }\r\n\r\n            await this.loadEnvironmentMap(name_caching, url, eventId);\r\n            return {\r\n                name: name_caching,\r\n                map: this._environmentMaps[name_caching],\r\n                type: this._environmentMaps[name_caching] instanceof THREE.CubeTexture ? ENVIRONMENT_MAP_TYPE.LDR : ENVIRONMENT_MAP_TYPE.HDR\r\n            };\r\n        }\r\n        catch (e) {\r\n            this.notify(eventId, true);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async load(name: string | string[]): Promise<boolean> {\r\n        const eventId = this._uuidGenerator.create();\r\n        const res = await this.loadEnvMap(name, eventId);\r\n        this.assignEnvironmentMap(res.name, res.type, eventId);\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    public getEnvironmentMapImageUrl(name: string | string[]): string {\r\n        if(Array.isArray(name)) return '';\r\n        \r\n        if(this._environmentMapNamesHDR.indexOf(name) >= 0) {\r\n            let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name + '_1k.hdr';\r\n            if(this._environmentMapNamesHDRKhronos.indexOf(name) >= 0)\r\n                url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name + '.hdr';\r\n\r\n            return url_hdr;\r\n        }else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n            if (name.endsWith('.hdr') || name.endsWith('.jpg') || name.endsWith('.png')) {\r\n                return name;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    // #endregion Public Methods (2)\r\n\r\n    // #region Private Methods (2)\r\n\r\n    private assignEnvironmentMap(name: string, type: ENVIRONMENT_MAP_TYPE, eventId: string) {\r\n        if(name in this._environmentMaps === false) return;\r\n        this._type = type;\r\n        this._environmentMapName = name;\r\n        this._renderingEngine.materialLoader.assignEnvironmentMap(this._environmentMaps[name], type);\r\n        this.notify(eventId);\r\n    }\r\n\r\n    private assignTextureEncoding() {\r\n        for(let e in this._environmentMaps) {\r\n            if(this._environmentMaps[e] && !this._environmentMapHDR.includes(e)) {\r\n                this._environmentMaps[e]?.dispose();\r\n                this._environmentMaps[e]!.encoding = this._textureEncoding;\r\n                this._environmentMaps[e]!.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async loadEnvironmentMap(name: string, url: string[], eventId: string) {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            try {\r\n                if (name.endsWith('.hdr')) {\r\n                    const response: HttpResponse<ArrayBuffer> = await this._httpClient.loadTexture(name);\r\n                    const arrayBufferView = new Uint8Array(response.data);\r\n                    const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                    const blobUrl = URL.createObjectURL(blob);\r\n                    new RGBELoader().load(blobUrl, (texture) => {\r\n                        const map = this._pmremGenerator.fromEquirectangular(texture).texture;\r\n                        this._pmremGenerator.dispose();\r\n                        this._environmentMaps[name] = map;\r\n                        URL.revokeObjectURL(blobUrl);\r\n                        resolve();\r\n                    },\r\n                        () => { },\r\n                        (error) => reject(error));\r\n                } else {\r\n                    const promises: Promise<HttpResponse<ArrayBuffer>>[] = [];\r\n                    url.forEach(u => promises.push(this._httpClient.loadTexture(u)));\r\n                    const responses = await Promise.all(promises);\r\n\r\n                    const urls = responses.map(response => {\r\n                        const arrayBufferView = new Uint8Array(response.data);\r\n                        const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                        return URL.createObjectURL(blob);\r\n                    });\r\n\r\n                    new THREE.CubeTextureLoader().load(urls,\r\n                        (map: THREE.CubeTexture) => {\r\n                            map.encoding = THREE.sRGBEncoding;\r\n                            map.format = THREE.RGBAFormat;\r\n                            map.mapping = THREE.CubeReflectionMapping;\r\n                            this._environmentMaps[name] = map;\r\n                            urls.forEach(u => URL.revokeObjectURL(u));\r\n                            resolve();\r\n                        },\r\n                        () => { },\r\n                        (error) => reject(error));\r\n                }\r\n            } catch (e) {\r\n                this.notify(eventId, true);\r\n                throw e;\r\n            }\r\n        })\r\n    }\r\n\r\n    public get textureEncoding(): THREE.TextureEncoding {\r\n        return this._textureEncoding;\r\n    }\r\n    \r\n    public set textureEncoding(value: THREE.TextureEncoding) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n\r\n    // #endregion Private Methods (2)\r\n}"]}},"error":null,"hash":"ec8e5b5e6a44a068c57483e926995fd6","cacheData":{"env":{}}}