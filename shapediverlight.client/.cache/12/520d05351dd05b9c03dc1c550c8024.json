{"id":"node_modules/@shapediver/viewer.shared.services/dist/logger/Logger.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\logger\\Logger.js.map","includedInParent":true,"mtime":1706527151125},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\src\\logger\\Logger.ts","includedInParent":true,"mtime":1706527152320},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\package.json","includedInParent":true,"mtime":1706527150825}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Logger = exports.LOGGING_LEVEL = void 0;\r\nvar LOGGING_LEVEL;\r\n(function (LOGGING_LEVEL) {\r\n    LOGGING_LEVEL[\"NONE\"] = \"none\";\r\n    LOGGING_LEVEL[\"ERROR\"] = \"error\";\r\n    LOGGING_LEVEL[\"FATAL\"] = \"fatal\";\r\n    LOGGING_LEVEL[\"WARN\"] = \"warn\";\r\n    LOGGING_LEVEL[\"INFO\"] = \"info\";\r\n    LOGGING_LEVEL[\"DEBUG\"] = \"debug\";\r\n    LOGGING_LEVEL[\"DEBUG_HIGH\"] = \"debug_high\";\r\n    LOGGING_LEVEL[\"DEBUG_MEDIUM\"] = \"debug_medium\";\r\n    LOGGING_LEVEL[\"DEBUG_LOW\"] = \"debug_low\";\r\n})(LOGGING_LEVEL = exports.LOGGING_LEVEL || (exports.LOGGING_LEVEL = {}));\r\nclass Logger {\r\n    constructor() {\r\n        // #region Properties (8)\r\n        this._loggingLevel = LOGGING_LEVEL.WARN;\r\n        this._showMessages = true;\r\n        // #endregion Private Methods (2)\r\n    }\r\n    // #endregion Properties (8)\r\n    // #region Public Static Accessors (1)\r\n    static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n    // #endregion Public Static Accessors (1)\r\n    // #region Public Accessors (4)\r\n    get loggingLevel() {\r\n        return this._loggingLevel;\r\n    }\r\n    set loggingLevel(value) {\r\n        this._loggingLevel = value;\r\n    }\r\n    get showMessages() {\r\n        return this._showMessages;\r\n    }\r\n    set showMessages(value) {\r\n        this._showMessages = value;\r\n    }\r\n    // #endregion Public Accessors (4)\r\n    // #region Public Methods (11)\r\n    /**\r\n     * Logging a debug message.\r\n     * @param msg the message\r\n     */\r\n    debug(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG) && this.showMessages === true)\r\n            console.debug('(DEBUG) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging a debug message with high priority.\r\n     * @param msg the message\r\n     */\r\n    debugHigh(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_HIGH) && this.showMessages === true)\r\n            console.debug('(DEBUG_HIGH) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging a debug message with low priority.\r\n     * @param msg the message\r\n     */\r\n    debugLow(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_LOW) && this.showMessages === true)\r\n            console.debug('(DEBUG_LOW) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging a debug message with medium priority.\r\n     * @param msg the message\r\n     */\r\n    debugMedium(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_MEDIUM) && this.showMessages === true)\r\n            console.debug('(DEBUG_MEDIUM) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging an error.\r\n     * @param msg the message\r\n     */\r\n    error(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.ERROR) && this.showMessages === true)\r\n            console.error('(ERROR) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging a fatal error.\r\n     * @param msg the message\r\n     */\r\n    fatal(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.FATAL) && this.showMessages === true)\r\n            console.error('(FATAL) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging an info.\r\n     * @param msg the message\r\n     */\r\n    info(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.INFO) && this.showMessages === true)\r\n            console.info('(INFO) ' + this.messageConstruction(msg));\r\n    }\r\n    /**\r\n     * Logging a warning.\r\n     * @param msg the message\r\n     */\r\n    warn(msg) {\r\n        if (this.canLog(LOGGING_LEVEL.WARN) && this.showMessages === true)\r\n            console.warn('(WARN) ' + this.messageConstruction(msg));\r\n    }\r\n    // #endregion Public Methods (11)\r\n    // #region Private Methods (2)\r\n    canLog(loggingLevel) {\r\n        switch (this.loggingLevel) {\r\n            case LOGGING_LEVEL.ERROR:\r\n                if (loggingLevel === LOGGING_LEVEL.FATAL)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.WARN)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.INFO)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.FATAL:\r\n                if (loggingLevel === LOGGING_LEVEL.WARN)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.INFO)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.WARN:\r\n                if (loggingLevel === LOGGING_LEVEL.INFO)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.INFO:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.DEBUG_HIGH:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM)\r\n                    return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.DEBUG_MEDIUM:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW)\r\n                    return false;\r\n            case LOGGING_LEVEL.DEBUG_LOW:\r\n            case LOGGING_LEVEL.DEBUG:\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n    messageConstruction(msg) {\r\n        return new Date().toISOString() + ': ' + msg;\r\n    }\r\n}\r\nexports.Logger = Logger;\r\n"},"sourceMaps":{"js":{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/logger/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["export enum LOGGING_LEVEL {\r\n    NONE = 'none',\r\n    ERROR = 'error',\r\n    FATAL = 'fatal',\r\n    WARN = 'warn',\r\n    INFO = 'info',\r\n    DEBUG = 'debug',\r\n    DEBUG_HIGH = 'debug_high',\r\n    DEBUG_MEDIUM = 'debug_medium',\r\n    DEBUG_LOW = 'debug_low',\r\n}\r\n\r\nexport class Logger {\r\n    // #region Properties (8)\r\n\r\n    private static _instance: Logger;\r\n\r\n    private _loggingLevel: LOGGING_LEVEL = LOGGING_LEVEL.WARN;\r\n    private _showMessages: boolean = true;\r\n\r\n    // #endregion Properties (8)\r\n\r\n    // #region Public Static Accessors (1)\r\n\r\n    public static get instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    // #endregion Public Static Accessors (1)\r\n\r\n    // #region Public Accessors (4)\r\n\r\n    public get loggingLevel(): LOGGING_LEVEL {\r\n        return this._loggingLevel;\r\n    }\r\n\r\n    public set loggingLevel(value: LOGGING_LEVEL) {\r\n        this._loggingLevel = value;\r\n    }\r\n\r\n    public get showMessages(): boolean {\r\n        return this._showMessages;\r\n    }\r\n\r\n    public set showMessages(value: boolean) {\r\n        this._showMessages = value;\r\n    }\r\n\r\n    // #endregion Public Accessors (4)\r\n\r\n    // #region Public Methods (11)\r\n\r\n    /**\r\n     * Logging a debug message.\r\n     * @param msg the message\r\n     */\r\n    public debug(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG) && this.showMessages === true)\r\n            console.debug('(DEBUG) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging a debug message with high priority.\r\n     * @param msg the message\r\n     */\r\n    public debugHigh(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_HIGH) && this.showMessages === true)\r\n            console.debug('(DEBUG_HIGH) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging a debug message with low priority.\r\n     * @param msg the message\r\n     */\r\n    public debugLow(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_LOW) && this.showMessages === true)\r\n            console.debug('(DEBUG_LOW) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging a debug message with medium priority.\r\n     * @param msg the message\r\n     */\r\n    public debugMedium(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.DEBUG_MEDIUM) && this.showMessages === true)\r\n            console.debug('(DEBUG_MEDIUM) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging an error.\r\n     * @param msg the message\r\n     */\r\n    public error(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.ERROR) && this.showMessages === true) \r\n            console.error('(ERROR) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging a fatal error.\r\n     * @param msg the message\r\n     */\r\n    public fatal(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.FATAL) && this.showMessages === true)\r\n            console.error('(FATAL) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging an info.\r\n     * @param msg the message\r\n     */\r\n    public info(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.INFO) && this.showMessages === true)\r\n            console.info('(INFO) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    /**\r\n     * Logging a warning.\r\n     * @param msg the message\r\n     */\r\n    public warn(msg: string): void {\r\n        if (this.canLog(LOGGING_LEVEL.WARN) && this.showMessages === true)\r\n            console.warn('(WARN) ' + this.messageConstruction(msg));\r\n    }\r\n\r\n    // #endregion Public Methods (11)\r\n\r\n    // #region Private Methods (2)\r\n\r\n    private canLog(loggingLevel: LOGGING_LEVEL): boolean {\r\n        switch (this.loggingLevel) {\r\n            case LOGGING_LEVEL.ERROR:\r\n                if (loggingLevel === LOGGING_LEVEL.FATAL) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.WARN) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.INFO) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.FATAL:\r\n                if (loggingLevel === LOGGING_LEVEL.WARN) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.INFO) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.WARN:\r\n                if (loggingLevel === LOGGING_LEVEL.INFO) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.INFO:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_HIGH) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.DEBUG_HIGH:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_MEDIUM) return false;\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.DEBUG_MEDIUM:\r\n                if (loggingLevel === LOGGING_LEVEL.DEBUG_LOW) return false;\r\n            case LOGGING_LEVEL.DEBUG_LOW:\r\n            case LOGGING_LEVEL.DEBUG:\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n\r\n    private messageConstruction(msg: string): string {\r\n        return new Date().toISOString() + ': ' + msg;\r\n    }\r\n\r\n    // #endregion Private Methods (2)\r\n}"]}},"error":null,"hash":"aaf9154f096e14d404eb8a9527a2b9f8","cacheData":{"env":{}}}