{"id":"node_modules/@shapediver/viewer/dist/implementation/viewport/ViewportApi.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js.map","includedInParent":true,"mtime":1706527154253},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\src\\implementation\\viewport\\ViewportApi.ts","includedInParent":true,"mtime":1706527154856},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\package.json","includedInParent":true,"mtime":1706527153686},{"name":"gl-matrix","loc":{"line":44,"column":28,"index":3072},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.main.creation-control-center","loc":{"line":45,"column":54,"index":3141},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.main.creation-control-center\\dist\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":46,"column":41,"index":3235},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.rendering-engine","loc":{"line":47,"column":59,"index":3334},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.rendering-engine\\dist\\index.js"},{"name":"@shapediver/viewer.rendering-engine.camera-engine","loc":{"line":48,"column":56,"index":3448},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\index.js"},{"name":"./camera/PerspectiveCameraApi","loc":{"line":49,"column":39,"index":3542},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\camera\\PerspectiveCameraApi.js"},{"name":"./camera/OrthographicCameraApi","loc":{"line":50,"column":40,"index":3617},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\camera\\OrthographicCameraApi.js"},{"name":"./lights/LightSceneApi","loc":{"line":51,"column":32,"index":3685},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\lights\\LightSceneApi.js"},{"name":"@shapediver/viewer.data-engine.gltf-converter","loc":{"line":52,"column":52,"index":3765},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.data-engine.gltf-converter\\dist\\index.js"},{"name":"@shapediver/sdk.geometry-api-sdk-v2","loc":{"line":53,"column":42,"index":3858},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\sdk.geometry-api-sdk-v2\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":54,"column":42,"index":3941},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"../../main","loc":{"line":55,"column":23,"index":4005},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\main.js"},{"name":"@shapediver/viewer.shared.build-data","loc":{"line":56,"column":43,"index":4064},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.build-data\\dist\\index.js"},{"name":"qrcode","loc":{"line":57,"column":36,"index":4142},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\qrcode\\lib\\browser.js"},{"name":"@shapediver/viewer.rendering-engine.animation-engine","loc":{"line":58,"column":59,"index":4214},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer\\dist\\implementation\\viewport\\ViewportApi.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine.animation-engine\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _ViewportApi_animationEngine, _ViewportApi_renderingEngine, _ViewportApi_creationControlCenter, _ViewportApi_converter, _ViewportApi_gltfConverter, _ViewportApi_inputValidator, _ViewportApi_logger, _ViewportApi_systemInfo, _ViewportApi_cameras, _ViewportApi_lightScenes;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ViewportApi = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_main_creation_control_center_1 = require(\"@shapediver/viewer.main.creation-control-center\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst PerspectiveCameraApi_1 = require(\"./camera/PerspectiveCameraApi\");\r\nconst OrthographicCameraApi_1 = require(\"./camera/OrthographicCameraApi\");\r\nconst LightSceneApi_1 = require(\"./lights/LightSceneApi\");\r\nconst viewer_data_engine_gltf_converter_1 = require(\"@shapediver/viewer.data-engine.gltf-converter\");\r\nconst sdk_geometry_api_sdk_v2_1 = require(\"@shapediver/sdk.geometry-api-sdk-v2\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst main_1 = require(\"../../main\");\r\nconst viewer_shared_build_data_1 = require(\"@shapediver/viewer.shared.build-data\");\r\nconst QRCode = __importStar(require(\"qrcode\"));\r\nconst viewer_rendering_engine_animation_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-engine\");\r\nclass ViewportApi {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor(renderingEngine) {\r\n        // #region Properties (5)\r\n        _ViewportApi_animationEngine.set(this, viewer_rendering_engine_animation_engine_1.AnimationEngine.instance);\r\n        _ViewportApi_renderingEngine.set(this, void 0);\r\n        _ViewportApi_creationControlCenter.set(this, viewer_main_creation_control_center_1.CreationControlCenter.instance);\r\n        _ViewportApi_converter.set(this, viewer_shared_services_1.Converter.instance);\r\n        _ViewportApi_gltfConverter.set(this, viewer_data_engine_gltf_converter_1.GLTFConverter.instance);\r\n        _ViewportApi_inputValidator.set(this, viewer_shared_services_1.InputValidator.instance);\r\n        _ViewportApi_logger.set(this, viewer_shared_services_1.Logger.instance);\r\n        _ViewportApi_systemInfo.set(this, viewer_shared_services_1.SystemInfo.instance);\r\n        _ViewportApi_cameras.set(this, {});\r\n        _ViewportApi_lightScenes.set(this, {});\r\n        __classPrivateFieldSet(this, _ViewportApi_renderingEngine, renderingEngine, \"f\");\r\n        // Whenever a camera is added or removed from the camera engine, this update is called.\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.update = () => {\r\n            for (let c in __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.cameras) {\r\n                if (!__classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[c]) {\r\n                    if (__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.cameras[c].type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE) {\r\n                        __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[c] = new PerspectiveCameraApi_1.PerspectiveCameraApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.cameras[c]);\r\n                    }\r\n                    else {\r\n                        __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[c] = new OrthographicCameraApi_1.OrthographicCameraApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.cameras[c]);\r\n                    }\r\n                }\r\n            }\r\n            for (let c in __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")) {\r\n                if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.cameras[c]) {\r\n                    delete __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[c];\r\n                }\r\n            }\r\n        };\r\n        // We call it once in the beginning to get the current state.\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.update();\r\n        // Whenever a camera is added or removed from the camera engine, this update is called.\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.update = () => {\r\n            for (let l in __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.lightScenes) {\r\n                if (!__classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")[l]) {\r\n                    __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")[l] = new LightSceneApi_1.LightSceneApi(this, __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.lightScenes[l]);\r\n                }\r\n            }\r\n            for (let l in __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")) {\r\n                if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.lightScenes[l]) {\r\n                    delete __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")[l];\r\n                }\r\n            }\r\n        };\r\n        // We call it once in the beginning to get the current state.\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.update();\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (69)\r\n    get ambientOcclusion() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").ambientOcclusion;\r\n    }\r\n    set ambientOcclusion(value) {\r\n        const scope = 'ambientOcclusion';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").ambientOcclusion = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('ambientOcclusion');\r\n    }\r\n    get ambientOcclusionIntensity() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").ambientOcclusionIntensity;\r\n    }\r\n    set ambientOcclusionIntensity(value) {\r\n        const scope = 'ambientOcclusionIntensity';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").ambientOcclusionIntensity = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('ambientOcclusionIntensity');\r\n    }\r\n    get animations() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_animationEngine, \"f\").animations;\r\n    }\r\n    get arRotation() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arRotation;\r\n    }\r\n    set arRotation(value) {\r\n        const scope = 'arRotation';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arRotation = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arRotation');\r\n    }\r\n    get arScale() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arScale;\r\n    }\r\n    set arScale(value) {\r\n        const scope = 'arScale';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arScale = gl_matrix_1.vec3.max(gl_matrix_1.vec3.create(), value, gl_matrix_1.vec3.fromValues(0.001, 0.001, 0.001));\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arScale');\r\n    }\r\n    get arTranslation() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arTranslation;\r\n    }\r\n    set arTranslation(value) {\r\n        const scope = 'arTranslation';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").arTranslation = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arTranslation');\r\n    }\r\n    get automaticColorAdjustment() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").automaticColorAdjustment;\r\n    }\r\n    set automaticColorAdjustment(value) {\r\n        const scope = 'automaticColorAdjustment';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").automaticColorAdjustment = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('automaticColorAdjustment');\r\n    }\r\n    get automaticResizing() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").automaticResizing;\r\n    }\r\n    set automaticResizing(value) {\r\n        const scope = 'automaticResizing';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").automaticResizing = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('automaticResizing');\r\n    }\r\n    get beautyRenderBlendingDuration() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").beautyRenderBlendingDuration;\r\n    }\r\n    set beautyRenderBlendingDuration(value) {\r\n        const scope = 'beautyRenderBlendingDuration';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").beautyRenderBlendingDuration = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('beautyRenderBlendingDuration');\r\n    }\r\n    get beautyRenderDelay() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").beautyRenderDelay;\r\n    }\r\n    set beautyRenderDelay(value) {\r\n        const scope = 'beautyRenderDelay';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").beautyRenderDelay = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('beautyRenderDelay');\r\n    }\r\n    get camera() {\r\n        if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.camera)\r\n            return null;\r\n        return __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.camera.id];\r\n    }\r\n    get cameras() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\");\r\n    }\r\n    get canvas() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").canvas;\r\n    }\r\n    get clearAlpha() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").clearAlpha;\r\n    }\r\n    set clearAlpha(value) {\r\n        const scope = 'clearAlpha';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").clearAlpha = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('clearAlpha');\r\n    }\r\n    get clearColor() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").clearColor;\r\n    }\r\n    set clearColor(value) {\r\n        const scope = 'clearColor';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").clearColor = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('clearColor');\r\n    }\r\n    get defaultMaterialColor() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").defaultMaterialColor;\r\n    }\r\n    set defaultMaterialColor(value) {\r\n        const scope = 'defaultMaterialColor';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").defaultMaterialColor = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('defaultMaterialColor');\r\n    }\r\n    get enableAR() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").enableAR;\r\n    }\r\n    set enableAR(value) {\r\n        const scope = 'enableAR';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").enableAR = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('enableAR');\r\n    }\r\n    get environmentMap() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMap;\r\n    }\r\n    set environmentMap(value) {\r\n        const scope = 'environmentMap';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'cubeMap');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMap = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMap');\r\n    }\r\n    get environmentMapAsBackground() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapAsBackground;\r\n    }\r\n    set environmentMapAsBackground(value) {\r\n        const scope = 'environmentMapAsBackground';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapAsBackground = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapAsBackground');\r\n    }\r\n    get environmentMapBlurriness() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapBlurriness;\r\n    }\r\n    set environmentMapBlurriness(value) {\r\n        const scope = 'environmentMapBlurriness';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapBlurriness = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapBlurriness');\r\n    }\r\n    get environmentMapIntensity() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapIntensity;\r\n    }\r\n    set environmentMapIntensity(value) {\r\n        const scope = 'environmentMapIntensity';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapIntensity = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapIntensity');\r\n    }\r\n    get environmentMapResolution() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapResolution;\r\n    }\r\n    set environmentMapResolution(value) {\r\n        const scope = 'environmentMapResolution';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'string');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapResolution = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapResolution');\r\n    }\r\n    get environmentMapForUnlitMaterials() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapForUnlitMaterials;\r\n    }\r\n    set environmentMapForUnlitMaterials(value) {\r\n        const scope = 'environmentMapForUnlitMaterials';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapForUnlitMaterials = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapForUnlitMaterials');\r\n    }\r\n    get environmentMapRotation() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapRotation;\r\n    }\r\n    set environmentMapRotation(value) {\r\n        const scope = 'environmentMapRotation';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'quat');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").environmentMapRotation = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapRotation');\r\n    }\r\n    get gridColor() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").gridColor;\r\n    }\r\n    set gridColor(value) {\r\n        const scope = 'gridColor';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").gridColor = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('gridColor');\r\n    }\r\n    get gridVisibility() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").gridVisibility;\r\n    }\r\n    set gridVisibility(value) {\r\n        const scope = 'gridVisibility';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").gridVisibility = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('gridVisibility');\r\n    }\r\n    get groundPlaneColor() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneColor;\r\n    }\r\n    set groundPlaneColor(value) {\r\n        const scope = 'groundPlaneColor';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneColor = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneColor');\r\n    }\r\n    get groundPlaneVisibility() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneVisibility;\r\n    }\r\n    set groundPlaneVisibility(value) {\r\n        const scope = 'groundPlaneVisibility';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneVisibility = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneVisibility');\r\n    }\r\n    get groundPlaneShadowColor() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneShadowColor;\r\n    }\r\n    set groundPlaneShadowColor(value) {\r\n        const scope = 'groundPlaneShadowColor';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneShadowColor = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneShadowColor');\r\n    }\r\n    get groundPlaneShadowVisibility() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneShadowVisibility;\r\n    }\r\n    set groundPlaneShadowVisibility(value) {\r\n        const scope = 'groundPlaneShadowVisibility';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").groundPlaneShadowVisibility = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneShadowVisibility');\r\n    }\r\n    get id() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").id;\r\n    }\r\n    get lights() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lights;\r\n    }\r\n    set lights(value) {\r\n        const scope = 'lights';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lights = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('lights');\r\n    }\r\n    get lightScene() {\r\n        if (!__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.lightScene)\r\n            return null;\r\n        return __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")[__classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.lightScene.id];\r\n    }\r\n    get lightScenes() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\");\r\n    }\r\n    get maximumRenderingSize() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").maximumRenderingSize;\r\n    }\r\n    set maximumRenderingSize(value) {\r\n        const scope = 'maximumRenderingSize';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`SessionApi.${scope}`, value, 'object');\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`SessionApi.${scope}`, value.width, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`SessionApi.${scope}`, value.height, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").maximumRenderingSize = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('maximumRenderingSize');\r\n    }\r\n    get outputEncoding() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").outputEncoding;\r\n    }\r\n    set outputEncoding(value) {\r\n        const scope = 'outputEncoding';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").outputEncoding = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('outputEncoding');\r\n    }\r\n    get physicallyCorrectLights() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").physicallyCorrectLights;\r\n    }\r\n    set physicallyCorrectLights(value) {\r\n        const scope = 'physicallyCorrectLights';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").physicallyCorrectLights = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('physicallyCorrectLights');\r\n    }\r\n    get pointSize() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").pointSize;\r\n    }\r\n    set pointSize(value) {\r\n        const scope = 'pointSize';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").pointSize = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('pointSize');\r\n    }\r\n    get sessionSettingsId() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").sessionSettingsId;\r\n    }\r\n    get sessionSettingsMode() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").sessionSettingsMode;\r\n    }\r\n    get shadows() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").shadows;\r\n    }\r\n    set shadows(value) {\r\n        const scope = 'shadows';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").shadows = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('shadows');\r\n    }\r\n    get show() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").show;\r\n    }\r\n    set show(value) {\r\n        const scope = 'show';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").show = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('show');\r\n    }\r\n    get showStatistics() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").showStatistics;\r\n    }\r\n    set showStatistics(value) {\r\n        const scope = 'showStatistics';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").showStatistics = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('showStatistics');\r\n    }\r\n    get textureEncoding() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").textureEncoding;\r\n    }\r\n    set textureEncoding(value) {\r\n        const scope = 'textureEncoding';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING));\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").textureEncoding = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('textureEncoding');\r\n    }\r\n    get threeJsCoreObjects() {\r\n        return {\r\n            scene: __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").sceneTreeManager.scene,\r\n            renderer: __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").renderer,\r\n            camera: __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraManager.camera\r\n        };\r\n    }\r\n    get toneMapping() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").toneMapping;\r\n    }\r\n    set toneMapping(value) {\r\n        const scope = 'toneMapping';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.TONE_MAPPING));\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").toneMapping = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('toneMapping');\r\n    }\r\n    get toneMappingExposure() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").toneMappingExposure;\r\n    }\r\n    set toneMappingExposure(value) {\r\n        const scope = 'toneMappingExposure';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").toneMappingExposure = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('toneMappingExposure');\r\n    }\r\n    get type() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").type;\r\n    }\r\n    set type(value) {\r\n        const scope = 'type';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE));\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").type = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('type');\r\n    }\r\n    get visualizeAttributes() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").visualizeAttributes;\r\n    }\r\n    set visualizeAttributes(value) {\r\n        const scope = 'visualizeAttributes';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, value, 'function', false);\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").visualizeAttributes = value;\r\n        __classPrivateFieldGet(this, _ViewportApi_logger, \"f\").debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('visualizeAttributes');\r\n    }\r\n    // #endregion Public Accessors (69)\r\n    // #region Public Methods (23)\r\n    addCanvasEventListener(listener) {\r\n        const scope = 'addCanvasEventListener';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, listener, 'object');\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").domEventEngine.addDomEventListener(listener);\r\n    }\r\n    addFlag(flag) {\r\n        const scope = 'addFlag';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, flag, 'enum', true, Object.values(viewer_rendering_engine_rendering_engine_1.FLAG_TYPE));\r\n        const token = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").addFlag(flag);\r\n        return token;\r\n    }\r\n    restrictEventListeners(allowedListeners) {\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").domEventEngine.allowEventListeners(allowedListeners);\r\n    }\r\n    assignCamera(id) {\r\n        const scope = 'assignCamera';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.assignCamera(id);\r\n        this.update('assignCamera');\r\n        return check;\r\n    }\r\n    assignLightScene(id) {\r\n        const scope = 'assignLightScene';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.assignLightScene(id);\r\n        this.update('assignLightScene');\r\n        return check;\r\n    }\r\n    applyViewportSettings(settings, sections) {\r\n        const scope = 'applyViewportSettings';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`SessionApi.${scope}`, settings, 'object');\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`SessionApi.${scope}`, sections, 'object', false);\r\n        return __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, \"f\").applyViewportSettings(this.id, settings, sections);\r\n    }\r\n    close() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return yield __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, \"f\").closeRenderingEngine(this.id);\r\n        });\r\n    }\r\n    convert3Dto2D(p) {\r\n        const scope = 'convert3Dto2D';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, p, 'vec3');\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").convert3Dto2D(p);\r\n    }\r\n    convertToGlTF(node = main_1.sceneTree.root) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const scope = 'convertToGlTF';\r\n            if (!(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n                throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n            this.update('convertToGlTF.start');\r\n            const result = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, \"f\").convert(node, false, this.id);\r\n            this.update('convertToGlTF.end');\r\n            return new Blob([result], { type: 'application/octet-stream' });\r\n        });\r\n    }\r\n    createLightScene(properties) {\r\n        const scope = 'createLightScene';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, prop.name, 'string', false);\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, prop.standard, 'boolean', false);\r\n        const lightScene = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.createLightScene(properties || {});\r\n        this.update('createLightScene');\r\n        return __classPrivateFieldGet(this, _ViewportApi_lightScenes, \"f\")[lightScene.id];\r\n    }\r\n    createOrthographicCamera(id) {\r\n        const scope = 'createOrthographicCamera';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string', false);\r\n        const camera = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.createCamera(viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.ORTHOGRAPHIC, id);\r\n        this.update('createOrthographicCamera');\r\n        return __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[camera.id];\r\n    }\r\n    createPerspectiveCamera(id) {\r\n        const scope = 'createPerspectiveCamera';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string', false);\r\n        const camera = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.createCamera(viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE, id);\r\n        this.update('createPerspectiveCamera');\r\n        return __classPrivateFieldGet(this, _ViewportApi_cameras, \"f\")[camera.id];\r\n    }\r\n    createSDTFOverview(node) {\r\n        const scope = 'createSDTFOverview';\r\n        if (!(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n            throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n        this.update('createSDTFOverview');\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").createSDTFOverview(node);\r\n    }\r\n    displayErrorMessage(message) {\r\n        const scope = 'displayErrorMessage';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, message, 'string');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").displayErrorMessage(message);\r\n        this.update('displayErrorMessage');\r\n    }\r\n    getEnvironmentMapImageUrl() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").getEnvironmentMapImageUrl();\r\n    }\r\n    getScreenshot(type, quality) {\r\n        const scope = 'getScreenshot';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, type, 'string', false);\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, quality, 'number', false);\r\n        this.update('getScreenshot');\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").getScreenshot(type, quality);\r\n    }\r\n    getViewportSettings() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, \"f\").getViewportSettings(this.id);\r\n    }\r\n    isMobileDeviceWithoutBrowserARSupport() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").isMobileDeviceWithoutBrowserARSupport();\r\n    }\r\n    mouseEventToRay(event) {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").mouseEventToRay(event);\r\n    }\r\n    raytraceScene(origin, direction, root) {\r\n        const scope = 'raytraceScene';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, origin, 'vec3');\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, direction, 'vec3');\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").raytraceScene(origin, direction, root);\r\n    }\r\n    removeCamera(id) {\r\n        const scope = 'removeCamera';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.removeCamera(id);\r\n        this.update('removeCamera');\r\n        return check;\r\n    }\r\n    removeCanvasEventListener(token) {\r\n        const scope = 'removeCanvasEventListener';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, token, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").domEventEngine.removeDomEventListener(token);\r\n        return check;\r\n    }\r\n    removeFlag(token) {\r\n        const scope = 'removeFlag';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, token, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").removeFlag(token);\r\n        return check;\r\n    }\r\n    removeLightScene(id) {\r\n        const scope = 'removeLightScene';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").lightEngine.removeLightScene(id);\r\n        this.update('removeLightScene');\r\n        return check;\r\n    }\r\n    render() {\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").renderingManager.render();\r\n    }\r\n    resetToDefaultCameras() {\r\n        for (let c in this.cameras)\r\n            __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.removeCamera(c);\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").cameraEngine.createDefaultCameras();\r\n        this.update('resetToDefaultCameras');\r\n    }\r\n    resize(width, height) {\r\n        const scope = 'resize';\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, width, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_inputValidator, \"f\").validateAndError(`ViewportApi.${scope}`, height, 'number');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").resize(width, height);\r\n        this.update('resize');\r\n    }\r\n    touchToRay(event) {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").touchToRay(event);\r\n    }\r\n    touchEventToRay(event) {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").touchEventToRay(event);\r\n    }\r\n    update(id) {\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").update(id || 'ViewportApi');\r\n    }\r\n    updateNode(node) {\r\n        const scope = 'updateNode';\r\n        if (!(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n            throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").sceneTreeManager.updateNode(node, node.threeJsObject[this.id]);\r\n    }\r\n    updateNodeTransformation(node) {\r\n        const scope = 'updateNodeTransformation';\r\n        if (!(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n            throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").sceneTreeManager.updateNode(node, node.threeJsObject[this.id], { transformationOnly: true });\r\n    }\r\n    updateEnvironmentGeometry() {\r\n        __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").updateEnvironmentGeometry();\r\n    }\r\n    createArSessionLink(node, qrCode = true, fallbackUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const scope = 'createArSessionLink';\r\n            if (node && !(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n                throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n            const arSessionEngine = __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, \"f\").getARSessionEngine();\r\n            if (!arSessionEngine)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerArError('ViewportApi.createArSessionLink: None of the sessions that are registered are capable of using the AR feature.');\r\n            const targetNode = node || main_1.sceneTree.root;\r\n            let scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.arScale);\r\n            // add scaling matrix to scene tree node\r\n            targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix });\r\n            // create the gltf\r\n            this.update('createArSessionLink.start');\r\n            const blob = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, \"f\").convert(targetNode, true, this.id);\r\n            // remove scaling the matrix\r\n            for (let i = 0; i < targetNode.transformations.length; i++)\r\n                if (targetNode.transformations[i].id === 'ar_scaling')\r\n                    targetNode.transformations.splice(i, 1);\r\n            this.update('createArSessionLink.end');\r\n            const response = yield arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.SCENE);\r\n            const backends = {\r\n                \"sddev3\": \"https://sddev3.eu-central-1.shapediver.com\",\r\n                \"sddev2\": \"https://sddev2.eu-central-1.shapediver.com\",\r\n                \"sddev\": \"https://sddev.eu-central-1.shapediver.com\",\r\n                \"sdtest\": \"https://sdtest.us-east-1.shapediver.com\",\r\n                \"sdeuc1\": \"https://sdeuc1.eu-central-1.shapediver.com\",\r\n                \"sdr7euc1\": \"https://sdr7euc1.eu-central-1.shapediver.com\",\r\n                \"sduse1\": \"https://model-view.shapediver.com\",\r\n            };\r\n            let backendIdentifier = Object.keys(backends).find((key) => backends[key] === arSessionEngine.modelViewUrl);\r\n            if (!backendIdentifier) {\r\n                const modelViewUrl = arSessionEngine.modelViewUrl;\r\n                backendIdentifier = modelViewUrl.replace(\"https://\", \"\").replace(\".shapediver.com\", \"\");\r\n            }\r\n            let fallbackQueryParameter = fallbackUrl ? `fb=${encodeURIComponent(fallbackUrl)}&` : \"\";\r\n            if (!response.gltf || !response.gltf.sceneId)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerArError('ViewportApi.createArSessionLink: There was an unexpected error with the ar scene response. Please contact us if this happens again.');\r\n            let sceneId = response.gltf.sceneId;\r\n            const link = `https://viewer.shapediver.com/v3/${viewer_shared_build_data_1.build_data.build_version.replace('3.', '')}/ar.html?${fallbackQueryParameter}b=${encodeURIComponent(backendIdentifier)}&id=${encodeURIComponent(sceneId)}`;\r\n            if (qrCode === false) {\r\n                return link;\r\n            }\r\n            else {\r\n                let qrCodeLink = yield new Promise((resolve, reject) => {\r\n                    QRCode.toDataURL(link, (error, url) => {\r\n                        if (error) {\r\n                            reject(error);\r\n                        }\r\n                        else {\r\n                            resolve(url);\r\n                        }\r\n                    });\r\n                });\r\n                return qrCodeLink;\r\n            }\r\n        });\r\n    }\r\n    viewInAR(node) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const scope = 'viewInAR';\r\n            if (node && !(node instanceof viewer_shared_node_tree_1.TreeNode))\r\n                throw new viewer_shared_services_1.ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n            const arSessionEngine = __classPrivateFieldGet(this, _ViewportApi_creationControlCenter, \"f\").getARSessionEngine();\r\n            if (!arSessionEngine)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: None of the sessions that are registered are capable of using the AR feature.');\r\n            const targetNode = node || main_1.sceneTree.root;\r\n            let scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.arScale);\r\n            // add scaling matrix to scene tree node\r\n            targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix });\r\n            // create the gltf\r\n            this.update('viewInAR.start');\r\n            const blob = yield __classPrivateFieldGet(this, _ViewportApi_gltfConverter, \"f\").convert(targetNode, true, this.id);\r\n            // remove scaling the matrix\r\n            for (let i = 0; i < targetNode.transformations.length; i++)\r\n                if (targetNode.transformations[i].id === 'ar_scaling')\r\n                    targetNode.transformations.splice(i, 1);\r\n            this.update('viewInAR.end');\r\n            const response = yield arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), __classPrivateFieldGet(this, _ViewportApi_systemInfo, \"f\").isIOS ? sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.USDZ : sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.NONE);\r\n            return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").viewInAR(response.gltf.href);\r\n        });\r\n    }\r\n    viewableInAR() {\r\n        return __classPrivateFieldGet(this, _ViewportApi_renderingEngine, \"f\").viewableInAR();\r\n    }\r\n}\r\nexports.ViewportApi = ViewportApi;\r\n_ViewportApi_animationEngine = new WeakMap(), _ViewportApi_renderingEngine = new WeakMap(), _ViewportApi_creationControlCenter = new WeakMap(), _ViewportApi_converter = new WeakMap(), _ViewportApi_gltfConverter = new WeakMap(), _ViewportApi_inputValidator = new WeakMap(), _ViewportApi_logger = new WeakMap(), _ViewportApi_systemInfo = new WeakMap(), _ViewportApi_cameras = new WeakMap(), _ViewportApi_lightScenes = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"ViewportApi.js","sourceRoot":"","sources":["../../../src/implementation/viewport/ViewportApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4, quat, vec2, vec3 } from \"gl-matrix\";\r\nimport { RenderingEngine as RenderingEngineThreeJs } from \"@shapediver/viewer.rendering-engine-threejs.standard\";\r\nimport { IViewportApi } from \"../../interfaces/viewport/IViewportApi\";\r\nimport { ICreationControlCenter, CreationControlCenter } from \"@shapediver/viewer.main.creation-control-center\";\r\nimport { Converter, IDomEventListener, InputValidator, Logger, ShapeDiverViewerArError, ShapeDiverViewerValidationError, SystemInfo } from \"@shapediver/viewer.shared.services\";\r\nimport { FLAG_TYPE, RENDERER_TYPE, SESSION_SETTINGS_MODE, TEXTURE_ENCODING, TONE_MAPPING } from \"@shapediver/viewer.rendering-engine.rendering-engine\";\r\nimport { CAMERA_TYPE, IOrthographicCamera, IPerspectiveCamera } from \"@shapediver/viewer.rendering-engine.camera-engine\";\r\nimport { PerspectiveCameraApi } from \"./camera/PerspectiveCameraApi\";\r\nimport { OrthographicCameraApi } from \"./camera/OrthographicCameraApi\";\r\nimport { LightSceneApi } from \"./lights/LightSceneApi\";\r\nimport { GLTFConverter } from \"@shapediver/viewer.data-engine.gltf-converter\";\r\nimport { ShapeDiverRequestGltfUploadQueryConversion } from \"@shapediver/sdk.geometry-api-sdk-v2\";\r\nimport { ICameraApi } from \"../../interfaces/viewport/camera/ICameraApi\";\r\nimport { ILightSceneApi } from \"../../interfaces/viewport/lights/ILightSceneApi\";\r\nimport { Color, IAnimationData, IGeometryData, ISDTFAttributeVisualizationData, ISDTFItemData, ISDTFOverview } from \"@shapediver/viewer.shared.types\";\r\nimport { ITreeNode, TreeNode } from \"@shapediver/viewer.shared.node-tree\";\r\nimport { sceneTree } from \"../../main\";\r\nimport { IOrthographicCameraApi } from \"../../interfaces/viewport/camera/IOrthographicCameraApi\";\r\nimport { IPerspectiveCameraApi } from \"../../interfaces/viewport/camera/IPerspectiveCameraApi\";\r\nimport { ISettingsV3_1 } from \"@shapediver/viewer.settings\";\r\nimport { build_data } from \"@shapediver/viewer.shared.build-data\";\r\nimport * as QRCode from \"qrcode\";\r\nimport { AnimationEngine } from \"@shapediver/viewer.rendering-engine.animation-engine\";\r\n\r\nexport class ViewportApi implements IViewportApi {\r\n    // #region Properties (5)\r\n\r\n    readonly #animationEngine: AnimationEngine = AnimationEngine.instance;\r\n    readonly #renderingEngine: RenderingEngineThreeJs;\r\n    readonly #creationControlCenter: ICreationControlCenter = CreationControlCenter.instance;\r\n    readonly #converter: Converter = Converter.instance;\r\n    readonly #gltfConverter: GLTFConverter = GLTFConverter.instance;\r\n    readonly #inputValidator: InputValidator = InputValidator.instance;\r\n    readonly #logger: Logger = Logger.instance;\r\n    readonly #systemInfo: SystemInfo = SystemInfo.instance;\r\n\r\n    readonly #cameras: { [key: string]: ICameraApi } = {};\r\n    readonly #lightScenes: { [key: string]: ILightSceneApi } = {};\r\n\r\n    // #endregion Properties (5)\r\n\r\n    // #region Constructors (1)\r\n\r\n    constructor(renderingEngine: RenderingEngineThreeJs) {\r\n        this.#renderingEngine = renderingEngine;\r\n\r\n        // Whenever a camera is added or removed from the camera engine, this update is called.\r\n        this.#renderingEngine.cameraEngine.update = () => {\r\n            for (let c in this.#renderingEngine.cameraEngine.cameras) {\r\n                if (!this.#cameras[c]) {\r\n                    if (this.#renderingEngine.cameraEngine.cameras[c].type === CAMERA_TYPE.PERSPECTIVE) {\r\n                        this.#cameras[c] = new PerspectiveCameraApi(this, <IPerspectiveCamera>this.#renderingEngine.cameraEngine.cameras[c]);\r\n                    } else {\r\n                        this.#cameras[c] = new OrthographicCameraApi(this, <IOrthographicCamera>this.#renderingEngine.cameraEngine.cameras[c]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let c in this.#cameras) {\r\n                if (!this.#renderingEngine.cameraEngine.cameras[c]) {\r\n                    delete this.#cameras[c];\r\n                }\r\n            }\r\n        }\r\n\r\n        // We call it once in the beginning to get the current state.\r\n        this.#renderingEngine.cameraEngine.update();\r\n\r\n        // Whenever a camera is added or removed from the camera engine, this update is called.\r\n        this.#renderingEngine.lightEngine.update = () => {\r\n            for (let l in this.#renderingEngine.lightEngine.lightScenes) {\r\n                if (!this.#lightScenes[l]) {\r\n                    this.#lightScenes[l] = new LightSceneApi(this, this.#renderingEngine.lightEngine.lightScenes[l]);\r\n                }\r\n            }\r\n\r\n            for (let l in this.#lightScenes) {\r\n                if (!this.#renderingEngine.lightEngine.lightScenes[l]) {\r\n                    delete this.#lightScenes[l];\r\n                }\r\n            }\r\n        }\r\n\r\n        // We call it once in the beginning to get the current state.\r\n        this.#renderingEngine.lightEngine.update();\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (69)\r\n\r\n    public get ambientOcclusion(): boolean {\r\n        return this.#renderingEngine.ambientOcclusion;\r\n    }\r\n\r\n    public set ambientOcclusion(value: boolean) {\r\n        const scope = 'ambientOcclusion';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.ambientOcclusion = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('ambientOcclusion');\r\n    }\r\n\r\n    public get ambientOcclusionIntensity(): number {\r\n        return this.#renderingEngine.ambientOcclusionIntensity;\r\n    }\r\n\r\n    public set ambientOcclusionIntensity(value: number) {\r\n        const scope = 'ambientOcclusionIntensity';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.ambientOcclusionIntensity = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('ambientOcclusionIntensity');\r\n    }\r\n\r\n    public get animations(): {\r\n        [key: string]: IAnimationData\r\n    } {\r\n        return this.#animationEngine.animations;\r\n    }\r\n\r\n    public get arRotation(): vec3 {\r\n        return this.#renderingEngine.arRotation;\r\n    }\r\n\r\n    public set arRotation(value: vec3) {\r\n        const scope = 'arRotation';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        this.#renderingEngine.arRotation = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arRotation');\r\n    }\r\n\r\n    public get arScale(): vec3 {\r\n        return this.#renderingEngine.arScale;\r\n    }\r\n\r\n    public set arScale(value: vec3) {\r\n        const scope = 'arScale';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        this.#renderingEngine.arScale = vec3.max(vec3.create(), value, vec3.fromValues(0.001, 0.001, 0.001));\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arScale');\r\n    }\r\n\r\n    public get arTranslation(): vec3 {\r\n        return this.#renderingEngine.arTranslation;\r\n    }\r\n\r\n    public set arTranslation(value: vec3) {\r\n        const scope = 'arTranslation';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'vec3');\r\n        this.#renderingEngine.arTranslation = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('arTranslation');\r\n    }\r\n\r\n    public get automaticColorAdjustment(): boolean {\r\n        return this.#renderingEngine.automaticColorAdjustment;\r\n    }\r\n\r\n    public set automaticColorAdjustment(value: boolean) {\r\n        const scope = 'automaticColorAdjustment';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.automaticColorAdjustment = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('automaticColorAdjustment');\r\n    }\r\n\r\n    public get automaticResizing(): boolean {\r\n        return this.#renderingEngine.automaticResizing;\r\n    }\r\n\r\n    public set automaticResizing(value: boolean) {\r\n        const scope = 'automaticResizing';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.automaticResizing = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('automaticResizing');\r\n    }\r\n\r\n    public get beautyRenderBlendingDuration(): number {\r\n        return this.#renderingEngine.beautyRenderBlendingDuration;\r\n    }\r\n\r\n    public set beautyRenderBlendingDuration(value: number) {\r\n        const scope = 'beautyRenderBlendingDuration';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.beautyRenderBlendingDuration = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('beautyRenderBlendingDuration');\r\n    }\r\n\r\n    public get beautyRenderDelay(): number {\r\n        return this.#renderingEngine.beautyRenderDelay;\r\n    }\r\n\r\n    public set beautyRenderDelay(value: number) {\r\n        const scope = 'beautyRenderDelay';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.beautyRenderDelay = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('beautyRenderDelay');\r\n    }\r\n\r\n    public get camera(): ICameraApi | null {\r\n        if (!this.#renderingEngine.cameraEngine.camera) return null;\r\n        return this.#cameras[this.#renderingEngine.cameraEngine.camera.id];\r\n    }\r\n\r\n    public get cameras(): { [key: string]: ICameraApi; } {\r\n        return this.#cameras;\r\n    }\r\n\r\n    public get canvas(): HTMLCanvasElement {\r\n        return this.#renderingEngine.canvas;\r\n    }\r\n\r\n    public get clearAlpha(): number {\r\n        return this.#renderingEngine.clearAlpha;\r\n    }\r\n\r\n    public set clearAlpha(value: number) {\r\n        const scope = 'clearAlpha';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.clearAlpha = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('clearAlpha');\r\n    }\r\n\r\n    public get clearColor(): Color {\r\n        return this.#renderingEngine.clearColor;\r\n    }\r\n\r\n    public set clearColor(value: Color) {\r\n        const scope = 'clearColor';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        this.#renderingEngine.clearColor = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('clearColor');\r\n    }\r\n    \r\n    public get defaultMaterialColor(): Color {\r\n        return this.#renderingEngine.defaultMaterialColor;\r\n    }\r\n\r\n    public set defaultMaterialColor(value: Color) {\r\n        const scope = 'defaultMaterialColor';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        this.#renderingEngine.defaultMaterialColor = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('defaultMaterialColor');\r\n    }\r\n\r\n    public get enableAR(): boolean {\r\n        return this.#renderingEngine.enableAR;\r\n    }\r\n\r\n    public set enableAR(value: boolean) {\r\n        const scope = 'enableAR';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.enableAR = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('enableAR');\r\n    }\r\n\r\n    public get environmentMap(): string | string[] {\r\n        return this.#renderingEngine.environmentMap;\r\n    }\r\n\r\n    public set environmentMap(value: string | string[]) {\r\n        const scope = 'environmentMap';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'cubeMap');\r\n        this.#renderingEngine.environmentMap = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMap');\r\n    }\r\n\r\n    public get environmentMapAsBackground(): boolean {\r\n        return this.#renderingEngine.environmentMapAsBackground;\r\n    }\r\n\r\n    public set environmentMapAsBackground(value: boolean) {\r\n        const scope = 'environmentMapAsBackground';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.environmentMapAsBackground = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapAsBackground');\r\n    }\r\n\r\n    public get environmentMapBlurriness(): number {\r\n        return this.#renderingEngine.environmentMapBlurriness;\r\n    }\r\n\r\n    public set environmentMapBlurriness(value: number) {\r\n        const scope = 'environmentMapBlurriness';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.environmentMapBlurriness = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapBlurriness');\r\n    }\r\n\r\n    public get environmentMapIntensity(): number {\r\n        return this.#renderingEngine.environmentMapIntensity;\r\n    }\r\n\r\n    public set environmentMapIntensity(value: number) {\r\n        const scope = 'environmentMapIntensity';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.environmentMapIntensity = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapIntensity');\r\n    }\r\n\r\n    public get environmentMapResolution(): string {\r\n        return this.#renderingEngine.environmentMapResolution;\r\n    }\r\n\r\n    public set environmentMapResolution(value: string) {\r\n        const scope = 'environmentMapResolution';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'string');\r\n        this.#renderingEngine.environmentMapResolution = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapResolution');\r\n    }\r\n\r\n    public get environmentMapForUnlitMaterials(): boolean {\r\n        return this.#renderingEngine.environmentMapForUnlitMaterials;\r\n    }\r\n\r\n    public set environmentMapForUnlitMaterials(value: boolean) {\r\n        const scope = 'environmentMapForUnlitMaterials';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.environmentMapForUnlitMaterials = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapForUnlitMaterials');\r\n    }\r\n\r\n    public get environmentMapRotation(): quat {\r\n        return this.#renderingEngine.environmentMapRotation;\r\n    }\r\n\r\n    public set environmentMapRotation(value: quat) {\r\n        const scope = 'environmentMapRotation';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'quat');\r\n        this.#renderingEngine.environmentMapRotation = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('environmentMapRotation');\r\n    }\r\n\r\n    public get gridColor(): Color {\r\n        return this.#renderingEngine.gridColor;\r\n    }\r\n\r\n    public set gridColor(value: Color) {\r\n        const scope = 'gridColor';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        this.#renderingEngine.gridColor = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('gridColor');\r\n    }\r\n\r\n    public get gridVisibility(): boolean {\r\n        return this.#renderingEngine.gridVisibility;\r\n    }\r\n\r\n    public set gridVisibility(value: boolean) {\r\n        const scope = 'gridVisibility';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.gridVisibility = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('gridVisibility');\r\n    }\r\n\r\n    public get groundPlaneColor(): Color {\r\n        return this.#renderingEngine.groundPlaneColor;\r\n    }\r\n\r\n    public set groundPlaneColor(value: Color) {\r\n        const scope = 'groundPlaneColor';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        this.#renderingEngine.groundPlaneColor = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneColor');\r\n    }\r\n\r\n    public get groundPlaneVisibility(): boolean {\r\n        return this.#renderingEngine.groundPlaneVisibility;\r\n    }\r\n\r\n    public set groundPlaneVisibility(value: boolean) {\r\n        const scope = 'groundPlaneVisibility';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.groundPlaneVisibility = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneVisibility');\r\n    }\r\n\r\n    public get groundPlaneShadowColor(): Color {\r\n        return this.#renderingEngine.groundPlaneShadowColor;\r\n    }\r\n\r\n    public set groundPlaneShadowColor(value: Color) {\r\n        const scope = 'groundPlaneShadowColor';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'color');\r\n        this.#renderingEngine.groundPlaneShadowColor = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneShadowColor');\r\n    }\r\n\r\n    public get groundPlaneShadowVisibility(): boolean {\r\n        return this.#renderingEngine.groundPlaneShadowVisibility;\r\n    }\r\n\r\n    public set groundPlaneShadowVisibility(value: boolean) {\r\n        const scope = 'groundPlaneShadowVisibility';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.groundPlaneShadowVisibility = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('groundPlaneShadowVisibility');\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.#renderingEngine.id;\r\n    }\r\n\r\n    public get lights(): boolean {\r\n        return this.#renderingEngine.lights;\r\n    }\r\n\r\n    public set lights(value: boolean) {\r\n        const scope = 'lights';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.lights = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('lights');\r\n    }\r\n\r\n    public get lightScene(): ILightSceneApi | null {\r\n        if (!this.#renderingEngine.lightEngine.lightScene) return null;\r\n        return this.#lightScenes[this.#renderingEngine.lightEngine.lightScene.id];\r\n    }\r\n\r\n    public get lightScenes(): { [key: string]: ILightSceneApi; } {\r\n        return this.#lightScenes;\r\n    }\r\n\r\n    public get maximumRenderingSize(): {\r\n        width: number,\r\n        height: number\r\n    } {\r\n        return this.#renderingEngine.maximumRenderingSize;\r\n    }\r\n\r\n    public set maximumRenderingSize(value: {\r\n        width: number,\r\n        height: number\r\n    }) {\r\n        const scope = 'maximumRenderingSize';\r\n        this.#inputValidator.validateAndError(`SessionApi.${scope}`, value, 'object');\r\n        this.#inputValidator.validateAndError(`SessionApi.${scope}`, value.width, 'number');\r\n        this.#inputValidator.validateAndError(`SessionApi.${scope}`, value.height, 'number');\r\n        this.#renderingEngine.maximumRenderingSize = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('maximumRenderingSize');\r\n    }\r\n\r\n    public get outputEncoding(): TEXTURE_ENCODING {\r\n        return this.#renderingEngine.outputEncoding;\r\n    }\r\n\r\n    public set outputEncoding(value: TEXTURE_ENCODING) {\r\n        const scope = 'outputEncoding';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(TEXTURE_ENCODING));\r\n        this.#renderingEngine.outputEncoding = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('outputEncoding');\r\n    }\r\n\r\n    public get physicallyCorrectLights(): boolean {\r\n        return this.#renderingEngine.physicallyCorrectLights;\r\n    }\r\n\r\n    public set physicallyCorrectLights(value: boolean) {\r\n        const scope = 'physicallyCorrectLights';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.physicallyCorrectLights = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('physicallyCorrectLights');\r\n    }\r\n\r\n    public get pointSize(): number {\r\n        return this.#renderingEngine.pointSize;\r\n    }\r\n\r\n    public set pointSize(value: number) {\r\n        const scope = 'pointSize';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.pointSize = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('pointSize');\r\n    }\r\n\r\n    public get sessionSettingsId(): string | undefined {\r\n        return this.#renderingEngine.sessionSettingsId;\r\n    }\r\n\r\n    public get sessionSettingsMode(): SESSION_SETTINGS_MODE {\r\n        return this.#renderingEngine.sessionSettingsMode;\r\n    }\r\n\r\n    public get shadows(): boolean {\r\n        return this.#renderingEngine.shadows;\r\n    }\r\n\r\n    public set shadows(value: boolean) {\r\n        const scope = 'shadows';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.shadows = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('shadows');\r\n    }\r\n\r\n    public get show(): boolean {\r\n        return this.#renderingEngine.show;\r\n    }\r\n\r\n    public set show(value: boolean) {\r\n        const scope = 'show';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.show = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('show');\r\n    }\r\n\r\n    public get showStatistics(): boolean {\r\n        return this.#renderingEngine.showStatistics;\r\n    }\r\n\r\n    public set showStatistics(value: boolean) {\r\n        const scope = 'showStatistics';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'boolean');\r\n        this.#renderingEngine.showStatistics = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('showStatistics');\r\n    }\r\n\r\n    public get textureEncoding(): TEXTURE_ENCODING {\r\n        return this.#renderingEngine.textureEncoding;\r\n    }\r\n\r\n    public set textureEncoding(value: TEXTURE_ENCODING) {\r\n        const scope = 'textureEncoding';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(TEXTURE_ENCODING));\r\n        this.#renderingEngine.textureEncoding = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('textureEncoding');\r\n    }\r\n\r\n    public get threeJsCoreObjects(): {\r\n        scene: THREE.Scene,\r\n        renderer: THREE.WebGLRenderer,\r\n        camera: THREE.Camera\r\n    } {\r\n        return {\r\n            scene: this.#renderingEngine.sceneTreeManager.scene,\r\n            renderer: this.#renderingEngine.renderer,\r\n            camera: this.#renderingEngine.cameraManager.camera\r\n        };\r\n    }\r\n\r\n    public get toneMapping(): TONE_MAPPING {\r\n        return this.#renderingEngine.toneMapping;\r\n    }\r\n\r\n    public set toneMapping(value: TONE_MAPPING) {\r\n        const scope = 'toneMapping';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(TONE_MAPPING));\r\n        this.#renderingEngine.toneMapping = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('toneMapping');\r\n    }\r\n\r\n    public get toneMappingExposure(): number {\r\n        return this.#renderingEngine.toneMappingExposure;\r\n    }\r\n\r\n    public set toneMappingExposure(value: number) {\r\n        const scope = 'toneMappingExposure';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'number');\r\n        this.#renderingEngine.toneMappingExposure = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('toneMappingExposure');\r\n    }\r\n\r\n    public get type(): RENDERER_TYPE {\r\n        return this.#renderingEngine.type;\r\n    }\r\n\r\n    public set type(value: RENDERER_TYPE) {\r\n        const scope = 'type';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'enum', true, Object.values(RENDERER_TYPE));\r\n        this.#renderingEngine.type = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('type');\r\n    }\r\n\r\n    public get visualizeAttributes(): ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined {\r\n        return this.#renderingEngine.visualizeAttributes;\r\n    }\r\n\r\n    public set visualizeAttributes(value: ((overview: ISDTFOverview, itemData?: ISDTFItemData) => ISDTFAttributeVisualizationData) | undefined) {\r\n        const scope = 'visualizeAttributes';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, value, 'function', false);\r\n        this.#renderingEngine.visualizeAttributes = value;\r\n        this.#logger.debug(`ViewportApi.${scope}: ${scope} was set to: ${value}`);\r\n        this.update('visualizeAttributes');\r\n    }\r\n\r\n    // #endregion Public Accessors (69)\r\n\r\n    // #region Public Methods (23)\r\n\r\n    public addCanvasEventListener(listener: IDomEventListener): string {\r\n        const scope = 'addCanvasEventListener';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, listener, 'object');\r\n        return this.#renderingEngine.domEventEngine.addDomEventListener(listener);\r\n    }\r\n\r\n    public addFlag(flag: FLAG_TYPE): string {\r\n        const scope = 'addFlag';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, flag, 'enum', true, Object.values(FLAG_TYPE));\r\n        const token = this.#renderingEngine.addFlag(flag);\r\n        return token;\r\n    }\r\n    \r\n    public restrictEventListeners(allowedListeners: {\r\n        mousewheel?: boolean,\r\n        mousedown?: boolean,\r\n        mousemove?: boolean,\r\n        mouseup?: boolean,\r\n        mouseout?: boolean,\r\n        touchstart?: boolean,\r\n        touchmove?: boolean,\r\n        touchend?: boolean,\r\n        touchcancel?: boolean,\r\n        keydown?: boolean,\r\n        contextmenu?: boolean,\r\n    }) {\r\n        this.#renderingEngine.domEventEngine.allowEventListeners(allowedListeners);\r\n    }\r\n\r\n    public assignCamera(id: string): boolean {\r\n        const scope = 'assignCamera';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = this.#renderingEngine.cameraEngine.assignCamera(id);\r\n        this.update('assignCamera');\r\n        return check;\r\n    }\r\n\r\n    public assignLightScene(id: string): boolean {\r\n        const scope = 'assignLightScene';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = this.#renderingEngine.lightEngine.assignLightScene(id);\r\n        this.update('assignLightScene');\r\n        return check;\r\n    }\r\n\r\n    public applyViewportSettings(settings: ISettingsV3_1, sections?: { ar?: boolean | undefined; scene?: boolean | undefined; camera?: boolean | undefined; light?: boolean | undefined; environment?: boolean | undefined; general?: boolean | undefined; }) {\r\n        const scope = 'applyViewportSettings';\r\n        this.#inputValidator.validateAndError(`SessionApi.${scope}`, settings, 'object');\r\n        this.#inputValidator.validateAndError(`SessionApi.${scope}`, sections, 'object', false);\r\n        return this.#creationControlCenter.applyViewportSettings(this.id, settings, sections);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        return await this.#creationControlCenter.closeRenderingEngine(this.id);\r\n    }\r\n\r\n    public convert3Dto2D(p: vec3): { container: vec2; client: vec2; page: vec2; hidden: boolean; } {\r\n        const scope = 'convert3Dto2D';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, p, 'vec3');\r\n        return this.#renderingEngine.convert3Dto2D(p);\r\n    }\r\n\r\n    public async convertToGlTF(node: ITreeNode = sceneTree.root): Promise<Blob> {\r\n        const scope = 'convertToGlTF';\r\n        if (!(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        this.update('convertToGlTF.start');\r\n        const result = await this.#gltfConverter.convert(node, false, this.id);\r\n        this.update('convertToGlTF.end');\r\n        return new Blob([result], { type: 'application/octet-stream' });\r\n    }\r\n\r\n    public createLightScene(properties?: { name?: string | undefined; standard?: boolean | undefined; }): ILightSceneApi {\r\n        const scope = 'createLightScene';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, properties, 'object', false);\r\n        const prop = Object.assign({}, properties);\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, prop.name, 'string', false);\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, prop.standard, 'boolean', false);\r\n        const lightScene = this.#renderingEngine.lightEngine.createLightScene(properties || {});\r\n        this.update('createLightScene');\r\n        return this.#lightScenes[lightScene.id];\r\n    }\r\n\r\n    public createOrthographicCamera(id?: string): IOrthographicCameraApi {\r\n        const scope = 'createOrthographicCamera';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string', false);\r\n        const camera = this.#renderingEngine.cameraEngine.createCamera(CAMERA_TYPE.ORTHOGRAPHIC, id);\r\n        this.update('createOrthographicCamera');\r\n        return <IOrthographicCameraApi>this.#cameras[camera.id];\r\n    }\r\n\r\n    public createPerspectiveCamera(id?: string): IPerspectiveCameraApi {\r\n        const scope = 'createPerspectiveCamera';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string', false);\r\n        const camera = this.#renderingEngine.cameraEngine.createCamera(CAMERA_TYPE.PERSPECTIVE, id);\r\n        this.update('createPerspectiveCamera');\r\n        return <IPerspectiveCameraApi>this.#cameras[camera.id];\r\n    }\r\n\r\n    public createSDTFOverview(node: ITreeNode): ISDTFOverview {\r\n        const scope = 'createSDTFOverview';\r\n        if (!(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        this.update('createSDTFOverview');\r\n        return this.#renderingEngine.createSDTFOverview(node);\r\n    }\r\n\r\n    public displayErrorMessage(message: string): void {\r\n        const scope = 'displayErrorMessage';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, message, 'string');\r\n        this.#renderingEngine.displayErrorMessage(message);\r\n        this.update('displayErrorMessage');\r\n    }\r\n\r\n    public getEnvironmentMapImageUrl(): string {\r\n        return this.#renderingEngine.getEnvironmentMapImageUrl();\r\n    }\r\n\r\n    public getScreenshot(type?: string, quality?: number): string {\r\n        const scope = 'getScreenshot';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, type, 'string', false);\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, quality, 'number', false);\r\n        this.update('getScreenshot');\r\n        return this.#renderingEngine.getScreenshot(type, quality);\r\n    }\r\n\r\n    public getViewportSettings(): ISettingsV3_1 {\r\n        return this.#creationControlCenter.getViewportSettings(this.id);\r\n    }\r\n\r\n    public isMobileDeviceWithoutBrowserARSupport(): boolean {\r\n        return this.#renderingEngine.isMobileDeviceWithoutBrowserARSupport();\r\n    }\r\n\r\n    public mouseEventToRay(event: MouseEvent): { origin: vec3; direction: vec3; } {\r\n        return this.#renderingEngine.mouseEventToRay(event);\r\n    }\r\n\r\n    public raytraceScene(origin: vec3, direction: vec3, root?: ITreeNode): { distance: number, node: ITreeNode, data?: IGeometryData; }[] {\r\n        const scope = 'raytraceScene';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, origin, 'vec3');\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, direction, 'vec3');\r\n        return this.#renderingEngine.raytraceScene(origin, direction, root);\r\n    }\r\n\r\n    public removeCamera(id: string): boolean {\r\n        const scope = 'removeCamera';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = this.#renderingEngine.cameraEngine.removeCamera(id);\r\n        this.update('removeCamera');\r\n        return check;\r\n    }\r\n\r\n    public removeCanvasEventListener(token: string): boolean {\r\n        const scope = 'removeCanvasEventListener';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, token, 'string');\r\n        const check = this.#renderingEngine.domEventEngine.removeDomEventListener(token);\r\n        return check;\r\n    }\r\n\r\n    public removeFlag(token: string): boolean {\r\n        const scope = 'removeFlag';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, token, 'string');\r\n        const check = this.#renderingEngine.removeFlag(token)\r\n        return check;\r\n    }\r\n\r\n    public removeLightScene(id: string): boolean {\r\n        const scope = 'removeLightScene';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, id, 'string');\r\n        const check = this.#renderingEngine.lightEngine.removeLightScene(id);\r\n        this.update('removeLightScene');\r\n        return check;\r\n    }\r\n\r\n    public render(): void {\r\n        this.#renderingEngine.renderingManager.render();\r\n    }\r\n\r\n    public resetToDefaultCameras(): void {\r\n        for (let c in this.cameras)\r\n            this.#renderingEngine.cameraEngine.removeCamera(c);\r\n        this.#renderingEngine.cameraEngine.createDefaultCameras();\r\n        this.update('resetToDefaultCameras');\r\n    }\r\n\r\n    public resize(width: number, height: number): void {\r\n        const scope = 'resize';\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, width, 'number');\r\n        this.#inputValidator.validateAndError(`ViewportApi.${scope}`, height, 'number');\r\n        this.#renderingEngine.resize(width, height);\r\n        this.update('resize');\r\n    }\r\n\r\n    public touchToRay(event: Touch): { origin: vec3; direction: vec3; } {\r\n        return this.#renderingEngine.touchToRay(event);\r\n\r\n    }\r\n\r\n    public touchEventToRay(event: TouchEvent): { origin: vec3; direction: vec3; } {\r\n        return this.#renderingEngine.touchEventToRay(event);\r\n\r\n    }\r\n\r\n    public update(id?: string): void {\r\n        this.#renderingEngine.update(id || 'ViewportApi');\r\n    }\r\n\r\n    public updateNode(node: ITreeNode): void {\r\n        const scope = 'updateNode';\r\n        if (!(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        this.#renderingEngine.sceneTreeManager.updateNode(node, node.threeJsObject[this.id], );\r\n    }\r\n\r\n    public updateNodeTransformation(node: ITreeNode): void {\r\n        const scope = 'updateNodeTransformation';\r\n        if (!(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        this.#renderingEngine.sceneTreeManager.updateNode(node, node.threeJsObject[this.id], { transformationOnly: true });\r\n    }\r\n\r\n    public updateEnvironmentGeometry(): void {\r\n        this.#renderingEngine.updateEnvironmentGeometry();\r\n    }\r\n\r\n    public async createArSessionLink(node?: ITreeNode, qrCode: boolean = true, fallbackUrl?: string): Promise<string> {\r\n        const scope = 'createArSessionLink';\r\n        if (node && !(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        const arSessionEngine = this.#creationControlCenter.getARSessionEngine();\r\n        if (!arSessionEngine)\r\n            throw new ShapeDiverViewerArError('ViewportApi.createArSessionLink: None of the sessions that are registered are capable of using the AR feature.');\r\n\r\n        const targetNode = node || sceneTree.root;\r\n\r\n        let scalingMatrix: mat4 = mat4.fromScaling(mat4.create(), this.arScale);\r\n\r\n        // add scaling matrix to scene tree node\r\n        targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix })\r\n\r\n        // create the gltf\r\n        this.update('createArSessionLink.start');\r\n        const blob = await this.#gltfConverter.convert(targetNode, true, this.id);\r\n\r\n        // remove scaling the matrix\r\n        for (let i = 0; i < targetNode.transformations.length; i++)\r\n            if (targetNode.transformations[i].id === 'ar_scaling')\r\n                targetNode.transformations.splice(i, 1);\r\n\r\n        this.update('createArSessionLink.end');\r\n\r\n        const response = await arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), ShapeDiverRequestGltfUploadQueryConversion.SCENE);\r\n\r\n        const backends: {\r\n            [key: string]: string\r\n        } = {\r\n            \"sddev3\": \"https://sddev3.eu-central-1.shapediver.com\",\r\n            \"sddev2\": \"https://sddev2.eu-central-1.shapediver.com\",\r\n            \"sddev\": \"https://sddev.eu-central-1.shapediver.com\",\r\n            \"sdtest\": \"https://sdtest.us-east-1.shapediver.com\",\r\n            \"sdeuc1\": \"https://sdeuc1.eu-central-1.shapediver.com\",\r\n            \"sdr7euc1\": \"https://sdr7euc1.eu-central-1.shapediver.com\",\r\n            \"sduse1\": \"https://model-view.shapediver.com\",\r\n        }\r\n\r\n        let backendIdentifier = Object.keys(backends).find((key: string) => backends[key] === arSessionEngine.modelViewUrl);\r\n        if (!backendIdentifier) {\r\n            const modelViewUrl = arSessionEngine.modelViewUrl;\r\n            backendIdentifier = modelViewUrl.replace(\"https://\", \"\").replace(\".shapediver.com\", \"\");\r\n        }\r\n\r\n        let fallbackQueryParameter = fallbackUrl ? `fb=${encodeURIComponent(fallbackUrl)}&` : \"\";\r\n\r\n        if (!response.gltf || !response.gltf.sceneId)\r\n            throw new ShapeDiverViewerArError('ViewportApi.createArSessionLink: There was an unexpected error with the ar scene response. Please contact us if this happens again.');\r\n\r\n        let sceneId = response.gltf!.sceneId!;\r\n\r\n        const link = `https://viewer.shapediver.com/v3/${build_data.build_version.replace('3.', '')}/ar.html?${fallbackQueryParameter}b=${encodeURIComponent(backendIdentifier)}&id=${encodeURIComponent(sceneId)}`;\r\n        if (qrCode === false) {\r\n            return link;\r\n        } else {\r\n            let qrCodeLink = await new Promise<string>((resolve, reject) => {\r\n                QRCode.toDataURL(link,\r\n                    (error: Error | null | undefined, url: string) => {\r\n                        if(error) {\r\n                            reject(error)\r\n                        } else {\r\n                            resolve(url)\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n            return qrCodeLink;\r\n        }\r\n    }\r\n\r\n\r\n    public async viewInAR(node?: ITreeNode): Promise<void> {\r\n        const scope = 'viewInAR';\r\n        if (node && !(node instanceof TreeNode))\r\n            throw new ShapeDiverViewerValidationError(`${scope}: Input could not be validated. ${node} is not of type node.`, node, 'node');\r\n\r\n        const arSessionEngine = this.#creationControlCenter.getARSessionEngine();\r\n        if (!arSessionEngine)\r\n            throw new ShapeDiverViewerArError('Api.viewInAR: None of the sessions that are registered are capable of using the AR feature.');\r\n\r\n        const targetNode = node || sceneTree.root;\r\n\r\n        let scalingMatrix: mat4 = mat4.fromScaling(mat4.create(), this.arScale);\r\n\r\n        // add scaling matrix to scene tree node\r\n        targetNode.transformations.push({ id: 'ar_scaling', matrix: scalingMatrix })\r\n\r\n        // create the gltf\r\n        this.update('viewInAR.start');\r\n        const blob = await this.#gltfConverter.convert(targetNode, true, this.id);\r\n\r\n        // remove scaling the matrix\r\n        for (let i = 0; i < targetNode.transformations.length; i++)\r\n            if (targetNode.transformations[i].id === 'ar_scaling')\r\n                targetNode.transformations.splice(i, 1);\r\n\r\n        this.update('viewInAR.end');\r\n\r\n        const response = await arSessionEngine.uploadGLTF(new Blob([blob], { type: 'application/octet-stream' }), this.#systemInfo.isIOS ? ShapeDiverRequestGltfUploadQueryConversion.USDZ : ShapeDiverRequestGltfUploadQueryConversion.NONE);\r\n        return this.#renderingEngine.viewInAR(response.gltf!.href)\r\n    }\r\n\r\n    public viewableInAR(): boolean {\r\n        return this.#renderingEngine.viewableInAR();\r\n    }\r\n    // #endregion Public Methods (23)\r\n}"]}},"error":null,"hash":"655b3e71fcd992d72dec7cec40074ec8","cacheData":{"env":{}}}