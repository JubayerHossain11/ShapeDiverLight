{"id":"node_modules/@shapediver/viewer.rendering-engine-threejs.standard/dist/three/postprocessing/SSAARenderPass.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SSAARenderPass.js.map","includedInParent":true,"mtime":1706527153811},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\src\\three\\postprocessing\\SSAARenderPass.js","includedInParent":true,"mtime":1706527152804},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\package.json","includedInParent":true,"mtime":1706527152875},{"name":"three","loc":{"line":4,"column":24,"index":137},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SSAARenderPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\three\\build\\three.module.js"},{"name":"./Pass.js","loc":{"line":5,"column":26,"index":174},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SSAARenderPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\Pass.js"},{"name":"../shaders/CopyShader.js","loc":{"line":6,"column":32,"index":221},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\postprocessing\\SSAARenderPass.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.rendering-engine-threejs.standard\\dist\\three\\shaders\\CopyShader.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SSAARenderPass = void 0;\r\nconst three_1 = require(\"three\");\r\nconst Pass_js_1 = require(\"./Pass.js\");\r\nconst CopyShader_js_1 = require(\"../shaders/CopyShader.js\");\r\n/**\r\n*\r\n* Supersample Anti-Aliasing Render Pass\r\n*\r\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\r\n*\r\n* References: https://en.wikipedia.org/wiki/Supersampling\r\n*\r\n*/\r\nclass SSAARenderPass extends Pass_js_1.Pass {\r\n    constructor(scene, camera, clearColor, clearAlpha) {\r\n        super();\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\r\n        this.unbiased = true;\r\n        // as we need to clear the buffer in this pass, clearColor must be set to something, defaults to black.\r\n        this.clearColor = (clearColor !== undefined) ? clearColor : 0x000000;\r\n        this.clearAlpha = (clearAlpha !== undefined) ? clearAlpha : 0;\r\n        this._oldClearColor = new three_1.Color();\r\n        if (CopyShader_js_1.CopyShader === undefined)\r\n            console.error('THREE.SSAARenderPass relies on CopyShader');\r\n        const copyShader = CopyShader_js_1.CopyShader;\r\n        this.copyUniforms = three_1.UniformsUtils.clone(copyShader.uniforms);\r\n        this.copyMaterial = new three_1.ShaderMaterial({\r\n            uniforms: this.copyUniforms,\r\n            vertexShader: copyShader.vertexShader,\r\n            fragmentShader: copyShader.fragmentShader,\r\n            premultipliedAlpha: true,\r\n            transparent: true,\r\n            blending: three_1.AdditiveBlending,\r\n            depthTest: false,\r\n            depthWrite: false\r\n        });\r\n        this.fsQuad = new Pass_js_1.FullScreenQuad(this.copyMaterial);\r\n    }\r\n    dispose() {\r\n        if (this.sampleRenderTarget) {\r\n            this.sampleRenderTarget.dispose();\r\n            this.sampleRenderTarget = null;\r\n        }\r\n    }\r\n    setSize(width, height) {\r\n        if (this.sampleRenderTarget)\r\n            this.sampleRenderTarget.setSize(width, height);\r\n    }\r\n    render(renderer, writeBuffer, readBuffer) {\r\n        if (!this.sampleRenderTarget) {\r\n            this.sampleRenderTarget = new three_1.WebGLRenderTarget(readBuffer.width, readBuffer.height, { minFilter: three_1.LinearFilter, magFilter: three_1.LinearFilter, format: three_1.RGBAFormat });\r\n            this.sampleRenderTarget.texture.name = 'SSAARenderPass.sample';\r\n        }\r\n        const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\r\n        const autoClear = renderer.autoClear;\r\n        renderer.autoClear = false;\r\n        renderer.getClearColor(this._oldClearColor);\r\n        const oldClearAlpha = renderer.getClearAlpha();\r\n        const baseSampleWeight = 1.0 / jitterOffsets.length;\r\n        const roundingRange = 1 / 32;\r\n        this.copyUniforms['tDiffuse'].value = this.sampleRenderTarget.texture;\r\n        const viewOffset = {\r\n            fullWidth: readBuffer.width,\r\n            fullHeight: readBuffer.height,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            width: readBuffer.width,\r\n            height: readBuffer.height\r\n        };\r\n        const originalViewOffset = Object.assign({}, this.camera.view);\r\n        if (originalViewOffset.enabled)\r\n            Object.assign(viewOffset, originalViewOffset);\r\n        // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\r\n        for (let i = 0; i < jitterOffsets.length; i++) {\r\n            const jitterOffset = jitterOffsets[i];\r\n            if (this.camera.setViewOffset) {\r\n                this.camera.setViewOffset(viewOffset.fullWidth, viewOffset.fullHeight, viewOffset.offsetX + jitterOffset[0] * 0.0625, viewOffset.offsetY + jitterOffset[1] * 0.0625, // 0.0625 = 1 / 16\r\n                viewOffset.width, viewOffset.height);\r\n            }\r\n            let sampleWeight = baseSampleWeight;\r\n            if (this.unbiased) {\r\n                // the theory is that equal weights for each sample lead to an accumulation of rounding errors.\r\n                // The following equation varies the sampleWeight per sample so that it is uniformly distributed\r\n                // across a range of values whose rounding errors cancel each other out.\r\n                const uniformCenteredDistribution = (-0.5 + (i + 0.5) / jitterOffsets.length);\r\n                sampleWeight += roundingRange * uniformCenteredDistribution;\r\n            }\r\n            this.copyUniforms['opacity'].value = sampleWeight;\r\n            renderer.setClearColor(this.clearColor, this.clearAlpha);\r\n            renderer.setRenderTarget(this.sampleRenderTarget);\r\n            renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\r\n            if (i === 0) {\r\n                renderer.setClearColor(0x000000, 0.0);\r\n                renderer.clear();\r\n            }\r\n            this.fsQuad.render(renderer);\r\n        }\r\n        if (this.camera.setViewOffset && originalViewOffset.enabled) {\r\n            this.camera.setViewOffset(originalViewOffset.fullWidth, originalViewOffset.fullHeight, originalViewOffset.offsetX, originalViewOffset.offsetY, originalViewOffset.width, originalViewOffset.height);\r\n        }\r\n        else if (this.camera.clearViewOffset) {\r\n            this.camera.clearViewOffset();\r\n        }\r\n        renderer.autoClear = autoClear;\r\n        renderer.setClearColor(this._oldClearColor, oldClearAlpha);\r\n    }\r\n}\r\nexports.SSAARenderPass = SSAARenderPass;\r\n// These jitter vectors are specified in integers because it is easier.\r\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\r\n// before being used, thus these integers need to be scaled by 1/16.\r\n//\r\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\r\nconst _JitterVectors = [\r\n    [\r\n        [0, 0]\r\n    ],\r\n    [\r\n        [4, 4], [-4, -4]\r\n    ],\r\n    [\r\n        [-2, -6], [6, -2], [-6, 2], [2, 6]\r\n    ],\r\n    [\r\n        [1, -3], [-1, 3], [5, 1], [-3, -5],\r\n        [-5, 5], [-7, -1], [3, 7], [7, -7]\r\n    ],\r\n    [\r\n        [1, 1], [-1, -3], [-3, 2], [4, -1],\r\n        [-5, -2], [2, 5], [5, 3], [3, -5],\r\n        [-2, 6], [0, -7], [-4, -6], [-6, 4],\r\n        [-8, 0], [7, -4], [6, 7], [-7, -8]\r\n    ],\r\n    [\r\n        [-4, -7], [-7, -5], [-3, -5], [-5, -4],\r\n        [-1, -4], [-2, -2], [-6, -1], [-4, 0],\r\n        [-7, 1], [-1, 2], [-6, 3], [-3, 3],\r\n        [-7, 6], [-3, 6], [-5, 7], [-1, 7],\r\n        [5, -7], [1, -6], [6, -5], [4, -4],\r\n        [2, -3], [7, -2], [1, -1], [4, -1],\r\n        [2, 1], [6, 2], [0, 4], [4, 4],\r\n        [2, 5], [7, 5], [5, 6], [3, 7]\r\n    ]\r\n];\r\n"},"sourceMaps":{"js":{"version":3,"file":"SSAARenderPass.js","sourceRoot":"","sources":["../../../src/three/postprocessing/SSAARenderPass.js"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tLinearFilter,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\n\r\n/**\r\n*\r\n* Supersample Anti-Aliasing Render Pass\r\n*\r\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\r\n*\r\n* References: https://en.wikipedia.org/wiki/Supersampling\r\n*\r\n*/\r\n\r\nclass SSAARenderPass extends Pass {\r\n\r\n\tconstructor( scene, camera, clearColor, clearAlpha ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\r\n\t\tthis.unbiased = true;\r\n\r\n\t\t// as we need to clear the buffer in this pass, clearColor must be set to something, defaults to black.\r\n\t\tthis.clearColor = ( clearColor !== undefined ) ? clearColor : 0x000000;\r\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\r\n\t\tthis._oldClearColor = new Color();\r\n\r\n\t\tif ( CopyShader === undefined ) console.error( 'THREE.SSAARenderPass relies on CopyShader' );\r\n\r\n\t\tconst copyShader = CopyShader;\r\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\r\n\t\tthis.copyMaterial = new ShaderMaterial(\t{\r\n\t\t\tuniforms: this.copyUniforms,\r\n\t\t\tvertexShader: copyShader.vertexShader,\r\n\t\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\t\tpremultipliedAlpha: true,\r\n\t\t\ttransparent: true,\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false\r\n\t\t} );\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( this.copyMaterial );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tif ( this.sampleRenderTarget ) {\r\n\r\n\t\t\tthis.sampleRenderTarget.dispose();\r\n\t\t\tthis.sampleRenderTarget = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tif ( this.sampleRenderTarget )\tthis.sampleRenderTarget.setSize( width, height );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer ) {\r\n\r\n\t\tif ( ! this.sampleRenderTarget ) {\r\n\r\n\t\t\tthis.sampleRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat } );\r\n\t\t\tthis.sampleRenderTarget.texture.name = 'SSAARenderPass.sample';\r\n\r\n\t\t}\r\n\r\n\t\tconst jitterOffsets = _JitterVectors[ Math.max( 0, Math.min( this.sampleLevel, 5 ) ) ];\r\n\r\n\t\tconst autoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\tconst oldClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\tconst baseSampleWeight = 1.0 / jitterOffsets.length;\r\n\t\tconst roundingRange = 1 / 32;\r\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.sampleRenderTarget.texture;\r\n\r\n\t\tconst viewOffset = {\r\n\r\n\t\t\tfullWidth: readBuffer.width,\r\n\t\t\tfullHeight: readBuffer.height,\r\n\t\t\toffsetX: 0,\r\n\t\t\toffsetY: 0,\r\n\t\t\twidth: readBuffer.width,\r\n\t\t\theight: readBuffer.height\r\n\r\n\t\t};\r\n\r\n\t\tconst originalViewOffset = Object.assign( {}, this.camera.view );\r\n\r\n\t\tif ( originalViewOffset.enabled ) Object.assign( viewOffset, originalViewOffset );\r\n\r\n\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\r\n\t\tfor ( let i = 0; i < jitterOffsets.length; i ++ ) {\r\n\r\n\t\t\tconst jitterOffset = jitterOffsets[ i ];\r\n\r\n\t\t\tif ( this.camera.setViewOffset ) {\r\n\r\n\t\t\t\tthis.camera.setViewOffset(\r\n\r\n\t\t\t\t\tviewOffset.fullWidth, viewOffset.fullHeight,\r\n\r\n\t\t\t\t\tviewOffset.offsetX + jitterOffset[ 0 ] * 0.0625, viewOffset.offsetY + jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\r\n\r\n\t\t\t\t\tviewOffset.width, viewOffset.height\r\n\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet sampleWeight = baseSampleWeight;\r\n\r\n\t\t\tif ( this.unbiased ) {\r\n\r\n\t\t\t\t// the theory is that equal weights for each sample lead to an accumulation of rounding errors.\r\n\t\t\t\t// The following equation varies the sampleWeight per sample so that it is uniformly distributed\r\n\t\t\t\t// across a range of values whose rounding errors cancel each other out.\r\n\r\n\t\t\t\tconst uniformCenteredDistribution = ( - 0.5 + ( i + 0.5 ) / jitterOffsets.length );\r\n\t\t\t\tsampleWeight += roundingRange * uniformCenteredDistribution;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.copyUniforms[ 'opacity' ].value = sampleWeight;\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t\trenderer.setRenderTarget( this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\r\n\t\t\t\trenderer.clear();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.camera.setViewOffset && originalViewOffset.enabled ) {\r\n\r\n\t\t\tthis.camera.setViewOffset(\r\n\r\n\t\t\t\toriginalViewOffset.fullWidth, originalViewOffset.fullHeight,\r\n\r\n\t\t\t\toriginalViewOffset.offsetX, originalViewOffset.offsetY,\r\n\r\n\t\t\t\toriginalViewOffset.width, originalViewOffset.height\r\n\r\n\t\t\t);\r\n\r\n\t\t} else if ( this.camera.clearViewOffset ) {\r\n\r\n\t\t\tthis.camera.clearViewOffset();\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = autoClear;\r\n\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n// These jitter vectors are specified in integers because it is easier.\r\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\r\n// before being used, thus these integers need to be scaled by 1/16.\r\n//\r\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\r\nconst _JitterVectors = [\r\n\t[\r\n\t\t[ 0, 0 ]\r\n\t],\r\n\t[\r\n\t\t[ 4, 4 ], [ - 4, - 4 ]\r\n\t],\r\n\t[\r\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\r\n\t],\r\n\t[\r\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\r\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\r\n\t],\r\n\t[\r\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\r\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\r\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\r\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\r\n\t],\r\n\t[\r\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\r\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\r\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\r\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\r\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\r\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\r\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\r\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\r\n\t]\r\n];\r\n\r\nexport { SSAARenderPass };\r\n"]}},"error":null,"hash":"09280806e4b4eee36805a3e5e64c9551","cacheData":{"env":{}}}