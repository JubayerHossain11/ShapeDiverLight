{"id":"node_modules/@shapediver/viewer.rendering-engine.camera-engine/dist/implementation/interpolation/interpolationMethods/CameraLinearInterpolation.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraLinearInterpolation.js.map","includedInParent":true,"mtime":1706542086579},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\src\\implementation\\interpolation\\interpolationMethods\\CameraLinearInterpolation.ts","includedInParent":true,"mtime":1706542087080},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\package.json","includedInParent":true,"mtime":1706542086292},{"name":"gl-matrix","loc":{"line":4,"column":28,"index":152},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.rendering-engine.camera-engine\\dist\\implementation\\interpolation\\interpolationMethods\\CameraLinearInterpolation.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\gl-matrix\\esm\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraLinearInterpolation = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass CameraLinearInterpolation {\r\n    // #region Constructors (1)\r\n    constructor(_camera, _cameraControls, _from, _to) {\r\n        this._camera = _camera;\r\n        this._cameraControls = _cameraControls;\r\n        this._from = _from;\r\n        this._to = _to;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    onComplete(value) {\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), this._to.position, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), this._to.target, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n    onStop(value) {\r\n    }\r\n    onUpdate(value) {\r\n        let p = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._from.position, gl_matrix_1.vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._to.position, gl_matrix_1.vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let t = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._from.target, gl_matrix_1.vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), gl_matrix_1.vec3.multiply(gl_matrix_1.vec3.create(), this._to.target, gl_matrix_1.vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n}\r\nexports.CameraLinearInterpolation = CameraLinearInterpolation;\r\n"},"sourceMaps":{"js":{"version":3,"file":"CameraLinearInterpolation.js","sourceRoot":"","sources":["../../../../src/implementation/interpolation/interpolationMethods/CameraLinearInterpolation.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AAMtC,MAAa,yBAAyB;IAClC,2BAA2B;IAE3B,YACqB,OAAgB,EAChB,eAAqC,EACrC,KAAuC,EACvC,GAAqC;QAHrC,YAAO,GAAP,OAAO,CAAS;QAChB,oBAAe,GAAf,eAAe,CAAsB;QACrC,UAAK,GAAL,KAAK,CAAkC;QACvC,QAAG,GAAH,GAAG,CAAkC;IAE1D,CAAC;IACD,8BAA8B;IAE9B,6BAA6B;IAEtB,UAAU,CAAC,KAAwB;QACtC,IAAI,cAAc,GAAG,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACpH,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QACzD,IAAI,YAAY,GAAG,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC9G,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAAwB;IACtC,CAAC;IAEM,QAAQ,CAAC,KAAwB;QACpC,IAAI,CAAC,GAAG,gBAAI,CAAC,GAAG,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,gBAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,gBAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChQ,IAAI,cAAc,GAAG,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACpG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAEzD,IAAI,CAAC,GAAG,gBAAI,CAAC,GAAG,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,gBAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5P,IAAI,YAAY,GAAG,gBAAI,CAAC,QAAQ,CAAC,gBAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;CAGJ;AAnCD,8DAmCC","sourcesContent":["import { mat4, vec3 } from 'gl-matrix'\r\n\r\nimport { ICamera } from '../../../interfaces/camera/ICamera'\r\nimport { ICameraControlsUsage } from '../../../interfaces/controls/ICameraControlsUsage'\r\nimport { ICameraInterpolation } from '../../../interfaces/interpolation/ICameraInterpolation'\r\n\r\nexport class CameraLinearInterpolation implements ICameraInterpolation {\r\n    // #region Constructors (1)\r\n\r\n    constructor(\r\n        private readonly _camera: ICamera, \r\n        private readonly _cameraControls: ICameraControlsUsage, \r\n        private readonly _from: { position: vec3, target: vec3 }, \r\n        private readonly _to: { position: vec3, target: vec3 }) \r\n    {\r\n    }\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Methods (3)\r\n\r\n    public onComplete(value: { delta: number }): void {\r\n        let positionOffset = vec3.subtract(vec3.create(), this._to.position, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n        let targetOffset = vec3.subtract(vec3.create(), this._to.target, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n\r\n    public onStop(value: { delta: number }): void {\r\n    }\r\n\r\n    public onUpdate(value: { delta: number }): void {\r\n        let p = vec3.add(vec3.create(), vec3.multiply(vec3.create(), this._from.position, vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), vec3.multiply(vec3.create(), this._to.position, vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let positionOffset = vec3.subtract(vec3.create(), p, this._cameraControls.getPositionWithUpdates());\r\n        this._cameraControls.applyPositionVector(positionOffset);\r\n\r\n        let t = vec3.add(vec3.create(), vec3.multiply(vec3.create(), this._from.target, vec3.fromValues(1 - value.delta, 1 - value.delta, 1 - value.delta)), vec3.multiply(vec3.create(), this._to.target, vec3.fromValues(value.delta, value.delta, value.delta)));\r\n        let targetOffset = vec3.subtract(vec3.create(), t, this._cameraControls.getTargetWithUpdates());\r\n        this._cameraControls.applyTargetVector(targetOffset);\r\n    }\r\n\r\n    // #endregion Public Methods (3)\r\n}"]}},"error":null,"hash":"c6e63a67c1d001e6fa6cc927322667d7","cacheData":{"env":{}}}