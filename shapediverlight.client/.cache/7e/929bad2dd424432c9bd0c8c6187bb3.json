{"id":"node_modules/@shapediver/viewer.shared.node-tree/dist/implementation/AbstractTreeNode.js","dependencies":[{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\implementation\\AbstractTreeNode.js.map","includedInParent":true,"mtime":1706527150263},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\src\\implementation\\AbstractTreeNode.ts","includedInParent":true,"mtime":1706527150470},{"name":"D:\\projects\\myProjects\\shapeApp\\package.json","includedInParent":true,"mtime":1706533774939},{"name":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\package.json","includedInParent":true,"mtime":1706527150208},{"name":"gl-matrix","loc":{"line":16,"column":28,"index":1742},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\implementation\\AbstractTreeNode.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\gl-matrix\\esm\\index.js"},{"name":"@shapediver/viewer.shared.services","loc":{"line":17,"column":41,"index":1798},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\implementation\\AbstractTreeNode.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"@shapediver/viewer.shared.math","loc":{"line":18,"column":37,"index":1875},"parent":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\implementation\\AbstractTreeNode.js","resolved":"D:\\projects\\myProjects\\shapeApp\\node_modules\\@shapediver\\viewer.shared.math\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _AbstractTreeNode_uuidGenerator, _AbstractTreeNode_children, _AbstractTreeNode_data, _AbstractTreeNode_transformations, _AbstractTreeNode_id, _AbstractTreeNode_name, _AbstractTreeNode_version, _AbstractTreeNode_parent, _AbstractTreeNode_boundingBox, _AbstractTreeNode_boundingBoxViewport, _AbstractTreeNode_excludeViewports, _AbstractTreeNode_restrictViewports, _AbstractTreeNode_visible, _AbstractTreeNode_skinNode, _AbstractTreeNode_bones, _AbstractTreeNode_boneInverses, _AbstractTreeNode_originalId;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbstractTreeNode = void 0;\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nclass AbstractTreeNode {\r\n    // #endregion Properties (13)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Creation of a node that can be used in the node tree.\r\n     *\r\n     * @param name the name of the node\r\n     * @param parent the parent of this node\r\n     * @param data the array of data\r\n     * @param transformations the array of transformations\r\n     */\r\n    constructor(name = 'node', parent, data = [], transformations = []) {\r\n        var _a;\r\n        // #region Properties (13)\r\n        _AbstractTreeNode_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);\r\n        _AbstractTreeNode_children.set(this, []);\r\n        _AbstractTreeNode_data.set(this, []);\r\n        _AbstractTreeNode_transformations.set(this, []);\r\n        _AbstractTreeNode_id.set(this, void 0);\r\n        _AbstractTreeNode_name.set(this, '');\r\n        _AbstractTreeNode_version.set(this, void 0);\r\n        _AbstractTreeNode_parent.set(this, void 0);\r\n        _AbstractTreeNode_boundingBox.set(this, new viewer_shared_math_1.Box());\r\n        _AbstractTreeNode_boundingBoxViewport.set(this, {});\r\n        _AbstractTreeNode_excludeViewports.set(this, []);\r\n        _AbstractTreeNode_restrictViewports.set(this, []);\r\n        _AbstractTreeNode_visible.set(this, true);\r\n        _AbstractTreeNode_skinNode.set(this, false);\r\n        _AbstractTreeNode_bones.set(this, []);\r\n        _AbstractTreeNode_boneInverses.set(this, []);\r\n        _AbstractTreeNode_originalId.set(this, void 0);\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_name, name.replace(/\\./g, \"_\"), \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_parent, parent, \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_data, data, \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_transformations, transformations, \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_id, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, \"f\").create(), \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_originalId, __classPrivateFieldGet(this, _AbstractTreeNode_id, \"f\"), \"f\");\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_version, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, \"f\").create(), \"f\");\r\n        (_a = __classPrivateFieldGet(this, _AbstractTreeNode_parent, \"f\")) === null || _a === void 0 ? void 0 : _a.addChild(this);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (19)\r\n    get bones() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_bones, \"f\");\r\n    }\r\n    set bones(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_bones, value, \"f\");\r\n    }\r\n    get boneInverses() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_boneInverses, \"f\");\r\n    }\r\n    set boneInverses(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_boneInverses, value, \"f\");\r\n    }\r\n    get boundingBox() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_boundingBox, \"f\");\r\n    }\r\n    get boundingBoxViewport() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_boundingBoxViewport, \"f\");\r\n    }\r\n    get children() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\");\r\n    }\r\n    get originalId() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_originalId, \"f\");\r\n    }\r\n    set originalId(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_originalId, value, \"f\");\r\n    }\r\n    get data() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\");\r\n    }\r\n    get excludeViewports() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_excludeViewports, \"f\");\r\n    }\r\n    set excludeViewports(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_excludeViewports, value, \"f\");\r\n    }\r\n    get id() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_id, \"f\");\r\n    }\r\n    get name() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_name, \"f\");\r\n    }\r\n    set name(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_name, value, \"f\");\r\n    }\r\n    get nodeMatrix() {\r\n        const matrix = gl_matrix_1.mat4.create();\r\n        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\"))\r\n            if (transform.id !== 'sdtf')\r\n                gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);\r\n        return matrix;\r\n    }\r\n    get parent() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_parent, \"f\");\r\n    }\r\n    set parent(value) {\r\n        // check if it was removed from previous parent\r\n        if (__classPrivateFieldGet(this, _AbstractTreeNode_parent, \"f\"))\r\n            __classPrivateFieldGet(this, _AbstractTreeNode_parent, \"f\").removeChild(this);\r\n        // check if it is in children of new parent\r\n        if (value)\r\n            value.addChild(this);\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_parent, value, \"f\");\r\n    }\r\n    get restrictViewports() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_restrictViewports, \"f\");\r\n    }\r\n    set restrictViewports(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_restrictViewports, value, \"f\");\r\n    }\r\n    get skinNode() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_skinNode, \"f\");\r\n    }\r\n    set skinNode(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_skinNode, value, \"f\");\r\n    }\r\n    get transformations() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\");\r\n    }\r\n    set transformations(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_transformations, value, \"f\");\r\n    }\r\n    get version() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_version, \"f\");\r\n    }\r\n    set version(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_version, value, \"f\");\r\n    }\r\n    get visible() {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_visible, \"f\");\r\n    }\r\n    set visible(value) {\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_visible, value, \"f\");\r\n    }\r\n    get worldMatrix() {\r\n        const matrix = gl_matrix_1.mat4.create();\r\n        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\"))\r\n            gl_matrix_1.mat4.multiply(matrix, matrix, transform.matrix);\r\n        let node = this;\r\n        while (node.parent) {\r\n            gl_matrix_1.mat4.multiply(matrix, node.parent.nodeMatrix, matrix);\r\n            node = node.parent;\r\n        }\r\n        return matrix;\r\n    }\r\n    // #endregion Public Accessors (19)\r\n    // #region Public Methods (16)\r\n    addChild(child) {\r\n        if (this.hasChild(child))\r\n            return false;\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").push(child);\r\n        if (child.parent)\r\n            child.parent.removeChild(child);\r\n        child.parent = this;\r\n        return true;\r\n    }\r\n    addData(data) {\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\").push(data);\r\n        return true;\r\n    }\r\n    addTransformation(transformation) {\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\").push(transformation);\r\n        return true;\r\n    }\r\n    clone() {\r\n        const clone = new this.constructor;\r\n        clone.name = this.name;\r\n        clone.originalId = this.originalId;\r\n        clone.visible = this.visible;\r\n        for (let child of __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\"))\r\n            clone.addChild(child.clone());\r\n        for (let data of __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\"))\r\n            clone.data.push(data.clone());\r\n        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\"))\r\n            clone.addTransformation({\r\n                id: transform.id,\r\n                matrix: gl_matrix_1.mat4.clone(transform.matrix)\r\n            });\r\n        return clone;\r\n    }\r\n    cloneInstance() {\r\n        const clone = new this.constructor;\r\n        clone.name = this.name;\r\n        clone.originalId = this.originalId;\r\n        clone.visible = this.visible;\r\n        for (let child of __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\"))\r\n            clone.addChild(child.cloneInstance());\r\n        for (let data of __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\"))\r\n            clone.data.push(data);\r\n        for (let transform of __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\"))\r\n            clone.addTransformation({\r\n                id: transform.id,\r\n                matrix: gl_matrix_1.mat4.clone(transform.matrix)\r\n            });\r\n        return clone;\r\n    }\r\n    getChild(id) {\r\n        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").length; i++)\r\n            if (__classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\")[i].id === id)\r\n                return __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\")[i];\r\n        return;\r\n    }\r\n    getData(id) {\r\n        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\").length; i++)\r\n            if (__classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\")[i].id === id)\r\n                return __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\")[i];\r\n        return;\r\n    }\r\n    getNodesByName(name) {\r\n        let nodes = [];\r\n        if (name === this.name)\r\n            nodes.push(this);\r\n        this.traverse((n) => {\r\n            if (name === n.name)\r\n                nodes.push(n);\r\n        });\r\n        return nodes;\r\n    }\r\n    ;\r\n    getNodesByNameWithRegex(regex) {\r\n        let nodes = [];\r\n        if (regex.test(this.name))\r\n            nodes.push(this);\r\n        this.traverse((n) => {\r\n            if (regex.test(n.name))\r\n                nodes.push(n);\r\n        });\r\n        return nodes;\r\n    }\r\n    ;\r\n    getPath() {\r\n        let path = this.name;\r\n        let node = this.parent;\r\n        while (node) {\r\n            path = node.name + '.' + path;\r\n            node = node.parent;\r\n        }\r\n        return path;\r\n    }\r\n    getTransformation(id) {\r\n        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\").length; i++)\r\n            if (__classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\")[i].id === id)\r\n                return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\")[i];\r\n        return;\r\n    }\r\n    hasChild(child) {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").includes(child);\r\n    }\r\n    hasData(data) {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\").includes(data);\r\n    }\r\n    hasTransformation(transformation) {\r\n        return __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\").includes(transformation);\r\n    }\r\n    removeChild(child) {\r\n        const index = __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").indexOf(child);\r\n        if (index === -1)\r\n            return false;\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").splice(index, 1);\r\n        child.parent = undefined;\r\n        return true;\r\n    }\r\n    removeData(data) {\r\n        const index = __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\").indexOf(data);\r\n        if (index === -1)\r\n            return false;\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_data, \"f\").splice(index, 1);\r\n        return true;\r\n    }\r\n    removeTransformation(transformation) {\r\n        const index = __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\").indexOf(transformation);\r\n        if (index === -1)\r\n            return false;\r\n        __classPrivateFieldGet(this, _AbstractTreeNode_transformations, \"f\").splice(index, 1);\r\n        return true;\r\n    }\r\n    traverse(callback) {\r\n        callback(this);\r\n        for (let i = 0; i < this.children.length; i++)\r\n            this.children[i].traverse(callback);\r\n    }\r\n    traverseData(callback) {\r\n        for (let j = 0; j < this.data.length; j++)\r\n            callback(this.data[j]);\r\n        for (let i = 0; i < this.children.length; i++)\r\n            this.children[i].traverseData(callback);\r\n    }\r\n    updateVersion() {\r\n        let node = this;\r\n        while (node.parent) {\r\n            node = node.parent;\r\n            node.version = __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, \"f\").create();\r\n        }\r\n        for (let i = 0; i < __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\").length; i++)\r\n            __classPrivateFieldGet(this, _AbstractTreeNode_children, \"f\")[i].updateVersion();\r\n        __classPrivateFieldSet(this, _AbstractTreeNode_version, __classPrivateFieldGet(this, _AbstractTreeNode_uuidGenerator, \"f\").create(), \"f\");\r\n    }\r\n}\r\nexports.AbstractTreeNode = AbstractTreeNode;\r\n_AbstractTreeNode_uuidGenerator = new WeakMap(), _AbstractTreeNode_children = new WeakMap(), _AbstractTreeNode_data = new WeakMap(), _AbstractTreeNode_transformations = new WeakMap(), _AbstractTreeNode_id = new WeakMap(), _AbstractTreeNode_name = new WeakMap(), _AbstractTreeNode_version = new WeakMap(), _AbstractTreeNode_parent = new WeakMap(), _AbstractTreeNode_boundingBox = new WeakMap(), _AbstractTreeNode_boundingBoxViewport = new WeakMap(), _AbstractTreeNode_excludeViewports = new WeakMap(), _AbstractTreeNode_restrictViewports = new WeakMap(), _AbstractTreeNode_visible = new WeakMap(), _AbstractTreeNode_skinNode = new WeakMap(), _AbstractTreeNode_bones = new WeakMap(), _AbstractTreeNode_boneInverses = new WeakMap(), _AbstractTreeNode_originalId = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"AbstractTreeNode.js","sourceRoot":"","sources":["../../src/implementation/AbstractTreeNode.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix'\r\nimport { UuidGenerator } from '@shapediver/viewer.shared.services'\r\nimport { Box, IBox } from '@shapediver/viewer.shared.math'\r\n\r\nimport { ITransformation, ITreeNode } from '../interfaces/ITreeNode'\r\nimport { ITreeNodeData } from '../interfaces/ITreeNodeData'\r\n\r\nexport abstract class AbstractTreeNode<T extends ITreeNode<any, ITreeNodeData<any>>, U extends ITreeNodeData<any>> implements ITreeNode<T, U> {\r\n  // #region Properties (13)\r\n\r\n  readonly #uuidGenerator: UuidGenerator = UuidGenerator.instance;\r\n\r\n  readonly #children: T[] = [];\r\n  readonly #data: U[] = [];\r\n  #transformations: ITransformation[] = [];\r\n\r\n  readonly #id: string;\r\n  #name: string = '';\r\n  #version: string;\r\n  #parent?: T;\r\n\r\n  readonly #boundingBox: IBox = new Box();\r\n  readonly #boundingBoxViewport: { [key: string]: IBox } = {};\r\n  #excludeViewports: string[] = [];\r\n  #restrictViewports: string[] = [];\r\n\r\n  #visible: boolean = true;\r\n  #skinNode: boolean = false;\r\n  #bones: T[] = [];\r\n  #boneInverses: mat4[] = [];\r\n  #originalId: string;\r\n\r\n  // #endregion Properties (13)\r\n\r\n  // #region Constructors (1)\r\n\r\n  /**\r\n   * Creation of a node that can be used in the node tree.\r\n   * \r\n   * @param name the name of the node\r\n   * @param parent the parent of this node\r\n   * @param data the array of data \r\n   * @param transformations the array of transformations\r\n   */\r\n  constructor(\r\n    name: string = 'node',\r\n    parent?: T,\r\n    data: U[] = [],\r\n    transformations: ITransformation[] = []\r\n  ) {\r\n    this.#name = name.replace(/\\./g, \"_\");\r\n    this.#parent = parent;\r\n    this.#data = data;\r\n    this.#transformations = transformations;\r\n\r\n    this.#id = this.#uuidGenerator.create();\r\n    this.#originalId = this.#id;\r\n    this.#version = this.#uuidGenerator.create();\r\n    this.#parent?.addChild(this);\r\n  }\r\n\r\n  // #endregion Constructors (1)\r\n\r\n  // #region Public Accessors (19)\r\n\r\n\r\n  public get bones(): T[] {\r\n    return this.#bones;\r\n  }\r\n\r\n  public set bones(value: T[]) {\r\n    this.#bones = value;\r\n  }\r\n\r\n  public get boneInverses(): mat4[] {\r\n    return this.#boneInverses;\r\n  }\r\n\r\n  public set boneInverses(value: mat4[]) {\r\n    this.#boneInverses = value;\r\n  }\r\n\r\n  public get boundingBox(): IBox {\r\n    return this.#boundingBox;\r\n  }\r\n\r\n  public get boundingBoxViewport(): { [key: string]: IBox } {\r\n    return this.#boundingBoxViewport;\r\n  }\r\n\r\n  public get children(): T[] {\r\n    return this.#children;\r\n  }\r\n\r\n  public get originalId(): string {\r\n    return this.#originalId;\r\n  }\r\n\r\n  public set originalId(value: string) {\r\n    this.#originalId = value;\r\n  }\r\n\r\n  public get data(): U[] {\r\n    return this.#data;\r\n  }\r\n\r\n  public get excludeViewports(): string[] {\r\n    return this.#excludeViewports;\r\n  }\r\n\r\n  public set excludeViewports(value: string[]) {\r\n    this.#excludeViewports = value;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this.#id;\r\n  }\r\n\r\n  public get name(): string {\r\n    return this.#name;\r\n  }\r\n\r\n  public set name(value: string) {\r\n    this.#name = value;\r\n  }\r\n\r\n  public get nodeMatrix(): mat4 {\r\n    const matrix: mat4 = mat4.create();\r\n    for (let transform of this.#transformations)\r\n      if (transform.id !== 'sdtf') mat4.multiply(matrix, matrix, transform.matrix);\r\n    return matrix;\r\n  }\r\n\r\n  public get parent(): T | undefined {\r\n    return this.#parent;\r\n  }\r\n\r\n  public set parent(value: T | undefined) {\r\n    // check if it was removed from previous parent\r\n    if (this.#parent)\r\n      this.#parent.removeChild(this);\r\n\r\n    // check if it is in children of new parent\r\n    if (value)\r\n      value.addChild(this);\r\n\r\n    this.#parent = value;\r\n  }\r\n\r\n  public get restrictViewports(): string[] {\r\n    return this.#restrictViewports;\r\n  }\r\n\r\n  public set restrictViewports(value: string[]) {\r\n    this.#restrictViewports = value;\r\n  }\r\n\r\n  public get skinNode(): boolean {\r\n    return this.#skinNode;\r\n  }\r\n\r\n  public set skinNode(value: boolean) {\r\n    this.#skinNode = value;\r\n  }\r\n\r\n  public get transformations(): ITransformation[] {\r\n    return this.#transformations;\r\n  }\r\n\r\n  public set transformations(value: ITransformation[]) {\r\n    this.#transformations = value;\r\n  }\r\n\r\n  public get version(): string {\r\n    return this.#version;\r\n  }\r\n\r\n  public set version(value: string) {\r\n    this.#version = value;\r\n  }\r\n\r\n  public get visible(): boolean {\r\n    return this.#visible;\r\n  }\r\n\r\n  public set visible(value: boolean) {\r\n    this.#visible = value;\r\n  }\r\n\r\n  public get worldMatrix(): mat4 {\r\n    const matrix: mat4 = mat4.create();\r\n\r\n    for (let transform of this.#transformations)\r\n      mat4.multiply(matrix, matrix, transform.matrix);\r\n\r\n    let node: AbstractTreeNode<any, any> = this;\r\n    while (node.parent) {\r\n      mat4.multiply(matrix, node.parent.nodeMatrix, matrix);\r\n      node = node.parent;\r\n    }\r\n\r\n    return matrix;\r\n  }\r\n\r\n  // #endregion Public Accessors (19)\r\n\r\n  // #region Public Methods (16)\r\n\r\n  public addChild(child: T): boolean {\r\n    if (this.hasChild(child)) return false;\r\n\r\n    this.#children.push(child);\r\n    if (child.parent)\r\n      child.parent.removeChild(child);\r\n    (<AbstractTreeNode<any, any>>child.parent) = this;\r\n\r\n    return true;\r\n  }\r\n\r\n  public addData(data: U): boolean {\r\n    this.#data.push(data);\r\n    return true;\r\n  }\r\n\r\n  public addTransformation(transformation: ITransformation): boolean {\r\n    this.#transformations.push(transformation);\r\n    return true;\r\n  }\r\n\r\n  public clone(): T {\r\n    const clone = new (<any>this.constructor);\r\n    clone.name = this.name;\r\n    clone.originalId = this.originalId;\r\n    clone.visible = this.visible;\r\n    for (let child of this.#children)\r\n      clone.addChild(child.clone());\r\n    for (let data of this.#data)\r\n      clone.data.push(data.clone());\r\n    for (let transform of this.#transformations)\r\n      clone.addTransformation({\r\n        id: transform.id,\r\n        matrix: mat4.clone(transform.matrix)\r\n      });\r\n\r\n    return clone;\r\n  }\r\n\r\n  public cloneInstance(): T {\r\n    const clone = new (<any>this.constructor);\r\n    clone.name = this.name;\r\n    clone.originalId = this.originalId;\r\n    clone.visible = this.visible;\r\n    for (let child of this.#children)\r\n      clone.addChild(child.cloneInstance());\r\n    for (let data of this.#data)\r\n      clone.data.push(data);\r\n    for (let transform of this.#transformations)\r\n      clone.addTransformation({\r\n        id: transform.id,\r\n        matrix: mat4.clone(transform.matrix)\r\n      });\r\n\r\n    return clone;\r\n  }\r\n\r\n  public getChild(id: string): T | undefined {\r\n    for (let i = 0; i < this.#children.length; i++)\r\n      if (this.#children[i].id === id)\r\n        return this.#children[i];\r\n    return;\r\n  }\r\n\r\n  public getData(id: string): U | undefined {\r\n    for (let i = 0; i < this.#data.length; i++)\r\n      if (this.#data[i].id === id)\r\n        return this.#data[i];\r\n    return;\r\n  }\r\n\r\n  public getNodesByName(name: string): T[] {\r\n    let nodes: T[] = [];\r\n    if (name === this.name) nodes.push(<T><unknown>this);\r\n    this.traverse((n) => {\r\n      if (name === n.name) nodes.push(n);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  public getNodesByNameWithRegex(regex: RegExp): T[] {\r\n    let nodes: T[] = [];\r\n    if (regex.test(this.name)) nodes.push(<T><unknown>this);\r\n    this.traverse((n) => {\r\n      if (regex.test(n.name)) nodes.push(n);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  public getPath(): string {\r\n    let path = this.name;\r\n    let node: T | undefined = this.parent;\r\n    while (node) {\r\n      path = node.name + '.' + path;\r\n      node = node.parent;\r\n    }\r\n    return path;\r\n  }\r\n\r\n  public getTransformation(id: string): ITransformation | undefined {\r\n    for (let i = 0; i < this.#transformations.length; i++)\r\n      if (this.#transformations[i].id === id)\r\n        return this.#transformations[i];\r\n    return;\r\n  }\r\n\r\n  public hasChild(child: T): boolean {\r\n    return this.#children.includes(child);\r\n  }\r\n\r\n  public hasData(data: U): boolean {\r\n    return this.#data.includes(data);\r\n  }\r\n\r\n  public hasTransformation(transformation: ITransformation): boolean {\r\n    return this.#transformations.includes(transformation);\r\n  }\r\n\r\n  public removeChild(child: T): boolean {\r\n    const index = this.#children.indexOf(child);\r\n    if (index === -1) return false;\r\n    this.#children.splice(index, 1);\r\n    (<T | undefined>child.parent) = undefined;\r\n\r\n    return true;\r\n  }\r\n\r\n  public removeData(data: U): boolean {\r\n    const index = this.#data.indexOf(data);\r\n    if (index === -1) return false;\r\n    this.#data.splice(index, 1);\r\n\r\n    return true;\r\n  }\r\n\r\n  public removeTransformation(transformation: ITransformation): boolean {\r\n    const index = this.#transformations.indexOf(transformation);\r\n    if (index === -1) return false;\r\n    this.#transformations.splice(index, 1);\r\n\r\n    return true;\r\n  }\r\n\r\n  public traverse(callback: (node: T) => void): void {\r\n    callback(<T><unknown>this);\r\n\r\n    for(let i = 0; i < this.children.length; i++)\r\n      this.children[i].traverse(callback);\r\n  }\r\n\r\n  public traverseData(callback: (node: U) => void): void {\r\n    for(let j = 0; j < this.data.length; j++)\r\n      callback(<U>this.data[j]);\r\n\r\n    for(let i = 0; i < this.children.length; i++)\r\n      this.children[i].traverseData(<(data: ITreeNodeData<any>) => void>callback);\r\n  }\r\n\r\n  public updateVersion(): void {\r\n    let node = <AbstractTreeNode<any, any>>this;\r\n    while (node.parent) {\r\n      node = node.parent;\r\n      (<any>node.version) = this.#uuidGenerator.create();\r\n    }\r\n\r\n    for (let i = 0; i < this.#children.length; i++)\r\n      this.#children[i].updateVersion();\r\n\r\n    this.#version = this.#uuidGenerator.create();\r\n  }\r\n\r\n  // #endregion Public Methods (16)\r\n}"]}},"error":null,"hash":"47ada7436dc45fc155b4cfce170da9e8","cacheData":{"env":{}}}