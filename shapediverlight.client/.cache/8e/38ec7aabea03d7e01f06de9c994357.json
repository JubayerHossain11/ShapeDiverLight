{"id":"node_modules/@shapediver/viewer.session-engine.session-engine/dist/implementation/SessionEngine.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js.map","includedInParent":true,"mtime":1706542086491},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\src\\implementation\\SessionEngine.ts","includedInParent":true,"mtime":1706542086883},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\package.json","includedInParent":true,"mtime":1706542085742},{"name":"@shapediver/viewer.shared.services","loc":{"line":25,"column":41,"index":2085},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.services\\dist\\index.js"},{"name":"./OutputDelayException","loc":{"line":26,"column":39,"index":2164},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\OutputDelayException.js"},{"name":"./OutputLoader","loc":{"line":27,"column":31,"index":2223},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\OutputLoader.js"},{"name":"./SessionTreeNode","loc":{"line":28,"column":34,"index":2277},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionTreeNode.js"},{"name":"../interfaces/ISessionEngine","loc":{"line":29,"column":33,"index":2333},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\interfaces\\ISessionEngine.js"},{"name":"./SessionData","loc":{"line":30,"column":30,"index":2397},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionData.js"},{"name":"@shapediver/sdk.geometry-api-sdk-v2","loc":{"line":31,"column":42,"index":2458},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\sdk.geometry-api-sdk-v2\\dist\\index.js"},{"name":"@shapediver/viewer.shared.node-tree","loc":{"line":32,"column":42,"index":2541},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.node-tree\\dist\\index.js"},{"name":"@shapediver/viewer.shared.types","loc":{"line":33,"column":38,"index":2620},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.shared.types\\dist\\index.js"},{"name":"./dto/FileParameter","loc":{"line":34,"column":32,"index":2689},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\FileParameter.js"},{"name":"./dto/Parameter","loc":{"line":35,"column":28,"index":2742},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Parameter.js"},{"name":"./dto/Export","loc":{"line":36,"column":25,"index":2788},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Export.js"},{"name":"./dto/Output","loc":{"line":37,"column":25,"index":2831},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\dto\\Output.js"},{"name":"@shapediver/viewer.settings","loc":{"line":38,"column":34,"index":2883},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.session-engine.session-engine\\dist\\implementation\\SessionEngine.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\viewer.settings\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _SessionEngine_customizationProcess, _SessionEngine_parameterHistory, _SessionEngine_parameterHistoryCall, _SessionEngine_parameterHistoryForward;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SessionEngine = void 0;\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst OutputDelayException_1 = require(\"./OutputDelayException\");\r\nconst OutputLoader_1 = require(\"./OutputLoader\");\r\nconst SessionTreeNode_1 = require(\"./SessionTreeNode\");\r\nconst ISessionEngine_1 = require(\"../interfaces/ISessionEngine\");\r\nconst SessionData_1 = require(\"./SessionData\");\r\nconst sdk_geometry_api_sdk_v2_1 = require(\"@shapediver/sdk.geometry-api-sdk-v2\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst FileParameter_1 = require(\"./dto/FileParameter\");\r\nconst Parameter_1 = require(\"./dto/Parameter\");\r\nconst Export_1 = require(\"./dto/Export\");\r\nconst Output_1 = require(\"./dto/Output\");\r\nconst viewer_settings_1 = require(\"@shapediver/viewer.settings\");\r\nclass SessionEngine {\r\n    // #endregion Properties (43)\r\n    // #region Constructors (1)\r\n    /**\r\n     * Can be use to initialize a session with the ticket and modelViewUrl and returns a scene graph node with the result.\r\n     * Can be use to customize the session with updated parameters to get the updated scene graph node.\r\n     */\r\n    constructor(properties) {\r\n        // #region Properties (43)\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._exports = {};\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._outputs = {};\r\n        this._outputsFreeze = {};\r\n        this._parameterValues = {};\r\n        this._parameters = {};\r\n        this._performanceEvaluator = viewer_shared_services_1.PerformanceEvaluator.instance;\r\n        this._sceneTree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._sessionEngineId = (viewer_shared_services_1.UuidGenerator.instance).create();\r\n        this._settingsEngine = new viewer_shared_services_1.SettingsEngine();\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        _SessionEngine_customizationProcess.set(this, void 0);\r\n        _SessionEngine_parameterHistory.set(this, []);\r\n        _SessionEngine_parameterHistoryCall.set(this, false);\r\n        _SessionEngine_parameterHistoryForward.set(this, []);\r\n        this._automaticSceneUpdate = true;\r\n        this._closeOnFailure = () => __awaiter(this, void 0, void 0, function* () { });\r\n        this._closed = false;\r\n        this._customizeOnParameterChange = false;\r\n        this._dataCache = {};\r\n        this._excludeViewports = [];\r\n        this._headers = {\r\n            \"X-ShapeDiver-Origin\": (viewer_shared_services_1.SystemInfo.instance).origin,\r\n            \"X-ShapeDiver-SessionEngineId\": this._sessionEngineId,\r\n            \"X-ShapeDiver-BuildVersion\": '',\r\n            \"X-ShapeDiver-BuildDate\": ''\r\n        };\r\n        this._initialized = false;\r\n        this._retryCounter = 0;\r\n        this._updateCallback = null;\r\n        this._viewerSettingsVersion = viewer_settings_1.latestVersion;\r\n        this._viewerSettingsVersionBackend = viewer_settings_1.latestVersion;\r\n        this._id = properties.id;\r\n        this._node = new viewer_shared_node_tree_1.TreeNode(properties.id);\r\n        this._ticket = properties.ticket;\r\n        this._modelViewUrl = properties.modelViewUrl;\r\n        this._excludeViewports = properties.excludeViewports || [];\r\n        this._jwtToken = properties.jwtToken;\r\n        this._headers['X-ShapeDiver-BuildDate'] = properties.buildDate;\r\n        this._headers['X-ShapeDiver-BuildVersion'] = properties.buildVersion;\r\n        this._outputLoader = new OutputLoader_1.OutputLoader(this);\r\n        try {\r\n            this._sdk = (0, sdk_geometry_api_sdk_v2_1.create)(this._modelViewUrl, this._jwtToken);\r\n            this._sdk.setConfigurationValue(sdk_geometry_api_sdk_v2_1.ShapeDiverSdkConfigType.REQUEST_HEADERS, this._headers);\r\n        }\r\n        catch (e) {\r\n            throw this._httpClient.convertError(e);\r\n        }\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (24)\r\n    get automaticSceneUpdate() {\r\n        return this._automaticSceneUpdate;\r\n    }\r\n    set automaticSceneUpdate(value) {\r\n        this._automaticSceneUpdate = value;\r\n        value ? this.addToSceneTree(this._node) : this.removeFromSceneTree(this._node);\r\n    }\r\n    get canUploadGLTF() {\r\n        try {\r\n            this.checkAvailability('gltf-upload');\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    get customizeOnParameterChange() {\r\n        return this._customizeOnParameterChange;\r\n    }\r\n    set customizeOnParameterChange(value) {\r\n        this._customizeOnParameterChange = value;\r\n    }\r\n    get excludeViewports() {\r\n        return this._excludeViewports;\r\n    }\r\n    set excludeViewports(value) {\r\n        this._excludeViewports = JSON.parse(JSON.stringify(value));\r\n        this._node.excludeViewports = JSON.parse(JSON.stringify(value));\r\n    }\r\n    get exports() {\r\n        return this._exports;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get initialized() {\r\n        return this._initialized;\r\n    }\r\n    get jwtToken() {\r\n        return this._jwtToken;\r\n    }\r\n    get modelViewUrl() {\r\n        return this._modelViewUrl;\r\n    }\r\n    get node() {\r\n        return this._node;\r\n    }\r\n    get outputs() {\r\n        return this._outputs;\r\n    }\r\n    get outputsFreeze() {\r\n        return this._outputsFreeze;\r\n    }\r\n    get parameterValues() {\r\n        return this._parameterValues;\r\n    }\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n    get refreshJwtToken() {\r\n        return this._refreshJwtToken;\r\n    }\r\n    set refreshJwtToken(value) {\r\n        this._refreshJwtToken = value;\r\n    }\r\n    get settingsEngine() {\r\n        return this._settingsEngine;\r\n    }\r\n    get ticket() {\r\n        return this._ticket;\r\n    }\r\n    get updateCallback() {\r\n        return this._updateCallback;\r\n    }\r\n    set updateCallback(value) {\r\n        this._updateCallback = value;\r\n    }\r\n    get viewerSettings() {\r\n        return this._viewerSettings;\r\n    }\r\n    // #endregion Public Accessors (24)\r\n    // #region Public Methods (24)\r\n    applySettings(response, sections) {\r\n        sections = sections || {};\r\n        if (sections.session === undefined) {\r\n            sections.session = {\r\n                parameter: { displayname: false, order: false, hidden: false },\r\n                export: { displayname: false, order: false, hidden: false }\r\n            };\r\n        }\r\n        if (sections.session.parameter === undefined)\r\n            sections.session.parameter = { displayname: false, order: false, hidden: false, value: false };\r\n        if (sections.session.export === undefined)\r\n            sections.session.export = { displayname: false, order: false, hidden: false };\r\n        if (sections.viewport === undefined)\r\n            sections.viewport = { ar: false, scene: false, camera: false, light: false, environment: false, general: false };\r\n        let config;\r\n        if (response.viewer !== undefined) {\r\n            config = response.viewer.config;\r\n        }\r\n        else {\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSettingsError('Session.applySettings: No config object available.');\r\n        }\r\n        try {\r\n            (0, viewer_settings_1.validate)(config);\r\n        }\r\n        catch (e) {\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSettingsError('Session.applySettings: Was not able to validate config object.');\r\n        }\r\n        const settings = (0, viewer_settings_1.convert)(config, viewer_settings_1.latestVersion);\r\n        const exportMappingUid = {};\r\n        if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden)\r\n            if (response.exports)\r\n                for (let exportId in response.exports)\r\n                    if (response.exports[exportId].uid !== undefined)\r\n                        exportMappingUid[response.exports[exportId].uid] = exportId;\r\n        const currentSettings = this._settingsEngine.settings;\r\n        // apply parameter settings\r\n        if (sections.session.parameter.displayname || sections.session.parameter.order || sections.session.parameter.hidden || sections.session.parameter.value) {\r\n            for (let p in this.parameters) {\r\n                if (settings.session[p]) {\r\n                    if (sections.session.parameter.displayname)\r\n                        this.parameters[p].displayname = settings.session[p].displayname;\r\n                    if (sections.session.parameter.order)\r\n                        this.parameters[p].order = settings.session[p].order;\r\n                    if (sections.session.parameter.hidden)\r\n                        this.parameters[p].hidden = settings.session[p].hidden || false;\r\n                }\r\n                if (response.parameters && response.parameters[p]) {\r\n                    if (sections.session.parameter.value)\r\n                        this.parameters[p].value = response.parameters[p].defval !== undefined ? response.parameters[p].defval : this.parameters[p].value;\r\n                }\r\n            }\r\n        }\r\n        // apply export settings\r\n        if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden) {\r\n            for (let p in this.exports) {\r\n                let idForSettings = '';\r\n                if (settings.session[p]) {\r\n                    idForSettings = p;\r\n                }\r\n                else {\r\n                    const uid = this.exports[p].uid;\r\n                    if (!uid)\r\n                        continue;\r\n                    if (!exportMappingUid[uid])\r\n                        continue;\r\n                    idForSettings = exportMappingUid[uid];\r\n                }\r\n                if (settings.session[idForSettings]) {\r\n                    if (sections.session.export.displayname)\r\n                        this.exports[p].displayname = settings.session[idForSettings].displayname;\r\n                    if (sections.session.export.order)\r\n                        this.exports[p].order = settings.session[idForSettings].order;\r\n                    if (sections.session.export.hidden)\r\n                        this.exports[p].hidden = settings.session[idForSettings].hidden || false;\r\n                }\r\n            }\r\n        }\r\n        // apply ar settings\r\n        if (sections.viewport.ar) {\r\n            currentSettings.ar = settings.ar;\r\n            currentSettings.general.transformation = settings.general.transformation;\r\n        }\r\n        // apply camera settings\r\n        if (sections.viewport.camera)\r\n            currentSettings.camera = settings.camera;\r\n        // apply light settings\r\n        if (sections.viewport.light)\r\n            currentSettings.light = settings.light;\r\n        // apply scene settings\r\n        if (sections.viewport.scene) {\r\n            currentSettings.environmentGeometry.gridColor = settings.environmentGeometry.gridColor;\r\n            currentSettings.environmentGeometry.gridVisibility = settings.environmentGeometry.gridVisibility;\r\n            currentSettings.environmentGeometry.groundPlaneColor = settings.environmentGeometry.groundPlaneColor;\r\n            currentSettings.environmentGeometry.groundPlaneVisibility = settings.environmentGeometry.groundPlaneVisibility;\r\n            currentSettings.environmentGeometry.groundPlaneColor = settings.environmentGeometry.groundPlaneColor;\r\n            currentSettings.environmentGeometry.groundPlaneShadowColor = settings.environmentGeometry.groundPlaneShadowColor;\r\n            currentSettings.rendering.shadows = settings.rendering.shadows;\r\n            currentSettings.rendering.ambientOcclusion = settings.rendering.ambientOcclusion;\r\n            currentSettings.rendering.automaticColorAdjustment = settings.rendering.automaticColorAdjustment;\r\n            currentSettings.rendering.textureEncoding = settings.rendering.textureEncoding;\r\n            currentSettings.rendering.outputEncoding = settings.rendering.outputEncoding;\r\n            currentSettings.rendering.physicallyCorrectLights = settings.rendering.physicallyCorrectLights;\r\n            currentSettings.rendering.toneMapping = settings.rendering.toneMapping;\r\n            currentSettings.rendering.toneMappingExposure = settings.rendering.toneMappingExposure;\r\n        }\r\n        if (sections.viewport.general) {\r\n            currentSettings.general.defaultMaterialColor = settings.general.defaultMaterialColor;\r\n            currentSettings.general.commitParameters = settings.general.commitParameters;\r\n            currentSettings.general.pointSize = settings.general.pointSize;\r\n        }\r\n        // apply environment settings\r\n        if (sections.viewport.environment) {\r\n            currentSettings.environment.clearAlpha = settings.environment.clearAlpha;\r\n            currentSettings.environment.clearColor = settings.environment.clearColor;\r\n            currentSettings.environment.map = settings.environment.map;\r\n            currentSettings.environment.mapAsBackground = settings.environment.mapAsBackground;\r\n            currentSettings.environment.rotation = settings.environment.rotation;\r\n            currentSettings.environment.blurriness = settings.environment.blurriness;\r\n            currentSettings.environment.intensity = settings.environment.intensity;\r\n        }\r\n    }\r\n    canGoBack() {\r\n        // the first entry is always the one from the init call\r\n        // all additional entries can be undone\r\n        return __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").length > 1;\r\n    }\r\n    canGoForward() {\r\n        return __classPrivateFieldGet(this, _SessionEngine_parameterHistoryForward, \"f\").length > 0;\r\n    }\r\n    close(retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('close');\r\n            try {\r\n                this._httpClient.removeDataLoading(this._sessionId);\r\n                yield this._sdk.session.close(this._sessionId);\r\n                if (this._automaticSceneUpdate)\r\n                    this.removeFromSceneTree(this._node);\r\n                this._closed = true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.close(true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Customizes the session with updated parameters to get the updated scene graph node.\r\n     *\r\n     * @param parameters the parameter set to update the session\r\n     * @returns promise with a scene graph node\r\n     */\r\n    customize(force = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const customizationId = this._uuidGenerator.create();\r\n            try {\r\n                // we check if something changed\r\n                if (force === false) {\r\n                    let changes = false;\r\n                    for (const parameterId in this.parameters)\r\n                        if (this.parameters[parameterId].sessionValue !== this.parameters[parameterId].value)\r\n                            changes = true;\r\n                    if (changes === false)\r\n                        return this.node;\r\n                }\r\n                const eventStart = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Customizing session' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n                const oldNode = this.node.cloneInstance();\r\n                __classPrivateFieldSet(this, _SessionEngine_customizationProcess, customizationId, \"f\");\r\n                this._logger.debugLow(`Session(${this.id}).customize: Customizing session.`);\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    this._stateEngine.renderingEngines[r].busy.push(customizationId);\r\n                const eventFileUpload = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.1, data: { sessionId: this.id }, status: 'Uploading file parameters' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventFileUpload);\r\n                const fileParameterIds = {};\r\n                // load file parameter first\r\n                for (const parameterId in this.parameters) {\r\n                    if (this.parameters[parameterId] instanceof FileParameter_1.FileParameter) {\r\n                        fileParameterIds[parameterId] = yield this.parameters[parameterId].upload();\r\n                        // OPTION TO SKIP - PART 1a\r\n                        if (__classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId) {\r\n                            for (let r in this._stateEngine.renderingEngines)\r\n                                if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                                    this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                            this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n                            const eventCancel1a = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1a);\r\n                            return new SessionTreeNode_1.SessionTreeNode();\r\n                        }\r\n                    }\r\n                }\r\n                // OPTION TO SKIP - PART 1b\r\n                if (__classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId) {\r\n                    for (let r in this._stateEngine.renderingEngines)\r\n                        if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                            this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                    const eventCancel1b = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1b);\r\n                    this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n                    return new SessionTreeNode_1.SessionTreeNode();\r\n                }\r\n                // assign the uploaded parameters\r\n                for (const parameterId in fileParameterIds)\r\n                    this.parameters[parameterId].value = fileParameterIds[parameterId];\r\n                const parameterSet = {};\r\n                // create a set of the current validated parameter values\r\n                for (const parameterId in this.parameters) {\r\n                    parameterSet[parameterId] = {\r\n                        value: this.parameters[parameterId].value,\r\n                        valueString: this.parameters[parameterId].stringify()\r\n                    };\r\n                }\r\n                // update the session engine parameter values if everything succeeded\r\n                for (const parameterId in this.parameters)\r\n                    this.parameterValues[parameterId] = parameterSet[parameterId].valueString;\r\n                this._logger.info(`Session(${this.id}).customize: Customizing session with parameters ${JSON.stringify(this.parameterValues)}.`);\r\n                const eventRequest = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.1, data: { sessionId: this.id }, status: 'Sending customization request' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventRequest);\r\n                const newNode = yield this.customizeInternal(() => __classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId, {\r\n                    eventId,\r\n                    type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION,\r\n                    progressRange: {\r\n                        min: 0.1,\r\n                        max: 0.9\r\n                    },\r\n                    data: { sessionId: this.id }\r\n                });\r\n                const eventSceneUpdate = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.9, data: { sessionId: this.id }, status: 'Updating scene' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);\r\n                // OPTION TO SKIP - PART 2\r\n                if (__classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId) {\r\n                    for (let r in this._stateEngine.renderingEngines)\r\n                        if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                            this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                    const eventCancel2 = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n                    this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n                    return newNode;\r\n                }\r\n                // if this is not a call by the goBack or goForward functions, add the parameter values to the history and delete the forward history\r\n                if (!__classPrivateFieldGet(this, _SessionEngine_parameterHistoryCall, \"f\")) {\r\n                    __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").push(parameterSet);\r\n                    __classPrivateFieldSet(this, _SessionEngine_parameterHistoryForward, [], \"f\");\r\n                }\r\n                if (this.automaticSceneUpdate)\r\n                    this.removeFromSceneTree(this.node);\r\n                this._node = newNode;\r\n                if (this.automaticSceneUpdate)\r\n                    this.addToSceneTree(this.node);\r\n                this._logger.debug(`Session(${this.id}).customize: Customization request finished, updating geometry.`);\r\n                // set the session values to the current ones in all parameters\r\n                for (const parameterId in this.parameters)\r\n                    this.parameters[parameterId].sessionValue = parameterSet[parameterId].value;\r\n                if (this._updateCallback)\r\n                    this._updateCallback(newNode, oldNode);\r\n                // set the output content to what has been updated\r\n                for (const outputId in this.outputs)\r\n                    this.outputs[outputId].updateOutput(newNode.children.find(c => c.name === outputId), oldNode.children.find(c => c.name === outputId));\r\n                // set the export definitions\r\n                for (const exportId in this.exports)\r\n                    this.exports[exportId].updateExport();\r\n                this._warningCreator();\r\n                this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                        this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                this._logger.debug(`Session(${this.id}).customize: Session customized.`);\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, { sessionId: this.id });\r\n                const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customized' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n                return this.node;\r\n            }\r\n            catch (e) {\r\n                const eventCancel = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization failed' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel);\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                        this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                throw this._httpClient.convertError(e);\r\n            }\r\n        });\r\n    }\r\n    customizeParallel(parameterValues) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const eventStart = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Customizing session' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n            const parameterSet = {};\r\n            // create a set of the current validated parameter values\r\n            for (const parameterId in this.parameters)\r\n                parameterSet[parameterId] = parameterValues[parameterId] !== undefined ? (' ' + parameterValues[parameterId]).slice(1) : this.parameters[parameterId].stringify();\r\n            const newNode = yield this.customizeSession(parameterSet, () => false, {\r\n                eventId,\r\n                type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION,\r\n                progressRange: {\r\n                    min: 0.0,\r\n                    max: 1\r\n                },\r\n                data: { sessionId: this.id }\r\n            }, true);\r\n            newNode.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n            const eventEnd = { type: viewer_shared_types_1.TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customized' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n            return newNode;\r\n        });\r\n    }\r\n    goBack() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.canGoBack()) {\r\n                this._logger.debug(`Session(${this.id}).goBack: Cannot go further back.`);\r\n                return new viewer_shared_node_tree_1.TreeNode();\r\n            }\r\n            // get the current parameter set and store it in the forward history later on\r\n            const currentParameterSet = __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").pop();\r\n            // adjust the parameters according to the last parameter set\r\n            const lastParameterSet = __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\")[__classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").length - 1];\r\n            for (const parameterId in lastParameterSet)\r\n                this.parameters[parameterId].value = lastParameterSet[parameterId].value;\r\n            // call the customization function with the parameterHistoryCall value set to true\r\n            __classPrivateFieldSet(this, _SessionEngine_parameterHistoryCall, true, \"f\");\r\n            const node = yield this.customize();\r\n            __classPrivateFieldSet(this, _SessionEngine_parameterHistoryCall, false, \"f\");\r\n            // add the current (not anymore current) parameter set to the forward history\r\n            __classPrivateFieldGet(this, _SessionEngine_parameterHistoryForward, \"f\").push(currentParameterSet);\r\n            return node;\r\n        });\r\n    }\r\n    goForward() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.canGoForward()) {\r\n                this._logger.debug(`Session(${this.id}).goForward: Cannot go further forward.`);\r\n                return new viewer_shared_node_tree_1.TreeNode();\r\n            }\r\n            // get the last undone parameter set and apply the values to the parameters\r\n            const lastParameterSet = __classPrivateFieldGet(this, _SessionEngine_parameterHistoryForward, \"f\").pop();\r\n            for (const parameterId in lastParameterSet)\r\n                this.parameters[parameterId].value = lastParameterSet[parameterId].value;\r\n            // call the customization function with the parameterHistoryCall value set to true\r\n            __classPrivateFieldSet(this, _SessionEngine_parameterHistoryCall, true, \"f\");\r\n            const node = yield this.customize();\r\n            __classPrivateFieldSet(this, _SessionEngine_parameterHistoryCall, false, \"f\");\r\n            // add the current parameter set to the history\r\n            __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").push(lastParameterSet);\r\n            return node;\r\n        });\r\n    }\r\n    /**\r\n     * Initializes the session with the ticket and modelViewUrl.\r\n     *\r\n     * @returns promise with a scene graph node\r\n     */\r\n    init(parameterValues, retry = false) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._initialized === true)\r\n                throw new viewer_shared_services_1.ShapeDiverViewerSessionError('Session.init: Session already initialized.');\r\n            try {\r\n                this._performanceEvaluator.startSection('sessionResponse');\r\n                const parameterSet = {};\r\n                for (const parameterId in parameterValues)\r\n                    parameterSet[parameterId] = (' ' + parameterValues[parameterId]).slice(1);\r\n                this._responseDto = yield this._sdk.session.init(this._ticket, parameterSet);\r\n                this._performanceEvaluator.endSection('sessionResponse');\r\n                this._viewerSettings = (_a = this._responseDto.viewer) === null || _a === void 0 ? void 0 : _a.config;\r\n                this._viewerSettingsVersionBackend = this._responseDto.viewerSettingsVersion || viewer_settings_1.latestVersion;\r\n                this._sessionId = this._responseDto.sessionId;\r\n                this._modelId = (_b = this._responseDto.model) === null || _b === void 0 ? void 0 : _b.id;\r\n                this._httpClient.addDataLoading(this._sessionId, {\r\n                    getAsset: this._sdk.asset.getAsset.bind(this._sdk.asset),\r\n                    downloadTexture: this._sdk.asset.downloadImage.bind(this._sdk.asset),\r\n                });\r\n                this._settingsEngine.loadSettings(this._viewerSettings);\r\n                if (!this._sessionId)\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.init: Initialization of session failed. ResponseDto did not have a sessionId.`);\r\n                if (!this._modelId)\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.init: Initialization of session failed. ResponseDto did not have a model.id.`);\r\n                this.updateResponseDto(this._responseDto, parameterSet);\r\n                this._initialized = true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.init(parameterValues, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Load the outputs and return the scene graph node of the result.\r\n     * In case the outputs have a delay property, another customization request with the parameter set is sent.\r\n     *\r\n     * @param parameters the parameter set to update the session\r\n     * @param outputs the outputs to load\r\n     * @returns promise with a scene graph node\r\n     */\r\n    loadOutputsParallel(responseDto, cancelRequest = () => false, taskEventInfo, retry = false) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability();\r\n            let outputs = {};\r\n            let outputsFreeze = {};\r\n            for (let outputId in responseDto.outputs) {\r\n                responseDto.outputs[outputId].id = outputId;\r\n                if (this.outputsFreeze[outputId] === undefined)\r\n                    outputsFreeze[outputId] = false;\r\n                outputs[outputId] = new Output_1.Output(responseDto.outputs[outputId], this);\r\n            }\r\n            try {\r\n                const node = yield this._outputLoader.loadOutputs(((_a = this._responseDto.model) === null || _a === void 0 ? void 0 : _a.name) || 'model', outputs, outputsFreeze, taskEventInfo);\r\n                node.data.push(new SessionData_1.SessionData(responseDto));\r\n                return node;\r\n            }\r\n            catch (e) {\r\n                if (e instanceof OutputDelayException_1.OutputDelayException) {\r\n                    yield this.timeout(e.delay);\r\n                }\r\n                else {\r\n                    yield this.handleError(e, retry);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    return yield this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo, true);\r\n                }\r\n                if (cancelRequest())\r\n                    return new SessionTreeNode_1.SessionTreeNode();\r\n                let outputMapping = {};\r\n                for (let output in outputs)\r\n                    outputMapping[output] = outputs[output].version;\r\n                try {\r\n                    const responseDto = yield this._sdk.output.getCache(this._sessionId, outputMapping);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    this.updateResponseDto(responseDto);\r\n                    return yield this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo);\r\n                }\r\n                catch (e) {\r\n                    yield this.handleError(e, retry);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    return yield this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo, true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Load the outputs and return the scene graph node of the result.\r\n     * In case the outputs have a delay property, another customization request with the parameter set is sent.\r\n     *\r\n     * @param parameters the parameter set to update the session\r\n     * @param outputs the outputs to load\r\n     * @returns promise with a scene graph node\r\n     */\r\n    loadOutputs(cancelRequest = () => false, taskEventInfo, retry = false) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability();\r\n            const o = Object.assign({}, this._outputs);\r\n            const of = Object.assign({}, this._outputsFreeze);\r\n            try {\r\n                const node = yield this._outputLoader.loadOutputs(((_a = this._responseDto.model) === null || _a === void 0 ? void 0 : _a.name) || 'model', o, of, taskEventInfo);\r\n                node.data.push(new SessionData_1.SessionData(this._responseDto));\r\n                if (cancelRequest())\r\n                    return node;\r\n                if (this._automaticSceneUpdate)\r\n                    this.removeFromSceneTree(this._node);\r\n                this._node = node;\r\n                if (this._automaticSceneUpdate)\r\n                    this.addToSceneTree(this._node);\r\n                this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n                return node;\r\n            }\r\n            catch (e) {\r\n                if (e instanceof OutputDelayException_1.OutputDelayException) {\r\n                    yield this.timeout(e.delay);\r\n                }\r\n                else {\r\n                    yield this.handleError(e, retry);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    return yield this.loadOutputs(cancelRequest, taskEventInfo, true);\r\n                }\r\n                if (cancelRequest())\r\n                    return new SessionTreeNode_1.SessionTreeNode();\r\n                let outputMapping = {};\r\n                for (let output in o)\r\n                    outputMapping[output] = o[output].version;\r\n                try {\r\n                    const responseDto = yield this._sdk.output.getCache(this._sessionId, outputMapping);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    this.updateResponseDto(responseDto);\r\n                    return yield this.loadOutputs(cancelRequest, taskEventInfo);\r\n                }\r\n                catch (e) {\r\n                    yield this.handleError(e, retry);\r\n                    if (cancelRequest())\r\n                        return new SessionTreeNode_1.SessionTreeNode();\r\n                    return yield this.loadOutputs(cancelRequest, taskEventInfo, true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    requestExport(exportId, parameters, maxWaitTime, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('export');\r\n            try {\r\n                const parameterSet = {};\r\n                for (const parameterId in parameters)\r\n                    parameterSet[parameterId] = (' ' + parameters[parameterId]).slice(1);\r\n                const responseDto = yield this._sdk.utils.submitAndWaitForExport(this._sdk, this._sessionId, { exports: { id: exportId }, parameters: parameterSet }, maxWaitTime);\r\n                this.updateResponseDto(responseDto);\r\n                return this.exports[exportId];\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.requestExport(exportId, parameters, maxWaitTime, true);\r\n            }\r\n        });\r\n    }\r\n    resetSettings(sections) {\r\n        if (!this._responseDto)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.resetSettings: responseDto not available.`);\r\n        sections = sections || {};\r\n        if (sections.session === undefined) {\r\n            sections.session = {\r\n                parameter: { displayname: true, order: true, hidden: true },\r\n                export: { displayname: true, order: true, hidden: true }\r\n            };\r\n        }\r\n        if (sections.session.parameter === undefined)\r\n            sections.session.parameter = { displayname: true, order: true, hidden: true, value: true };\r\n        if (sections.session.export === undefined)\r\n            sections.session.export = { displayname: true, order: true, hidden: true };\r\n        if (sections.viewport === undefined)\r\n            sections.viewport = { ar: true, scene: true, camera: true, light: true, environment: true, general: true };\r\n        return this.applySettings(this._responseDto, sections);\r\n    }\r\n    saveDefaultParameterValues() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._logger.debugLow(`Session(${this.id}).saveDefaultParameters: Saving default parameters.`);\r\n            const response = yield this.saveDefaultParameters();\r\n            if (response) {\r\n                this._logger.debug(`Session(${this.id}).saveDefaultParameters: Saved default parameters.`);\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session(${this.id}).saveDefaultParameters: Could not save default parameters.`);\r\n            }\r\n            return response;\r\n        });\r\n    }\r\n    saveDefaultParameters(retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('defaultparam', true);\r\n            try {\r\n                yield this._sdk.model.setDefaultParams(this._modelId, this._parameterValues);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.saveDefaultParameters(true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Save the export properties for displayname, order, tooltip and hidden\r\n     *\r\n     * @param exports\r\n     * @returns\r\n     */\r\n    saveExportProperties(exports, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('export-definition', true);\r\n            try {\r\n                yield this._sdk.export.updateDefinitions(this._modelId, exports);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.saveExportProperties(exports, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Save the output properties for displayname, order, tooltip and hidden\r\n     *\r\n     * @param outputs\r\n     * @returns\r\n     */\r\n    saveOutputProperties(outputs, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('output-definition', true);\r\n            try {\r\n                yield this._sdk.output.updateDefinitions(this._modelId, outputs);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.saveOutputProperties(outputs, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Save the parameter properties for displayname, order, tooltip and hidden\r\n     *\r\n     * @param parameters\r\n     * @returns\r\n     */\r\n    saveParameterProperties(parameters, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('parameter-definition', true);\r\n            try {\r\n                yield this._sdk.model.updateParameterDefinitions(this._modelId, parameters);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.saveParameterProperties(parameters, true);\r\n            }\r\n        });\r\n    }\r\n    saveSettings(json, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('configure', true);\r\n            try {\r\n                (0, viewer_settings_1.validate)(json, this._viewerSettingsVersion);\r\n                // if viewer settings version is higher than backend settings version\r\n                // convert to backend settings version\r\n                if (+this._viewerSettingsVersion > +this._viewerSettingsVersionBackend)\r\n                    json = (0, viewer_settings_1.convert)(json, this._viewerSettingsVersionBackend);\r\n            }\r\n            catch (e) {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerSettingsError('Session.saveSettings: Settings could not be validated. ' + e.message, e);\r\n            }\r\n            try {\r\n                yield this._sdk.model.updateConfig(this._modelId, json);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.saveSettings(json, true);\r\n            }\r\n        });\r\n    }\r\n    saveUiProperties(saveInSettings = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._logger.debugLow(`Session(${this.id}).saveSessionProperties: Saving session properties.`);\r\n            // settings saving \r\n            this._saveSessionSettings();\r\n            let properties = {};\r\n            for (let p in this.parameters) {\r\n                properties[p] = {\r\n                    displayname: this.parameters[p].displayname !== undefined ? this.parameters[p].displayname : '',\r\n                    hidden: this.parameters[p].hidden !== undefined ? this.parameters[p].hidden : false,\r\n                    order: this.parameters[p].order !== undefined ? this.parameters[p].order : 0,\r\n                    tooltip: this.parameters[p].tooltip !== undefined ? this.parameters[p].tooltip : '',\r\n                };\r\n            }\r\n            const responseP = Object.values(properties).length !== 0 ? yield this.saveParameterProperties(properties) : true;\r\n            properties = {};\r\n            for (let e in this.exports) {\r\n                properties[e] = {\r\n                    displayname: this.exports[e].displayname !== undefined ? this.exports[e].displayname : '',\r\n                    hidden: this.exports[e].hidden !== undefined ? this.exports[e].hidden : false,\r\n                    order: this.exports[e].order !== undefined ? this.exports[e].order : 0,\r\n                    tooltip: this.exports[e].tooltip !== undefined ? this.exports[e].tooltip : '',\r\n                };\r\n            }\r\n            const responseE = Object.values(properties).length !== 0 ? yield this.saveExportProperties(properties) : true;\r\n            properties = {};\r\n            for (let o in this.outputs) {\r\n                properties[o] = {\r\n                    displayname: this.outputs[o].displayname !== undefined ? this.outputs[o].displayname : '',\r\n                    hidden: this.outputs[o].hidden !== undefined ? this.outputs[o].hidden : false,\r\n                    order: this.outputs[o].order !== undefined ? this.outputs[o].order : 0,\r\n                    tooltip: this.outputs[o].tooltip !== undefined ? this.outputs[o].tooltip : '',\r\n                };\r\n            }\r\n            const responseO = Object.values(properties).length !== 0 ? yield this.saveOutputProperties(properties) : true;\r\n            // save partial settings\r\n            const response = saveInSettings ? yield this.saveSettings(this._settingsEngine.settings) : true;\r\n            if (response && responseP && responseO && responseE) {\r\n                this._logger.debug(`Session(${this.id}).saveSessionProperties: Saved session properties.`);\r\n            }\r\n            else {\r\n                this._logger.warn(`Session(${this.id}).saveSessionProperties: Could not save session properties.`);\r\n            }\r\n            return response && responseP && responseO && responseE;\r\n        });\r\n    }\r\n    setJwtToken(value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability();\r\n            this._jwtToken = value;\r\n            try {\r\n                this._sdk.setConfigurationValue(sdk_geometry_api_sdk_v2_1.ShapeDiverSdkConfigType.JWT_TOKEN, value);\r\n                const responseDto = yield this._sdk.session.default(this._sessionId);\r\n                if (this._responseDto)\r\n                    this._responseDto.actions = responseDto.actions;\r\n            }\r\n            catch (e) {\r\n                throw this._httpClient.convertError(e);\r\n            }\r\n        });\r\n    }\r\n    updateOutputs(taskEventInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = taskEventInfo ? taskEventInfo.eventId : this._uuidGenerator.create();\r\n            const eventType = taskEventInfo ? taskEventInfo.type : viewer_shared_types_1.TASK_TYPE.SESSION_OUTPUTS_UPDATE;\r\n            const eventData = taskEventInfo ? taskEventInfo.data : { sessionId: this.id };\r\n            if (!taskEventInfo) {\r\n                const eventStart = { type: eventType, id: eventId, progress: 0, data: eventData, status: 'Updating outputs' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, eventStart);\r\n            }\r\n            const customizationId = this._uuidGenerator.create();\r\n            const oldNode = this.node.cloneInstance();\r\n            __classPrivateFieldSet(this, _SessionEngine_customizationProcess, customizationId, \"f\");\r\n            this._logger.debugLow(`Session(${this.id}).updateOutputs: Updating Outputs.`);\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                this._stateEngine.renderingEngines[r].busy.push(customizationId);\r\n            const eventRequest = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.1 + taskEventInfo.progressRange.min : 0.1, data: eventData, status: 'Loading outputs' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventRequest);\r\n            const newNode = yield this.loadOutputs(() => __classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId, {\r\n                eventId,\r\n                type: eventType,\r\n                progressRange: {\r\n                    min: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.1 + taskEventInfo.progressRange.min : 0.1,\r\n                    max: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.9 + taskEventInfo.progressRange.min : 0.9\r\n                },\r\n                data: eventData\r\n            });\r\n            const eventSceneUpdate = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.9 + taskEventInfo.progressRange.min : 0.9, data: eventData, status: 'Updating scene' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);\r\n            // OPTION TO SKIP - PART 1\r\n            if (__classPrivateFieldGet(this, _SessionEngine_customizationProcess, \"f\") !== customizationId) {\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                        this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n                const eventCancel1 = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 1 + taskEventInfo.progressRange.min : 1, data: eventData, status: 'Output updating was exceeded by other customization request' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, eventCancel1);\r\n                this._logger.debug(`Session(${this.id}).updateOutputs: Output updating was exceeded by other request.`);\r\n                return newNode;\r\n            }\r\n            if (this.automaticSceneUpdate)\r\n                this.removeFromSceneTree(this.node);\r\n            this._node = newNode;\r\n            if (this.automaticSceneUpdate)\r\n                this.addToSceneTree(this.node);\r\n            this._logger.debug(`Session(${this.id}).updateOutputs: Updating outputs finished, updating geometry.`);\r\n            if (this._updateCallback)\r\n                this._updateCallback(newNode, oldNode);\r\n            // set the output content to what has been updated\r\n            for (const outputId in this.outputs) {\r\n                this.outputs[outputId].updateOutput(newNode.children.find(c => c.name === outputId), oldNode.children.find(c => c.name === outputId));\r\n            }\r\n            // set the export definitions\r\n            for (const exportId in this.exports)\r\n                this.exports[exportId].updateExport();\r\n            this._warningCreator();\r\n            this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                    this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n            this._logger.debug(`Session(${this.id}).updateOutputs: Updated outputs.`);\r\n            if (!taskEventInfo) {\r\n                const eventEnd = { type: eventType, id: eventId, progress: 1, data: eventData, status: 'Outputs updated' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, eventEnd);\r\n            }\r\n            return this.node;\r\n        });\r\n    }\r\n    uploadFile(parameterId, data, type, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('file-upload');\r\n            try {\r\n                const responseDto = yield this._sdk.file.requestUpload(this._sessionId, {\r\n                    [parameterId]: { size: data.size, format: type }\r\n                });\r\n                if (responseDto && responseDto.asset && responseDto.asset.file && responseDto.asset.file[parameterId]) {\r\n                    const fileAsset = responseDto.asset.file[parameterId];\r\n                    yield this._sdk.utils.upload(fileAsset.href, yield data.arrayBuffer(), type);\r\n                    return fileAsset.id;\r\n                }\r\n                else {\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.uploadFile: Upload reply has not the required format.`);\r\n                }\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.uploadFile(parameterId, data, type, true);\r\n            }\r\n        });\r\n    }\r\n    uploadGLTF(blob, conversion = sdk_geometry_api_sdk_v2_1.ShapeDiverRequestGltfUploadQueryConversion.NONE, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('gltf-upload');\r\n            try {\r\n                const responseDto = yield this._sdk.gltf.upload(this._sessionId, yield blob.arrayBuffer(), 'model/gltf-binary', conversion);\r\n                if (!responseDto || !responseDto.gltf || !responseDto.gltf.href)\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.uploadGLTF: Upload reply has not the required format.`);\r\n                return responseDto;\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                return yield this.uploadGLTF(blob, conversion, true);\r\n            }\r\n        });\r\n    }\r\n    // #endregion Public Methods (24)\r\n    // #region Private Methods (10)\r\n    _saveSessionSettings() {\r\n        const parameters = this.parameters;\r\n        const exports = this.exports;\r\n        const sessionProperties = {};\r\n        for (let p in parameters) {\r\n            sessionProperties[p] = {\r\n                order: parameters[p].order || 0,\r\n                displayname: parameters[p].displayname || '',\r\n                hidden: parameters[p].hidden\r\n            };\r\n        }\r\n        for (let e in exports) {\r\n            sessionProperties[e] = {\r\n                order: exports[e].order || 0,\r\n                displayname: exports[e].displayname || '',\r\n                hidden: exports[e].hidden\r\n            };\r\n        }\r\n        this._settingsEngine.session = sessionProperties;\r\n        let orderedOutputs = [];\r\n        for (let o in this.outputs)\r\n            orderedOutputs.push(this.outputs[o]);\r\n        orderedOutputs.sort((a, b) => ((a.order || Infinity) - (b.order || Infinity)));\r\n        let zerosOutputs = orderedOutputs.filter(x => x.order === 0);\r\n        orderedOutputs = orderedOutputs.filter((el) => { return !zerosOutputs.includes(el); });\r\n        orderedOutputs = zerosOutputs.concat(orderedOutputs);\r\n        const controlOrderOutputs = orderedOutputs.map((value) => { return value.id; });\r\n        for (let i = 0; i < controlOrderOutputs.length; i++) {\r\n            if (this.outputs[controlOrderOutputs[i]])\r\n                if (this.outputs[controlOrderOutputs[i]].order !== i)\r\n                    this.outputs[controlOrderOutputs[i]].order = i;\r\n        }\r\n    }\r\n    _warningCreator() {\r\n        // set the output content to what has been updated\r\n        for (const outputId in this.outputs) {\r\n            let warning = '';\r\n            if (this.outputs[outputId].msg)\r\n                warning += `\\n\\t- ${this.outputs[outputId].msg}`;\r\n            if (this.outputs[outputId].status_collect && this.outputs[outputId].status_collect !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_collect is ${this.outputs[outputId].status_collect}`;\r\n            if (this.outputs[outputId].status_computation && this.outputs[outputId].status_computation !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_computation is ${this.outputs[outputId].status_computation}`;\r\n            if (warning)\r\n                this._logger.warn(`\\nOutput(${outputId}):${warning}`);\r\n        }\r\n        // set the export definitions\r\n        for (const exportId in this.exports) {\r\n            let warning = '';\r\n            if (this.exports[exportId].msg)\r\n                warning += `\\n\\t- ${this.exports[exportId].msg}`;\r\n            if (this.exports[exportId].status_collect && this.exports[exportId].status_collect !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_collect is ${this.exports[exportId].status_collect}`;\r\n            if (this.exports[exportId].status_computation && this.exports[exportId].status_computation !== sdk_geometry_api_sdk_v2_1.ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_computation is ${this.exports[exportId].status_computation}`;\r\n            if (warning)\r\n                this._logger.warn(`\\nExport(${exportId}):${warning}`);\r\n        }\r\n    }\r\n    addToSceneTree(node) {\r\n        this._sceneTree.addNode(node);\r\n        this._sceneTree.root.updateVersion();\r\n    }\r\n    checkAvailability(action, checkForModelId = false) {\r\n        var _a;\r\n        if (!this._responseDto)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.checkAvailability: responseDto not available.`);\r\n        if (!this._sessionId)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.checkAvailability: sessionId not available.`);\r\n        if (checkForModelId && !this._modelId)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.checkAvailability: modelId not available.`);\r\n        if (action && !this._responseDto.actions)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.checkAvailability: actions not available.`);\r\n        const responseDtoAction = (_a = this._responseDto.actions) === null || _a === void 0 ? void 0 : _a.find(a => a.name === action);\r\n        if (action && !responseDtoAction)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerSessionError(`Session.checkAvailability: action ${action} not available.`);\r\n    }\r\n    customizeInternal(cancelRequest, taskEventInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.customizeSession(this._parameterValues, cancelRequest, taskEventInfo);\r\n        });\r\n    }\r\n    customizeSession(parameters, cancelRequest, taskEventInfo, parallel = false, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.checkAvailability('customize');\r\n            try {\r\n                this._performanceEvaluator.startSection('sessionResponse');\r\n                const responseDto = yield this._sdk.utils.submitAndWaitForCustomization(this._sdk, this._sessionId, parameters);\r\n                this._performanceEvaluator.endSection('sessionResponse');\r\n                if (cancelRequest())\r\n                    return new SessionTreeNode_1.SessionTreeNode();\r\n                if (parallel === false)\r\n                    this.updateResponseDto(responseDto);\r\n                return parallel === false ? this.loadOutputs(cancelRequest, taskEventInfo) : this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo);\r\n            }\r\n            catch (e) {\r\n                yield this.handleError(e, retry);\r\n                if (cancelRequest())\r\n                    return new SessionTreeNode_1.SessionTreeNode();\r\n                return yield this.customizeSession(parameters, cancelRequest, taskEventInfo, parallel, true);\r\n            }\r\n        });\r\n    }\r\n    handleError(e, retry = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (e instanceof sdk_geometry_api_sdk_v2_1.ShapeDiverResponseError) {\r\n                if (e.error === sdk_geometry_api_sdk_v2_1.ShapeDiverResponseErrorType.SESSION_GONE_ERROR) {\r\n                    // case 1: the session is no longer available\r\n                    // we try to re-initialize the session 3 times, if that does not work, we close it\r\n                    this._logger.warn(`The session has been closed, trying to re-initialize.`);\r\n                    if (this._sessionId)\r\n                        this._httpClient.removeDataLoading(this._sessionId);\r\n                    if (this._retryCounter < 3) {\r\n                        // we retry this 3 times, the `retry` option in the init function is set to true and passed on \r\n                        this._retryCounter = retry ? this._retryCounter + 1 : 1;\r\n                        this._initialized = false;\r\n                        yield this.init(this.parameterValues, true);\r\n                    }\r\n                    else {\r\n                        // the retries were exceeded, we close the session\r\n                        this._logger.warn('Tried to retry the connect multiple times, bearer token still not valid. Closing Session.');\r\n                        try {\r\n                            yield this._closeOnFailure();\r\n                        }\r\n                        catch (e) { }\r\n                        throw this._httpClient.convertError(e);\r\n                    }\r\n                }\r\n                else if (e.error === sdk_geometry_api_sdk_v2_1.ShapeDiverResponseErrorType.JWT_VALIDATION_ERROR) {\r\n                    // if any of the above errors occur, we try to get a new bearer token\r\n                    // if we get a new one, we retry 3 times (by requiring new bearer tokens every time)\r\n                    if (this._retryCounter < 3) {\r\n                        if (this._refreshJwtToken) {\r\n                            yield this.setJwtToken(yield this._refreshJwtToken());\r\n                            this._retryCounter = retry ? this._retryCounter + 1 : 1;\r\n                            this._logger.warn('Re-trying with new bearer token.');\r\n                        }\r\n                        else {\r\n                            // no bearer tokens are supplied, we close the session\r\n                            this._logger.warn('No retry possible, no new bearer token was supplied. Closing Session.');\r\n                            try {\r\n                                yield this._closeOnFailure();\r\n                            }\r\n                            catch (e) { }\r\n                            throw this._httpClient.convertError(e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // the retries were exceeded, we close the session\r\n                        this._logger.warn('Tried to retry the connect multiple times, bearer token still not valid. Closing Session.');\r\n                        try {\r\n                            yield this._closeOnFailure();\r\n                        }\r\n                        catch (e) { }\r\n                        throw this._httpClient.convertError(e);\r\n                    }\r\n                }\r\n                else {\r\n                    throw this._httpClient.convertError(e);\r\n                }\r\n            }\r\n            else {\r\n                throw this._httpClient.convertError(e);\r\n            }\r\n        });\r\n    }\r\n    removeFromSceneTree(node) {\r\n        this._sceneTree.removeNode(node);\r\n        this._sceneTree.root.updateVersion();\r\n    }\r\n    /**\r\n     * Returns a promise that resolves after the amount of milliseconds provided.\r\n     *\r\n     * @param ms the milliseconds\r\n     * @returns promise that resolve after specified milliseconds\r\n     */\r\n    timeout(ms) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise(resolve => setTimeout(resolve, ms));\r\n        });\r\n    }\r\n    updateResponseDto(responseDto, initialParameters) {\r\n        if (!this._responseDto) {\r\n            this._responseDto = responseDto;\r\n            return;\r\n        }\r\n        // convert parameters\r\n        if (responseDto.parameters) {\r\n            for (let parameterId in responseDto.parameters) {\r\n                this._responseDto.parameters = this._responseDto.parameters || {};\r\n                this._responseDto.parameters[parameterId] = this._responseDto.parameters[parameterId] || responseDto.parameters[parameterId];\r\n            }\r\n        }\r\n        // convert outputs\r\n        if (responseDto.outputs) {\r\n            for (let outputId in responseDto.outputs) {\r\n                this._responseDto.outputs = this._responseDto.outputs || {};\r\n                if ('version' in responseDto.outputs[outputId] || !(this._responseDto.outputs[outputId] && 'version' in this._responseDto.outputs[outputId]))\r\n                    this._responseDto.outputs[outputId] = responseDto.outputs[outputId];\r\n            }\r\n        }\r\n        // convert exports\r\n        if (responseDto.exports) {\r\n            for (let exportId in responseDto.exports) {\r\n                this._responseDto.exports = this._responseDto.exports || {};\r\n                if ('version' in responseDto.exports[exportId] || !(this._responseDto.exports[exportId] && 'version' in this._responseDto.exports[exportId]))\r\n                    this._responseDto.exports[exportId] = responseDto.exports[exportId];\r\n            }\r\n        }\r\n        const parameterSet = {};\r\n        for (let parameterId in this._responseDto.parameters) {\r\n            if (this.parameters[parameterId])\r\n                continue;\r\n            this._responseDto.parameters[parameterId].id = parameterId;\r\n            switch (true) {\r\n                case this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.BOOL:\r\n                    this.parameters[parameterId] = new Parameter_1.Parameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.COLOR:\r\n                    this.parameters[parameterId] = new Parameter_1.Parameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.FILE:\r\n                    this.parameters[parameterId] = new FileParameter_1.FileParameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.EVEN || this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.FLOAT || this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.INT || this._responseDto.parameters[parameterId].type === ISessionEngine_1.PARAMETER_TYPE.ODD:\r\n                    this.parameters[parameterId] = new Parameter_1.Parameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                default:\r\n                    this.parameters[parameterId] = new Parameter_1.Parameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n            }\r\n            // we don't have to do larger restrictions for this as the backend would have already thrown an error if the values were not correct\r\n            if (initialParameters) {\r\n                // check if the id is within the initial parameters\r\n                if (initialParameters[parameterId] !== undefined) {\r\n                    this.parameters[parameterId].value = initialParameters[parameterId];\r\n                }\r\n                // check if the name is within the initial parameters\r\n                else if (initialParameters[this.parameters[parameterId].name] !== undefined) {\r\n                    this.parameters[parameterId].value = initialParameters[this.parameters[parameterId].name];\r\n                }\r\n                // NOTE: At some point the checking may also be done with the displayname, this is the code for it\r\n                // // check if the displayname is within the initial parameters\r\n                // else if(this.parameters[parameterId].displayname && initialParameters[this.parameters[parameterId].displayname!] !== undefined) {\r\n                //     this.parameters[parameterId].value = initialParameters[this.parameters[parameterId].displayname!];\r\n                // }\r\n            }\r\n            parameterSet[parameterId] = {\r\n                value: this.parameters[parameterId].value,\r\n                valueString: this.parameters[parameterId].stringify()\r\n            };\r\n            if (!this.initialized)\r\n                this.parameterValues[parameterId] = parameterSet[parameterId].valueString;\r\n        }\r\n        // store the initialization as the first parameter set in the history\r\n        if (!this.initialized)\r\n            __classPrivateFieldGet(this, _SessionEngine_parameterHistory, \"f\").push(parameterSet);\r\n        for (let exportId in this._responseDto.exports) {\r\n            if (this._responseDto.exports[exportId].type === sdk_geometry_api_sdk_v2_1.ShapeDiverResponseExportDefinitionType.EMAIL || this._responseDto.exports[exportId].type === sdk_geometry_api_sdk_v2_1.ShapeDiverResponseExportDefinitionType.DOWNLOAD) {\r\n                if (!this.exports[exportId]) {\r\n                    this._responseDto.exports[exportId].id = exportId;\r\n                    this.exports[exportId] = new Export_1.Export(this._responseDto.exports[exportId], this);\r\n                }\r\n                else {\r\n                    this.exports[exportId].updateExportDefinition(this._responseDto.exports[exportId]);\r\n                }\r\n            }\r\n        }\r\n        for (let outputId in this._responseDto.outputs) {\r\n            if (!this.outputs[outputId]) {\r\n                this._responseDto.outputs[outputId].id = outputId;\r\n                if (this.outputsFreeze[outputId] === undefined)\r\n                    this.outputsFreeze[outputId] = false;\r\n                this.outputs[outputId] = new Output_1.Output(this._responseDto.outputs[outputId], this);\r\n            }\r\n            else {\r\n                this.outputs[outputId].updateOutputDefinition(this._responseDto.outputs[outputId]);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.SessionEngine = SessionEngine;\r\n_SessionEngine_customizationProcess = new WeakMap(), _SessionEngine_parameterHistory = new WeakMap(), _SessionEngine_parameterHistoryCall = new WeakMap(), _SessionEngine_parameterHistoryForward = new WeakMap();\r\n"},"sourceMaps":{"js":{"version":3,"file":"SessionEngine.js","sourceRoot":"","sources":["../../src/implementation/SessionEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient, HttpResponse, PerformanceEvaluator, UuidGenerator, SystemInfo, Logger, ShapeDiverViewerSessionError, ShapeDiverViewerError, Converter, SettingsEngine, EVENTTYPE, EventEngine, StateEngine, ShapeDiverViewerSettingsError, ShapeDiverGeometryBackendResponseError, ShapeDiverGeometryBackendRequestError } from '@shapediver/viewer.shared.services'\r\n\r\nimport { OutputDelayException } from './OutputDelayException'\r\nimport { OutputLoader, OutputLoaderTaskEventInfo } from './OutputLoader'\r\nimport { SessionTreeNode } from './SessionTreeNode'\r\nimport { ISessionEngine, ISettingsSections, PARAMETER_TYPE } from '../interfaces/ISessionEngine'\r\nimport { SessionData } from './SessionData'\r\nimport { create, ShapeDiverError as ShapeDiverBackendError, ShapeDiverResponseErrorType, ShapeDiverRequestGltfUploadQueryConversion, ShapeDiverResponseDto, ShapeDiverResponseError, ShapeDiverResponseExport, ShapeDiverResponseExportDefinitionType, ShapeDiverResponseOutput, ShapeDiverResponseParameter, ShapeDiverSdk, ShapeDiverSdkConfigType, ShapeDiverResponseModelComputationStatus, ShapeDiverRequestError } from '@shapediver/sdk.geometry-api-sdk-v2'\r\nimport { ISessionTreeNode } from '../interfaces/ISessionTreeNode'\r\nimport { ITree, ITreeNode, Tree, TreeNode } from '@shapediver/viewer.shared.node-tree'\r\nimport { ITaskEvent, TASK_TYPE } from '@shapediver/viewer.shared.types'\r\nimport { FileParameter } from './dto/FileParameter'\r\nimport { IFileParameter } from '../interfaces/dto/IFileParameter'\r\nimport { IExport } from '../interfaces/dto/IExport'\r\nimport { IParameter } from '../interfaces/dto/IParameter'\r\nimport { IOutput } from '../interfaces/dto/IOutput'\r\nimport { Parameter } from './dto/Parameter'\r\nimport { vec3 } from 'gl-matrix'\r\nimport { Export } from './dto/Export'\r\nimport { Output } from './dto/Output'\r\nimport { convert, ISettingsV3_4, latestVersion, validate, versions } from '@shapediver/viewer.settings'\r\n\r\nexport class SessionEngine implements ISessionEngine {\r\n    // #region Properties (43)\r\n\r\n    private readonly _eventEngine = EventEngine.instance;\r\n    private readonly _exports: { [key: string]: IExport; } = {};\r\n    private readonly _httpClient: HttpClient = HttpClient.instance;\r\n    private readonly _id: string;\r\n    private readonly _logger: Logger = Logger.instance;\r\n    private readonly _modelViewUrl: string;\r\n    private readonly _outputLoader: OutputLoader;\r\n    private readonly _outputs: { [key: string]: IOutput; } = {};\r\n    private readonly _outputsFreeze: { [key: string]: boolean; } = {};\r\n    private readonly _parameterValues: { [key: string]: string; } = {};\r\n    private readonly _parameters: { [key: string]: IParameter<any>; } = {};\r\n    private readonly _performanceEvaluator = PerformanceEvaluator.instance;\r\n    private readonly _sceneTree: ITree = Tree.instance;\r\n    private readonly _sessionEngineId = (UuidGenerator.instance).create();\r\n    private readonly _settingsEngine: SettingsEngine = new SettingsEngine();\r\n    private readonly _stateEngine: StateEngine = StateEngine.instance;\r\n    private readonly _ticket: string;\r\n    private readonly _uuidGenerator = UuidGenerator.instance;\r\n\r\n    #customizationProcess!: string;\r\n    #parameterHistory: {\r\n        [key: string]: {\r\n            value: any,\r\n            valueString: string\r\n        }\r\n    }[] = [];\r\n    #parameterHistoryCall = false;\r\n    #parameterHistoryForward: {\r\n        [key: string]: {\r\n            value: any,\r\n            valueString: string\r\n        }\r\n    }[] = [];\r\n    private _automaticSceneUpdate: boolean = true;\r\n    private _closeOnFailure: () => Promise<void> = async () => { };\r\n    private _closed: boolean = false;\r\n    private _customizeOnParameterChange: boolean = false;\r\n    private _dataCache: {\r\n        [key: string]: Promise<HttpResponse<any>>\r\n    } = {};\r\n    private _excludeViewports: string[] = [];\r\n    private _headers = {\r\n        \"X-ShapeDiver-Origin\": (SystemInfo.instance).origin,\r\n        \"X-ShapeDiver-SessionEngineId\": this._sessionEngineId,\r\n        \"X-ShapeDiver-BuildVersion\": '',\r\n        \"X-ShapeDiver-BuildDate\": ''\r\n    };\r\n    private _initialized: boolean = false;\r\n    private _jwtToken?: string;\r\n    private _modelId?: string;\r\n    private _node: ITreeNode;\r\n    private _refreshJwtToken?: () => Promise<string>;\r\n    private _responseDto?: ShapeDiverResponseDto;\r\n    private _retryCounter = 0;\r\n    private _sdk!: ShapeDiverSdk;\r\n    private _sessionId?: string;\r\n    private _updateCallback: ((newNode: ITreeNode, oldNode: ITreeNode) => void) | null = null;\r\n    private _viewerSettings?: object;\r\n    private _viewerSettingsVersion: string = latestVersion;\r\n    private _viewerSettingsVersionBackend: string = latestVersion;\r\n\r\n    // #endregion Properties (43)\r\n\r\n    // #region Constructors (1)\r\n\r\n    /**\r\n     * Can be use to initialize a session with the ticket and modelViewUrl and returns a scene graph node with the result.\r\n     * Can be use to customize the session with updated parameters to get the updated scene graph node.\r\n     */\r\n    constructor(properties: { id: string, ticket: string, modelViewUrl: string, buildVersion: string, buildDate: string, jwtToken?: string, excludeViewports?: string[] }) {\r\n        this._id = properties.id;\r\n        this._node = new TreeNode(properties.id);\r\n        this._ticket = properties.ticket;\r\n        this._modelViewUrl = properties.modelViewUrl;\r\n        this._excludeViewports = properties.excludeViewports || [];\r\n        this._jwtToken = properties.jwtToken;\r\n        this._headers['X-ShapeDiver-BuildDate'] = properties.buildDate;\r\n        this._headers['X-ShapeDiver-BuildVersion'] = properties.buildVersion;\r\n        this._outputLoader = new OutputLoader(this);\r\n\r\n        try {\r\n            this._sdk = create(this._modelViewUrl, this._jwtToken);\r\n            this._sdk.setConfigurationValue(ShapeDiverSdkConfigType.REQUEST_HEADERS, this._headers);\r\n        } catch (e) {\r\n            throw this._httpClient.convertError(e);\r\n        }\r\n    }\r\n\r\n    // #endregion Constructors (1)\r\n\r\n    // #region Public Accessors (24)\r\n\r\n    public get automaticSceneUpdate(): boolean {\r\n        return this._automaticSceneUpdate;\r\n    }\r\n\r\n    public set automaticSceneUpdate(value: boolean) {\r\n        this._automaticSceneUpdate = value;\r\n        value ? this.addToSceneTree(this._node) : this.removeFromSceneTree(this._node);\r\n    }\r\n\r\n    public get canUploadGLTF(): boolean {\r\n        try {\r\n            this.checkAvailability('gltf-upload');\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public get customizeOnParameterChange(): boolean {\r\n        return this._customizeOnParameterChange;\r\n    }\r\n\r\n    public set customizeOnParameterChange(value: boolean) {\r\n        this._customizeOnParameterChange = value;\r\n    }\r\n\r\n    public get excludeViewports(): string[] {\r\n        return this._excludeViewports;\r\n    }\r\n\r\n    public set excludeViewports(value: string[]) {\r\n        this._excludeViewports = JSON.parse(JSON.stringify(value));\r\n        this._node.excludeViewports = JSON.parse(JSON.stringify(value));\r\n    }\r\n\r\n    public get exports(): { [key: string]: IExport; } {\r\n        return this._exports;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get initialized(): boolean {\r\n        return this._initialized;\r\n    }\r\n\r\n    public get jwtToken(): string | undefined {\r\n        return this._jwtToken;\r\n    }\r\n\r\n    public get modelViewUrl(): string {\r\n        return this._modelViewUrl;\r\n    }\r\n\r\n    public get node(): ITreeNode {\r\n        return this._node;\r\n    }\r\n\r\n    public get outputs(): { [key: string]: IOutput; } {\r\n        return this._outputs;\r\n    }\r\n\r\n    public get outputsFreeze(): { [key: string]: boolean; } {\r\n        return this._outputsFreeze;\r\n    }\r\n\r\n    public get parameterValues(): { [key: string]: string; } {\r\n        return this._parameterValues;\r\n    }\r\n\r\n    public get parameters(): { [key: string]: IParameter<any>; } {\r\n        return this._parameters;\r\n    }\r\n\r\n    public get refreshJwtToken(): (() => Promise<string>) | undefined {\r\n        return this._refreshJwtToken;\r\n    }\r\n\r\n    public set refreshJwtToken(value: (() => Promise<string>) | undefined) {\r\n        this._refreshJwtToken = value;\r\n    }\r\n\r\n    public get settingsEngine(): SettingsEngine {\r\n        return this._settingsEngine;\r\n    }\r\n\r\n    public get ticket(): string {\r\n        return this._ticket;\r\n    }\r\n\r\n    public get updateCallback(): ((newNode: ITreeNode, oldNode: ITreeNode) => void) | null {\r\n      return this._updateCallback;\r\n    }\r\n\r\n    public set updateCallback(value: ((newNode: ITreeNode, oldNode: ITreeNode) => void) | null) {\r\n      this._updateCallback = value;\r\n    }\r\n\r\n    public get viewerSettings(): object | undefined {\r\n        return this._viewerSettings;\r\n    }\r\n\r\n    // #endregion Public Accessors (24)\r\n\r\n    // #region Public Methods (24)\r\n\r\n    public applySettings(response: ShapeDiverResponseDto, sections?: ISettingsSections) {\r\n            sections = sections || {};\r\n            if (sections.session === undefined) {\r\n                sections.session = {\r\n                    parameter: { displayname: false, order: false, hidden: false },\r\n                    export: { displayname: false, order: false, hidden: false }\r\n                };\r\n            }\r\n            if (sections.session.parameter === undefined)\r\n                sections.session.parameter = { displayname: false, order: false, hidden: false, value: false };\r\n            if (sections.session.export === undefined)\r\n                sections.session.export = { displayname: false, order: false, hidden: false };\r\n            if (sections.viewport === undefined)\r\n                sections.viewport = { ar: false, scene: false, camera: false, light: false, environment: false, general: false };\r\n\r\n            let config: object;\r\n            if ((<ShapeDiverResponseDto>response).viewer !== undefined) {\r\n                config = (<ShapeDiverResponseDto>response).viewer!.config;\r\n            } else {\r\n                throw new ShapeDiverViewerSettingsError('Session.applySettings: No config object available.');\r\n            }\r\n\r\n            try {\r\n                validate(config)\r\n            } catch (e) {\r\n                throw new ShapeDiverViewerSettingsError('Session.applySettings: Was not able to validate config object.');\r\n            }\r\n\r\n            const settings = <ISettingsV3_4>convert(config, latestVersion);\r\n\r\n            const exportMappingUid: { [key: string]: string | undefined } = {};\r\n            if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden)\r\n                if (response.exports)\r\n                    for (let exportId in response.exports)\r\n                        if (response.exports[exportId].uid !== undefined)\r\n                            exportMappingUid[response.exports[exportId].uid!] = exportId;\r\n\r\n            const currentSettings = this._settingsEngine.settings;\r\n\r\n            // apply parameter settings\r\n            if (sections.session.parameter.displayname || sections.session.parameter.order || sections.session.parameter.hidden || sections.session.parameter.value) {\r\n                for (let p in this.parameters) {\r\n                    if (settings.session[p]) {\r\n                        if (sections.session.parameter.displayname) this.parameters[p].displayname = settings.session[p].displayname;\r\n                        if (sections.session.parameter.order) this.parameters[p].order = settings.session[p].order;\r\n                        if (sections.session.parameter.hidden) this.parameters[p].hidden = settings.session[p].hidden || false;\r\n                    }\r\n\r\n                    if (response.parameters && response.parameters[p]) {\r\n                        if (sections.session.parameter.value) this.parameters[p].value = response.parameters[p].defval !== undefined ? response.parameters[p].defval : this.parameters[p].value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // apply export settings\r\n            if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden) {\r\n                for (let p in this.exports) {\r\n                    let idForSettings = '';\r\n                    if (settings.session[p]) {\r\n                        idForSettings = p;\r\n                    } else {\r\n                        const uid = this.exports[p].uid;\r\n                        if (!uid) continue;\r\n                        if (!exportMappingUid[uid]) continue;\r\n                        idForSettings = exportMappingUid[uid]!;\r\n                    }\r\n                    if (settings.session[idForSettings]) {\r\n                        if (sections.session.export.displayname) this.exports[p].displayname = settings.session[idForSettings].displayname;\r\n                        if (sections.session.export.order) this.exports[p].order = settings.session[idForSettings].order;\r\n                        if (sections.session.export.hidden) this.exports[p].hidden = settings.session[idForSettings].hidden || false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // apply ar settings\r\n            if (sections.viewport.ar) {\r\n                currentSettings.ar = settings.ar;\r\n                currentSettings.general.transformation = settings.general.transformation;\r\n            }\r\n\r\n            // apply camera settings\r\n            if (sections.viewport.camera)\r\n                currentSettings.camera = settings.camera;\r\n\r\n            // apply light settings\r\n            if (sections.viewport.light)\r\n                currentSettings.light = settings.light;\r\n\r\n            // apply scene settings\r\n            if (sections.viewport.scene) {\r\n                currentSettings.environmentGeometry.gridColor = settings.environmentGeometry.gridColor;\r\n                currentSettings.environmentGeometry.gridVisibility = settings.environmentGeometry.gridVisibility;\r\n                currentSettings.environmentGeometry.groundPlaneColor = settings.environmentGeometry.groundPlaneColor;\r\n                currentSettings.environmentGeometry.groundPlaneVisibility = settings.environmentGeometry.groundPlaneVisibility;\r\n                currentSettings.environmentGeometry.groundPlaneColor = settings.environmentGeometry.groundPlaneColor;\r\n                currentSettings.environmentGeometry.groundPlaneShadowColor = settings.environmentGeometry.groundPlaneShadowColor;\r\n            \r\n                currentSettings.rendering.shadows = settings.rendering.shadows;\r\n                currentSettings.rendering.ambientOcclusion = settings.rendering.ambientOcclusion;\r\n\r\n                currentSettings.rendering.automaticColorAdjustment = settings.rendering.automaticColorAdjustment;\r\n                currentSettings.rendering.textureEncoding = settings.rendering.textureEncoding;\r\n                currentSettings.rendering.outputEncoding = settings.rendering.outputEncoding;\r\n                currentSettings.rendering.physicallyCorrectLights = settings.rendering.physicallyCorrectLights;\r\n                currentSettings.rendering.toneMapping = settings.rendering.toneMapping;\r\n                currentSettings.rendering.toneMappingExposure = settings.rendering.toneMappingExposure;\r\n            }\r\n\r\n            if (sections.viewport.general) {\r\n                currentSettings.general.defaultMaterialColor = settings.general.defaultMaterialColor;\r\n                currentSettings.general.commitParameters = settings.general.commitParameters;\r\n                currentSettings.general.pointSize = settings.general.pointSize;\r\n            }\r\n\r\n            // apply environment settings\r\n            if (sections.viewport.environment) {\r\n                currentSettings.environment.clearAlpha = settings.environment.clearAlpha;\r\n                currentSettings.environment.clearColor = settings.environment.clearColor;\r\n                currentSettings.environment.map = settings.environment.map;\r\n                currentSettings.environment.mapAsBackground = settings.environment.mapAsBackground;\r\n                currentSettings.environment.rotation = settings.environment.rotation;\r\n                currentSettings.environment.blurriness = settings.environment.blurriness;\r\n                currentSettings.environment.intensity = settings.environment.intensity;\r\n            }\r\n    }\r\n\r\n    public canGoBack(): boolean {\r\n        // the first entry is always the one from the init call\r\n        // all additional entries can be undone\r\n        return this.#parameterHistory.length > 1;\r\n    }\r\n\r\n    public canGoForward(): boolean {\r\n        return this.#parameterHistoryForward.length > 0;\r\n    }\r\n\r\n    public async close(retry = false): Promise<void> {\r\n        this.checkAvailability('close');\r\n\r\n        try {\r\n            this._httpClient.removeDataLoading(this._sessionId!)\r\n            await this._sdk.session.close(this._sessionId!);\r\n            if (this._automaticSceneUpdate) this.removeFromSceneTree(this._node);\r\n\r\n            this._closed = true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.close(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Customizes the session with updated parameters to get the updated scene graph node.\r\n     * \r\n     * @param parameters the parameter set to update the session\r\n     * @returns promise with a scene graph node\r\n     */\r\n    public async customize(force: boolean = false): Promise<ITreeNode> {\r\n        const eventId = this._uuidGenerator.create();\r\n        const customizationId = this._uuidGenerator.create();\r\n        try {\r\n            // we check if something changed\r\n            if (force === false) {\r\n                let changes = false;\r\n                for (const parameterId in this.parameters)\r\n                    if (this.parameters[parameterId].sessionValue !== this.parameters[parameterId].value)\r\n                        changes = true;\r\n                if(changes === false)\r\n                    return this.node;\r\n            }\r\n\r\n            const eventStart: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Customizing session' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n\r\n            const oldNode = this.node.cloneInstance();\r\n            this.#customizationProcess = customizationId;\r\n\r\n            this._logger.debugLow(`Session(${this.id}).customize: Customizing session.`);\r\n\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                this._stateEngine.renderingEngines[r].busy.push(customizationId);\r\n\r\n            const eventFileUpload: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.1, data: { sessionId: this.id }, status: 'Uploading file parameters' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventFileUpload);\r\n\r\n            const fileParameterIds: { [key: string]: string } = {}\r\n            // load file parameter first\r\n            for (const parameterId in this.parameters) {\r\n                if (this.parameters[parameterId] instanceof FileParameter) {\r\n                    fileParameterIds[parameterId] = await (<IFileParameter>this.parameters[parameterId]).upload();\r\n\r\n                    // OPTION TO SKIP - PART 1a\r\n                    if (this.#customizationProcess !== customizationId) {\r\n                        for (let r in this._stateEngine.renderingEngines)\r\n                            if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                                this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n                        this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n\r\n                        const eventCancel1a: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel1a);\r\n                        return new SessionTreeNode();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OPTION TO SKIP - PART 1b\r\n            if (this.#customizationProcess !== customizationId) {\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                        this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n                const eventCancel1b: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel1b);\r\n                this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n                return new SessionTreeNode();\r\n            }\r\n\r\n            // assign the uploaded parameters\r\n            for (const parameterId in fileParameterIds)\r\n                this.parameters[parameterId].value = fileParameterIds[parameterId];\r\n\r\n            const parameterSet: {\r\n                [key: string]: {\r\n                    value: any,\r\n                    valueString: string\r\n                }\r\n            } = {};\r\n\r\n            // create a set of the current validated parameter values\r\n            for (const parameterId in this.parameters) {\r\n                parameterSet[parameterId] = {\r\n                    value: this.parameters[parameterId].value,\r\n                    valueString: this.parameters[parameterId].stringify()\r\n                }\r\n            }\r\n\r\n            // update the session engine parameter values if everything succeeded\r\n            for (const parameterId in this.parameters)\r\n                this.parameterValues[parameterId] = parameterSet[parameterId].valueString;\r\n            this._logger.info(`Session(${this.id}).customize: Customizing session with parameters ${JSON.stringify(this.parameterValues)}.`);\r\n\r\n            const eventRequest: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.1, data: { sessionId: this.id }, status: 'Sending customization request' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventRequest);\r\n\r\n            const newNode = await this.customizeInternal(() => this.#customizationProcess !== customizationId, {\r\n                eventId,\r\n                type: TASK_TYPE.SESSION_CUSTOMIZATION,\r\n                progressRange: {\r\n                    min: 0.1,\r\n                    max: 0.9\r\n                },\r\n                data: { sessionId: this.id }\r\n            });\r\n\r\n            const eventSceneUpdate: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0.9, data: { sessionId: this.id }, status: 'Updating scene' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);\r\n\r\n            // OPTION TO SKIP - PART 2\r\n            if (this.#customizationProcess !== customizationId) {\r\n                for (let r in this._stateEngine.renderingEngines)\r\n                    if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                        this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n                const eventCancel2: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization was exceeded by other customization request' };\r\n                this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel2);\r\n                this._logger.debug(`Session(${this.id}).customize: Session customization was exceeded by other customization request.`);\r\n                return newNode;\r\n            }\r\n\r\n            // if this is not a call by the goBack or goForward functions, add the parameter values to the history and delete the forward history\r\n            if (!this.#parameterHistoryCall) {\r\n                this.#parameterHistory.push(parameterSet);\r\n                this.#parameterHistoryForward = [];\r\n            }\r\n\r\n            if (this.automaticSceneUpdate) this.removeFromSceneTree(this.node);\r\n            this._node = newNode;\r\n            if (this.automaticSceneUpdate) this.addToSceneTree(this.node);\r\n\r\n            this._logger.debug(`Session(${this.id}).customize: Customization request finished, updating geometry.`);\r\n\r\n            // set the session values to the current ones in all parameters\r\n            for (const parameterId in this.parameters)\r\n                (<any>this.parameters[parameterId].sessionValue) = parameterSet[parameterId].value;\r\n\r\n            if (this._updateCallback) this._updateCallback(newNode, oldNode);\r\n                \r\n            // set the output content to what has been updated\r\n            for (const outputId in this.outputs)\r\n                this.outputs[outputId].updateOutput(\r\n                    newNode.children.find(c => c.name === outputId)!,\r\n                    oldNode.children.find(c => c.name === outputId)!\r\n                );\r\n\r\n            // set the export definitions\r\n            for (const exportId in this.exports)\r\n                this.exports[exportId].updateExport();\r\n\r\n            this._warningCreator();\r\n\r\n            this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                    this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n            this._logger.debug(`Session(${this.id}).customize: Session customized.`);\r\n\r\n            this._eventEngine.emitEvent(EVENTTYPE.SESSION.SESSION_CUSTOMIZED, { sessionId: this.id });\r\n\r\n            const eventEnd: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customized' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n\r\n            return this.node;\r\n        } catch (e) {\r\n            const eventCancel: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customization failed' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel);\r\n\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                    this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n            throw this._httpClient.convertError(e);\r\n        }\r\n    }\r\n\r\n    public async customizeParallel(parameterValues: { [key: string]: string }): Promise<ITreeNode> {\r\n            const eventId = this._uuidGenerator.create();\r\n\r\n            const eventStart: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 0, data: { sessionId: this.id }, status: 'Customizing session' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n\r\n            const parameterSet: {\r\n                [key: string]: string\r\n            } = {};\r\n\r\n            // create a set of the current validated parameter values\r\n            for (const parameterId in this.parameters)\r\n                parameterSet[parameterId] = parameterValues[parameterId] !== undefined ? (' ' + parameterValues[parameterId]).slice(1) : this.parameters[parameterId].stringify()\r\n\r\n            const newNode = await this.customizeSession(parameterSet, () => false, {\r\n                eventId,\r\n                type: TASK_TYPE.SESSION_CUSTOMIZATION,\r\n                progressRange: {\r\n                    min: 0.0,\r\n                    max: 1\r\n                },\r\n                data: { sessionId: this.id }\r\n            }, true);\r\n            newNode.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n            \r\n            const eventEnd: ITaskEvent = { type: TASK_TYPE.SESSION_CUSTOMIZATION, id: eventId, progress: 1, data: { sessionId: this.id }, status: 'Session customized' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n            return newNode;\r\n    }\r\n\r\n    public async goBack(): Promise<ITreeNode> {\r\n        if (!this.canGoBack()) {\r\n            this._logger.debug(`Session(${this.id}).goBack: Cannot go further back.`);\r\n            return new TreeNode();\r\n        }\r\n        // get the current parameter set and store it in the forward history later on\r\n        const currentParameterSet = this.#parameterHistory.pop()!;\r\n\r\n        // adjust the parameters according to the last parameter set\r\n        const lastParameterSet = this.#parameterHistory[this.#parameterHistory.length - 1];\r\n        for (const parameterId in lastParameterSet)\r\n            this.parameters[parameterId].value = lastParameterSet[parameterId].value;\r\n\r\n        // call the customization function with the parameterHistoryCall value set to true\r\n        this.#parameterHistoryCall = true;\r\n        const node = await this.customize();\r\n        this.#parameterHistoryCall = false;\r\n\r\n        // add the current (not anymore current) parameter set to the forward history\r\n        this.#parameterHistoryForward.push(currentParameterSet);\r\n        return node;\r\n    }\r\n\r\n    public async goForward(): Promise<ITreeNode> {\r\n        if (!this.canGoForward()) {\r\n            this._logger.debug(`Session(${this.id}).goForward: Cannot go further forward.`);\r\n            return new TreeNode();\r\n        }\r\n        // get the last undone parameter set and apply the values to the parameters\r\n        const lastParameterSet = this.#parameterHistoryForward.pop()!;\r\n        for (const parameterId in lastParameterSet)\r\n            this.parameters[parameterId].value = lastParameterSet[parameterId].value;\r\n\r\n        // call the customization function with the parameterHistoryCall value set to true\r\n        this.#parameterHistoryCall = true;\r\n        const node = await this.customize();\r\n        this.#parameterHistoryCall = false;\r\n\r\n        // add the current parameter set to the history\r\n        this.#parameterHistory.push(lastParameterSet);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Initializes the session with the ticket and modelViewUrl.\r\n     * \r\n     * @returns promise with a scene graph node\r\n     */\r\n    public async init(parameterValues?: {\r\n        [key: string]: string;\r\n    }, retry = false): Promise<void> {\r\n        if (this._initialized === true) \r\n            throw new ShapeDiverViewerSessionError('Session.init: Session already initialized.');\r\n\r\n        try {\r\n            this._performanceEvaluator.startSection('sessionResponse');\r\n\r\n            const parameterSet: { [key: string]: string } = {};\r\n            for (const parameterId in parameterValues)\r\n                parameterSet[parameterId] = (' ' + parameterValues[parameterId]).slice(1);\r\n\r\n            this._responseDto = await this._sdk.session.init(this._ticket, parameterSet);\r\n            this._performanceEvaluator.endSection('sessionResponse');\r\n\r\n            this._viewerSettings = this._responseDto.viewer?.config;\r\n            this._viewerSettingsVersionBackend = this._responseDto.viewerSettingsVersion || latestVersion;\r\n            this._sessionId = this._responseDto.sessionId;\r\n            this._modelId = this._responseDto.model?.id;\r\n            \r\n            this._httpClient.addDataLoading(this._sessionId!, {\r\n                getAsset: this._sdk.asset.getAsset.bind(this._sdk.asset),\r\n                downloadTexture: this._sdk.asset.downloadImage.bind(this._sdk.asset),\r\n            })\r\n\r\n            this._settingsEngine.loadSettings(this._viewerSettings);\r\n            \r\n            if (!this._sessionId)\r\n                throw new ShapeDiverViewerSessionError(`Session.init: Initialization of session failed. ResponseDto did not have a sessionId.`)\r\n            if (!this._modelId)\r\n                throw new ShapeDiverViewerSessionError(`Session.init: Initialization of session failed. ResponseDto did not have a model.id.`)\r\n\r\n            this.updateResponseDto(this._responseDto, parameterSet);\r\n            this._initialized = true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.init(parameterValues, true);\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Load the outputs and return the scene graph node of the result.\r\n     * In case the outputs have a delay property, another customization request with the parameter set is sent.\r\n     * \r\n     * @param parameters the parameter set to update the session \r\n     * @param outputs the outputs to load\r\n     * @returns promise with a scene graph node\r\n     */\r\n    public async loadOutputsParallel(responseDto: ShapeDiverResponseDto, cancelRequest: () => boolean = () => false, taskEventInfo: OutputLoaderTaskEventInfo, retry = false): Promise<ISessionTreeNode> {\r\n        this.checkAvailability();\r\n\r\n        let outputs: {\r\n            [key: string]: IOutput;\r\n        } = {}\r\n        let outputsFreeze: {\r\n            [key: string]: boolean;\r\n        } = {}\r\n        \r\n        for (let outputId in responseDto.outputs) {\r\n            responseDto.outputs[outputId].id = outputId;\r\n            if (this.outputsFreeze[outputId] === undefined) outputsFreeze[outputId] = false;\r\n            outputs[outputId] = new Output(<ShapeDiverResponseOutput>responseDto.outputs[outputId], this);\r\n        }\r\n\r\n        try {\r\n            const node = await this._outputLoader.loadOutputs(this._responseDto!.model?.name || 'model', outputs, outputsFreeze, taskEventInfo);\r\n            node.data.push(new SessionData(responseDto));      \r\n            return node;\r\n        }\r\n        catch (e) {\r\n            if (e instanceof OutputDelayException) {\r\n                await this.timeout(e.delay);\r\n            } else {\r\n                await this.handleError(e, retry);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                return await this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo, true);\r\n            }\r\n\r\n            if (cancelRequest()) return new SessionTreeNode();\r\n            let outputMapping: { [key: string]: string } = {};\r\n            for (let output in outputs)\r\n                outputMapping[output] = outputs[output].version;\r\n\r\n            try {\r\n                const responseDto = await this._sdk.output.getCache(this._sessionId!, outputMapping);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                this.updateResponseDto(responseDto);\r\n                return await this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo);\r\n            } catch (e) {\r\n                await this.handleError(e, retry);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                return await this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the outputs and return the scene graph node of the result.\r\n     * In case the outputs have a delay property, another customization request with the parameter set is sent.\r\n     * \r\n     * @param parameters the parameter set to update the session \r\n     * @param outputs the outputs to load\r\n     * @returns promise with a scene graph node\r\n     */\r\n    public async loadOutputs(cancelRequest: () => boolean = () => false, taskEventInfo: OutputLoaderTaskEventInfo, retry = false): Promise<ISessionTreeNode> {\r\n        this.checkAvailability();\r\n\r\n        const o = Object.assign({}, this._outputs);\r\n        const of = Object.assign({}, this._outputsFreeze);\r\n        try {\r\n            const node = await this._outputLoader.loadOutputs(this._responseDto!.model?.name || 'model', o, of, taskEventInfo);\r\n            node.data.push(new SessionData(this._responseDto!));\r\n\r\n            if (cancelRequest()) return node;            \r\n\r\n            if (this._automaticSceneUpdate) this.removeFromSceneTree(this._node);\r\n            this._node = node;\r\n            if (this._automaticSceneUpdate) this.addToSceneTree(this._node);\r\n\r\n            this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n\r\n            return node;\r\n        }\r\n        catch (e) {\r\n            if (e instanceof OutputDelayException) {\r\n                await this.timeout(e.delay);\r\n            } else {\r\n                await this.handleError(e, retry);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                return await this.loadOutputs(cancelRequest, taskEventInfo, true);\r\n            }\r\n\r\n            if (cancelRequest()) return new SessionTreeNode();\r\n            let outputMapping: { [key: string]: string } = {};\r\n            for (let output in o)\r\n                outputMapping[output] = o[output].version;\r\n\r\n            try {\r\n                const responseDto = await this._sdk.output.getCache(this._sessionId!, outputMapping);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                this.updateResponseDto(responseDto);\r\n                return await this.loadOutputs(cancelRequest, taskEventInfo);\r\n            } catch (e) {\r\n                await this.handleError(e, retry);\r\n                if (cancelRequest()) return new SessionTreeNode();\r\n                return await this.loadOutputs(cancelRequest, taskEventInfo, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async requestExport(exportId: string, parameters: { [key: string]: string }, maxWaitTime: number, retry = false): Promise<ShapeDiverResponseExport> {\r\n        this.checkAvailability('export');\r\n        try {\r\n            const parameterSet: { [key: string]: string } = {};\r\n            for (const parameterId in parameters)\r\n                parameterSet[parameterId] = (' ' + parameters[parameterId]).slice(1);\r\n            const responseDto = await this._sdk.utils.submitAndWaitForExport(this._sdk, this._sessionId!, { exports: { id: exportId }, parameters: parameterSet }, maxWaitTime)\r\n            this.updateResponseDto(responseDto);\r\n            return this.exports[exportId];\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.requestExport(exportId, parameters, maxWaitTime, true);\r\n        }\r\n    }\r\n\r\n    public resetSettings(sections?: ISettingsSections): void {\r\n        if (!this._responseDto)\r\n            throw new ShapeDiverViewerSessionError(`Session.resetSettings: responseDto not available.`);\r\n\r\n            sections = sections || {};\r\n            if (sections.session === undefined) {\r\n                sections.session = {\r\n                    parameter: { displayname: true, order: true, hidden: true },\r\n                    export: { displayname: true, order: true, hidden: true }\r\n                };\r\n            }\r\n            if (sections.session.parameter === undefined)\r\n                sections.session.parameter = { displayname: true, order: true, hidden: true, value: true };\r\n            if (sections.session.export === undefined)\r\n                sections.session.export = { displayname: true, order: true, hidden: true };\r\n            if (sections.viewport === undefined)\r\n                sections.viewport = { ar: true, scene: true, camera: true, light: true, environment: true, general: true };\r\n\r\n            return this.applySettings(this._responseDto, sections);\r\n    }\r\n\r\n    public async saveDefaultParameterValues(): Promise<boolean> {\r\n            this._logger.debugLow(`Session(${this.id}).saveDefaultParameters: Saving default parameters.`);\r\n            const response = await this.saveDefaultParameters();\r\n            if (response) {\r\n                this._logger.debug(`Session(${this.id}).saveDefaultParameters: Saved default parameters.`);\r\n            } else {\r\n                throw new ShapeDiverViewerSessionError(`Session(${this.id}).saveDefaultParameters: Could not save default parameters.`);\r\n            }\r\n            return response;\r\n    }\r\n\r\n    public async saveDefaultParameters(retry = false): Promise<boolean> {\r\n        this.checkAvailability('defaultparam', true);\r\n        try {\r\n            await this._sdk.model.setDefaultParams(this._modelId!, this._parameterValues)\r\n            return true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.saveDefaultParameters(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the export properties for displayname, order, tooltip and hidden\r\n     * \r\n     * @param exports \r\n     * @returns \r\n     */\r\n    public async saveExportProperties(exports: {\r\n        [key: string]: {\r\n            displayname: string,\r\n            hidden: boolean,\r\n            order: number,\r\n            tooltip: string\r\n        }\r\n    }, retry = false): Promise<boolean> {\r\n        this.checkAvailability('export-definition', true);\r\n        try {\r\n            await this._sdk.export.updateDefinitions(this._modelId!, exports);\r\n            return true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.saveExportProperties(exports, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the output properties for displayname, order, tooltip and hidden\r\n     * \r\n     * @param outputs \r\n     * @returns \r\n     */\r\n    public async saveOutputProperties(outputs: {\r\n        [key: string]: {\r\n            displayname: string,\r\n            hidden: boolean,\r\n            order: number,\r\n            tooltip: string\r\n        }\r\n    }, retry = false): Promise<boolean> {\r\n        this.checkAvailability('output-definition', true);\r\n        try {\r\n            await this._sdk.output.updateDefinitions(this._modelId!, outputs);\r\n            return true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.saveOutputProperties(outputs, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the parameter properties for displayname, order, tooltip and hidden\r\n     * \r\n     * @param parameters \r\n     * @returns \r\n     */\r\n    public async saveParameterProperties(parameters: {\r\n        [key: string]: {\r\n            displayname: string,\r\n            hidden: boolean,\r\n            order: number,\r\n            tooltip: string\r\n        }\r\n    }, retry = false): Promise<boolean> {\r\n        this.checkAvailability('parameter-definition', true);\r\n        try {\r\n            await this._sdk.model.updateParameterDefinitions(this._modelId!, parameters);\r\n            return true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.saveParameterProperties(parameters, true);\r\n        }\r\n    }\r\n\r\n    public async saveSettings(json: any, retry = false): Promise<boolean> {\r\n        this.checkAvailability('configure', true);\r\n        \r\n        try {\r\n            validate(json, <versions>this._viewerSettingsVersion)\r\n            \r\n            // if viewer settings version is higher than backend settings version\r\n            // convert to backend settings version\r\n            if(+this._viewerSettingsVersion > +this._viewerSettingsVersionBackend) \r\n                json = convert(json, <versions>this._viewerSettingsVersionBackend)\r\n        } catch (e) {\r\n            throw new ShapeDiverViewerSettingsError('Session.saveSettings: Settings could not be validated. ' + (<Error>e).message, <Error>e);\r\n        } \r\n        \r\n        try {        \r\n            await this._sdk.model.updateConfig(this._modelId!, json);\r\n            return true;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.saveSettings(json, true);\r\n        }\r\n    }\r\n\r\n    public async saveUiProperties(saveInSettings: boolean = true): Promise<boolean> {\r\n            this._logger.debugLow(`Session(${this.id}).saveSessionProperties: Saving session properties.`);\r\n\r\n            // settings saving \r\n            this._saveSessionSettings();\r\n\r\n            let properties: {\r\n                [key: string]: {\r\n                    displayname: string,\r\n                    hidden: boolean,\r\n                    order: number,\r\n                    tooltip: string\r\n                }\r\n            } = {};\r\n            for (let p in this.parameters) {\r\n                properties[p] = {\r\n                    displayname: this.parameters[p].displayname !== undefined ? this.parameters[p].displayname! : '',\r\n                    hidden: this.parameters[p].hidden !== undefined ? this.parameters[p].hidden : false,\r\n                    order: this.parameters[p].order !== undefined ? this.parameters[p].order! : 0,\r\n                    tooltip: this.parameters[p].tooltip !== undefined ? this.parameters[p].tooltip! : '',\r\n                };\r\n            }\r\n            const responseP = Object.values(properties).length !== 0 ? await this.saveParameterProperties(properties) : true;\r\n\r\n            properties = {};\r\n            for (let e in this.exports) {\r\n                properties[e] = {\r\n                    displayname: this.exports[e].displayname !== undefined ? this.exports[e].displayname! : '',\r\n                    hidden: this.exports[e].hidden !== undefined ? this.exports[e].hidden : false,\r\n                    order: this.exports[e].order !== undefined ? this.exports[e].order! : 0,\r\n                    tooltip: this.exports[e].tooltip !== undefined ? this.exports[e].tooltip! : '',\r\n                };\r\n            }\r\n            const responseE = Object.values(properties).length !== 0 ? await this.saveExportProperties(properties) : true;\r\n\r\n            properties = {};\r\n            for (let o in this.outputs) {\r\n                properties[o] = {\r\n                    displayname: this.outputs[o].displayname !== undefined ? this.outputs[o].displayname! : '',\r\n                    hidden: this.outputs[o].hidden !== undefined ? this.outputs[o].hidden : false,\r\n                    order: this.outputs[o].order !== undefined ? this.outputs[o].order! : 0,\r\n                    tooltip: this.outputs[o].tooltip !== undefined ? this.outputs[o].tooltip! : '',\r\n                };\r\n            }\r\n            const responseO = Object.values(properties).length !== 0 ? await this.saveOutputProperties(properties) : true;\r\n\r\n            // save partial settings\r\n            const response = saveInSettings ? await this.saveSettings(this._settingsEngine.settings) : true;\r\n\r\n            if (response && responseP && responseO && responseE) {\r\n                this._logger.debug(`Session(${this.id}).saveSessionProperties: Saved session properties.`);\r\n            } else {\r\n                this._logger.warn(`Session(${this.id}).saveSessionProperties: Could not save session properties.`);\r\n            }\r\n            return response && responseP && responseO && responseE;\r\n    }\r\n\r\n    public async setJwtToken(value: string) {\r\n        this.checkAvailability();\r\n\r\n        this._jwtToken = value;\r\n        try {\r\n            this._sdk.setConfigurationValue(ShapeDiverSdkConfigType.JWT_TOKEN, value);\r\n            const responseDto = await this._sdk.session.default(this._sessionId!);\r\n            if(this._responseDto) this._responseDto.actions = responseDto.actions;\r\n        } catch (e) {\r\n            throw this._httpClient.convertError(e);\r\n        }\r\n    }\r\n\r\n    public async updateOutputs(taskEventInfo?: OutputLoaderTaskEventInfo): Promise<ITreeNode> {\r\n        const eventId = taskEventInfo ? taskEventInfo.eventId : this._uuidGenerator.create();\r\n        const eventType = taskEventInfo ? taskEventInfo.type : TASK_TYPE.SESSION_OUTPUTS_UPDATE;\r\n        const eventData = taskEventInfo ? taskEventInfo.data : { sessionId: this.id };\r\n\r\n        if(!taskEventInfo) {\r\n            const eventStart: ITaskEvent = { type: eventType, id: eventId, progress: 0, data: eventData, status: 'Updating outputs' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_START, eventStart);\r\n        }\r\n\r\n        const customizationId = this._uuidGenerator.create();\r\n        const oldNode = this.node.cloneInstance();\r\n        this.#customizationProcess = customizationId;\r\n\r\n        this._logger.debugLow(`Session(${this.id}).updateOutputs: Updating Outputs.`);\r\n\r\n        for (let r in this._stateEngine.renderingEngines)\r\n            this._stateEngine.renderingEngines[r].busy.push(customizationId);\r\n\r\n        const eventRequest: ITaskEvent = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.1 + taskEventInfo.progressRange.min : 0.1, data: eventData, status: 'Loading outputs' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventRequest);\r\n\r\n        const newNode = await this.loadOutputs(() => this.#customizationProcess !== customizationId, {\r\n            eventId,\r\n            type: eventType,\r\n            progressRange: {\r\n                min: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.1 + taskEventInfo.progressRange.min : 0.1,\r\n                max: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.9 + taskEventInfo.progressRange.min : 0.9\r\n            },\r\n            data: eventData\r\n        });\r\n\r\n        const eventSceneUpdate: ITaskEvent = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 0.9 + taskEventInfo.progressRange.min : 0.9, data: eventData, status: 'Updating scene' };\r\n        this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_PROCESS, eventSceneUpdate);\r\n\r\n        // OPTION TO SKIP - PART 1\r\n        if (this.#customizationProcess !== customizationId) {\r\n            for (let r in this._stateEngine.renderingEngines)\r\n                if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                    this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n            const eventCancel1: ITaskEvent = { type: eventType, id: eventId, progress: taskEventInfo ? (taskEventInfo.progressRange.max - taskEventInfo.progressRange.min) * 1 + taskEventInfo.progressRange.min : 1, data: eventData, status: 'Output updating was exceeded by other customization request' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_CANCEL, eventCancel1);\r\n            this._logger.debug(`Session(${this.id}).updateOutputs: Output updating was exceeded by other request.`);\r\n            return newNode;\r\n        }\r\n\r\n        if (this.automaticSceneUpdate) this.removeFromSceneTree(this.node);\r\n        this._node = newNode;\r\n        if (this.automaticSceneUpdate) this.addToSceneTree(this.node);\r\n\r\n        this._logger.debug(`Session(${this.id}).updateOutputs: Updating outputs finished, updating geometry.`);\r\n        \r\n        if (this._updateCallback) this._updateCallback(newNode, oldNode);\r\n\r\n        // set the output content to what has been updated\r\n        for (const outputId in this.outputs) {\r\n            this.outputs[outputId].updateOutput(\r\n                newNode.children.find(c => c.name === outputId)!,\r\n                oldNode.children.find(c => c.name === outputId)!\r\n            );\r\n        }\r\n\r\n        // set the export definitions\r\n        for (const exportId in this.exports)\r\n            this.exports[exportId].updateExport();\r\n\r\n        this._warningCreator();\r\n        this.node.excludeViewports = JSON.parse(JSON.stringify(this._excludeViewports));\r\n\r\n        for (let r in this._stateEngine.renderingEngines)\r\n            if (this._stateEngine.renderingEngines[r].busy.includes(customizationId))\r\n                this._stateEngine.renderingEngines[r].busy.splice(this._stateEngine.renderingEngines[r].busy.indexOf(customizationId), 1);\r\n\r\n        this._logger.debug(`Session(${this.id}).updateOutputs: Updated outputs.`);\r\n        \r\n        if(!taskEventInfo) {\r\n            const eventEnd: ITaskEvent = { type: eventType, id: eventId, progress: 1, data: eventData, status: 'Outputs updated' };\r\n            this._eventEngine.emitEvent(EVENTTYPE.TASK.TASK_END, eventEnd);\r\n        }\r\n\r\n        return this.node;\r\n    }\r\n\r\n    public async uploadFile(parameterId: string, data: File, type: string, retry = false): Promise<string> {\r\n        this.checkAvailability('file-upload');\r\n        try {\r\n            const responseDto = await this._sdk.file.requestUpload(this._sessionId!, {\r\n                [parameterId]: { size: data.size, format: type }\r\n            })\r\n\r\n            if (responseDto && responseDto.asset && responseDto.asset.file && responseDto.asset.file[parameterId]) {\r\n                const fileAsset = responseDto.asset.file[parameterId];\r\n                await this._sdk.utils.upload(fileAsset.href, await data.arrayBuffer(), type);\r\n                return fileAsset.id;\r\n            } else {\r\n                throw new ShapeDiverViewerSessionError(`Session.uploadFile: Upload reply has not the required format.`);\r\n            }\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.uploadFile(parameterId, data, type, true);\r\n        }\r\n    }\r\n\r\n    public async uploadGLTF(blob: Blob, conversion: ShapeDiverRequestGltfUploadQueryConversion = ShapeDiverRequestGltfUploadQueryConversion.NONE, retry = false): Promise<ShapeDiverResponseDto> {\r\n        this.checkAvailability('gltf-upload');\r\n        try {\r\n            const responseDto = await this._sdk.gltf.upload(this._sessionId!, await blob.arrayBuffer(), 'model/gltf-binary', conversion);\r\n            if (!responseDto || !responseDto.gltf || !responseDto.gltf.href) \r\n                throw new ShapeDiverViewerSessionError(`Session.uploadGLTF: Upload reply has not the required format.`);\r\n            return responseDto;\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            return await this.uploadGLTF(blob, conversion, true);\r\n        }\r\n    }\r\n\r\n    // #endregion Public Methods (24)\r\n\r\n    // #region Private Methods (10)\r\n\r\n    private _saveSessionSettings() {\r\n        const parameters = this.parameters;\r\n        const exports = this.exports;\r\n\r\n        const sessionProperties: {\r\n            [key: string]: {\r\n                order: number;\r\n                displayname: string;\r\n                hidden: boolean;\r\n            }\r\n        } = {};\r\n        for (let p in parameters) {\r\n            sessionProperties[p] = {\r\n                order: parameters[p].order || 0,\r\n                displayname: parameters[p].displayname || '',\r\n                hidden: parameters[p].hidden\r\n            }\r\n        }\r\n        for (let e in exports) {\r\n            sessionProperties[e] = {\r\n                order: exports[e].order || 0,\r\n                displayname: exports[e].displayname || '',\r\n                hidden: exports[e].hidden\r\n            }\r\n        }\r\n        this._settingsEngine.session = sessionProperties;\r\n\r\n        let orderedOutputs: IOutput[] = [];\r\n        for (let o in this.outputs) orderedOutputs.push(this.outputs[o]);\r\n        orderedOutputs.sort((a, b) => ((a.order || Infinity) - (b.order || Infinity)));\r\n        let zerosOutputs = orderedOutputs.filter(x => x.order === 0);\r\n        orderedOutputs = orderedOutputs.filter((el) => { return !zerosOutputs.includes(el); });\r\n        orderedOutputs = zerosOutputs.concat(orderedOutputs);\r\n\r\n        const controlOrderOutputs = orderedOutputs.map((value) => { return value.id; });\r\n        for (let i = 0; i < controlOrderOutputs.length; i++) {\r\n            if (this.outputs[controlOrderOutputs[i]])\r\n                if (this.outputs[controlOrderOutputs[i]]!.order !== i)\r\n                    this.outputs[controlOrderOutputs[i]]!.order = i;\r\n        }\r\n    }\r\n\r\n    private _warningCreator() {\r\n        // set the output content to what has been updated\r\n        for (const outputId in this.outputs) {\r\n            let warning: string = '';\r\n            if (this.outputs[outputId].msg)\r\n                warning += `\\n\\t- ${this.outputs[outputId].msg}`;\r\n            if (this.outputs[outputId].status_collect && this.outputs[outputId].status_collect !== ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_collect is ${this.outputs[outputId].status_collect}`;\r\n            if (this.outputs[outputId].status_computation && this.outputs[outputId].status_computation !== ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_computation is ${this.outputs[outputId].status_computation}`;\r\n            if (warning)\r\n                this._logger.warn(`\\nOutput(${outputId}):${warning}`);\r\n        }\r\n\r\n        // set the export definitions\r\n        for (const exportId in this.exports) {\r\n            let warning: string = '';\r\n            if (this.exports[exportId].msg)\r\n                warning += `\\n\\t- ${this.exports[exportId].msg}`;\r\n            if (this.exports[exportId].status_collect && this.exports[exportId].status_collect !== ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_collect is ${this.exports[exportId].status_collect}`;\r\n            if (this.exports[exportId].status_computation && this.exports[exportId].status_computation !== ShapeDiverResponseModelComputationStatus.SUCCESS)\r\n                warning += `\\n\\t- status_computation is ${this.exports[exportId].status_computation}`;\r\n            if (warning)\r\n                this._logger.warn(`\\nExport(${exportId}):${warning}`);\r\n        }\r\n    }\r\n\r\n    private addToSceneTree(node: ITreeNode) {\r\n        this._sceneTree.addNode(node);\r\n        this._sceneTree.root.updateVersion();\r\n    }\r\n\r\n    private checkAvailability(action?: string, checkForModelId = false) {\r\n        if (!this._responseDto)\r\n            throw new ShapeDiverViewerSessionError(`Session.checkAvailability: responseDto not available.`);\r\n\r\n        if (!this._sessionId)\r\n            throw new ShapeDiverViewerSessionError(`Session.checkAvailability: sessionId not available.`);\r\n\r\n        if (checkForModelId && !this._modelId)\r\n            throw new ShapeDiverViewerSessionError(`Session.checkAvailability: modelId not available.`);\r\n\r\n        if (action && !this._responseDto.actions)\r\n            throw new ShapeDiverViewerSessionError(`Session.checkAvailability: actions not available.`);\r\n\r\n        const responseDtoAction = this._responseDto.actions?.find(a => a.name === action);\r\n        if (action && !responseDtoAction)\r\n            throw new ShapeDiverViewerSessionError(`Session.checkAvailability: action ${action} not available.`);\r\n    }\r\n\r\n    private async customizeInternal(cancelRequest: () => boolean, taskEventInfo: OutputLoaderTaskEventInfo): Promise<ISessionTreeNode> {\r\n        return this.customizeSession(this._parameterValues, cancelRequest, taskEventInfo);\r\n    }\r\n\r\n    private async customizeSession(parameters: { [key: string]: string }, cancelRequest: () => boolean, taskEventInfo: OutputLoaderTaskEventInfo, parallel = false, retry = false): Promise<ISessionTreeNode> {\r\n        this.checkAvailability('customize');\r\n        try {\r\n            this._performanceEvaluator.startSection('sessionResponse');\r\n            const responseDto = await this._sdk.utils.submitAndWaitForCustomization(this._sdk, this._sessionId!, parameters);\r\n            this._performanceEvaluator.endSection('sessionResponse');\r\n            if (cancelRequest()) return new SessionTreeNode();            \r\n            if (parallel === false) this.updateResponseDto(responseDto);\r\n            return parallel === false ? this.loadOutputs(cancelRequest, taskEventInfo) : this.loadOutputsParallel(responseDto, cancelRequest, taskEventInfo);\r\n        } catch (e) {\r\n            await this.handleError(e, retry);\r\n            if (cancelRequest()) return new SessionTreeNode();\r\n            return await this.customizeSession(parameters, cancelRequest, taskEventInfo, parallel, true);\r\n        }\r\n    }\r\n\r\n    private async handleError(e: ShapeDiverBackendError | ShapeDiverViewerError | Error | unknown, retry = false) {\r\n        if (e instanceof ShapeDiverResponseError) {\r\n            if (e.error === ShapeDiverResponseErrorType.SESSION_GONE_ERROR) {\r\n                // case 1: the session is no longer available\r\n                // we try to re-initialize the session 3 times, if that does not work, we close it\r\n\r\n                this._logger.warn(`The session has been closed, trying to re-initialize.`);\r\n                if(this._sessionId) this._httpClient.removeDataLoading(this._sessionId)\r\n\r\n                if (this._retryCounter < 3) {\r\n                    // we retry this 3 times, the `retry` option in the init function is set to true and passed on \r\n                    this._retryCounter = retry ? this._retryCounter + 1 : 1;\r\n                    this._initialized = false;\r\n                    await this.init(this.parameterValues, true);\r\n                } else {\r\n                    // the retries were exceeded, we close the session\r\n                    this._logger.warn('Tried to retry the connect multiple times, bearer token still not valid. Closing Session.');\r\n                    try { await this._closeOnFailure(); } catch (e) { }\r\n                    throw this._httpClient.convertError(e);\r\n                }\r\n            } else if (e.error === ShapeDiverResponseErrorType.JWT_VALIDATION_ERROR) {\r\n                // if any of the above errors occur, we try to get a new bearer token\r\n                // if we get a new one, we retry 3 times (by requiring new bearer tokens every time)\r\n                if (this._retryCounter < 3) {\r\n                    if (this._refreshJwtToken) {\r\n                        await this.setJwtToken(await this._refreshJwtToken());\r\n                        this._retryCounter = retry ? this._retryCounter + 1 : 1;\r\n                        this._logger.warn('Re-trying with new bearer token.');\r\n                    } else {\r\n                        // no bearer tokens are supplied, we close the session\r\n                        this._logger.warn('No retry possible, no new bearer token was supplied. Closing Session.');\r\n                        try { await this._closeOnFailure(); } catch (e) { }\r\n                        throw this._httpClient.convertError(e);\r\n                    }\r\n                } else {\r\n                    // the retries were exceeded, we close the session\r\n                    this._logger.warn('Tried to retry the connect multiple times, bearer token still not valid. Closing Session.');\r\n                    try { await this._closeOnFailure(); } catch (e) { }\r\n                    throw this._httpClient.convertError(e);\r\n                }\r\n            } else {\r\n                throw this._httpClient.convertError(e);\r\n            }\r\n        } else {\r\n            throw this._httpClient.convertError(e);\r\n        }\r\n    }\r\n\r\n    private removeFromSceneTree(node: ITreeNode) {\r\n        this._sceneTree.removeNode(node);\r\n        this._sceneTree.root.updateVersion();\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves after the amount of milliseconds provided.\r\n     * \r\n     * @param ms the milliseconds\r\n     * @returns promise that resolve after specified milliseconds\r\n     */\r\n    private async timeout(ms: number): Promise<any> {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    private updateResponseDto(responseDto: ShapeDiverResponseDto, initialParameters?: {\r\n        [key: string]: string;\r\n    }) {\r\n        if (!this._responseDto) {\r\n            this._responseDto = responseDto;\r\n            return;\r\n        }\r\n\r\n        // convert parameters\r\n        if (responseDto.parameters) {\r\n            for (let parameterId in responseDto.parameters) {\r\n                this._responseDto.parameters = this._responseDto.parameters || {};\r\n                this._responseDto.parameters[parameterId] = this._responseDto.parameters[parameterId] || responseDto.parameters[parameterId];\r\n            }\r\n        }\r\n\r\n        // convert outputs\r\n        if (responseDto.outputs) {\r\n            for (let outputId in responseDto.outputs) {\r\n                this._responseDto.outputs = this._responseDto.outputs || {};\r\n                if ('version' in responseDto.outputs[outputId] || !(this._responseDto.outputs[outputId] && 'version' in this._responseDto.outputs[outputId]))\r\n                    this._responseDto.outputs[outputId] = responseDto.outputs[outputId];\r\n            }\r\n        }\r\n\r\n        // convert exports\r\n        if (responseDto.exports) {\r\n            for (let exportId in responseDto.exports) {\r\n                this._responseDto.exports = this._responseDto.exports || {};\r\n                if ('version' in responseDto.exports[exportId] || !(this._responseDto.exports[exportId] && 'version' in this._responseDto.exports[exportId]))\r\n                    this._responseDto.exports[exportId] = responseDto.exports[exportId];\r\n            }\r\n        }\r\n\r\n        const parameterSet: {\r\n            [key: string]: {\r\n                value: any,\r\n                valueString: string\r\n            }\r\n        } = {};\r\n\r\n        for (let parameterId in this._responseDto.parameters) {\r\n            if (this.parameters[parameterId]) continue;\r\n            this._responseDto.parameters[parameterId].id = parameterId;\r\n\r\n            switch (true) {\r\n                case this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.BOOL:\r\n                    this.parameters[parameterId] = new Parameter<boolean>(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.COLOR:\r\n                    this.parameters[parameterId] = new Parameter<number | vec3>(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.FILE:\r\n                    this.parameters[parameterId] = new FileParameter(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                case this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.EVEN || this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.FLOAT || this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.INT || this._responseDto.parameters[parameterId].type === PARAMETER_TYPE.ODD:\r\n                    this.parameters[parameterId] = new Parameter<number>(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n                default:\r\n                    this.parameters[parameterId] = new Parameter<string>(this._responseDto.parameters[parameterId], this);\r\n                    break;\r\n            }\r\n\r\n            // we don't have to do larger restrictions for this as the backend would have already thrown an error if the values were not correct\r\n            if(initialParameters) {\r\n                // check if the id is within the initial parameters\r\n                if(initialParameters[parameterId] !== undefined) {\r\n                    this.parameters[parameterId].value = initialParameters[parameterId] \r\n                } \r\n                // check if the name is within the initial parameters\r\n                else if(initialParameters[this.parameters[parameterId].name] !== undefined) {\r\n                    this.parameters[parameterId].value = initialParameters[this.parameters[parameterId].name];\r\n                } \r\n                // NOTE: At some point the checking may also be done with the displayname, this is the code for it\r\n                // // check if the displayname is within the initial parameters\r\n                // else if(this.parameters[parameterId].displayname && initialParameters[this.parameters[parameterId].displayname!] !== undefined) {\r\n                //     this.parameters[parameterId].value = initialParameters[this.parameters[parameterId].displayname!];\r\n                // }\r\n            }\r\n\r\n            parameterSet[parameterId] = {\r\n                value: this.parameters[parameterId].value,\r\n                valueString: this.parameters[parameterId].stringify()\r\n            }\r\n\r\n            if (!this.initialized)\r\n                this.parameterValues[parameterId] = parameterSet[parameterId].valueString;\r\n        }\r\n\r\n        // store the initialization as the first parameter set in the history\r\n        if (!this.initialized)\r\n            this.#parameterHistory.push(parameterSet);\r\n\r\n        for (let exportId in this._responseDto.exports) {\r\n            if (this._responseDto.exports[exportId].type === ShapeDiverResponseExportDefinitionType.EMAIL || this._responseDto.exports[exportId].type === ShapeDiverResponseExportDefinitionType.DOWNLOAD) {\r\n                if(!this.exports[exportId]) {\r\n                    this._responseDto.exports[exportId].id = exportId;\r\n                    this.exports[exportId] = new Export(this._responseDto.exports[exportId], this);\r\n                } else {\r\n                    this.exports[exportId].updateExportDefinition(this._responseDto.exports[exportId])\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let outputId in this._responseDto.outputs) {\r\n            if(!this.outputs[outputId]) {\r\n                this._responseDto.outputs[outputId].id = outputId;\r\n                if (this.outputsFreeze[outputId] === undefined) this.outputsFreeze[outputId] = false;\r\n                this.outputs[outputId] = new Output(<ShapeDiverResponseOutput>this._responseDto.outputs[outputId], this);\r\n            } else {\r\n                this.outputs[outputId].updateOutputDefinition(<ShapeDiverResponseOutput>this._responseDto.outputs[outputId])\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion Private Methods (10)\r\n}"]}},"error":null,"hash":"bf3100acc1fcf48d5cbdd5b10f6fb819","cacheData":{"env":{}}}