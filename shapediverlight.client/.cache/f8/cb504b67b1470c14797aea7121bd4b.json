{"id":"node_modules/@shapediver/api.geometry-api-dto-v2/dist/request/SdRequestDto.js","dependencies":[{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\request\\SdRequestDto.js.map","includedInParent":true,"mtime":1706542085928},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\package.json","includedInParent":true,"mtime":1706542184022},{"name":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\package.json","includedInParent":true,"mtime":1706542085434},{"name":"../commons/SdCommonModel","loc":{"line":4,"column":32,"index":512},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\request\\SdRequestDto.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\commons\\SdCommonModel.js"},{"name":"../commons/SdCommonModelComputation","loc":{"line":5,"column":43,"index":584},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\request\\SdRequestDto.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\commons\\SdCommonModelComputation.js"},{"name":"../commons/SdCommonsTicket","loc":{"line":6,"column":34,"index":658},"parent":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\request\\SdRequestDto.js","resolved":"F:\\UpworkProjects\\ShapeDiverLight\\ShapeDiverLight\\shapediverlight.client\\node_modules\\@shapediver\\api.geometry-api-dto-v2\\dist\\commons\\SdCommonsTicket.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShapeDiverRequestQueryModelComputationStatus = exports.ShapeDiverRequestQueryModelStatus = exports.ShapeDiverRequestModelComputationQueryType = exports.ShapeDiverRequestModelComputationQueryStatus = exports.ShapeDiverRequestModelComputationQueryOrder = exports.ShapeDiverRequestGltfUploadQueryConversion = exports.ShapeDiverRequestLogMessageLevel = exports.ShapeDiverRequestTicketType = void 0;\nconst SdCommonModel_1 = require(\"../commons/SdCommonModel\");\nconst SdCommonModelComputation_1 = require(\"../commons/SdCommonModelComputation\");\nconst SdCommonsTicket_1 = require(\"../commons/SdCommonsTicket\");\n/**\n * @swagger {components.schemas} RequestTicketType {\n     \"allOf\": [\n       { \"$ref\": \"#/components/schemas/CommonsTicketType\" }\n     ]\n   }\n */\n/** */\nexports.ShapeDiverRequestTicketType = Object.assign({}, SdCommonsTicket_1.ShapeDiverCommonsTicketType);\n/**\n * @swagger {components.schemas} RequestLogMessageLevel {\n     \"description\": \"Log message level for log requests.\",\n     \"type\": \"string\",\n     \"enum\": [ 0, 1, 2 ]\n   }\n */\n/** Log message level for log requests. */\nvar ShapeDiverRequestLogMessageLevel;\n(function (ShapeDiverRequestLogMessageLevel) {\n    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel[\"INFO\"] = 0] = \"INFO\";\n    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel[\"WARNING\"] = 1] = \"WARNING\";\n    ShapeDiverRequestLogMessageLevel[ShapeDiverRequestLogMessageLevel[\"ERROR\"] = 2] = \"ERROR\";\n})(ShapeDiverRequestLogMessageLevel = exports.ShapeDiverRequestLogMessageLevel || (exports.ShapeDiverRequestLogMessageLevel = {}));\n/**\n * @swagger {components.schemas} RequestGltfUploadQueryConversion {\n     \"description\": \"Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>.\",\n     \"type\": \"string\",\n     \"enum\": [ \"none\", \"scene\", \"usdz\" ]\n   }\n */\n/** Query values of a gltf upload request.<br/><ul><li><code>none</code>: no further processing of the file.</li><li><code>usdz</code>: converts the glTF into the USDZ format.</li><li><code>scene</code>: creates a temporary AR scene that holds both, a glTF and a USDZ file</li></ul>. */\nvar ShapeDiverRequestGltfUploadQueryConversion;\n(function (ShapeDiverRequestGltfUploadQueryConversion) {\n    ShapeDiverRequestGltfUploadQueryConversion[\"NONE\"] = \"none\";\n    ShapeDiverRequestGltfUploadQueryConversion[\"SCENE\"] = \"scene\";\n    ShapeDiverRequestGltfUploadQueryConversion[\"USDZ\"] = \"usdz\";\n})(ShapeDiverRequestGltfUploadQueryConversion = exports.ShapeDiverRequestGltfUploadQueryConversion || (exports.ShapeDiverRequestGltfUploadQueryConversion = {}));\n/**\n * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryOrder {\n     \"description\": \"Query values of a model computation statistics request.<br/>Specifies the order of the results.\",\n     \"type\": \"string\",\n     \"enum\": [ \"asc\", \"desc\" ]\n   }\n */\n/** Query values of a model computation statistics request.<br/>Specifies the order of the results. */\nvar ShapeDiverRequestModelComputationQueryOrder;\n(function (ShapeDiverRequestModelComputationQueryOrder) {\n    ShapeDiverRequestModelComputationQueryOrder[\"ASC\"] = \"asc\";\n    ShapeDiverRequestModelComputationQueryOrder[\"DESC\"] = \"desc\";\n})(ShapeDiverRequestModelComputationQueryOrder = exports.ShapeDiverRequestModelComputationQueryOrder || (exports.ShapeDiverRequestModelComputationQueryOrder = {}));\n/**\n * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryStatus {\n     \"description\": \"Query values of a model computation statistics request.<br/>Filter by status.\",\n     \"type\": \"string\",\n     \"enum\": [ \"success\", \"timeout\", \"other\", \"*\" ]\n   }\n */\n/** Query values of a model computation statistics request.<br/>Filter by status. */\nvar ShapeDiverRequestModelComputationQueryStatus;\n(function (ShapeDiverRequestModelComputationQueryStatus) {\n    ShapeDiverRequestModelComputationQueryStatus[\"SUCCESS\"] = \"success\";\n    ShapeDiverRequestModelComputationQueryStatus[\"TIMEOUT\"] = \"timeout\";\n    ShapeDiverRequestModelComputationQueryStatus[\"OTHER\"] = \"other\";\n    ShapeDiverRequestModelComputationQueryStatus[\"ALL\"] = \"*\";\n})(ShapeDiverRequestModelComputationQueryStatus = exports.ShapeDiverRequestModelComputationQueryStatus || (exports.ShapeDiverRequestModelComputationQueryStatus = {}));\n/**\n * @swagger {components.schemas} ShapeDiverRequestModelComputationQueryType {\n     \"description\": \"Query values of a model computation statistics request.<br/>Filter by computation or export request.\",\n     \"type\": \"string\",\n     \"enum\": [ \"computation\", \"export\", \"*\" ]\n   }\n */\n/** Query values of a model computation statistics request.<br/>Filter by computation or export request. */\nvar ShapeDiverRequestModelComputationQueryType;\n(function (ShapeDiverRequestModelComputationQueryType) {\n    ShapeDiverRequestModelComputationQueryType[\"COMPUTATION\"] = \"computation\";\n    ShapeDiverRequestModelComputationQueryType[\"EXPORT\"] = \"export\";\n    ShapeDiverRequestModelComputationQueryType[\"ALL\"] = \"*\";\n})(ShapeDiverRequestModelComputationQueryType = exports.ShapeDiverRequestModelComputationQueryType || (exports.ShapeDiverRequestModelComputationQueryType = {}));\n/**\n * @swagger {components.schemas} RequestQueryModelStatus {\n    \"allOf\": [\n       { \"$ref\": \"#/components/schemas/CommonsModelStatus\" }\n     ]\n}\n */\n/** Result of a computation request.*/\nexports.ShapeDiverRequestQueryModelStatus = Object.assign({}, SdCommonModel_1.ShapeDiverCommonsModelStatus);\n/**\n * @swagger {components.schemas} RequestQueryModelComputationStatus {\n    \"allOf\": [\n       { \"$ref\": \"#/components/schemas/CommonsModelComputationStatus\" }\n     ]\n}\n */\n/** Result of a computation request.*/\nexports.ShapeDiverRequestQueryModelComputationStatus = Object.assign({}, SdCommonModelComputation_1.ShapeDiverCommonsModelComputationStatus);\n"},"sourceMaps":{"js":{"version":3,"file":"SdRequestDto.js","sourceRoot":"libs/api.geometry-api-dto-v2/src/","sources":["request/SdRequestDto.ts"],"names":[],"mappings":";;;AAAA,4DAAuE;AACvE,kFAA6F;AAC7F,gEAAiG;AAEjG;;;;;;GAMG;AACH,MAAM;AACO,QAAA,2BAA2B,qBACjC,6CAA2B,EACjC;AAwLD;;;;;;GAMG;AACH,0CAA0C;AAC1C,IAAY,gCAIX;AAJD,WAAY,gCAAgC;IACxC,uFAAQ,CAAA;IACR,6FAAW,CAAA;IACX,yFAAS,CAAA;AACb,CAAC,EAJW,gCAAgC,GAAhC,wCAAgC,KAAhC,wCAAgC,QAI3C;AAsDD;;;;;;GAMG;AACH,8RAA8R;AAC9R,IAAY,0CAIX;AAJD,WAAY,0CAA0C;IAClD,2DAAa,CAAA;IACb,6DAAe,CAAA;IACf,2DAAa,CAAA;AACjB,CAAC,EAJW,0CAA0C,GAA1C,kDAA0C,KAA1C,kDAA0C,QAIrD;AAED;;;;;;GAMG;AACH,sGAAsG;AACtG,IAAY,2CAGX;AAHD,WAAY,2CAA2C;IACnD,0DAAW,CAAA;IACX,4DAAa,CAAA;AACjB,CAAC,EAHW,2CAA2C,GAA3C,mDAA2C,KAA3C,mDAA2C,QAGtD;AAED;;;;;;GAMG;AACH,oFAAoF;AACpF,IAAY,4CAKX;AALD,WAAY,4CAA4C;IACpD,mEAAmB,CAAA;IACnB,mEAAmB,CAAA;IACnB,+DAAe,CAAA;IACf,yDAAS,CAAA;AACb,CAAC,EALW,4CAA4C,GAA5C,oDAA4C,KAA5C,oDAA4C,QAKvD;AAED;;;;;;GAMG;AACH,2GAA2G;AAC3G,IAAY,0CAIX;AAJD,WAAY,0CAA0C;IAClD,yEAA2B,CAAA;IAC3B,+DAAiB,CAAA;IACjB,uDAAS,CAAA;AACb,CAAC,EAJW,0CAA0C,GAA1C,kDAA0C,KAA1C,kDAA0C,QAIrD;AAED;;;;;;GAMG;AACH,sCAAsC;AACzB,QAAA,iCAAiC,qBACvC,4CAA4B,EAClC;AAGD;;;;;;GAMG;AACH,sCAAsC;AACzB,QAAA,4CAA4C,qBAClD,kEAAuC,EAC7C","sourcesContent":[null]}},"error":null,"hash":"c95848f46353bb23bff1057b3e32df84","cacheData":{"env":{}}}